"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var $ptr, fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$3, init, Caller, Goexit, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$3 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString((msg)));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	Caller = function(skip) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$3.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, noCopy, ptrType, ptrType$1, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(noCopy_, v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.noCopy = new noCopy.ptr();
			this.v = $ifaceNil;
			return;
		}
		this.noCopy = noCopy_;
		this.v = v_;
	});
	noCopy = $pkg.noCopy = $newType(0, $kindStruct, "atomic.noCopy", true, "sync/atomic", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Value);
	ptrType$1 = $ptrType(noCopy);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreInt32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	Value.ptr.prototype.Load = function() {
		var $ptr, v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var $ptr, v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	noCopy.ptr.prototype.Lock = function() {
		var $ptr;
	};
	noCopy.prototype.Lock = function() { return this.$val.Lock(); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}];
	Value.init("sync/atomic", [{prop: "noCopy", name: "noCopy", exported: false, typ: noCopy, tag: ""}, {prop: "v", name: "v", exported: false, typ: $emptyInterface, tag: ""}]);
	noCopy.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$6, sliceType$4, ptrType$7, ptrType$8, funcType, ptrType$14, funcType$1, ptrType$15, arrayType$2, semWaiters, runtime_SemacquireMutex, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, throw$1, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$2.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$14 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$15 = $ptrType(Once);
	arrayType$2 = $arrayType($Uint8, 128);
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var $ptr, size;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	throw$1 = function() {
		$throwRuntimeError("native function not implemented: sync.throw");
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				$s = -1; return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = (l), (x.nilCheck, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])));
	};
	init$1 = function() {
		var $ptr, n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				throw$1("sync: RUnlock of unlocked RWMutex");
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Release(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$7));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$8)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$8)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$14.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", exported: true, typ: funcType, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Uint32, tag: ""}]);
	poolLocal.init("sync", [{prop: "private$0", name: "private", exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "", exported: true, typ: Mutex, tag: ""}, {prop: "pad", name: "pad", exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		runtime_SemacquireMutex = runtime_Semacquire;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReadCloser, ReaderFrom, WriterTo, ByteReader, RuneScanner, sliceType, errWhence, errOffset, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReadCloser = $pkg.ReadCloser = $newType(8, $kindInterface, "io.ReadCloser", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	sliceType = $sliceType($Uint8);
	ReadAtLeast = function(r, buf, min) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var $ptr, _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReadCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, sliceType, sliceType$1, ptrType, sliceType$2, _L, _M, _N, _P, _S, properties, IsPrint, In, is16, is32, Is;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	IsPrint = function(r) {
		var $ptr, r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var $ptr, _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var $ptr, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	RangeTable.init("", [{prop: "R16", name: "R16", exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94208, 32), new Range32.ptr(94209, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11844, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9214, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128722, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128758, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129310, 1), new Range32.ptr(129312, 129319, 1), new Range32.ptr(129328, 129331, 3), new Range32.ptr(129332, 129342, 1), new Range32.ptr(129344, 129355, 1), new Range32.ptr(129360, 129374, 1), new Range32.ptr(129408, 129425, 1), new Range32.ptr(129472, 129472, 1)]), 10);
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var $ptr, accept, c, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[x]));
		if (n >= ((((x$1 & 7) >>> 0) >> 0))) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$2])), acceptRange);
		if (n > 1) {
			c = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
			if (c < accept.lo || accept.hi < c) {
				return true;
			} else if (n > 2 && ((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]))) {
				return true;
			}
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	ValidRune = function(r) {
		var $ptr, r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, Reader, ptrType, sliceType, arrayType, ptrType$2, IndexByte, makeSlice, NewBuffer, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.bootstrap = arrayType.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", true, "bytes", false, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, m, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte(((r << 24 >>> 24)));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		b.lastRead = 0;
		m = b.grow(4);
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n >> 0));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (b.lastRead === 0) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	Reader.ptr.prototype.Len = function() {
		var $ptr, r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var $ptr, r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var $ptr, b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var $ptr, b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}, {prop: "bootstrap", name: "bootstrap", exported: false, typ: arrayType, tag: ""}, {prop: "lastRead", name: "lastRead", exported: false, typ: readOp, tag: ""}]);
	Reader.init("bytes", [{prop: "s", name: "s", exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Ceil, Copysign, Cos, Exp, Hypot, Inf, IsInf, IsNaN, Log, NaN, Sin, Sincos, Sqrt, init, Float32bits, Float32frombits, Float64bits, hypot, Nextafter32, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", exported: false, typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Ceil = function(x) {
		var $ptr, x;
		return $parseFloat(math.ceil(x));
	};
	$pkg.Ceil = Ceil;
	Copysign = function(x, y) {
		var $ptr, x, y;
		if (!((x < 0 || (1 / x === negInf)) === (y < 0 || (1 / y === negInf)))) {
			return -x;
		}
		return x;
	};
	$pkg.Copysign = Copysign;
	Cos = function(x) {
		var $ptr, x;
		return $parseFloat(math.cos(x));
	};
	$pkg.Cos = Cos;
	Exp = function(x) {
		var $ptr, x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Hypot = function(p, q) {
		var $ptr, p, q;
		return hypot(p, q);
	};
	$pkg.Hypot = Hypot;
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var $ptr, f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var $ptr, x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	Sin = function(x) {
		var $ptr, x;
		return $parseFloat(math.sin(x));
	};
	$pkg.Sin = Sin;
	Sincos = function(x) {
		var $ptr, _tmp, _tmp$1, cos$1, sin$1, x;
		sin$1 = 0;
		cos$1 = 0;
		_tmp = Sin(x);
		_tmp$1 = Cos(x);
		sin$1 = _tmp;
		cos$1 = _tmp$1;
		return [sin$1, cos$1];
	};
	$pkg.Sincos = Sincos;
	Sqrt = function(x) {
		var $ptr, x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	hypot = function(p, q) {
		var $ptr, _tmp, _tmp$1, p, q;
		if (IsInf(p, 0) || IsInf(q, 0)) {
			return Inf(1);
		} else if (IsNaN(p) || IsNaN(q)) {
			return NaN();
		}
		if (p < 0) {
			p = -p;
		}
		if (q < 0) {
			q = -q;
		}
		if (p < q) {
			_tmp = q;
			_tmp$1 = p;
			p = _tmp;
			q = _tmp$1;
		}
		if (p === 0) {
			return 0;
		}
		q = q / p;
		return p * Sqrt(1 + q * q);
	};
	Nextafter32 = function(x, y) {
		var $ptr, r, x, y;
		r = 0;
		if (IsNaN((x)) || IsNaN((y))) {
			r = ($fround(NaN()));
		} else if ((x === y)) {
			r = x;
		} else if ((x === 0)) {
			r = ($fround(Copysign((Float32frombits(1)), (y))));
		} else if ((y > x) === (x > 0)) {
			r = Float32frombits(Float32bits(x) + 1 >>> 0);
		} else {
			r = Float32frombits(Float32bits(x) - 1 >>> 0);
		}
		return r;
	};
	$pkg.Nextafter32 = Nextafter32;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/windows/sysdll"] = (function() {
	var $pkg = {}, $init, Add;
	Add = function(dll) {
		var $ptr, _key, dll;
		_key = dll; ($pkg.IsSystemDLL || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		return dll;
	};
	$pkg.Add = Add;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.IsSystemDLL = $makeMap($String.keyFor, []);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, sliceType, sliceType$1, IsSurrogate, DecodeRune, EncodeRune, Encode, Decode;
	sliceType = $sliceType($Uint16);
	sliceType$1 = $sliceType($Int32);
	IsSurrogate = function(r) {
		var $ptr, r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var $ptr, r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	EncodeRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, r, r1, r2;
		r1 = 0;
		r2 = 0;
		if (r < 65536 || r > 1114111) {
			_tmp = 65533;
			_tmp$1 = 65533;
			r1 = _tmp;
			r2 = _tmp$1;
			return [r1, r2];
		}
		r = r - (65536) >> 0;
		_tmp$2 = 55296 + (((r >> 10 >> 0)) & 1023) >> 0;
		_tmp$3 = 56320 + (r & 1023) >> 0;
		r1 = _tmp$2;
		r2 = _tmp$3;
		return [r1, r2];
	};
	$pkg.EncodeRune = EncodeRune;
	Encode = function(s) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tuple, a, n, r1, r2, s, v, v$1, x;
		n = s.$length;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (v >= 65536) {
				n = n + (1) >> 0;
			}
			_i++;
		}
		a = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = s;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if ((0 <= v$1 && v$1 < 55296) || (57344 <= v$1 && v$1 < 65536)) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = ((v$1 << 16 >>> 16)));
				n = n + (1) >> 0;
			} else if (65536 <= v$1 && v$1 <= 1114111) {
				_tuple = EncodeRune(v$1);
				r1 = _tuple[0];
				r2 = _tuple[1];
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = ((r1 << 16 >>> 16)));
				(x = n + 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = ((r2 << 16 >>> 16))));
				n = n + (2) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = 65533);
				n = n + (1) >> 0;
			}
			_i$1++;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Encode = Encode;
	Decode = function(s) {
		var $ptr, a, i, n, r, s, x, x$1, x$2;
		a = $makeSlice(sliceType$1, s.$length);
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			r = ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]);
			if ((r < 55296) || (57344 <= r)) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = ((r >> 0)));
			} else if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) < 57344) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = DecodeRune(((r >> 0)), (((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$2])) >> 0))));
				i = i + (1) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = 65533);
			}
			n = n + (1) >> 0;
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Decode = Decode;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, race, sysdll, runtime, sync, atomic, utf16, DummyError, DLLError, DLL, Proc, LazyDLL, LazyProc, Handle, Errno, SecurityAttributes, Overlapped, Filetime, Win32finddata, win32finddata1, ByHandleFileInformation, Win32FileAttributeData, symbolicLinkReparseBuffer, mountPointReparseBuffer, reparseDataBuffer, sliceType, sliceType$2, ptrType$1, arrayType, ptrType$2, arrayType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, sliceType$3, sliceType$4, ptrType$7, ptrType$10, ptrType$11, ptrType$12, arrayType$2, ptrType$18, ptrType$19, ptrType$20, ptrType$21, arrayType$8, arrayType$9, arrayType$10, ptrType$29, ptrType$30, arrayType$11, arrayType$12, warningPrinted, lineBuffer, minusOne, ioSync, ioSync$24ptr, errors$1, errERROR_IO_PENDING, modkernel32, modadvapi32, modshell32, modmswsock, modcrypt32, modws2_32, moddnsapi, modiphlpapi, modsecur32, modnetapi32, moduserenv, procGetLastError, procLoadLibraryW, procFreeLibrary, procGetProcAddress, procGetVersion, procFormatMessageW, procExitProcess, procCreateFileW, procReadFile, procWriteFile, procSetFilePointer, procCloseHandle, procGetStdHandle, procFindFirstFileW, procFindNextFileW, procFindClose, procGetFileInformationByHandle, procGetCurrentDirectoryW, procSetCurrentDirectoryW, procCreateDirectoryW, procRemoveDirectoryW, procDeleteFileW, procMoveFileW, procGetComputerNameW, procSetEndOfFile, procGetSystemTimeAsFileTime, procGetTimeZoneInformation, procCreateIoCompletionPort, procGetQueuedCompletionStatus, procPostQueuedCompletionStatus, procCancelIo, procCancelIoEx, procCreateProcessW, procOpenProcess, procTerminateProcess, procGetExitCodeProcess, procGetStartupInfoW, procGetCurrentProcess, procGetProcessTimes, procDuplicateHandle, procWaitForSingleObject, procGetTempPathW, procCreatePipe, procGetFileType, procCryptAcquireContextW, procCryptReleaseContext, procCryptGenRandom, procGetEnvironmentStringsW, procFreeEnvironmentStringsW, procGetEnvironmentVariableW, procSetEnvironmentVariableW, procSetFileTime, procGetFileAttributesW, procSetFileAttributesW, procGetFileAttributesExW, procGetCommandLineW, procCommandLineToArgvW, procLocalFree, procSetHandleInformation, procFlushFileBuffers, procGetFullPathNameW, procGetLongPathNameW, procGetShortPathNameW, procCreateFileMappingW, procMapViewOfFile, procUnmapViewOfFile, procFlushViewOfFile, procVirtualLock, procVirtualUnlock, procTransmitFile, procReadDirectoryChangesW, procCertOpenSystemStoreW, procCertOpenStore, procCertEnumCertificatesInStore, procCertAddCertificateContextToStore, procCertCloseStore, procCertGetCertificateChain, procCertFreeCertificateChain, procCertCreateCertificateContext, procCertFreeCertificateContext, procCertVerifyCertificateChainPolicy, procRegOpenKeyExW, procRegCloseKey, procRegQueryInfoKeyW, procRegEnumKeyExW, procRegQueryValueExW, procGetCurrentProcessId, procGetConsoleMode, procWriteConsoleW, procReadConsoleW, procCreateToolhelp32Snapshot, procProcess32FirstW, procProcess32NextW, procDeviceIoControl, procCreateSymbolicLinkW, procCreateHardLinkW, procWSAStartup, procWSACleanup, procWSAIoctl, procsocket, procsetsockopt, procgetsockopt, procbind, procconnect, procgetsockname, procgetpeername, proclisten, procshutdown, procclosesocket, procAcceptEx, procGetAcceptExSockaddrs, procWSARecv, procWSASend, procWSARecvFrom, procWSASendTo, procgethostbyname, procgetservbyname, procntohs, procgetprotobyname, procDnsQuery_W, procDnsRecordListFree, procDnsNameCompare_W, procGetAddrInfoW, procFreeAddrInfoW, procGetIfEntry, procGetAdaptersInfo, procSetFileCompletionNotificationModes, procWSAEnumProtocolsW, procTranslateNameW, procGetUserNameExW, procNetUserGetInfo, procNetGetJoinInformation, procNetApiBufferFree, procLookupAccountSidW, procLookupAccountNameW, procConvertSidToStringSidW, procConvertStringSidToSidW, procGetLengthSid, procCopySid, procOpenProcessToken, procGetTokenInformation, procGetUserProfileDirectoryW, init, printWarning, printToConsole, use, indexByte, Syscall, Syscall6, Syscall9, Syscall12, Syscall15, getprocaddress, getStdHandle, GetConsoleMode, WriteFile, ExitProcess, GetCommandLine, CommandLineToArgv, Getenv, NewLazyDLL, FullPath, msanRead, msanWrite, itoa, uitoa, ByteSliceFromString, BytePtrFromString, StringToUTF16, UTF16FromString, UTF16ToString, StringToUTF16Ptr, UTF16PtrFromString, langid, Exit, Read, Write, Seek, Ftruncate, Fsync, FindFirstFile, FindNextFile, Fchdir, Fchmod, Fchown, Readlink, errnoErr, FreeLibrary, formatMessage, CreateFile, ReadFile, SetFilePointer, CloseHandle, findFirstFile1, findNextFile1, FindClose, GetFileInformationByHandle, SetEndOfFile, GetFileType, GetFileAttributesEx, LocalFree, FlushFileBuffers, GetFullPathName, WriteConsole, ReadConsole, DeviceIoControl, copyFindData;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	sysdll = $packages["internal/syscall/windows/sysdll"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	utf16 = $packages["unicode/utf16"];
	DummyError = $pkg.DummyError = $newType(0, $kindStruct, "syscall.DummyError", true, "syscall", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	DLLError = $pkg.DLLError = $newType(0, $kindStruct, "syscall.DLLError", true, "syscall", true, function(Err_, ObjName_, Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			this.ObjName = "";
			this.Msg = "";
			return;
		}
		this.Err = Err_;
		this.ObjName = ObjName_;
		this.Msg = Msg_;
	});
	DLL = $pkg.DLL = $newType(0, $kindStruct, "syscall.DLL", true, "syscall", true, function(Name_, Handle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Handle = 0;
			return;
		}
		this.Name = Name_;
		this.Handle = Handle_;
	});
	Proc = $pkg.Proc = $newType(0, $kindStruct, "syscall.Proc", true, "syscall", true, function(Dll_, Name_, addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dll = ptrType$4.nil;
			this.Name = "";
			this.addr = 0;
			return;
		}
		this.Dll = Dll_;
		this.Name = Name_;
		this.addr = addr_;
	});
	LazyDLL = $pkg.LazyDLL = $newType(0, $kindStruct, "syscall.LazyDLL", true, "syscall", true, function(mu_, dll_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr(0, 0);
			this.dll = ptrType$4.nil;
			this.Name = "";
			return;
		}
		this.mu = mu_;
		this.dll = dll_;
		this.Name = Name_;
	});
	LazyProc = $pkg.LazyProc = $newType(0, $kindStruct, "syscall.LazyProc", true, "syscall", true, function(mu_, Name_, l_, proc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new sync.Mutex.ptr(0, 0);
			this.Name = "";
			this.l = ptrType$6.nil;
			this.proc = ptrType$5.nil;
			return;
		}
		this.mu = mu_;
		this.Name = Name_;
		this.l = l_;
		this.proc = proc_;
	});
	Handle = $pkg.Handle = $newType(4, $kindUintptr, "syscall.Handle", true, "syscall", true, null);
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	SecurityAttributes = $pkg.SecurityAttributes = $newType(0, $kindStruct, "syscall.SecurityAttributes", true, "syscall", true, function(Length_, SecurityDescriptor_, InheritHandle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Length = 0;
			this.SecurityDescriptor = 0;
			this.InheritHandle = 0;
			return;
		}
		this.Length = Length_;
		this.SecurityDescriptor = SecurityDescriptor_;
		this.InheritHandle = InheritHandle_;
	});
	Overlapped = $pkg.Overlapped = $newType(0, $kindStruct, "syscall.Overlapped", true, "syscall", true, function(Internal_, InternalHigh_, Offset_, OffsetHigh_, HEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Internal = 0;
			this.InternalHigh = 0;
			this.Offset = 0;
			this.OffsetHigh = 0;
			this.HEvent = 0;
			return;
		}
		this.Internal = Internal_;
		this.InternalHigh = InternalHigh_;
		this.Offset = Offset_;
		this.OffsetHigh = OffsetHigh_;
		this.HEvent = HEvent_;
	});
	Filetime = $pkg.Filetime = $newType(0, $kindStruct, "syscall.Filetime", true, "syscall", true, function(LowDateTime_, HighDateTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LowDateTime = 0;
			this.HighDateTime = 0;
			return;
		}
		this.LowDateTime = LowDateTime_;
		this.HighDateTime = HighDateTime_;
	});
	Win32finddata = $pkg.Win32finddata = $newType(0, $kindStruct, "syscall.Win32finddata", true, "syscall", true, function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr(0, 0);
			this.LastAccessTime = new Filetime.ptr(0, 0);
			this.LastWriteTime = new Filetime.ptr(0, 0);
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.Reserved0 = 0;
			this.Reserved1 = 0;
			this.FileName = arrayType$11.zero();
			this.AlternateFileName = arrayType$12.zero();
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.Reserved0 = Reserved0_;
		this.Reserved1 = Reserved1_;
		this.FileName = FileName_;
		this.AlternateFileName = AlternateFileName_;
	});
	win32finddata1 = $pkg.win32finddata1 = $newType(0, $kindStruct, "syscall.win32finddata1", true, "syscall", false, function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr(0, 0);
			this.LastAccessTime = new Filetime.ptr(0, 0);
			this.LastWriteTime = new Filetime.ptr(0, 0);
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.Reserved0 = 0;
			this.Reserved1 = 0;
			this.FileName = arrayType$8.zero();
			this.AlternateFileName = arrayType$9.zero();
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.Reserved0 = Reserved0_;
		this.Reserved1 = Reserved1_;
		this.FileName = FileName_;
		this.AlternateFileName = AlternateFileName_;
	});
	ByHandleFileInformation = $pkg.ByHandleFileInformation = $newType(0, $kindStruct, "syscall.ByHandleFileInformation", true, "syscall", true, function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, VolumeSerialNumber_, FileSizeHigh_, FileSizeLow_, NumberOfLinks_, FileIndexHigh_, FileIndexLow_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr(0, 0);
			this.LastAccessTime = new Filetime.ptr(0, 0);
			this.LastWriteTime = new Filetime.ptr(0, 0);
			this.VolumeSerialNumber = 0;
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			this.NumberOfLinks = 0;
			this.FileIndexHigh = 0;
			this.FileIndexLow = 0;
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.VolumeSerialNumber = VolumeSerialNumber_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
		this.NumberOfLinks = NumberOfLinks_;
		this.FileIndexHigh = FileIndexHigh_;
		this.FileIndexLow = FileIndexLow_;
	});
	Win32FileAttributeData = $pkg.Win32FileAttributeData = $newType(0, $kindStruct, "syscall.Win32FileAttributeData", true, "syscall", true, function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileAttributes = 0;
			this.CreationTime = new Filetime.ptr(0, 0);
			this.LastAccessTime = new Filetime.ptr(0, 0);
			this.LastWriteTime = new Filetime.ptr(0, 0);
			this.FileSizeHigh = 0;
			this.FileSizeLow = 0;
			return;
		}
		this.FileAttributes = FileAttributes_;
		this.CreationTime = CreationTime_;
		this.LastAccessTime = LastAccessTime_;
		this.LastWriteTime = LastWriteTime_;
		this.FileSizeHigh = FileSizeHigh_;
		this.FileSizeLow = FileSizeLow_;
	});
	symbolicLinkReparseBuffer = $pkg.symbolicLinkReparseBuffer = $newType(0, $kindStruct, "syscall.symbolicLinkReparseBuffer", true, "syscall", false, function(SubstituteNameOffset_, SubstituteNameLength_, PrintNameOffset_, PrintNameLength_, Flags_, PathBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SubstituteNameOffset = 0;
			this.SubstituteNameLength = 0;
			this.PrintNameOffset = 0;
			this.PrintNameLength = 0;
			this.Flags = 0;
			this.PathBuffer = arrayType$10.zero();
			return;
		}
		this.SubstituteNameOffset = SubstituteNameOffset_;
		this.SubstituteNameLength = SubstituteNameLength_;
		this.PrintNameOffset = PrintNameOffset_;
		this.PrintNameLength = PrintNameLength_;
		this.Flags = Flags_;
		this.PathBuffer = PathBuffer_;
	});
	mountPointReparseBuffer = $pkg.mountPointReparseBuffer = $newType(0, $kindStruct, "syscall.mountPointReparseBuffer", true, "syscall", false, function(SubstituteNameOffset_, SubstituteNameLength_, PrintNameOffset_, PrintNameLength_, PathBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SubstituteNameOffset = 0;
			this.SubstituteNameLength = 0;
			this.PrintNameOffset = 0;
			this.PrintNameLength = 0;
			this.PathBuffer = arrayType$10.zero();
			return;
		}
		this.SubstituteNameOffset = SubstituteNameOffset_;
		this.SubstituteNameLength = SubstituteNameLength_;
		this.PrintNameOffset = PrintNameOffset_;
		this.PrintNameLength = PrintNameLength_;
		this.PathBuffer = PathBuffer_;
	});
	reparseDataBuffer = $pkg.reparseDataBuffer = $newType(0, $kindStruct, "syscall.reparseDataBuffer", true, "syscall", false, function(ReparseTag_, ReparseDataLength_, Reserved_, reparseBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ReparseTag = 0;
			this.ReparseDataLength = 0;
			this.Reserved = 0;
			this.reparseBuffer = 0;
			return;
		}
		this.ReparseTag = ReparseTag_;
		this.ReparseDataLength = ReparseDataLength_;
		this.Reserved = Reserved_;
		this.reparseBuffer = reparseBuffer_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uintptr);
	ptrType$1 = $ptrType($Uint16);
	arrayType = $arrayType($Uint16, 8192);
	ptrType$2 = $ptrType(arrayType);
	arrayType$1 = $arrayType(ptrType$2, 8192);
	ptrType$3 = $ptrType(arrayType$1);
	ptrType$4 = $ptrType(DLL);
	ptrType$5 = $ptrType(Proc);
	ptrType$6 = $ptrType(LazyDLL);
	sliceType$3 = $sliceType($Uint16);
	sliceType$4 = $sliceType($Int32);
	ptrType$7 = $ptrType(ptrType$1);
	ptrType$10 = $ptrType($Uint8);
	ptrType$11 = $ptrType(SecurityAttributes);
	ptrType$12 = $ptrType($Uint32);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$18 = $ptrType(Overlapped);
	ptrType$19 = $ptrType($Int64);
	ptrType$20 = $ptrType($Int32);
	ptrType$21 = $ptrType(Filetime);
	arrayType$8 = $arrayType($Uint16, 260);
	arrayType$9 = $arrayType($Uint16, 14);
	arrayType$10 = $arrayType($Uint16, 1);
	ptrType$29 = $ptrType(DLLError);
	ptrType$30 = $ptrType(LazyProc);
	arrayType$11 = $arrayType($Uint16, 259);
	arrayType$12 = $arrayType($Uint16, 13);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	indexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Syscall = function(trap, nargs, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 0;
		_tmp$2 = 536870913;
		r1 = _tmp;
		r2 = _tmp$1;
		err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, nargs, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, a4, a5, a6, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 0;
		_tmp$2 = 536870913;
		r1 = _tmp;
		r2 = _tmp$1;
		err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	Syscall9 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 0;
		_tmp$2 = 536870913;
		r1 = _tmp;
		r2 = _tmp$1;
		err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall9 = Syscall9;
	Syscall12 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a10, a11, a12, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 0;
		_tmp$2 = 536870913;
		r1 = _tmp;
		r2 = _tmp$1;
		err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall12 = Syscall12;
	Syscall15 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
		var $ptr, _tmp, _tmp$1, _tmp$2, a1, a10, a11, a12, a13, a14, a15, a2, a3, a4, a5, a6, a7, a8, a9, err, nargs, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 0;
		_tmp$2 = 536870913;
		r1 = _tmp;
		r2 = _tmp$1;
		err = _tmp$2;
		return [r1, r2, err];
	};
	$pkg.Syscall15 = Syscall15;
	getprocaddress = function(handle, procname) {
		var $ptr, _tmp, _tmp$1, err, handle, proc, procname;
		proc = 0;
		err = 0;
		printWarning();
		_tmp = ((minusOne >>> 0));
		_tmp$1 = 536870913;
		proc = _tmp;
		err = _tmp$1;
		return [proc, err];
	};
	LazyDLL.ptr.prototype.Load = function() {
		var $ptr, d;
		d = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyDLL.prototype.Load = function() { return this.$val.Load(); };
	LazyProc.ptr.prototype.Find = function() {
		var $ptr, p;
		p = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyProc.prototype.Find = function() { return this.$val.Find(); };
	getStdHandle = function(h) {
		var $ptr, fd, h;
		fd = 0;
		if (h === -11) {
			fd = 1;
			return fd;
		}
		if (h === -12) {
			fd = 2;
			return fd;
		}
		fd = 0;
		return fd;
	};
	GetConsoleMode = function(console, mode) {
		var $ptr, console, err, mode, x;
		err = $ifaceNil;
		err = (x = new DummyError.ptr(), new x.constructor.elem(x));
		return err;
	};
	$pkg.GetConsoleMode = GetConsoleMode;
	WriteFile = function(handle, buf, done, overlapped) {
		var $ptr, buf, done, err, handle, overlapped;
		err = $ifaceNil;
		if ((handle === 1) || (handle === 2)) {
			printToConsole(buf);
			done.$set(((buf.$length >>> 0)));
			err = $ifaceNil;
			return err;
		}
		printWarning();
		err = $ifaceNil;
		return err;
	};
	$pkg.WriteFile = WriteFile;
	ExitProcess = function(exitcode) {
		var $ptr, exitcode;
		runtime.Goexit();
	};
	$pkg.ExitProcess = ExitProcess;
	GetCommandLine = function() {
		var $ptr, cmd;
		cmd = ptrType$1.nil;
		return cmd;
	};
	$pkg.GetCommandLine = GetCommandLine;
	CommandLineToArgv = function(cmd, argc) {
		var $ptr, _tmp, _tmp$1, argc, argv, cmd, err, x;
		argv = ptrType$3.nil;
		err = $ifaceNil;
		_tmp = ptrType$3.nil;
		_tmp$1 = (x = new DummyError.ptr(), new x.constructor.elem(x));
		argv = _tmp;
		err = _tmp$1;
		return [argv, err];
	};
	$pkg.CommandLineToArgv = CommandLineToArgv;
	Getenv = function(key) {
		var $ptr, _tmp, _tmp$1, found, key, value;
		value = "";
		found = false;
		_tmp = "";
		_tmp$1 = false;
		value = _tmp;
		found = _tmp$1;
		return [value, found];
	};
	$pkg.Getenv = Getenv;
	DummyError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "";
	};
	DummyError.prototype.Error = function() { return this.$val.Error(); };
	DLLError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.Msg;
	};
	DLLError.prototype.Error = function() { return this.$val.Error(); };
	DLL.ptr.prototype.FindProc = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, a, d, e, err, name, namep, p, proc;
		proc = ptrType$5.nil;
		err = $ifaceNil;
		d = this;
		_tuple = BytePtrFromString(name);
		namep = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$5.nil;
			_tmp$1 = err;
			proc = _tmp;
			err = _tmp$1;
			return [proc, err];
		}
		_tuple$1 = getprocaddress(((d.Handle >>> 0)), namep);
		a = _tuple$1[0];
		e = _tuple$1[1];
		use((namep));
		if (!((e === 0))) {
			_tmp$2 = ptrType$5.nil;
			_tmp$3 = new DLLError.ptr(new Errno(e), name, "Failed to find " + name + " procedure in " + d.Name + ": " + new Errno(e).Error());
			proc = _tmp$2;
			err = _tmp$3;
			return [proc, err];
		}
		p = new Proc.ptr(d, name, a);
		_tmp$4 = p;
		_tmp$5 = $ifaceNil;
		proc = _tmp$4;
		err = _tmp$5;
		return [proc, err];
	};
	DLL.prototype.FindProc = function(name) { return this.$val.FindProc(name); };
	DLL.ptr.prototype.MustFindProc = function(name) {
		var $ptr, _tuple, d, e, name, p;
		d = this;
		_tuple = d.FindProc(name);
		p = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		return p;
	};
	DLL.prototype.MustFindProc = function(name) { return this.$val.MustFindProc(name); };
	DLL.ptr.prototype.Release = function() {
		var $ptr, d, err;
		err = $ifaceNil;
		d = this;
		err = FreeLibrary(d.Handle);
		return err;
	};
	DLL.prototype.Release = function() { return this.$val.Release(); };
	Proc.ptr.prototype.Addr = function() {
		var $ptr, p;
		p = this;
		return p.addr;
	};
	Proc.prototype.Addr = function() { return this.$val.Addr(); };
	Proc.ptr.prototype.Call = function(a) {
		var $ptr, _1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, lastErr, p, r1, r2;
		r1 = 0;
		r2 = 0;
		lastErr = $ifaceNil;
		p = this;
		_1 = a.$length;
		if (_1 === (0)) {
			_tuple = Syscall(p.Addr(), ((a.$length >>> 0)), 0, 0, 0);
			r1 = _tuple[0];
			r2 = _tuple[1];
			lastErr = new Errno(_tuple[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (1)) {
			_tuple$1 = Syscall(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), 0, 0);
			r1 = _tuple$1[0];
			r2 = _tuple$1[1];
			lastErr = new Errno(_tuple$1[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (2)) {
			_tuple$2 = Syscall(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), 0);
			r1 = _tuple$2[0];
			r2 = _tuple$2[1];
			lastErr = new Errno(_tuple$2[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (3)) {
			_tuple$3 = Syscall(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]));
			r1 = _tuple$3[0];
			r2 = _tuple$3[1];
			lastErr = new Errno(_tuple$3[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (4)) {
			_tuple$4 = Syscall6(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), 0, 0);
			r1 = _tuple$4[0];
			r2 = _tuple$4[1];
			lastErr = new Errno(_tuple$4[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (5)) {
			_tuple$5 = Syscall6(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), 0);
			r1 = _tuple$5[0];
			r2 = _tuple$5[1];
			lastErr = new Errno(_tuple$5[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (6)) {
			_tuple$6 = Syscall6(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]));
			r1 = _tuple$6[0];
			r2 = _tuple$6[1];
			lastErr = new Errno(_tuple$6[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (7)) {
			_tuple$7 = Syscall9(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), 0, 0);
			r1 = _tuple$7[0];
			r2 = _tuple$7[1];
			lastErr = new Errno(_tuple$7[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (8)) {
			_tuple$8 = Syscall9(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), 0);
			r1 = _tuple$8[0];
			r2 = _tuple$8[1];
			lastErr = new Errno(_tuple$8[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (9)) {
			_tuple$9 = Syscall9(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]));
			r1 = _tuple$9[0];
			r2 = _tuple$9[1];
			lastErr = new Errno(_tuple$9[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (10)) {
			_tuple$10 = Syscall12(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), 0, 0);
			r1 = _tuple$10[0];
			r2 = _tuple$10[1];
			lastErr = new Errno(_tuple$10[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (11)) {
			_tuple$11 = Syscall12(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), (10 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 10]), 0);
			r1 = _tuple$11[0];
			r2 = _tuple$11[1];
			lastErr = new Errno(_tuple$11[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (12)) {
			_tuple$12 = Syscall12(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), (10 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 10]), (11 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 11]));
			r1 = _tuple$12[0];
			r2 = _tuple$12[1];
			lastErr = new Errno(_tuple$12[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (13)) {
			_tuple$13 = Syscall15(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), (10 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 10]), (11 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 11]), (12 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 12]), 0, 0);
			r1 = _tuple$13[0];
			r2 = _tuple$13[1];
			lastErr = new Errno(_tuple$13[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (14)) {
			_tuple$14 = Syscall15(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), (10 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 10]), (11 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 11]), (12 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 12]), (13 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 13]), 0);
			r1 = _tuple$14[0];
			r2 = _tuple$14[1];
			lastErr = new Errno(_tuple$14[2]);
			return [r1, r2, lastErr];
		} else if (_1 === (15)) {
			_tuple$15 = Syscall15(p.Addr(), ((a.$length >>> 0)), (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]), (3 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 3]), (4 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 4]), (5 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 5]), (6 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 6]), (7 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 7]), (8 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 8]), (9 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 9]), (10 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 10]), (11 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 11]), (12 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 12]), (13 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 13]), (14 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 14]));
			r1 = _tuple$15[0];
			r2 = _tuple$15[1];
			lastErr = new Errno(_tuple$15[2]);
			return [r1, r2, lastErr];
		} else {
			$panic(new $String("Call " + p.Name + " with too many arguments " + itoa(a.$length) + "."));
		}
	};
	Proc.prototype.Call = function(a) { return this.$val.Call(a); };
	LazyDLL.ptr.prototype.mustLoad = function() {
		var $ptr, d, e;
		d = this;
		e = d.Load();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyDLL.prototype.mustLoad = function() { return this.$val.mustLoad(); };
	LazyDLL.ptr.prototype.Handle = function() {
		var $ptr, d;
		d = this;
		d.mustLoad();
		return ((d.dll.Handle >>> 0));
	};
	LazyDLL.prototype.Handle = function() { return this.$val.Handle(); };
	LazyDLL.ptr.prototype.NewProc = function(name) {
		var $ptr, d, name;
		d = this;
		return new LazyProc.ptr(new sync.Mutex.ptr(0, 0), name, d, ptrType$5.nil);
	};
	LazyDLL.prototype.NewProc = function(name) { return this.$val.NewProc(name); };
	NewLazyDLL = function(name) {
		var $ptr, name;
		return new LazyDLL.ptr(new sync.Mutex.ptr(0, 0), ptrType$4.nil, name);
	};
	$pkg.NewLazyDLL = NewLazyDLL;
	LazyProc.ptr.prototype.mustFind = function() {
		var $ptr, e, p;
		p = this;
		e = p.Find();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyProc.prototype.mustFind = function() { return this.$val.mustFind(); };
	LazyProc.ptr.prototype.Addr = function() {
		var $ptr, p;
		p = this;
		p.mustFind();
		return p.proc.Addr();
	};
	LazyProc.prototype.Addr = function() { return this.$val.Addr(); };
	LazyProc.ptr.prototype.Call = function(a) {
		var $ptr, _tuple, a, lastErr, p, r1, r2;
		r1 = 0;
		r2 = 0;
		lastErr = $ifaceNil;
		p = this;
		p.mustFind();
		_tuple = p.proc.Call(a);
		r1 = _tuple[0];
		r2 = _tuple[1];
		lastErr = _tuple[2];
		return [r1, r2, lastErr];
	};
	LazyProc.prototype.Call = function(a) { return this.$val.Call(a); };
	FullPath = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, buf, err, n, name, p, path;
		path = "";
		err = $ifaceNil;
		_tuple = UTF16PtrFromString(name);
		p = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = "";
			_tmp$1 = err;
			path = _tmp;
			err = _tmp$1;
			return [path, err];
		}
		n = 100;
		while (true) {
			buf = $makeSlice(sliceType$3, n);
			_tuple$1 = GetFullPathName(p, ((buf.$length >>> 0)), $indexPtr(buf.$array, buf.$offset + 0, ptrType$1), ptrType$7.nil);
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$2 = "";
				_tmp$3 = err;
				path = _tmp$2;
				err = _tmp$3;
				return [path, err];
			}
			if (n <= ((buf.$length >>> 0))) {
				_tmp$4 = UTF16ToString($subslice(buf, 0, n));
				_tmp$5 = $ifaceNil;
				path = _tmp$4;
				err = _tmp$5;
				return [path, err];
			}
		}
	};
	$pkg.FullPath = FullPath;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$2.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	BytePtrFromString = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = ByteSliceFromString(s);
		a = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$10.nil, err];
		}
		return [$indexPtr(a.$array, a.$offset + 0, ptrType$10), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	StringToUTF16 = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = UTF16FromString(s);
		a = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("syscall: string with NUL passed to StringToUTF16"));
		}
		return a;
	};
	$pkg.StringToUTF16 = StringToUTF16;
	UTF16FromString = function(s) {
		var $ptr, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType$3.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		return [utf16.Encode((new sliceType$4($stringToRunes(s + "\x00")))), $ifaceNil];
	};
	$pkg.UTF16FromString = UTF16FromString;
	UTF16ToString = function(s) {
		var $ptr, _i, _ref, i, s, v;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (v === 0) {
				s = $subslice(s, 0, i);
				break;
			}
			_i++;
		}
		return ($runesToString(utf16.Decode(s)));
	};
	$pkg.UTF16ToString = UTF16ToString;
	StringToUTF16Ptr = function(s) {
		var $ptr, s, x;
		return (x = StringToUTF16(s), $indexPtr(x.$array, x.$offset + 0, ptrType$1));
	};
	$pkg.StringToUTF16Ptr = StringToUTF16Ptr;
	UTF16PtrFromString = function(s) {
		var $ptr, _tuple, a, err, s;
		_tuple = UTF16FromString(s);
		a = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		return [$indexPtr(a.$array, a.$offset + 0, ptrType$1), $ifaceNil];
	};
	$pkg.UTF16PtrFromString = UTF16PtrFromString;
	langid = function(pri, sub) {
		var $ptr, pri, sub;
		return ((((sub >>> 0)) << 10 >>> 0) | ((pri >>> 0))) >>> 0;
	};
	Errno.prototype.Error = function() {
		var $ptr, _tuple, _tuple$1, b, e, err, flags, idx, n, x, x$1;
		e = this.$val;
		idx = (((e - 536870912 >>> 0) >> 0));
		if (0 <= idx && idx < 131) {
			return ((idx < 0 || idx >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[idx]);
		}
		flags = 12800;
		b = $makeSlice(sliceType$3, 300);
		_tuple = formatMessage(flags, 0, ((e >>> 0)), langid(9, 1), b, ptrType$10.nil);
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple$1 = formatMessage(flags, 0, ((e >>> 0)), 0, b, ptrType$10.nil);
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return "winapi error #" + itoa(((e >> 0)));
			}
		}
		while (true) {
			if (!(n > 0 && (((x = n - 1 >>> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) === 10) || ((x$1 = n - 1 >>> 0, ((x$1 < 0 || x$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$1])) === 13)))) { break; }
			n = n - (1) >>> 0;
		}
		return ($runesToString(utf16.Decode($subslice(b, 0, n))));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 536870950) || (e === 536870971) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 536870918) || (e === 536871039) || (e === 536871033);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Exit = function(code) {
		var $ptr, code;
		ExitProcess(((code >>> 0)));
	};
	$pkg.Exit = Exit;
	Read = function(fd, p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, done, done$24ptr, e, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		done = 0;
		e = ReadFile(fd, p, (done$24ptr || (done$24ptr = new ptrType$12(function() { return done; }, function($v) { done = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new Errno(109))) {
				_tmp = 0;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0;
			_tmp$3 = e;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (false) {
			if (done > 0) {
				race.WriteRange(($sliceToArray(p)), ((done >> 0)));
			}
			race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$19(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		if (false && done > 0) {
			msanWrite(($sliceToArray(p)), ((done >> 0)));
		}
		_tmp$4 = ((done >> 0));
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, done, done$24ptr, e, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$19(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		done = 0;
		e = WriteFile(fd, p, (done$24ptr || (done$24ptr = new ptrType$12(function() { return done; }, function($v) { done = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if (false && done > 0) {
			race.ReadRange(($sliceToArray(p)), ((done >> 0)));
		}
		if (false && done > 0) {
			msanRead(($sliceToArray(p)), ((done >> 0)));
		}
		_tmp$2 = ((done >> 0));
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	$pkg.Write = Write;
	Seek = function(fd, offset, whence) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, fd, ft, hi, hi$24ptr, lo, newoffset, offset, rlo, w, whence, x, x$1, x$2;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		w = 0;
		_1 = whence;
		if (_1 === (0)) {
			w = 0;
		} else if (_1 === (1)) {
			w = 1;
		} else if (_1 === (2)) {
			w = 2;
		}
		hi = (((x = $shiftRightInt64(offset, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		lo = (((offset.$low + ((offset.$high >> 31) * 4294967296)) >> 0));
		_tuple = GetFileType(fd);
		ft = _tuple[0];
		if (ft === 3) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = new Errno(536871015);
			newoffset = _tmp;
			err = _tmp$1;
			return [newoffset, err];
		}
		_tuple$1 = SetFilePointer(fd, lo, (hi$24ptr || (hi$24ptr = new ptrType$20(function() { return hi; }, function($v) { hi = $v; }))), w);
		rlo = _tuple$1[0];
		e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = e;
			newoffset = _tmp$2;
			err = _tmp$3;
			return [newoffset, err];
		}
		_tmp$4 = (x$1 = $shiftLeft64((new $Int64(0, hi)), 32), x$2 = (new $Int64(0, rlo)), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		_tmp$5 = $ifaceNil;
		newoffset = _tmp$4;
		err = _tmp$5;
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, _tuple$1, curoffset, e, err, fd, length, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		_tuple = Seek(fd, new $Int64(0, 0), 1);
		curoffset = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		$deferred.push([Seek, [fd, curoffset, 0]]);
		_tuple$1 = Seek(fd, length, 0);
		e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		e = SetEndOfFile(fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }
	};
	$pkg.Ftruncate = Ftruncate;
	Fsync = function(fd) {
		var $ptr, err, fd;
		err = $ifaceNil;
		err = FlushFileBuffers(fd);
		return err;
	};
	$pkg.Fsync = Fsync;
	FindFirstFile = function(name, data) {
		var $ptr, _tuple, data, data1, err, handle, name;
		handle = 0;
		err = $ifaceNil;
		data1 = new win32finddata1.ptr(0, new Filetime.ptr(0, 0), new Filetime.ptr(0, 0), new Filetime.ptr(0, 0), 0, 0, 0, 0, arrayType$8.zero(), arrayType$9.zero());
		_tuple = findFirstFile1(name, data1);
		handle = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			copyFindData(data, data1);
		}
		return [handle, err];
	};
	$pkg.FindFirstFile = FindFirstFile;
	FindNextFile = function(handle, data) {
		var $ptr, data, data1, err, handle;
		err = $ifaceNil;
		data1 = new win32finddata1.ptr(0, new Filetime.ptr(0, 0), new Filetime.ptr(0, 0), new Filetime.ptr(0, 0), 0, 0, 0, 0, arrayType$8.zero(), arrayType$9.zero());
		err = findNextFile1(handle, data1);
		if ($interfaceIsEqual(err, $ifaceNil)) {
			copyFindData(data, data1);
		}
		return err;
	};
	$pkg.FindNextFile = FindNextFile;
	Fchdir = function(fd) {
		var $ptr, err, fd;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, err, fd, mode;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, err, fd, gid, uid;
		err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	$pkg.Fchown = Fchown;
	Readlink = function(path, buf) {
		var $ptr, _1, _array, _array$1, _array$2, _q, _q$1, _q$2, _q$3, _struct, _struct$1, _struct$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _view, _view$1, _view$2, buf, bytesReturned, bytesReturned$24ptr, data, data$1, err, fd, n, p, p$1, path, rdb, rdbbuf, s, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		_tuple = CreateFile(StringToUTF16Ptr(path), 2147483648, 0, ptrType$11.nil, 3, 35651584, 0);
		fd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = -1;
			_tmp$1 = err;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		$deferred.push([CloseHandle, [fd]]);
		rdbbuf = $makeSlice(sliceType, 16384);
		bytesReturned = 0;
		err = DeviceIoControl(fd, 589992, ptrType$10.nil, 0, $indexPtr(rdbbuf.$array, rdbbuf.$offset + 0, ptrType$10), ((rdbbuf.$length >>> 0)), (bytesReturned$24ptr || (bytesReturned$24ptr = new ptrType$12(function() { return bytesReturned; }, function($v) { bytesReturned = $v; }))), ptrType$18.nil);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = -1;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		rdb = ((_array = ($sliceToArray(rdbbuf)), _struct = new reparseDataBuffer.ptr(0, 0, 0, 0), _view = new DataView(_array.buffer, _array.byteOffset), _struct.ReparseTag = _view.getUint32(0, true), _struct.ReparseDataLength = _view.getUint16(4, true), _struct.Reserved = _view.getUint16(6, true), _struct.reparseBuffer = _view.getUint8(8, true), _struct));
		s = "";
		_1 = rdb.ReparseTag;
		if (_1 === (2684354572)) {
			data = ((_array$1 = ((rdb.$ptr_reparseBuffer || (rdb.$ptr_reparseBuffer = new ptrType$10(function() { return this.$target.reparseBuffer; }, function($v) { this.$target.reparseBuffer = $v; }, rdb)))), _struct$1 = new symbolicLinkReparseBuffer.ptr(0, 0, 0, 0, 0, arrayType$10.zero()), _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.SubstituteNameOffset = _view$1.getUint16(0, true), _struct$1.SubstituteNameLength = _view$1.getUint16(2, true), _struct$1.PrintNameOffset = _view$1.getUint16(4, true), _struct$1.PrintNameLength = _view$1.getUint16(6, true), _struct$1.Flags = _view$1.getUint32(8, true), _struct$1.PathBuffer = new ($nativeArray($kindUint16))(_array$1.buffer, $min(_array$1.byteOffset + 12, _array$1.buffer.byteLength)), _struct$1));
			p = (($sliceToArray(new sliceType(data.PathBuffer))));
			s = UTF16ToString($subslice(new sliceType$3(p), (_q = data.SubstituteNameOffset / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((data.SubstituteNameOffset + data.SubstituteNameLength << 16 >>> 16)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"))));
			if (((data.Flags & 1) >>> 0) === 0) {
				if (s.length >= 4 && $substring(s, 0, 4) === "\\??\\") {
					s = $substring(s, 4);
					if (s.length >= 2 && (s.charCodeAt(1) === 58)) {
					} else if (s.length >= 4 && $substring(s, 0, 4) === "UNC\\") {
						s = "\\\\" + $substring(s, 4);
					}
				} else {
				}
			}
		} else if (_1 === (2684354563)) {
			data$1 = ((_array$2 = ((rdb.$ptr_reparseBuffer || (rdb.$ptr_reparseBuffer = new ptrType$10(function() { return this.$target.reparseBuffer; }, function($v) { this.$target.reparseBuffer = $v; }, rdb)))), _struct$2 = new mountPointReparseBuffer.ptr(0, 0, 0, 0, arrayType$10.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.SubstituteNameOffset = _view$2.getUint16(0, true), _struct$2.SubstituteNameLength = _view$2.getUint16(2, true), _struct$2.PrintNameOffset = _view$2.getUint16(4, true), _struct$2.PrintNameLength = _view$2.getUint16(6, true), _struct$2.PathBuffer = new ($nativeArray($kindUint16))(_array$2.buffer, $min(_array$2.byteOffset + 8, _array$2.buffer.byteLength)), _struct$2));
			p$1 = (($sliceToArray(new sliceType(data$1.PathBuffer))));
			s = UTF16ToString($subslice(new sliceType$3(p$1), (_q$2 = data$1.SubstituteNameOffset / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$3 = ((data$1.SubstituteNameOffset + data$1.SubstituteNameLength << 16 >>> 16)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero"))));
			if (s.length >= 4 && $substring(s, 0, 4) === "\\??\\") {
				s = $substring(s, 4);
			} else {
			}
		} else {
			_tmp$4 = -1;
			_tmp$5 = new Errno(2);
			n = _tmp$4;
			err = _tmp$5;
			return [n, err];
		}
		n = $copySlice(buf, (new sliceType($stringToBytes(s))));
		_tmp$6 = n;
		_tmp$7 = $ifaceNil;
		n = _tmp$6;
		err = _tmp$7;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } }
	};
	$pkg.Readlink = Readlink;
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (997)) {
			return errERROR_IO_PENDING;
		}
		return new Errno(e);
	};
	FreeLibrary = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFreeLibrary.Addr(), 1, ((handle >>> 0)), 0, 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FreeLibrary = FreeLibrary;
	formatMessage = function(flags, msgsrc, msgid, langid$1, buf, args) {
		var $ptr, _p0, _tuple, args, buf, e1, err, flags, langid$1, msgid, msgsrc, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = ptrType$1.nil;
		if (buf.$length > 0) {
			_p0 = $indexPtr(buf.$array, buf.$offset + 0, ptrType$1);
		}
		_tuple = Syscall9(procFormatMessageW.Addr(), 7, ((flags >>> 0)), (msgsrc), ((msgid >>> 0)), ((langid$1 >>> 0)), ((_p0)), ((buf.$length >>> 0)), ((args)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >>> 0));
		if (n === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	CreateFile = function(name, access, mode, sa, createmode, attrs, templatefile) {
		var $ptr, _array, _struct, _tuple, _view, access, attrs, createmode, e1, err, handle, mode, name, r0, sa, templatefile;
		handle = 0;
		err = $ifaceNil;
		_array = new Uint8Array(12);
		_tuple = Syscall9(procCreateFileW.Addr(), 7, ((name)), ((access >>> 0)), ((mode >>> 0)), ((_array)), ((createmode >>> 0)), ((attrs >>> 0)), ((templatefile >>> 0)), 0, 0);
		_struct = sa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Length = _view.getUint32(0, true), _struct.SecurityDescriptor = _view.getUintptr(4, true), _struct.InheritHandle = _view.getUint32(8, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		handle = ((r0 >>> 0));
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	$pkg.CreateFile = CreateFile;
	ReadFile = function(handle, buf, done, overlapped) {
		var $ptr, _array, _p0, _struct, _tuple, _view, buf, done, e1, err, handle, overlapped, r1;
		err = $ifaceNil;
		_p0 = ptrType$10.nil;
		if (buf.$length > 0) {
			_p0 = $indexPtr(buf.$array, buf.$offset + 0, ptrType$10);
		}
		_array = new Uint8Array(20);
		_tuple = Syscall6(procReadFile.Addr(), 5, ((handle >>> 0)), ((_p0)), ((buf.$length >>> 0)), ((done)), ((_array)), 0);
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.ReadFile = ReadFile;
	SetFilePointer = function(handle, lowoffset, highoffsetptr, whence) {
		var $ptr, _tuple, e1, err, handle, highoffsetptr, lowoffset, newlowoffset, r0, whence;
		newlowoffset = 0;
		err = $ifaceNil;
		_tuple = Syscall6(procSetFilePointer.Addr(), 4, ((handle >>> 0)), ((lowoffset >>> 0)), ((highoffsetptr)), ((whence >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		newlowoffset = ((r0 >>> 0));
		if (newlowoffset === 4294967295) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [newlowoffset, err];
	};
	$pkg.SetFilePointer = SetFilePointer;
	CloseHandle = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procCloseHandle.Addr(), 1, ((handle >>> 0)), 0, 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.CloseHandle = CloseHandle;
	findFirstFile1 = function(name, data) {
		var $ptr, _array, _struct, _tuple, _view, data, e1, err, handle, name, r0;
		handle = 0;
		err = $ifaceNil;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindFirstFileW.Addr(), 2, ((name)), ((_array)), 0);
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 564, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		handle = ((r0 >>> 0));
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	findNextFile1 = function(handle, data) {
		var $ptr, _array, _struct, _tuple, _view, data, e1, err, handle, r1;
		err = $ifaceNil;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindNextFileW.Addr(), 2, ((handle >>> 0)), ((_array)), 0);
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 564, _array.buffer.byteLength));
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FindClose = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFindClose.Addr(), 1, ((handle >>> 0)), 0, 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FindClose = FindClose;
	GetFileInformationByHandle = function(handle, data) {
		var $ptr, _array, _struct, _tuple, _view, data, e1, err, handle, r1;
		err = $ifaceNil;
		_array = new Uint8Array(52);
		_tuple = Syscall(procGetFileInformationByHandle.Addr(), 2, ((handle >>> 0)), ((_array)), 0);
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.VolumeSerialNumber = _view.getUint32(28, true), _struct.FileSizeHigh = _view.getUint32(32, true), _struct.FileSizeLow = _view.getUint32(36, true), _struct.NumberOfLinks = _view.getUint32(40, true), _struct.FileIndexHigh = _view.getUint32(44, true), _struct.FileIndexLow = _view.getUint32(48, true);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.GetFileInformationByHandle = GetFileInformationByHandle;
	SetEndOfFile = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procSetEndOfFile.Addr(), 1, ((handle >>> 0)), 0, 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.SetEndOfFile = SetEndOfFile;
	GetFileType = function(filehandle) {
		var $ptr, _tuple, e1, err, filehandle, n, r0;
		n = 0;
		err = $ifaceNil;
		_tuple = Syscall(procGetFileType.Addr(), 1, ((filehandle >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >>> 0));
		if (n === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	$pkg.GetFileType = GetFileType;
	GetFileAttributesEx = function(name, level, info) {
		var $ptr, _tuple, e1, err, info, level, name, r1;
		err = $ifaceNil;
		_tuple = Syscall(procGetFileAttributesExW.Addr(), 3, ((name)), ((level >>> 0)), ((info)));
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.GetFileAttributesEx = GetFileAttributesEx;
	LocalFree = function(hmem) {
		var $ptr, _tuple, e1, err, handle, hmem, r0;
		handle = 0;
		err = $ifaceNil;
		_tuple = Syscall(procLocalFree.Addr(), 1, ((hmem >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		handle = ((r0 >>> 0));
		if (!((handle === 0))) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	$pkg.LocalFree = LocalFree;
	FlushFileBuffers = function(handle) {
		var $ptr, _tuple, e1, err, handle, r1;
		err = $ifaceNil;
		_tuple = Syscall(procFlushFileBuffers.Addr(), 1, ((handle >>> 0)), 0, 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.FlushFileBuffers = FlushFileBuffers;
	GetFullPathName = function(path, buflen, buf, fname) {
		var $ptr, _tuple, buf, buflen, e1, err, fname, n, path, r0;
		n = 0;
		err = $ifaceNil;
		_tuple = Syscall6(procGetFullPathNameW.Addr(), 4, ((path)), ((buflen >>> 0)), ((buf)), ((fname)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >>> 0));
		if (n === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	$pkg.GetFullPathName = GetFullPathName;
	WriteConsole = function(console, buf, towrite, written, reserved) {
		var $ptr, _tuple, buf, console, e1, err, r1, reserved, towrite, written;
		err = $ifaceNil;
		_tuple = Syscall6(procWriteConsoleW.Addr(), 5, ((console >>> 0)), ((buf)), ((towrite >>> 0)), ((written)), ((reserved)), 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.WriteConsole = WriteConsole;
	ReadConsole = function(console, buf, toread, read, inputControl) {
		var $ptr, _tuple, buf, console, e1, err, inputControl, r1, read, toread;
		err = $ifaceNil;
		_tuple = Syscall6(procReadConsoleW.Addr(), 5, ((console >>> 0)), ((buf)), ((toread >>> 0)), ((read)), ((inputControl)), 0);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.ReadConsole = ReadConsole;
	DeviceIoControl = function(handle, ioControlCode, inBuffer, inBufferSize, outBuffer, outBufferSize, bytesReturned, overlapped) {
		var $ptr, _array, _struct, _tuple, _view, bytesReturned, e1, err, handle, inBuffer, inBufferSize, ioControlCode, outBuffer, outBufferSize, overlapped, r1;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		_tuple = Syscall9(procDeviceIoControl.Addr(), 8, ((handle >>> 0)), ((ioControlCode >>> 0)), ((inBuffer)), ((inBufferSize >>> 0)), ((outBuffer)), ((outBufferSize >>> 0)), ((bytesReturned)), ((_array)), 0);
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		r1 = _tuple[0];
		e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = errnoErr(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	$pkg.DeviceIoControl = DeviceIoControl;
	Filetime.ptr.prototype.Nanoseconds = function() {
		var $ptr, ft, nsec, x, x$1, x$2;
		ft = this;
		nsec = (x = $shiftLeft64((new $Int64(0, ft.HighDateTime)), 32), x$1 = (new $Int64(0, ft.LowDateTime)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = (x$2 = new $Int64(27111902, 3577643008), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
		nsec = $mul64(nsec, (new $Int64(0, 100)));
		return nsec;
	};
	Filetime.prototype.Nanoseconds = function() { return this.$val.Nanoseconds(); };
	copyFindData = function(dst, src) {
		var $ptr, dst, src;
		dst.FileAttributes = src.FileAttributes;
		Filetime.copy(dst.CreationTime, src.CreationTime);
		Filetime.copy(dst.LastAccessTime, src.LastAccessTime);
		Filetime.copy(dst.LastWriteTime, src.LastWriteTime);
		dst.FileSizeHigh = src.FileSizeHigh;
		dst.FileSizeLow = src.FileSizeLow;
		dst.Reserved0 = src.Reserved0;
		dst.Reserved1 = src.Reserved1;
		$copySlice(new sliceType$3(dst.FileName), new sliceType$3(src.FileName));
		$copySlice(new sliceType$3(dst.AlternateFileName), new sliceType$3(src.AlternateFileName));
	};
	DummyError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$29.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "FindProc", name: "FindProc", pkg: "", typ: $funcType([$String], [ptrType$5, $error], false)}, {prop: "MustFindProc", name: "MustFindProc", pkg: "", typ: $funcType([$String], [ptrType$5], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$5.methods = [{prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$2], [$Uintptr, $Uintptr, $error], true)}];
	ptrType$6.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$error], false)}, {prop: "mustLoad", name: "mustLoad", pkg: "syscall", typ: $funcType([], [], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "NewProc", name: "NewProc", pkg: "", typ: $funcType([$String], [ptrType$30], false)}];
	ptrType$30.methods = [{prop: "Find", name: "Find", pkg: "", typ: $funcType([], [$error], false)}, {prop: "mustFind", name: "mustFind", pkg: "syscall", typ: $funcType([], [], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$2], [$Uintptr, $Uintptr, $error], true)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$21.methods = [{prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}];
	DummyError.init("", []);
	DLLError.init("", [{prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}, {prop: "ObjName", name: "ObjName", exported: true, typ: $String, tag: ""}, {prop: "Msg", name: "Msg", exported: true, typ: $String, tag: ""}]);
	DLL.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "Handle", name: "Handle", exported: true, typ: Handle, tag: ""}]);
	Proc.init("syscall", [{prop: "Dll", name: "Dll", exported: true, typ: ptrType$4, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "addr", name: "addr", exported: false, typ: $Uintptr, tag: ""}]);
	LazyDLL.init("syscall", [{prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "dll", name: "dll", exported: false, typ: ptrType$4, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}]);
	LazyProc.init("syscall", [{prop: "mu", name: "mu", exported: false, typ: sync.Mutex, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "l", name: "l", exported: false, typ: ptrType$6, tag: ""}, {prop: "proc", name: "proc", exported: false, typ: ptrType$5, tag: ""}]);
	SecurityAttributes.init("", [{prop: "Length", name: "Length", exported: true, typ: $Uint32, tag: ""}, {prop: "SecurityDescriptor", name: "SecurityDescriptor", exported: true, typ: $Uintptr, tag: ""}, {prop: "InheritHandle", name: "InheritHandle", exported: true, typ: $Uint32, tag: ""}]);
	Overlapped.init("", [{prop: "Internal", name: "Internal", exported: true, typ: $Uintptr, tag: ""}, {prop: "InternalHigh", name: "InternalHigh", exported: true, typ: $Uintptr, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Uint32, tag: ""}, {prop: "OffsetHigh", name: "OffsetHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "HEvent", name: "HEvent", exported: true, typ: Handle, tag: ""}]);
	Filetime.init("", [{prop: "LowDateTime", name: "LowDateTime", exported: true, typ: $Uint32, tag: ""}, {prop: "HighDateTime", name: "HighDateTime", exported: true, typ: $Uint32, tag: ""}]);
	Win32finddata.init("", [{prop: "FileAttributes", name: "FileAttributes", exported: true, typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", exported: true, typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", exported: true, typ: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", exported: true, typ: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", exported: true, typ: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", exported: true, typ: arrayType$11, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", exported: true, typ: arrayType$12, tag: ""}]);
	win32finddata1.init("", [{prop: "FileAttributes", name: "FileAttributes", exported: true, typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", exported: true, typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", exported: true, typ: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", exported: true, typ: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", exported: true, typ: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", exported: true, typ: arrayType$8, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", exported: true, typ: arrayType$9, tag: ""}]);
	ByHandleFileInformation.init("", [{prop: "FileAttributes", name: "FileAttributes", exported: true, typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", exported: true, typ: Filetime, tag: ""}, {prop: "VolumeSerialNumber", name: "VolumeSerialNumber", exported: true, typ: $Uint32, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", exported: true, typ: $Uint32, tag: ""}, {prop: "NumberOfLinks", name: "NumberOfLinks", exported: true, typ: $Uint32, tag: ""}, {prop: "FileIndexHigh", name: "FileIndexHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "FileIndexLow", name: "FileIndexLow", exported: true, typ: $Uint32, tag: ""}]);
	Win32FileAttributeData.init("", [{prop: "FileAttributes", name: "FileAttributes", exported: true, typ: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", exported: true, typ: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", exported: true, typ: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", exported: true, typ: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", exported: true, typ: $Uint32, tag: ""}]);
	symbolicLinkReparseBuffer.init("", [{prop: "SubstituteNameOffset", name: "SubstituteNameOffset", exported: true, typ: $Uint16, tag: ""}, {prop: "SubstituteNameLength", name: "SubstituteNameLength", exported: true, typ: $Uint16, tag: ""}, {prop: "PrintNameOffset", name: "PrintNameOffset", exported: true, typ: $Uint16, tag: ""}, {prop: "PrintNameLength", name: "PrintNameLength", exported: true, typ: $Uint16, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Uint32, tag: ""}, {prop: "PathBuffer", name: "PathBuffer", exported: true, typ: arrayType$10, tag: ""}]);
	mountPointReparseBuffer.init("", [{prop: "SubstituteNameOffset", name: "SubstituteNameOffset", exported: true, typ: $Uint16, tag: ""}, {prop: "SubstituteNameLength", name: "SubstituteNameLength", exported: true, typ: $Uint16, tag: ""}, {prop: "PrintNameOffset", name: "PrintNameOffset", exported: true, typ: $Uint16, tag: ""}, {prop: "PrintNameLength", name: "PrintNameLength", exported: true, typ: $Uint16, tag: ""}, {prop: "PathBuffer", name: "PathBuffer", exported: true, typ: arrayType$10, tag: ""}]);
	reparseDataBuffer.init("syscall", [{prop: "ReparseTag", name: "ReparseTag", exported: true, typ: $Uint32, tag: ""}, {prop: "ReparseDataLength", name: "ReparseDataLength", exported: true, typ: $Uint16, tag: ""}, {prop: "Reserved", name: "Reserved", exported: true, typ: $Uint16, tag: ""}, {prop: "reparseBuffer", name: "reparseBuffer", exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sysdll.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		minusOne = -1;
		errors$1 = $toNativeArray($kindString, ["argument list too long", "permission denied", "address already in use", "cannot assign requested address", "advertise error", "address family not supported by protocol", "resource temporarily unavailable", "operation already in progress", "invalid exchange", "bad file descriptor", "file descriptor in bad state", "bad message", "invalid request descriptor", "invalid request code", "invalid slot", "bad font file format", "device or resource busy", "operation canceled", "no child processes", "channel number out of range", "communication error on send", "software caused connection abort", "connection refused", "connection reset by peer", "resource deadlock avoided", "resource deadlock avoided", "destination address required", "numerical argument out of domain", "RFS specific error", "disk quota exceeded", "file exists", "bad address", "file too large", "host is down", "no route to host", "identifier removed", "invalid or incomplete multibyte or wide character", "operation now in progress", "interrupted system call", "invalid argument", "input/output error", "transport endpoint is already connected", "is a directory", "is a named type file", "key has expired", "key was rejected by service", "key has been revoked", "level 2 halted", "level 2 not synchronized", "level 3 halted", "level 3 reset", "can not access a needed shared library", "accessing a corrupted shared library", "cannot exec a shared library directly", "attempting to link in too many shared libraries", ".lib section in a.out corrupted", "link number out of range", "too many levels of symbolic links", "wrong medium type", "too many open files", "too many links", "message too long", "multihop attempted", "file name too long", "no XENIX semaphores available", "network is down", "network dropped connection on reset", "network is unreachable", "too many open files in system", "no anode", "no buffer space available", "no CSI structure available", "no data available", "no such device", "exec format error", "required key not available", "no locks available", "link has been severed", "no medium found", "cannot allocate memory", "no message of desired type", "machine is not on the network", "package not installed", "protocol not available", "no space left on device", "out of streams resources", "device not a stream", "function not implemented", "block device required", "transport endpoint is not connected", "directory not empty", "not a XENIX named type file", "state not recoverable", "socket operation on non-socket", "operation not supported", "inappropriate ioctl for device", "name not unique on network", "no such device or address", "operation not supported", "value too large for defined data type", "owner died", "operation not permitted", "protocol family not supported", "broken pipe", "protocol error", "protocol not supported", "protocol wrong type for socket", "numerical result out of range", "remote address changed", "object is remote", "remote I/O error", "interrupted system call should be restarted", "read-only file system", "cannot send after transport endpoint shutdown", "socket type not supported", "illegal seek", "no such process", "srmount error", "stale NFS file handle", "streams pipe error", "timer expired", "connection timed out", "too many references: cannot splice", "text file busy", "structure needs cleaning", "protocol driver not attached", "too many users", "resource temporarily unavailable", "invalid cross-device link", "exchange full", "not supported by windows"]);
		errERROR_IO_PENDING = new Errno(997);
		modkernel32 = NewLazyDLL(sysdll.Add("kernel32.dll"));
		modadvapi32 = NewLazyDLL(sysdll.Add("advapi32.dll"));
		modshell32 = NewLazyDLL(sysdll.Add("shell32.dll"));
		modmswsock = NewLazyDLL(sysdll.Add("mswsock.dll"));
		modcrypt32 = NewLazyDLL(sysdll.Add("crypt32.dll"));
		modws2_32 = NewLazyDLL(sysdll.Add("ws2_32.dll"));
		moddnsapi = NewLazyDLL(sysdll.Add("dnsapi.dll"));
		modiphlpapi = NewLazyDLL(sysdll.Add("iphlpapi.dll"));
		modsecur32 = NewLazyDLL(sysdll.Add("secur32.dll"));
		modnetapi32 = NewLazyDLL(sysdll.Add("netapi32.dll"));
		moduserenv = NewLazyDLL(sysdll.Add("userenv.dll"));
		procGetLastError = modkernel32.NewProc("GetLastError");
		procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");
		procFreeLibrary = modkernel32.NewProc("FreeLibrary");
		procGetProcAddress = modkernel32.NewProc("GetProcAddress");
		procGetVersion = modkernel32.NewProc("GetVersion");
		procFormatMessageW = modkernel32.NewProc("FormatMessageW");
		procExitProcess = modkernel32.NewProc("ExitProcess");
		procCreateFileW = modkernel32.NewProc("CreateFileW");
		procReadFile = modkernel32.NewProc("ReadFile");
		procWriteFile = modkernel32.NewProc("WriteFile");
		procSetFilePointer = modkernel32.NewProc("SetFilePointer");
		procCloseHandle = modkernel32.NewProc("CloseHandle");
		procGetStdHandle = modkernel32.NewProc("GetStdHandle");
		procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");
		procFindNextFileW = modkernel32.NewProc("FindNextFileW");
		procFindClose = modkernel32.NewProc("FindClose");
		procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");
		procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");
		procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");
		procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");
		procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");
		procDeleteFileW = modkernel32.NewProc("DeleteFileW");
		procMoveFileW = modkernel32.NewProc("MoveFileW");
		procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");
		procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");
		procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");
		procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");
		procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");
		procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");
		procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");
		procCancelIo = modkernel32.NewProc("CancelIo");
		procCancelIoEx = modkernel32.NewProc("CancelIoEx");
		procCreateProcessW = modkernel32.NewProc("CreateProcessW");
		procOpenProcess = modkernel32.NewProc("OpenProcess");
		procTerminateProcess = modkernel32.NewProc("TerminateProcess");
		procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");
		procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");
		procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");
		procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");
		procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");
		procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");
		procGetTempPathW = modkernel32.NewProc("GetTempPathW");
		procCreatePipe = modkernel32.NewProc("CreatePipe");
		procGetFileType = modkernel32.NewProc("GetFileType");
		procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");
		procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");
		procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");
		procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");
		procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");
		procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");
		procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");
		procSetFileTime = modkernel32.NewProc("SetFileTime");
		procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");
		procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");
		procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");
		procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");
		procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");
		procLocalFree = modkernel32.NewProc("LocalFree");
		procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");
		procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");
		procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");
		procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");
		procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");
		procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");
		procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");
		procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");
		procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");
		procVirtualLock = modkernel32.NewProc("VirtualLock");
		procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");
		procTransmitFile = modmswsock.NewProc("TransmitFile");
		procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");
		procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");
		procCertOpenStore = modcrypt32.NewProc("CertOpenStore");
		procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");
		procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");
		procCertCloseStore = modcrypt32.NewProc("CertCloseStore");
		procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");
		procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");
		procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");
		procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");
		procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");
		procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");
		procRegCloseKey = modadvapi32.NewProc("RegCloseKey");
		procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");
		procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");
		procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");
		procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");
		procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");
		procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");
		procReadConsoleW = modkernel32.NewProc("ReadConsoleW");
		procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");
		procProcess32FirstW = modkernel32.NewProc("Process32FirstW");
		procProcess32NextW = modkernel32.NewProc("Process32NextW");
		procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");
		procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");
		procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");
		procWSAStartup = modws2_32.NewProc("WSAStartup");
		procWSACleanup = modws2_32.NewProc("WSACleanup");
		procWSAIoctl = modws2_32.NewProc("WSAIoctl");
		procsocket = modws2_32.NewProc("socket");
		procsetsockopt = modws2_32.NewProc("setsockopt");
		procgetsockopt = modws2_32.NewProc("getsockopt");
		procbind = modws2_32.NewProc("bind");
		procconnect = modws2_32.NewProc("connect");
		procgetsockname = modws2_32.NewProc("getsockname");
		procgetpeername = modws2_32.NewProc("getpeername");
		proclisten = modws2_32.NewProc("listen");
		procshutdown = modws2_32.NewProc("shutdown");
		procclosesocket = modws2_32.NewProc("closesocket");
		procAcceptEx = modmswsock.NewProc("AcceptEx");
		procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");
		procWSARecv = modws2_32.NewProc("WSARecv");
		procWSASend = modws2_32.NewProc("WSASend");
		procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");
		procWSASendTo = modws2_32.NewProc("WSASendTo");
		procgethostbyname = modws2_32.NewProc("gethostbyname");
		procgetservbyname = modws2_32.NewProc("getservbyname");
		procntohs = modws2_32.NewProc("ntohs");
		procgetprotobyname = modws2_32.NewProc("getprotobyname");
		procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");
		procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");
		procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");
		procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");
		procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");
		procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");
		procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");
		procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");
		procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");
		procTranslateNameW = modsecur32.NewProc("TranslateNameW");
		procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");
		procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");
		procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");
		procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");
		procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");
		procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");
		procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");
		procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");
		procGetLengthSid = modadvapi32.NewProc("GetLengthSid");
		procCopySid = modadvapi32.NewProc("CopySid");
		procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");
		procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");
		procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");
		$pkg.Stdin = getStdHandle(-10);
		$pkg.Stdout = getStdHandle(-11);
		$pkg.Stderr = getStdHandle(-12);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/windows"] = (function() {
	var $pkg = {}, $init, sysdll, syscall, modiphlpapi, modkernel32, modnetapi32, modadvapi32, procGetAdaptersAddresses, procGetComputerNameExW, procMoveFileExW, procGetModuleFileNameW, procGetACP, procGetConsoleCP, procMultiByteToWideChar, procGetCurrentThread, procNetShareAdd, procNetShareDel, procImpersonateSelf, procRevertToSelf, procOpenThreadToken, procLookupPrivilegeValueW, procAdjustTokenPrivileges;
	sysdll = $packages["internal/syscall/windows/sysdll"];
	syscall = $packages["syscall"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sysdll.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		modiphlpapi = syscall.NewLazyDLL(sysdll.Add("iphlpapi.dll"));
		modkernel32 = syscall.NewLazyDLL(sysdll.Add("kernel32.dll"));
		modnetapi32 = syscall.NewLazyDLL(sysdll.Add("netapi32.dll"));
		modadvapi32 = syscall.NewLazyDLL(sysdll.Add("advapi32.dll"));
		procGetAdaptersAddresses = modiphlpapi.NewProc("GetAdaptersAddresses");
		procGetComputerNameExW = modkernel32.NewProc("GetComputerNameExW");
		procMoveFileExW = modkernel32.NewProc("MoveFileExW");
		procGetModuleFileNameW = modkernel32.NewProc("GetModuleFileNameW");
		procGetACP = modkernel32.NewProc("GetACP");
		procGetConsoleCP = modkernel32.NewProc("GetConsoleCP");
		procMultiByteToWideChar = modkernel32.NewProc("MultiByteToWideChar");
		procGetCurrentThread = modkernel32.NewProc("GetCurrentThread");
		procNetShareAdd = modnetapi32.NewProc("NetShareAdd");
		procNetShareDel = modnetapi32.NewProc("NetShareDel");
		procImpersonateSelf = modadvapi32.NewProc("ImpersonateSelf");
		procRevertToSelf = modadvapi32.NewProc("RevertToSelf");
		procOpenThreadToken = modadvapi32.NewProc("OpenThreadToken");
		procLookupPrivilegeValueW = modadvapi32.NewProc("LookupPrivilegeValueW");
		procAdjustTokenPrivileges = modadvapi32.NewProc("AdjustTokenPrivileges");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, RWMutex, Once, ptrType$1, ptrType$2, funcType$1, ptrType$4;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType$1 = $ptrType(Mutex);
	ptrType$2 = $ptrType(RWMutex);
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", exported: false, typ: $Bool, tag: ""}]);
	RWMutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "writeLocked", name: "writeLocked", exported: false, typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", exported: false, typ: $Int, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/windows/registry"] = (function() {
	var $pkg = {}, $init, errors, sysdll, io, syscall, utf16, modadvapi32, modkernel32, procRegCreateKeyExW, procRegDeleteKeyW, procRegSetValueExW, procRegEnumValueW, procRegDeleteValueW, procRegLoadMUIStringW, procExpandEnvironmentStringsW;
	errors = $packages["errors"];
	sysdll = $packages["internal/syscall/windows/sysdll"];
	io = $packages["io"];
	syscall = $packages["syscall"];
	utf16 = $packages["unicode/utf16"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sysdll.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrUnexpectedType = errors.New("unexpected key value type");
		modadvapi32 = syscall.NewLazyDLL(sysdll.Add("advapi32.dll"));
		modkernel32 = syscall.NewLazyDLL(sysdll.Add("kernel32.dll"));
		procRegCreateKeyExW = modadvapi32.NewProc("RegCreateKeyExW");
		procRegDeleteKeyW = modadvapi32.NewProc("RegDeleteKeyW");
		procRegSetValueExW = modadvapi32.NewProc("RegSetValueExW");
		procRegEnumValueW = modadvapi32.NewProc("RegEnumValueW");
		procRegDeleteValueW = modadvapi32.NewProc("RegDeleteValueW");
		procRegLoadMUIStringW = modadvapi32.NewProc("RegLoadMUIStringW");
		procExpandEnvironmentStringsW = modkernel32.NewProc("ExpandEnvironmentStringsW");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, registry, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, structType, arrayType$1, sliceType$3, arrayType$2, arrayType$3, ptrType$1, arrayType$5, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, _tuple, init, initLocal, runtimeNano, now, Sleep, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	registry = $packages["internal/syscall/windows/registry"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	structType = $structType("", []);
	arrayType$1 = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 9);
	arrayType$3 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Sleep = function(d) {
		var $ptr, _r, c, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$setTimeout((function(c) { return function() {
			var $ptr;
			$close(c[0]);
		}; })(c), (((x = $div64(d, new Duration(0, 1000000), false), x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		_r = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sleep }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sleep = Sleep;
	indexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType$1.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$2.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$3.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_1 === (258)) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_1 === (257)) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_1 === (261)) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.sec = (x = t.sec, x$1 = (new $Int64(0, zoneOffset)), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$2 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$23 = _r$2;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$24 = _r$4;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = (new $Int64(0, offset$1)), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt($substring(value, 1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi($substring(value, 1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.setLoc = function(loc) {
		var $ptr, loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$1.nil;
		}
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		t = this;
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = this;
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r, _r$1, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				offset = _tuple$1[1];
				sec = (x$4 = (new $Int64(0, offset)), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r, _r$1, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		year = _tuple$1[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		month = _tuple$1[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		day = _tuple$1[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r, _r$1, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = this;
		return ((t.nsec >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		yday = _tuple$1[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$5.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		t.sec = (x = t.sec, x$1 = ((x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low))), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + (((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		t = this;
		d = (x = $mul64(((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low))), new Duration(0, 1000000000)), x$4 = (new Duration(0, (t.nsec - u.nsec >> 0))), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if ($clone($clone(u, Time).Add(d), Time).Equal($clone(t, Time))) {
			return d;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r, _r$1, _r$2, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r, _r$1, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now();
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = this;
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = this;
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = this;
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = (new $Int64(0, t.nsec)), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r, _r$1, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			offset = _tuple$1[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		enc = new sliceType$3([1, (($shiftRightInt64(t.sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(t.sec, 8).$low << 24 >>> 24)), ((t.sec.$low << 24 >>> 24)), (((t.nsec >> 24 >> 0) << 24 >>> 24)), (((t.nsec >> 16 >> 0) << 24 >>> 24)), (((t.nsec >> 8 >> 0) << 24 >>> 24)), ((t.nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r = _r; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data$1)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r, _r$1, _r$2, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$6 = _r;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$7 = _r$1;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$8 = _r$2;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), ((nsec >> 0)), ptrType$1.nil);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = this;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d);
		r = _tuple$1[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = this;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = ((x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low)));
			qmod2 = (((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$8 = $mul64(((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low))), new Duration(0, 1000000000)), x$10 = (new Duration(0, nsec)), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = ((x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low)));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$1], [], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "sec", name: "sec", exported: false, typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", exported: false, typ: $Int32, tag: ""}, {prop: "loc", name: "loc", exported: false, typ: ptrType$1, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = registry.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_tuple = syscall.Getenv("ZONEINFO");
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, windows, io, runtime, sync, atomic, syscall, time, utf16, utf8, PathError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, sliceType$3, ptrType$1, ptrType$5, ptrType$10, arrayType, ptrType$11, sliceType$5, ptrType$12, ptrType$13, funcType$1, arrayType$2, arrayType$3, ptrType$14, ptrType$15, sliceType$7, arrayType$6, ptrType$16, readConsole, devNullStat, devNullStat$24ptr, runtime_args, init, runtime_beforeExit, init$1, fixCount, Readlink, syscallMode, newFile, newConsoleFile, NewFile, epipecheck, IsPathSeparator, basename, isAbs, volumeName, fixLongPath, init$2, Exit, Stat, Lstat;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	windows = $packages["internal/syscall/windows"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(fd_, name_, dirinfo_, l_, isConsole_, lastbits_, readuint16_, readbyte_, readbyteOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType$12.nil;
			this.l = new sync.Mutex.ptr(0, 0);
			this.isConsole = false;
			this.lastbits = sliceType$3.nil;
			this.readuint16 = sliceType$2.nil;
			this.readbyte = sliceType$3.nil;
			this.readbyteOffset = 0;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.l = l_;
		this.isConsole = isConsole_;
		this.lastbits = lastbits_;
		this.readuint16 = readuint16_;
		this.readbyte = readbyte_;
		this.readbyteOffset = readbyteOffset_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(data_, needdata_, path_, isempty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = new syscall.Win32finddata.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0, 0, 0, arrayType$2.zero(), arrayType$3.zero());
			this.needdata = false;
			this.path = "";
			this.isempty = false;
			return;
		}
		this.data = data_;
		this.needdata = needdata_;
		this.path = path_;
		this.isempty = isempty_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, sys_, pipe_, Mutex_, path_, vol_, idxhi_, idxlo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.sys = new syscall.Win32FileAttributeData.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0);
			this.pipe = false;
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.path = "";
			this.vol = 0;
			this.idxhi = 0;
			this.idxlo = 0;
			return;
		}
		this.name = name_;
		this.sys = sys_;
		this.pipe = pipe_;
		this.Mutex = Mutex_;
		this.path = path_;
		this.vol = vol_;
		this.idxhi = idxhi_;
		this.idxlo = idxlo_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	sliceType$2 = $sliceType($Uint16);
	sliceType$3 = $sliceType($Uint8);
	ptrType$1 = $ptrType(PathError);
	ptrType$5 = $ptrType($Uint32);
	ptrType$10 = $ptrType($Int32);
	arrayType = $arrayType($Uint16, 8192);
	ptrType$11 = $ptrType(arrayType);
	sliceType$5 = $sliceType(ptrType$11);
	ptrType$12 = $ptrType(dirInfo);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	arrayType$2 = $arrayType($Uint16, 259);
	arrayType$3 = $arrayType($Uint16, 13);
	ptrType$14 = $ptrType($Uint16);
	ptrType$15 = $ptrType($Uint8);
	sliceType$7 = $sliceType($Int32);
	arrayType$6 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
		var $ptr;
	};
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, f, n;
		f = this;
		if (f === ptrType.nil) {
			return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		return f.readdir(n);
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, e, err, f, fi, file$1, n, name, size, wantAll;
		fi = sliceType$1.nil;
		err = $ifaceNil;
		file$1 = this;
		if (file$1 === ptrType.nil) {
			_tmp = sliceType$1.nil;
			_tmp$1 = new syscall.Errno(536870951);
			fi = _tmp;
			err = _tmp$1;
			return [fi, err];
		}
		if (!file$1.file.isdir()) {
			_tmp$2 = sliceType$1.nil;
			_tmp$3 = new PathError.ptr("Readdir", file$1.file.name, new syscall.Errno(3));
			fi = _tmp$2;
			err = _tmp$3;
			return [fi, err];
		}
		if (!file$1.file.dirinfo.isempty && (file$1.file.fd === 4294967295)) {
			_tmp$4 = sliceType$1.nil;
			_tmp$5 = new syscall.Errno(536870951);
			fi = _tmp$4;
			err = _tmp$5;
			return [fi, err];
		}
		wantAll = n <= 0;
		size = n;
		if (wantAll) {
			n = -1;
			size = 100;
		}
		fi = $makeSlice(sliceType$1, 0, size);
		d = file$1.file.dirinfo.data;
		while (true) {
			if (!(!((n === 0)) && !file$1.file.dirinfo.isempty)) { break; }
			if (file$1.file.dirinfo.needdata) {
				e = syscall.FindNextFile(file$1.file.fd, d);
				if (!($interfaceIsEqual(e, $ifaceNil))) {
					if ($interfaceIsEqual(e, new syscall.Errno(18))) {
						break;
					} else {
						err = new PathError.ptr("FindNextFile", file$1.file.name, e);
						if (!wantAll) {
							fi = sliceType$1.nil;
						}
						return [fi, err];
					}
				}
			}
			file$1.file.dirinfo.needdata = true;
			name = syscall.UTF16ToString($subslice(new sliceType$2(d.FileName), 0));
			if (name === "." || name === "..") {
				continue;
			}
			f = new fileStat.ptr(name, new syscall.Win32FileAttributeData.ptr(d.FileAttributes, $clone(d.CreationTime, syscall.Filetime), $clone(d.LastAccessTime, syscall.Filetime), $clone(d.LastWriteTime, syscall.Filetime), d.FileSizeHigh, d.FileSizeLow), false, new sync.Mutex.ptr(0, 0), file$1.file.dirinfo.path + "\\" + name, 0, 0, 0);
			n = n - (1) >> 0;
			fi = $append(fi, f);
		}
		if (!wantAll && (fi.$length === 0)) {
			_tmp$6 = fi;
			_tmp$7 = io.EOF;
			fi = _tmp$6;
			err = _tmp$7;
			return [fi, err];
		}
		_tmp$8 = fi;
		_tmp$9 = $ifaceNil;
		fi = _tmp$8;
		err = _tmp$9;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tuple, err, fi, file$1, fis, i, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; fi = $f.fi; file$1 = $f.file$1; fis = $f.fis; i = $f.i; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		file$1 = this;
		_tuple = file$1.Readdir(n);
		fis = _tuple[0];
		err = _tuple[1];
		names = $makeSlice(sliceType, fis.$length);
		_ref = fis;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			fi = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = fi.Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= names.$length) ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + i] = _r);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp = names;
		_tmp$1 = err;
		names = _tmp;
		err = _tmp$1;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.fi = fi; $f.file$1 = file$1; $f.fis = fis; $f.i = i; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	init$1 = function() {
		var $ptr, _i, _ref, _tuple, argc, argc$24ptr, argv, cmd, e, i, v, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		argc = 0;
		cmd = syscall.GetCommandLine();
		_tuple = syscall.CommandLineToArgv(cmd, (argc$24ptr || (argc$24ptr = new ptrType$10(function() { return argc; }, function($v) { argc = $v; }))));
		argv = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return;
		}
		$deferred.push([syscall.LocalFree, [((((argv)) >>> 0))]]);
		$pkg.Args = $makeSlice(sliceType, argc);
		_ref = $subslice(new sliceType$5((argv)), 0, argc);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = syscall.UTF16ToString(new sliceType$2((v))));
			_i++;
		}
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$12.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(536870954);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$3($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, err, f;
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	File.ptr.prototype.checkValid = function(op) {
		var $ptr, f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		if (f.file.fd === 4294967295) {
			return new PathError.ptr(op, f.file.name, $pkg.ErrClosed);
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	Readlink = function(name) {
		var $ptr, _tuple, _tuple$1, b, e, len, n, name;
		len = 128;
		while (true) {
			b = $makeSlice(sliceType$3, len);
			_tuple$1 = syscall.Readlink(fixLongPath(name), b);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			n = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				return ["", new PathError.ptr("readlink", name, e)];
			}
			if (n < len) {
				return [($bytesToString($subslice(b, 0, n))), $ifaceNil];
			}
			len = $imul(len, (2));
		}
	};
	$pkg.Readlink = Readlink;
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, err, f, mode;
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, err, f, gid, uid;
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, err, f, size;
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, err, f;
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("sync", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, file$1;
		file$1 = this;
		if (file$1 === ptrType.nil) {
			return 4294967295;
		}
		return ((file$1.file.fd >>> 0));
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	newFile = function(h, name) {
		var $ptr, f, h, name;
		f = new File.ptr(new file.ptr(h, name, ptrType$12.nil, new sync.Mutex.ptr(0, 0), false, sliceType$3.nil, sliceType$2.nil, sliceType$3.nil, 0));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	newConsoleFile = function(h, name) {
		var $ptr, f, h, name;
		f = newFile(h, name);
		f.file.isConsole = true;
		return f;
	};
	NewFile = function(fd, name) {
		var $ptr, fd, h, m, m$24ptr, name;
		h = ((fd >>> 0));
		if (h === 4294967295) {
			return ptrType.nil;
		}
		m = 0;
		if ($interfaceIsEqual(syscall.GetConsoleMode(h, (m$24ptr || (m$24ptr = new ptrType$5(function() { return m; }, function($v) { m = $v; })))), $ifaceNil)) {
			return newConsoleFile(h, name);
		}
		return newFile(h, name);
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
	};
	file.ptr.prototype.isdir = function() {
		var $ptr, f;
		f = this;
		return !(f === ptrType$13.nil) && !(f.dirinfo === ptrType$12.nil);
	};
	file.prototype.isdir = function() { return this.$val.isdir(); };
	File.ptr.prototype.Close = function() {
		var $ptr, file$1;
		file$1 = this;
		if (file$1 === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return file$1.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			return new syscall.Errno(536870951);
		}
		if (file$1.isdir() && file$1.dirinfo.isempty) {
			return $ifaceNil;
		}
		if (file$1.fd === 4294967295) {
			return new syscall.Errno(536870951);
		}
		e = $ifaceNil;
		if (file$1.isdir()) {
			e = syscall.FindClose(file$1.fd);
		} else {
			e = syscall.CloseHandle(file$1.fd);
		}
		err = $ifaceNil;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = 4294967295;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readConsole = function(b) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, buf, err, err$1, f, i, i$1, n, n$1, n$2, nw, r, src, uint16s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; buf = $f.buf; err = $f.err; err$1 = $f.err$1; f = $f.f; i = $f.i; i$1 = $f.i$1; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; nw = $f.nw; r = $f.r; src = $f.src; uint16s = $f.uint16s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		if (b.$length === 0) {
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if (f.file.readuint16 === sliceType$2.nil) {
			f.file.readuint16 = $makeSlice(sliceType$2, 0, 10000);
			f.file.readbyte = $makeSlice(sliceType$3, 0, ($imul(4, f.file.readuint16.$capacity)));
		}
		/* while (true) { */ case 1:
			/* if (!(f.file.readbyteOffset >= f.file.readbyte.$length)) { break; } */ if(!(f.file.readbyteOffset >= f.file.readbyte.$length)) { $s = 2; continue; }
			nw = [nw];
			n$1 = f.file.readuint16.$capacity - f.file.readuint16.$length >> 0;
			if (n$1 > b.$length) {
				n$1 = b.$length;
			}
			nw[0] = 0;
			_r = readConsole(f.file.fd, (x = $subslice(f.file.readuint16, 0, (f.file.readuint16.$length + 1 >> 0)), $indexPtr(x.$array, x.$offset + f.file.readuint16.$length, ptrType$14)), ((n$1 >>> 0)), (nw.$ptr || (nw.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, nw))), ptrType$15.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err$1 = _r;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = err$1;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			uint16s = $subslice(f.file.readuint16, 0, (f.file.readuint16.$length + ((nw[0] >> 0)) >> 0));
			f.file.readuint16 = $subslice(f.file.readuint16, 0, 0);
			buf = $subslice(f.file.readbyte, 0, 0);
			i = 0;
			while (true) {
				if (!(i < uint16s.$length)) { break; }
				r = ((((i < 0 || i >= uint16s.$length) ? ($throwRuntimeError("index out of range"), undefined) : uint16s.$array[uint16s.$offset + i]) >> 0));
				if (utf16.IsSurrogate(r)) {
					if ((i + 1 >> 0) === uint16s.$length) {
						if (nw[0] > 0) {
							f.file.readuint16 = $subslice(f.file.readuint16, 0, 1);
							(x$1 = f.file.readuint16, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = ((r << 16 >>> 16))));
							break;
						}
						r = 65533;
					} else {
						r = utf16.DecodeRune(r, (((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= uint16s.$length) ? ($throwRuntimeError("index out of range"), undefined) : uint16s.$array[uint16s.$offset + x$2])) >> 0)));
						if (!((r === 65533))) {
							i = i + (1) >> 0;
						}
					}
				}
				n$2 = utf8.EncodeRune($subslice(buf, buf.$length, buf.$capacity), r);
				buf = $subslice(buf, 0, (buf.$length + n$2 >> 0));
				i = i + (1) >> 0;
			}
			f.file.readbyte = buf;
			f.file.readbyteOffset = 0;
			if (nw[0] === 0) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		src = $subslice(f.file.readbyte, f.file.readbyteOffset);
		i$1 = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < src.$length && i$1 < b.$length)) { break; }
			x$3 = ((i$1 < 0 || i$1 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + i$1]);
			if (x$3 === 26) {
				if (i$1 === 0) {
					f.file.readbyteOffset = f.file.readbyteOffset + (1) >> 0;
				}
				break;
			}
			((i$1 < 0 || i$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i$1] = x$3);
			i$1 = i$1 + (1) >> 0;
		}
		f.file.readbyteOffset = f.file.readbyteOffset + (i$1) >> 0;
		_tmp$4 = i$1;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readConsole }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.nw = nw; $f.r = r; $f.src = src; $f.uint16s = uint16s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readConsole = function(b) { return this.$val.readConsole(b); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, b, err, f, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		/* */ if (f.file.isConsole) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (f.file.isConsole) { */ case 2:
			_r = f.readConsole(b); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$2 = syscall.Read(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]);
		n = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [n, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, curoffset, done, e, err, f, n, o, off, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; curoffset = $f.curoffset; done = $f.done; e = $f.e; err = $f.err; f = $f.f; n = $f.n; o = $f.o; off = $f.off; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		done = [done];
		o = [o];
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1);
		curoffset = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o[0] = new syscall.Overlapped.ptr(0, 0, ((off.$low >>> 0)), (($shiftRightInt64(off, 32).$low >>> 0)), 0);
		done[0] = 0;
		e = syscall.ReadFile(f.file.fd, b, (done.$ptr || (done.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, done))), o[0]);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new syscall.Errno(38))) {
				_tmp$2 = 0;
				_tmp$3 = $ifaceNil;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			_tmp$4 = 0;
			_tmp$5 = e;
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		_tmp$6 = ((done[0] >> 0));
		_tmp$7 = $ifaceNil;
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.curoffset = curoffset; $f.done = done; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.o = o; $f.off = off; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.writeConsole = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, chunk, err, f, l, m, n, r, runes, uint16s, written;
		n = 0;
		err = $ifaceNil;
		f = this;
		n = b.$length;
		runes = $makeSlice(sliceType$7, 0, 256);
		if (f.file.lastbits.$length > 0) {
			b = $appendSlice(f.file.lastbits, b);
			f.file.lastbits = sliceType$3.nil;
		}
		while (true) {
			if (!(b.$length >= 4 || utf8.FullRune(b))) { break; }
			_tuple = utf8.DecodeRune(b);
			r = _tuple[0];
			l = _tuple[1];
			runes = $append(runes, r);
			b = $subslice(b, l);
		}
		if (b.$length > 0) {
			f.file.lastbits = $makeSlice(sliceType$3, b.$length);
			$copySlice(f.file.lastbits, b);
		}
		while (true) {
			if (!(runes.$length > 0)) { break; }
			m = runes.$length;
			if (m > 16000) {
				m = 16000;
			}
			chunk = $subslice(runes, 0, m);
			runes = $subslice(runes, m);
			uint16s = utf16.Encode(chunk);
			while (true) {
				if (!(uint16s.$length > 0)) { break; }
				written = [written];
				written[0] = 0;
				err = syscall.WriteConsole(f.file.fd, $indexPtr(uint16s.$array, uint16s.$offset + 0, ptrType$14), ((uint16s.$length >>> 0)), (written.$ptr || (written.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, written))), ptrType$15.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = 0;
					_tmp$1 = $ifaceNil;
					n = _tmp;
					err = _tmp$1;
					return [n, err];
				}
				uint16s = $subslice(uint16s, written[0]);
			}
		}
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.writeConsole = function(b) { return this.$val.writeConsole(b); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tuple, _tuple$1, _tuple$2, b, err, f, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		if (f.file.isConsole) {
			_tuple = f.writeConsole(b);
			n = _tuple[0];
			err = _tuple[1];
			$s = -1; return [n, err];
		}
		_tuple$2 = syscall.Write(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]);
		n = _tuple$1[0];
		err = _tuple$1[1];
		$s = -1; return [n, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, curoffset, done, e, err, f, n, o, off, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; curoffset = $f.curoffset; done = $f.done; e = $f.e; err = $f.err; f = $f.f; n = $f.n; o = $f.o; off = $f.off; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		done = [done];
		o = [o];
		n = 0;
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1);
		curoffset = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o[0] = new syscall.Overlapped.ptr(0, 0, ((off.$low >>> 0)), (($shiftRightInt64(off, 32).$low >>> 0)), 0);
		done[0] = 0;
		e = syscall.WriteFile(f.file.fd, b, (done.$ptr || (done.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, done))), o[0]);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = e;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		_tmp$4 = ((done[0] >> 0));
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.curoffset = curoffset; $f.done = done; $f.e = e; $f.err = err; $f.f = f; $f.n = n; $f.o = o; $f.off = off; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		$r = f.file.l.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		$s = -1; return [ret, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [ret, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	IsPathSeparator = function(c) {
		var $ptr, c;
		return (c === 92) || (c === 47);
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var $ptr, i, name;
		if ((name.length === 2) && (name.charCodeAt(1) === 58)) {
			name = ".";
		} else if (name.length > 2 && (name.charCodeAt(1) === 58)) {
			name = $substring(name, 2);
		}
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	isAbs = function(path) {
		var $ptr, b, path, v;
		b = false;
		v = volumeName(path);
		if (v === "") {
			b = false;
			return b;
		}
		path = $substring(path, v.length);
		if (path === "") {
			b = false;
			return b;
		}
		b = IsPathSeparator(path.charCodeAt(0));
		return b;
	};
	volumeName = function(path) {
		var $ptr, c, l, n, path, v;
		v = "";
		if (path.length < 2) {
			v = "";
			return v;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (48 <= c && c <= 57 || 97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			v = $substring(path, 0, 2);
			return v;
		}
		l = path.length;
		if (l >= 5 && IsPathSeparator(path.charCodeAt(0)) && IsPathSeparator(path.charCodeAt(1)) && !IsPathSeparator(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (true) {
				if (!(n < (l - 1 >> 0))) { break; }
				if (IsPathSeparator(path.charCodeAt(n))) {
					n = n + (1) >> 0;
					if (!IsPathSeparator(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (true) {
							if (!(n < l)) { break; }
							if (IsPathSeparator(path.charCodeAt(n))) {
								break;
							}
							n = n + (1) >> 0;
						}
						v = $substring(path, 0, n);
						return v;
					}
					break;
				}
				n = n + (1) >> 0;
			}
		}
		v = "";
		return v;
	};
	fixLongPath = function(path) {
		var $ptr, _tmp, _tmp$1, n, path, pathbuf, r, w;
		if (path.length < 248) {
			return path;
		}
		if (path.length >= 2 && $substring(path, 0, 2) === "\\\\") {
			return path;
		}
		if (!isAbs(path)) {
			return path;
		}
		pathbuf = $makeSlice(sliceType$3, ((3 + path.length >> 0) + 1 >> 0));
		$copyString(pathbuf, "\\\\?");
		n = path.length;
		_tmp = 0;
		_tmp$1 = 3;
		r = _tmp;
		w = _tmp$1;
		while (true) {
			if (!(r < n)) { break; }
			if (IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((r + 1 >> 0) < n && (path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				return path;
			} else {
				((w < 0 || w >= pathbuf.$length) ? ($throwRuntimeError("index out of range"), undefined) : pathbuf.$array[pathbuf.$offset + w] = 92);
				w = w + (1) >> 0;
				while (true) {
					if (!(r < n && !IsPathSeparator(path.charCodeAt(r)))) { break; }
					((w < 0 || w >= pathbuf.$length) ? ($throwRuntimeError("index out of range"), undefined) : pathbuf.$array[pathbuf.$offset + w] = path.charCodeAt(r));
					w = w + (1) >> 0;
					r = r + (1) >> 0;
				}
			}
		}
		if (w === 6) {
			((w < 0 || w >= pathbuf.$length) ? ($throwRuntimeError("index out of range"), undefined) : pathbuf.$array[pathbuf.$offset + w] = 92);
			w = w + (1) >> 0;
		}
		return ($bytesToString($subslice(pathbuf, 0, w)));
	};
	init$2 = function() {
		var $ptr;
		if (true) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	File.ptr.prototype.Stat = function() {
		var $ptr, _r, _tuple, d, err, file$1, ft, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; d = $f.d; err = $f.err; file$1 = $f.file$1; ft = $f.ft; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		file$1 = this;
		if (file$1 === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		if (file$1 === ptrType.nil || file$1.file.fd < 0) {
			$s = -1; return [$ifaceNil, new syscall.Errno(536870951)];
		}
		/* */ if (file$1.file.isdir()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (file$1.file.isdir()) { */ case 1:
			_r = Stat(file$1.file.dirinfo.path); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		if (file$1.file.name === "NUL") {
			$s = -1; return [devNullStat, $ifaceNil];
		}
		_tuple = syscall.GetFileType(file$1.file.fd);
		ft = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("GetFileType", file$1.file.name, err)];
		}
		if (ft === 3) {
			$s = -1; return [new fileStat.ptr(basename(file$1.file.name), new syscall.Win32FileAttributeData.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0), true, new sync.Mutex.ptr(0, 0), "", 0, 0, 0), $ifaceNil];
		}
		d[0] = new syscall.ByHandleFileInformation.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0, 0, 0, 0, 0);
		err = syscall.GetFileInformationByHandle(file$1.file.fd, d[0]);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("GetFileInformationByHandle", file$1.file.name, err)];
		}
		$s = -1; return [new fileStat.ptr(basename(file$1.file.name), new syscall.Win32FileAttributeData.ptr(d[0].FileAttributes, $clone(d[0].CreationTime, syscall.Filetime), $clone(d[0].LastAccessTime, syscall.Filetime), $clone(d[0].LastWriteTime, syscall.Filetime), d[0].FileSizeHigh, d[0].FileSizeLow), false, new sync.Mutex.ptr(0, 0), "", d[0].VolumeSerialNumber, d[0].FileIndexHigh, d[0].FileIndexLow), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.file$1 = file$1; $f.ft = ft; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = function(name) {
		var $ptr, _r, _tuple, _tuple$1, err, fi, i, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fi = $f.fi; i = $f.i; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = $ifaceNil;
		err = $ifaceNil;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 255)) { break; } */ if(!(i < 255)) { $s = 2; continue; }
			_tuple = Lstat(name);
			fi = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [fi, err];
			}
			_r = fi.Mode(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (((_r & 134217728) >>> 0) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((_r & 134217728) >>> 0) === 0) { */ case 3:
				$s = -1; return [fi, $ifaceNil];
			/* } */ case 4:
			_tuple$1 = Readlink(name);
			name = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [fi, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [$ifaceNil, new PathError.ptr("Stat", name, new syscall.Errno(536870969))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fi = fi; $f.i = i; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var $ptr, _tuple, _tuple$1, _tuple$2, e, e2, fd, fs, h, name, namep;
		if (name.length === 0) {
			return [$ifaceNil, new PathError.ptr("Lstat", name, new syscall.Errno(3))];
		}
		if (name === "NUL") {
			return [devNullStat, $ifaceNil];
		}
		fs = new fileStat.ptr(basename(name), new syscall.Win32FileAttributeData.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0), false, new sync.Mutex.ptr(0, 0), "", 0, 0, 0);
		_tuple = syscall.UTF16PtrFromString(fixLongPath(name));
		namep = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("Lstat", name, e)];
		}
		e = syscall.GetFileAttributesEx(namep, 0, ((fs.sys)));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if (!($interfaceIsEqual(e, new syscall.Errno(32)))) {
				return [$ifaceNil, new PathError.ptr("GetFileAttributesEx", name, e)];
			}
			fd = new syscall.Win32finddata.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0, 0, 0, arrayType$2.zero(), arrayType$3.zero());
			_tuple$1 = syscall.FindFirstFile(namep, fd);
			h = _tuple$1[0];
			e2 = _tuple$1[1];
			if (!($interfaceIsEqual(e2, $ifaceNil))) {
				return [$ifaceNil, new PathError.ptr("FindFirstFile", name, e)];
			}
			syscall.FindClose(h);
			fs.sys.FileAttributes = fd.FileAttributes;
			syscall.Filetime.copy(fs.sys.CreationTime, fd.CreationTime);
			syscall.Filetime.copy(fs.sys.LastAccessTime, fd.LastAccessTime);
			syscall.Filetime.copy(fs.sys.LastWriteTime, fd.LastWriteTime);
			fs.sys.FileSizeHigh = fd.FileSizeHigh;
			fs.sys.FileSizeLow = fd.FileSizeLow;
		}
		fs.path = name;
		if (!isAbs(fs.path)) {
			_tuple$2 = syscall.FullPath(fs.path);
			fs.path = _tuple$2[0];
			e = _tuple$2[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				return [$ifaceNil, e];
			}
		}
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$6.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$3(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs, x, x$1;
		fs = this;
		return (x = $shiftLeft64((new $Int64(0, fs.sys.FileSizeHigh)), 32), x$1 = (new $Int64(0, fs.sys.FileSizeLow)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs, m;
		m = 0;
		fs = this;
		if (fs === devNullStat) {
			m = 69206454;
			return m;
		}
		if (!((((fs.sys.FileAttributes & 16) >>> 0) === 0))) {
			m = (m | (2147483721)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1) >>> 0) === 0))) {
			m = (m | (292)) >>> 0;
		} else {
			m = (m | (438)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1024) >>> 0) === 0))) {
			m = (m | (134217728)) >>> 0;
		}
		if (fs.pipe) {
			m = (m | (33554432)) >>> 0;
		}
		m = m;
		return m;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return time.Unix(new $Int64(0, 0), fs.sys.LastWriteTime.Nanoseconds());
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "isdir", name: "isdir", pkg: "os", typ: $funcType([], [$Bool], false)}, {prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readConsole", name: "readConsole", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "writeConsole", name: "writeConsole", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$3, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "loadFileId", name: "loadFileId", pkg: "os", typ: $funcType([], [$error], false)}];
	PathError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "fd", name: "fd", exported: false, typ: syscall.Handle, tag: ""}, {prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", exported: false, typ: ptrType$12, tag: ""}, {prop: "l", name: "l", exported: false, typ: sync.Mutex, tag: ""}, {prop: "isConsole", name: "isConsole", exported: false, typ: $Bool, tag: ""}, {prop: "lastbits", name: "lastbits", exported: false, typ: sliceType$3, tag: ""}, {prop: "readuint16", name: "readuint16", exported: false, typ: sliceType$2, tag: ""}, {prop: "readbyte", name: "readbyte", exported: false, typ: sliceType$3, tag: ""}, {prop: "readbyteOffset", name: "readbyteOffset", exported: false, typ: $Int, tag: ""}]);
	dirInfo.init("os", [{prop: "data", name: "data", exported: false, typ: syscall.Win32finddata, tag: ""}, {prop: "needdata", name: "needdata", exported: false, typ: $Bool, tag: ""}, {prop: "path", name: "path", exported: false, typ: $String, tag: ""}, {prop: "isempty", name: "isempty", exported: false, typ: $Bool, tag: ""}]);
	File.init("os", [{prop: "file", name: "", exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "sys", name: "sys", exported: false, typ: syscall.Win32FileAttributeData, tag: ""}, {prop: "pipe", name: "pipe", exported: false, typ: $Bool, tag: ""}, {prop: "Mutex", name: "", exported: true, typ: sync.Mutex, tag: ""}, {prop: "path", name: "path", exported: false, typ: $String, tag: ""}, {prop: "vol", name: "vol", exported: false, typ: $Uint32, tag: ""}, {prop: "idxhi", name: "idxhi", exported: false, typ: $Uint32, tag: ""}, {prop: "idxlo", name: "idxlo", exported: false, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = windows.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		readConsole = syscall.ReadConsole;
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		devNullStat = new fileStat.ptr("NUL", new syscall.Win32FileAttributeData.ptr(0, new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), new syscall.Filetime.ptr(0, 0), 0, 0), false, new sync.Mutex.ptr(0, 0), "", 0, 0, 0);
		init();
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, formatBits, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = ((((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24)));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = ((((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24)));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = (((us$1 + 48 >>> 0) << 24 >>> 24)));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((b.$low >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0))));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, width, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, utf8.RuneLen(r), quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, width, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, width;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	AppendQuote = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	decimal.init("strconv", [{prop: "d", name: "d", exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, mapType$1, structType$1, sliceType$5, ptrType$3, funcType$1, sliceType$6, ptrType$4, ptrType$5, sliceType$7, sliceType$8, ptrType$6, ptrType$7, structType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, arrayType$1, sliceType$13, ptrType$8, ptrType$9, sliceType$14, sliceType$15, ptrType$10, sliceType$16, ptrType$16, sliceType$18, ptrType$17, funcType$3, funcType$4, funcType$5, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, DeepEqual, deepValueEqualJs, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$3.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$5.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.methods = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$5.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.fields = sliceType$8.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$14.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$10.nil;
			this.index = sliceType$14.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType(method);
	mapType$1 = $mapType(ptrType$1, sliceType$3);
	structType$1 = $structType("reflect", [{prop: "RWMutex", name: "", exported: true, typ: sync.RWMutex, tag: ""}, {prop: "m", name: "m", exported: false, typ: mapType$1, tag: ""}]);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$3], true);
	sliceType$6 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	sliceType$7 = $sliceType(imethod);
	sliceType$8 = $sliceType(structField);
	ptrType$6 = $ptrType(uncommonType);
	ptrType$7 = $ptrType(nameData);
	structType$8 = $structType("reflect", [{prop: "str", name: "str", exported: false, typ: $String, tag: ""}]);
	sliceType$9 = $sliceType(ptrType$3);
	sliceType$10 = $sliceType(Value);
	sliceType$11 = $sliceType(Type);
	sliceType$12 = $sliceType(sliceType$9);
	arrayType$1 = $arrayType($UnsafePointer, 2);
	sliceType$13 = $sliceType(arrayType$1);
	ptrType$8 = $ptrType(interfaceType);
	ptrType$9 = $ptrType(imethod);
	sliceType$14 = $sliceType($Int);
	sliceType$15 = $sliceType(fieldScan);
	ptrType$10 = $ptrType(structType);
	sliceType$16 = $sliceType($Uint8);
	ptrType$16 = $ptrType($UnsafePointer);
	sliceType$18 = $sliceType($Int32);
	ptrType$17 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$7.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$8.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$5.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$4.nil, ptrType$5.nil, newNameOff($clone(newName(internalStr(typ.string), "", "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$7, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), new name.ptr(ptrType$5.nil), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$8, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), ((i$4 >>> 0))));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var $ptr, t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var $ptr, _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$6.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var $ptr, t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var $ptr, t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var $ptr, _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var $ptr, _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var $ptr, _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$5);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$5.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var $ptr, i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var $ptr, i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var $ptr, c, strObj;
		c = new structType$8.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$9, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$9, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((v.flag & 224) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var $ptr, _$38, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$6.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_$38, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$9)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, (fv), (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _1, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$11, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$11, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$9)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$10, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$10.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$10([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$10, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$10.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if ($clone(field.name, name).name() === "") {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((typ[0].Kind() >>> 0)))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | (((typ$1[0].Kind() >>> 0)))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$12([new sliceType$9([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$12([new sliceType$9([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeepEqual = function(a1, a2) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a1 = $f.a1; a2 = $f.a2; i1 = $f.i1; i2 = $f.i2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i1 = a1;
		i2 = a2;
		if (i1 === i2) {
			$s = -1; return true;
		}
		if (i1 === null || i2 === null || !(i1.constructor === i2.constructor)) {
			$s = -1; return false;
		}
		_r = ValueOf(a1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = $clone(_r, Value);
		_r$1 = ValueOf(a2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$1, Value);
		_arg$2 = sliceType$13.nil;
		_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeepEqual }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a1 = a1; $f.a2 = a2; $f.i1 = i1; $f.i2 = i2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DeepEqual = DeepEqual;
	deepValueEqualJs = function(v1, v2, visited) {
		var $ptr, _1, _2, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, entry, i, i$1, k, keys, n, n$1, v1, v2, val1, val2, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; entry = $f.entry; i = $f.i; i$1 = $f.i$1; k = $f.k; keys = $f.keys; n = $f.n; n$1 = $f.n$1; v1 = $f.v1; v2 = $f.v2; val1 = $f.val1; val2 = $f.val2; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v1, Value).IsValid() || !$clone(v2, Value).IsValid()) {
			$s = -1; return !$clone(v1, Value).IsValid() && !$clone(v2, Value).IsValid();
		}
		if (!($interfaceIsEqual($clone(v1, Value).Type(), $clone(v2, Value).Type()))) {
			$s = -1; return false;
		}
		if ($interfaceIsEqual($clone(v1, Value).Type(), jsObjectPtr)) {
			$s = -1; return unwrapJsObject(jsObjectPtr, $clone(v1, Value).object()) === unwrapJsObject(jsObjectPtr, $clone(v2, Value).object());
		}
		_1 = $clone(v1, Value).Kind();
		if ((_1 === (17)) || (_1 === (21)) || (_1 === (23)) || (_1 === (25))) {
			_ref = visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				entry = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
				if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
					$s = -1; return true;
				}
				_i++;
			}
			visited = $append(visited, $toNativeArray($kindUnsafePointer, [v1.ptr, v2.ptr]));
		}
			_2 = $clone(v1, Value).Kind();
			/* */ if ((_2 === (17)) || (_2 === (23))) { $s = 2; continue; }
			/* */ if (_2 === (20)) { $s = 3; continue; }
			/* */ if (_2 === (22)) { $s = 4; continue; }
			/* */ if (_2 === (25)) { $s = 5; continue; }
			/* */ if (_2 === (21)) { $s = 6; continue; }
			/* */ if (_2 === (19)) { $s = 7; continue; }
			/* */ if (_2 === (26)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_2 === (17)) || (_2 === (23))) { */ case 2:
				if ($clone(v1, Value).Kind() === 23) {
					if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
						$s = -1; return false;
					}
					if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
						$s = -1; return true;
					}
				}
				n = $clone(v1, Value).Len();
				if (!((n === $clone(v2, Value).Len()))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 10:
					/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 11; continue; }
					_r = $clone(v1, Value).Index(i); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg = $clone(_r, Value);
					_r$1 = $clone(v2, Value).Index(i); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg$1 = $clone(_r$1, Value);
					_arg$2 = visited;
					_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!_r$2) { */ case 12:
						$s = -1; return false;
					/* } */ case 13:
					i = i + (1) >> 0;
				/* } */ $s = 10; continue; case 11:
				$s = -1; return true;
			/* } else if (_2 === (20)) { */ case 3:
				if ($clone(v1, Value).IsNil() || $clone(v2, Value).IsNil()) {
					$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
				}
				_r$3 = $clone(v1, Value).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$3 = $clone(_r$3, Value);
				_r$4 = $clone(v2, Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$4 = $clone(_r$4, Value);
				_arg$5 = visited;
				_r$5 = deepValueEqualJs(_arg$3, _arg$4, _arg$5); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_2 === (22)) { */ case 4:
				_r$6 = $clone(v1, Value).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$6 = $clone(_r$6, Value);
				_r$7 = $clone(v2, Value).Elem(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$7 = $clone(_r$7, Value);
				_arg$8 = visited;
				_r$8 = deepValueEqualJs(_arg$6, _arg$7, _arg$8); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
			/* } else if (_2 === (25)) { */ case 5:
				n$1 = $clone(v1, Value).NumField();
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < n$1)) { break; } */ if(!(i$1 < n$1)) { $s = 24; continue; }
					_r$9 = $clone(v1, Value).Field(i$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$9 = $clone(_r$9, Value);
					_r$10 = $clone(v2, Value).Field(i$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_arg$10 = $clone(_r$10, Value);
					_arg$11 = visited;
					_r$11 = deepValueEqualJs(_arg$9, _arg$10, _arg$11); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!_r$11) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$11) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_2 === (21)) { */ case 6:
				if (!($clone(v1, Value).IsNil() === $clone(v2, Value).IsNil())) {
					$s = -1; return false;
				}
				if ($clone(v1, Value).object() === $clone(v2, Value).object()) {
					$s = -1; return true;
				}
				_r$12 = $clone(v1, Value).MapKeys(); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				keys = _r$12;
				if (!((keys.$length === $clone(v2, Value).Len()))) {
					$s = -1; return false;
				}
				_ref$1 = keys;
				_i$1 = 0;
				/* while (true) { */ case 31:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 32; continue; }
					k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					_r$13 = $clone(v1, Value).MapIndex($clone(k, Value)); /* */ $s = 33; case 33: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					val1 = _r$13;
					_r$14 = $clone(v2, Value).MapIndex($clone(k, Value)); /* */ $s = 34; case 34: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					val2 = _r$14;
					if (!$clone(val1, Value).IsValid() || !$clone(val2, Value).IsValid()) { _v = true; $s = 37; continue s; }
					_r$15 = deepValueEqualJs($clone(val1, Value), $clone(val2, Value), visited); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_v = !_r$15; case 37:
					/* */ if (_v) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (_v) { */ case 35:
						$s = -1; return false;
					/* } */ case 36:
					_i$1++;
				/* } */ $s = 31; continue; case 32:
				$s = -1; return true;
			/* } else if (_2 === (19)) { */ case 7:
				$s = -1; return $clone(v1, Value).IsNil() && $clone(v2, Value).IsNil();
			/* } else if (_2 === (26)) { */ case 8:
				$s = -1; return $clone(v1, Value).object() === $clone(v2, Value).object();
			/* } */ case 9:
		case 1:
		_r$16 = valueInterface($clone(v1, Value), false); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = valueInterface($clone(v2, Value), false); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		$s = -1; return !!($interfaceIsEqual(_r$16, _r$17));
		/* */ } return; } if ($f === undefined) { $f = { $blk: deepValueEqualJs }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.entry = entry; $f.i = i; $f.i$1 = i$1; $f.k = k; $f.keys = keys; $f.n = n; $f.n$1 = n$1; $f.v1 = v1; $f.v2 = v2; $f.val1 = val1; $f.val2 = val2; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var $ptr, _entry, _i, _i$1, _key, _ref, _ref$1, _tuple, allExported, allm, found, m, m$1, methods, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = methodCache.RWMutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = methodCache.m[ptrType$1.keyFor(t)], _entry !== undefined ? [_entry.v, true] : [sliceType$3.nil, false]);
		methods = _tuple[0];
		found = _tuple[1];
		$r = methodCache.RWMutex.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (found) {
			$s = -1; return methods;
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			$s = -1; return sliceType$3.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$3, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		$r = methodCache.RWMutex.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (methodCache.m === false) {
			methodCache.m = {};
		}
		_key = t; (methodCache.m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: methods };
		$r = methodCache.RWMutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return methods;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$8.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, name$1, p, t, t$1, tag, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; name$1 = $f.name$1; p = $f.p; t = $f.t; t$1 = $f.t$1; tag = $f.tag; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		name$1 = $clone(p.name, name).name();
		/* */ if (!(name$1 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1 === "")) { */ case 1:
			f.Name = name$1;
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(p.name, name).pkgPath();
			if (f.PkgPath === "") {
				f.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset;
		f.Index = new sliceType$14([i]);
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.name$1 = name$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.tag = tag; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, name$1, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		ok = false;
		t = this;
		current = new sliceType$15([]);
		next = new sliceType$15([new fieldScan.ptr(t, sliceType$14.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$10.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					name$1 = $clone(f.name, name).name();
					/* */ if (!(name$1 === "")) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(name$1 === "")) { */ case 9:
						fname = name$1;
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$10.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$14.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$10.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$10.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$10.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$14.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, tfname, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; tfname = $f.tfname; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name$1[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tfname = $clone(tf.name, name).name();
				/* */ if (tfname === "") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tfname === "") { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tfname === name$1[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tfname === name$1[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name$1) { return function(s) {
			var $ptr, s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.tfname = tfname; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				if ($clone(V.nameOff(vm.name), name).name() === $clone(t.rtype.nameOff(tm.name), name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			if ($clone(V.nameOff(vm$1.name), name).name() === $clone(t.rtype.nameOff(tm$1.name), name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var $ptr, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var $ptr, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, tp, v, v$1, v$2, vf, vp, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; tp = $f.tp; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; vp = $f.vp; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!$clone(tf.name, name).isExported()) {
						tp = $clone(tf.name, name).pkgPath();
						if (tp === "") {
							tp = $clone(t$2.pkgPath, name).name();
						}
						vp = $clone(vf.name, name).pkgPath();
						if (vp === "") {
							vp = $clone(v$2.pkgPath, name).name();
						}
						if (!(tp === vp)) {
							$s = -1; return false;
						}
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.$ptr = $ptr; $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.tp = tp; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.vp = vp; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$10, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv(v.typ, $clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend(v.typ, $clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$6.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex((v.flag & 96) >>> 0, $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$16($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$18($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$6.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}];
	ptrType$17.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$10.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$10], [sliceType$10], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$16], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$18], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$18], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", exported: false, typ: sliceType$3, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", exported: false, typ: ptrType$5, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", exported: false, typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", exported: false, typ: ptrType$3, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", exported: false, typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", exported: false, typ: ptrType$5, tag: ""}, {prop: "str", name: "str", exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", exported: false, typ: sliceType$7, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", exported: false, typ: sliceType$8, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: sliceType$14, tag: ""}, {prop: "Anonymous", name: "Anonymous", exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$10, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$14, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new structType$1.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$6(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, byteType, space, ssFree, complexError, boolError, newPrinter, Sprintf, Errorf, Sprint, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var $ptr, _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var $ptr, buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var $ptr, _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var $ptr, buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var $ptr, f, num, oldZero, prec, size, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Sprintf = function(format, a) {
		var $ptr, _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Sprint = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Sprintln = function(a) {
		var $ptr, _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var $ptr, _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f.$ptr = $ptr; $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var $ptr, _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var $ptr, _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var $ptr, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$5, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = $clone(f, reflect.Value).Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField($clone(f, reflect.Value), i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$8, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = $clone(f, reflect.Value).Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = $clone(f, reflect.Value).Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = $clone(f, reflect.Value).Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 81; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 82:
								_r$14 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = $clone(_r$16, reflect.Value).Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$17.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = $clone(f, reflect.Value).Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 99:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 100; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$20 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 101; case 101: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$20, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 99; continue; case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 103:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 104; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 105; case 105: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$21, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 103; continue; case 104:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 107:
						_r$22 = $clone(f, reflect.Value).Elem(); /* */ $s = 110; case 110: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 111; continue; }
						/* */ $s = 112; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 111:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 112:
					case 109:
				/* } */ case 108:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var $ptr, _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var $ptr, _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "", exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "", exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/fixed"] = (function() {
	var $pkg = {}, $init, fmt, Int26_6, Int52_12, Point26_6, Rectangle26_6, sliceType, I, muli64;
	fmt = $packages["fmt"];
	Int26_6 = $pkg.Int26_6 = $newType(4, $kindInt32, "fixed.Int26_6", true, "golang.org/x/image/math/fixed", true, null);
	Int52_12 = $pkg.Int52_12 = $newType(8, $kindInt64, "fixed.Int52_12", true, "golang.org/x/image/math/fixed", true, null);
	Point26_6 = $pkg.Point26_6 = $newType(0, $kindStruct, "fixed.Point26_6", true, "golang.org/x/image/math/fixed", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle26_6 = $pkg.Rectangle26_6 = $newType(0, $kindStruct, "fixed.Rectangle26_6", true, "golang.org/x/image/math/fixed", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point26_6.ptr(0, 0);
			this.Max = new Point26_6.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	sliceType = $sliceType($emptyInterface);
	I = function(i) {
		var $ptr, i;
		return (((i << 6 >> 0) >> 0));
	};
	$pkg.I = I;
	Int26_6.prototype.String = function() {
		var $ptr, _r, _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this.$val;
		/* */ if (x >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x >= 0) { */ case 1:
			_r = fmt.Sprintf("%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = -x;
		/* */ if (x >= 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x >= 0) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-33554432:00";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int26_6.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int26_6).prototype.String = function() { return new Int26_6(this.$get()).String(); };
	Int26_6.prototype.Floor = function() {
		var $ptr, x;
		x = this.$val;
		return (((((x + 0 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Floor = function() { return new Int26_6(this.$get()).Floor(); };
	Int26_6.prototype.Round = function() {
		var $ptr, x;
		x = this.$val;
		return (((((x + 32 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Round = function() { return new Int26_6(this.$get()).Round(); };
	Int26_6.prototype.Ceil = function() {
		var $ptr, x;
		x = this.$val;
		return (((((x + 63 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Ceil = function() { return new Int26_6(this.$get()).Ceil(); };
	Int26_6.prototype.Mul = function(y) {
		var $ptr, x, x$1, x$2, y;
		x = this.$val;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int26_6).prototype.Mul = function(y) { return new Int26_6(this.$get()).Mul(y); };
	Int52_12.prototype.String = function() {
		var $ptr, _r, _r$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 1:
			_r = fmt.Sprintf("%d:%04d", new sliceType([((x$1 = $shiftRightInt64(x, 12), new $Int64(x$1.$high, x$1.$low))), ((x$2 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$2.$high, x$2.$low)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = new Int52_12(-x.$high, -x.$low);
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%04d", new sliceType([((x$3 = $shiftRightInt64(x, 12), new $Int64(x$3.$high, x$3.$low))), ((x$4 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$4.$high, x$4.$low)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-2251799813685248:0000";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int52_12.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int52_12).prototype.String = function() { return this.$get().String(); };
	Int52_12.prototype.Floor = function() {
		var $ptr, x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 0)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Floor = function() { return this.$get().Floor(); };
	Int52_12.prototype.Round = function() {
		var $ptr, x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 2048)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Round = function() { return this.$get().Round(); };
	Int52_12.prototype.Ceil = function() {
		var $ptr, x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 4095)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Ceil = function() { return this.$get().Ceil(); };
	Int52_12.prototype.Mul = function(y) {
		var $ptr, _tuple, hi, lo, ret, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		x = this;
		_tuple = muli64((new $Int64(x.$high, x.$low)), (new $Int64(y.$high, y.$low)));
		lo = _tuple[0];
		hi = _tuple[1];
		ret = ((x$1 = (x$2 = $shiftLeft64(hi, 52), x$3 = $shiftRightUint64(lo, 12), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0)), new Int52_12(x$1.$high, x$1.$low)));
		ret = (x$4 = ((x$5 = (x$6 = $shiftRightUint64(lo, 11), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)), new Int52_12(x$5.$high, x$5.$low))), new Int52_12(ret.$high + x$4.$high, ret.$low + x$4.$low));
		return ret;
	};
	$ptrType(Int52_12).prototype.Mul = function(y) { return this.$get().Mul(y); };
	muli64 = function(u, v) {
		var $ptr, _tmp, _tmp$1, hi, lo, t, u, u0, u1, v, v0, v1, w0, w1, w2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		lo = new $Uint64(0, 0);
		hi = new $Uint64(0, 0);
		u1 = ((x = $shiftRightInt64(u, 32), new $Uint64(x.$high, x.$low)));
		u0 = ((x$1 = new $Int64(u.$high & 0, (u.$low & 4294967295) >>> 0), new $Uint64(x$1.$high, x$1.$low)));
		v1 = ((x$2 = $shiftRightInt64(v, 32), new $Uint64(x$2.$high, x$2.$low)));
		v0 = ((x$3 = new $Int64(v.$high & 0, (v.$low & 4294967295) >>> 0), new $Uint64(x$3.$high, x$3.$low)));
		w0 = $mul64(u0, v0);
		t = (x$4 = $mul64(u1, v0), x$5 = $shiftRightUint64(w0, 32), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = ((x$6 = $shiftRightInt64((new $Int64(t.$high, t.$low)), 32), new $Uint64(x$6.$high, x$6.$low)));
		w1 = (x$7 = $mul64(u0, v1), new $Uint64(w1.$high + x$7.$high, w1.$low + x$7.$low));
		_tmp = $mul64((new $Uint64(u.$high, u.$low)), (new $Uint64(v.$high, v.$low)));
		_tmp$1 = (x$8 = (x$9 = $mul64(u1, v1), new $Uint64(x$9.$high + w2.$high, x$9.$low + w2.$low)), x$10 = ((x$11 = $shiftRightInt64((new $Int64(w1.$high, w1.$low)), 32), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		lo = _tmp;
		hi = _tmp$1;
		return [lo, hi];
	};
	Point26_6.ptr.prototype.Add = function(q) {
		var $ptr, p, q;
		p = this;
		return new Point26_6.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point26_6.prototype.Add = function(q) { return this.$val.Add(q); };
	Point26_6.ptr.prototype.Sub = function(q) {
		var $ptr, p, q;
		p = this;
		return new Point26_6.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point26_6.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point26_6.ptr.prototype.Mul = function(k) {
		var $ptr, _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, k)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, k)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point26_6.ptr.prototype.Div = function(k) {
		var $ptr, _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, 64)) / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, 64)) / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Div = function(k) { return this.$val.Div(k); };
	Point26_6.ptr.prototype.In = function(r) {
		var $ptr, p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point26_6.prototype.In = function(r) { return this.$val.In(r); };
	Rectangle26_6.ptr.prototype.Add = function(p) {
		var $ptr, p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point26_6.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle26_6.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle26_6.ptr.prototype.Sub = function(p) {
		var $ptr, p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point26_6.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle26_6.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle26_6.ptr.prototype.Intersect = function(s) {
		var $ptr, r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if ($clone(r, Rectangle26_6).Empty()) {
			return new Rectangle26_6.ptr(new Point26_6.ptr(0, 0), new Point26_6.ptr(0, 0));
		}
		return r;
	};
	Rectangle26_6.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle26_6.ptr.prototype.Union = function(s) {
		var $ptr, r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle26_6).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle26_6.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle26_6.ptr.prototype.Empty = function() {
		var $ptr, r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle26_6.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle26_6.ptr.prototype.In = function(s) {
		var $ptr, r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle26_6.prototype.In = function(s) { return this.$val.In(s); };
	Int26_6.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Int26_6], false)}];
	Int52_12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int52_12], [Int52_12], false)}];
	Point26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Rectangle26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Point26_6.init("", [{prop: "X", name: "X", exported: true, typ: Int26_6, tag: ""}, {prop: "Y", name: "Y", exported: true, typ: Int26_6, tag: ""}]);
	Rectangle26_6.init("", [{prop: "Min", name: "Min", exported: true, typ: Point26_6, tag: ""}, {prop: "Max", name: "Max", exported: true, typ: Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, sliceType, ptrType, sliceType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
			}
			if (n > 0) {
				$s = -1; return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = (((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >> 0));
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			/* } */ case 4:
			b.r = 0;
			b.w = 0;
			_r$1 = b.rd.Read(b.buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			b.err = _tuple$1[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			if (n === 0) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
			}
			b.w = b.w + (n) >> 0;
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = (((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0));
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = ((c >> 0));
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((b.lastByte << 24 >>> 24))));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
		}
		_tmp$3 = (((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = (((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) >> 0));
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = ((((i$1 < 0 || i$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + i$1]) >> 0));
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [($bytesToString(bytes$1)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [(new $Int64(0, n)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/color"] = (function() {
	var $pkg = {}, $init, Color, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, Model, modelFunc, Palette, YCbCr, NYCbCrA, CMYK, ptrType, funcType, ModelFunc, rgbaModel, rgba64Model, nrgbaModel, nrgba64Model, alphaModel, alpha16Model, grayModel, gray16Model, sqDiff, RGBToYCbCr, yCbCrModel, nYCbCrAModel, RGBToCMYK, CMYKToRGB, cmykModel;
	Color = $pkg.Color = $newType(8, $kindInterface, "color.Color", true, "image/color", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "color.RGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "color.RGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "color.NRGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "color.NRGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "color.Alpha", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "color.Alpha16", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "color.Gray", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "color.Gray16", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Model = $pkg.Model = $newType(8, $kindInterface, "color.Model", true, "image/color", true, null);
	modelFunc = $pkg.modelFunc = $newType(0, $kindStruct, "color.modelFunc", true, "image/color", false, function(f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			return;
		}
		this.f = f_;
	});
	Palette = $pkg.Palette = $newType(12, $kindSlice, "color.Palette", true, "image/color", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "color.YCbCr", true, "image/color", true, function(Y_, Cb_, Cr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.Cb = 0;
			this.Cr = 0;
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
	});
	NYCbCrA = $pkg.NYCbCrA = $newType(0, $kindStruct, "color.NYCbCrA", true, "image/color", true, function(YCbCr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.YCbCr = new YCbCr.ptr(0, 0, 0);
			this.A = 0;
			return;
		}
		this.YCbCr = YCbCr_;
		this.A = A_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "color.CMYK", true, "image/color", true, function(C_, M_, Y_, K_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = 0;
			this.M = 0;
			this.Y = 0;
			this.K = 0;
			return;
		}
		this.C = C_;
		this.M = M_;
		this.Y = Y_;
		this.K = K_;
	});
	ptrType = $ptrType(modelFunc);
	funcType = $funcType([Color], [Color], false);
	RGBA.ptr.prototype.RGBA = function() {
		var $ptr, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	RGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	RGBA64.ptr.prototype.RGBA = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_tmp = ((c.R >>> 0));
		_tmp$1 = ((c.G >>> 0));
		_tmp$2 = ((c.B >>> 0));
		_tmp$3 = ((c.A >>> 0));
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	RGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA.ptr.prototype.RGBA = function() {
		var $ptr, _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (255), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (255), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (255), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	NRGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA64.ptr.prototype.RGBA = function() {
		var $ptr, _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (65535), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (65535), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (65535), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		return [r, g, b, a];
	};
	NRGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha.ptr.prototype.RGBA = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha16.ptr.prototype.RGBA = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha16.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray.ptr.prototype.RGBA = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		y = (y | ((y << 8 >>> 0))) >>> 0;
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray16.ptr.prototype.RGBA = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray16.prototype.RGBA = function() { return this.$val.RGBA(); };
	ModelFunc = function(f) {
		var $ptr, f;
		return new modelFunc.ptr(f);
	};
	$pkg.ModelFunc = ModelFunc;
	modelFunc.ptr.prototype.Convert = function(c) {
		var $ptr, _r, c, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.f(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: modelFunc.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	modelFunc.prototype.Convert = function(c) { return this.$val.Convert(c); };
	rgbaModel = function(c) {
		var $ptr, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgbaModel }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	rgba64Model = function(c) {
		var $ptr, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgba64Model }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgbaModel = function(c) {
		var $ptr, _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), 255), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgbaModel }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgba64Model = function(c) {
		var $ptr, _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), 65535), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA64.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgba64Model }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	alphaModel = function(c) {
		var $ptr, _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha.ptr((((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alphaModel }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	alpha16Model = function(c) {
		var $ptr, _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha16.ptr(((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alpha16Model }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	grayModel = function(c) {
		var $ptr, _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 24 >>> 0;
		$s = -1; return (x = new Gray.ptr(((y << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: grayModel }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	gray16Model = function(c) {
		var $ptr, _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 16 >>> 0;
		$s = -1; return (x = new Gray16.ptr(((y << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: gray16Model }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Palette.prototype.Convert = function(c) {
		var $ptr, _r, c, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.$length === 0) {
			$s = -1; return $ifaceNil;
		}
		_r = p.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (x = _r, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Convert = function(c) { return this.$get().Convert(c); };
	Palette.prototype.Index = function(c) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bestSum, c, ca, cb, cg, cr, i, p, ret, sum, v, va, vb, vg, vr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bestSum = $f.bestSum; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; cr = $f.cr; i = $f.i; p = $f.p; ret = $f.ret; sum = $f.sum; v = $f.v; va = $f.va; vb = $f.vb; vg = $f.vg; vr = $f.vr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cr = _tuple[0];
		cg = _tuple[1];
		cb = _tuple[2];
		ca = _tuple[3];
		_tmp = 0;
		_tmp$1 = 4294967295;
		ret = _tmp;
		bestSum = _tmp$1;
		_ref = p;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = v.RGBA(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			vr = _tuple$1[0];
			vg = _tuple$1[1];
			vb = _tuple$1[2];
			va = _tuple$1[3];
			sum = ((sqDiff(cr, vr) + sqDiff(cg, vg) >>> 0) + sqDiff(cb, vb) >>> 0) + sqDiff(ca, va) >>> 0;
			if (sum < bestSum) {
				if (sum === 0) {
					$s = -1; return i;
				}
				_tmp$2 = i;
				_tmp$3 = sum;
				ret = _tmp$2;
				bestSum = _tmp$3;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Index }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bestSum = bestSum; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.cr = cr; $f.i = i; $f.p = p; $f.ret = ret; $f.sum = sum; $f.v = v; $f.va = va; $f.vb = vb; $f.vg = vg; $f.vr = vr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Index = function(c) { return this.$get().Index(c); };
	sqDiff = function(x, y) {
		var $ptr, d, x, y;
		d = 0;
		if (x > y) {
			d = x - y >>> 0;
		} else {
			d = y - x >>> 0;
		}
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	RGBToYCbCr = function(r, g, b) {
		var $ptr, b, b1, cb, cr, g, g1, r, r1, yy;
		r1 = ((r >> 0));
		g1 = ((g >> 0));
		b1 = ((b >> 0));
		yy = ((((($imul(19595, r1)) + ($imul(38470, g1)) >> 0) + ($imul(7471, b1)) >> 0) + 32768 >> 0)) >> 16 >> 0;
		cb = ((($imul(-11056, r1)) - ($imul(21712, g1)) >> 0) + ($imul(32768, b1)) >> 0) + 8421376 >> 0;
		if (((((cb >>> 0)) & 4278190080) >>> 0) === 0) {
			cb = (cb >> $min((16), 31)) >> 0;
		} else {
			cb = ~((cb >> 31 >> 0)) >> 0;
		}
		cr = ((($imul(32768, r1)) - ($imul(27440, g1)) >> 0) - ($imul(5328, b1)) >> 0) + 8421376 >> 0;
		if (((((cr >>> 0)) & 4278190080) >>> 0) === 0) {
			cr = (cr >> $min((16), 31)) >> 0;
		} else {
			cr = ~((cr >> 31 >> 0)) >> 0;
		}
		return [((yy << 24 >>> 24)), ((cb << 24 >>> 24)), ((cr << 24 >>> 24))];
	};
	$pkg.RGBToYCbCr = RGBToYCbCr;
	YCbCr.ptr.prototype.RGBA = function() {
		var $ptr, b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.Y >> 0)), 65792);
		cb1 = ((c.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		return [((r >>> 0)), ((g >>> 0)), ((b >>> 0)), 65535];
	};
	YCbCr.prototype.RGBA = function() { return this.$val.RGBA(); };
	yCbCrModel = function(c) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, b, c, g, ok, r, u, v, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; u = $f.u; v = $f.v; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, YCbCr, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$2[0];
		u = _tuple$2[1];
		v = _tuple$2[2];
		$s = -1; return (x = new YCbCr.ptr(y, u, v), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: yCbCrModel }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NYCbCrA.ptr.prototype.RGBA = function() {
		var $ptr, _q, _q$1, _q$2, a, b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.YCbCr.Y >> 0)), 65792);
		cb1 = ((c.YCbCr.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.YCbCr.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		a = $imul(((c.A >>> 0)), 257) >>> 0;
		return [(_q = ($imul(((r >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(((g >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$2 = ($imul(((b >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")), a];
	};
	NYCbCrA.prototype.RGBA = function() { return this.$val.RGBA(); };
	nYCbCrAModel = function(c) {
		var $ptr, _q, _q$1, _q$2, _r, _ref, _tuple, _tuple$1, a, b, c, c$1, c$2, g, r, u, v, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; g = $f.g; r = $f.r; u = $f.u; v = $f.v; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = c;
		if ($assertType(_ref, NYCbCrA, true)[1]) {
			c$1 = $clone(_ref.$val, NYCbCrA);
			$s = -1; return new c$1.constructor.elem(c$1);
		} else if ($assertType(_ref, YCbCr, true)[1]) {
			c$2 = $clone(_ref.$val, YCbCr);
			$s = -1; return (x = new NYCbCrA.ptr($clone(c$2, YCbCr), 255), new x.constructor.elem(x));
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		if (!((a === 0))) {
			r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		_tuple$1 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$1[0];
		u = _tuple$1[1];
		v = _tuple$1[2];
		$s = -1; return (x$1 = new NYCbCrA.ptr(new YCbCr.ptr(y, u, v), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$1.constructor.elem(x$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nYCbCrAModel }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.g = g; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBToCMYK = function(r, g, b) {
		var $ptr, _q, _q$1, _q$2, b, bb, c, g, gg, m, r, rr, w, y;
		rr = ((r >>> 0));
		gg = ((g >>> 0));
		bb = ((b >>> 0));
		w = rr;
		if (w < gg) {
			w = gg;
		}
		if (w < bb) {
			w = bb;
		}
		if (w === 0) {
			return [0, 0, 0, 255];
		}
		c = (_q = ($imul(((w - rr >>> 0)), 255) >>> 0) / w, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		m = (_q$1 = ($imul(((w - gg >>> 0)), 255) >>> 0) / w, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		y = (_q$2 = ($imul(((w - bb >>> 0)), 255) >>> 0) / w, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [((c << 24 >>> 24)), ((m << 24 >>> 24)), ((y << 24 >>> 24)), (((255 - w >>> 0) << 24 >>> 24))];
	};
	$pkg.RGBToCMYK = RGBToCMYK;
	CMYKToRGB = function(c, m, y, k) {
		var $ptr, _q, _q$1, _q$2, b, c, g, k, m, r, w, y;
		w = 65535 - ($imul(((k >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((m >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [(((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24))];
	};
	$pkg.CMYKToRGB = CMYKToRGB;
	CMYK.ptr.prototype.RGBA = function() {
		var $ptr, _q, _q$1, _q$2, b, c, g, r, w;
		c = this;
		w = 65535 - ($imul(((c.K >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c.C >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((c.M >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((c.Y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [r, g, b, 65535];
	};
	CMYK.prototype.RGBA = function() { return this.$val.RGBA(); };
	cmykModel = function(c) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, b, c, cc, g, kk, mm, ok, r, x, yy, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; cc = $f.cc; g = $f.g; kk = $f.kk; mm = $f.mm; ok = $f.ok; r = $f.r; x = $f.x; yy = $f.yy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, CMYK, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToCMYK((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		cc = _tuple$2[0];
		mm = _tuple$2[1];
		yy = _tuple$2[2];
		kk = _tuple$2[3];
		$s = -1; return (x = new CMYK.ptr(cc, mm, yy, kk), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: cmykModel }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.cc = cc; $f.g = g; $f.kk = kk; $f.mm = mm; $f.ok = ok; $f.r = r; $f.x = x; $f.yy = yy; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	RGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	ptrType.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}];
	Palette.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([Color], [$Int], false)}];
	YCbCr.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NYCbCrA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	CMYK.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Color.init([{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}]);
	RGBA.init("", [{prop: "R", name: "R", exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint8, tag: ""}]);
	RGBA64.init("", [{prop: "R", name: "R", exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint16, tag: ""}]);
	NRGBA.init("", [{prop: "R", name: "R", exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint8, tag: ""}]);
	NRGBA64.init("", [{prop: "R", name: "R", exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint16, tag: ""}]);
	Alpha.init("", [{prop: "A", name: "A", exported: true, typ: $Uint8, tag: ""}]);
	Alpha16.init("", [{prop: "A", name: "A", exported: true, typ: $Uint16, tag: ""}]);
	Gray.init("", [{prop: "Y", name: "Y", exported: true, typ: $Uint8, tag: ""}]);
	Gray16.init("", [{prop: "Y", name: "Y", exported: true, typ: $Uint16, tag: ""}]);
	Model.init([{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}]);
	modelFunc.init("image/color", [{prop: "f", name: "f", exported: false, typ: funcType, tag: ""}]);
	Palette.init(Color);
	YCbCr.init("", [{prop: "Y", name: "Y", exported: true, typ: $Uint8, tag: ""}, {prop: "Cb", name: "Cb", exported: true, typ: $Uint8, tag: ""}, {prop: "Cr", name: "Cr", exported: true, typ: $Uint8, tag: ""}]);
	NYCbCrA.init("", [{prop: "YCbCr", name: "", exported: true, typ: YCbCr, tag: ""}, {prop: "A", name: "A", exported: true, typ: $Uint8, tag: ""}]);
	CMYK.init("", [{prop: "C", name: "C", exported: true, typ: $Uint8, tag: ""}, {prop: "M", name: "M", exported: true, typ: $Uint8, tag: ""}, {prop: "Y", name: "Y", exported: true, typ: $Uint8, tag: ""}, {prop: "K", name: "K", exported: true, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.RGBAModel = ModelFunc(rgbaModel);
		$pkg.RGBA64Model = ModelFunc(rgba64Model);
		$pkg.NRGBAModel = ModelFunc(nrgbaModel);
		$pkg.NRGBA64Model = ModelFunc(nrgba64Model);
		$pkg.AlphaModel = ModelFunc(alphaModel);
		$pkg.Alpha16Model = ModelFunc(alpha16Model);
		$pkg.GrayModel = ModelFunc(grayModel);
		$pkg.Gray16Model = ModelFunc(gray16Model);
		$pkg.Black = new Gray16.ptr(0);
		$pkg.White = new Gray16.ptr(65535);
		$pkg.Transparent = new Alpha16.ptr(0);
		$pkg.Opaque = new Alpha16.ptr(65535);
		$pkg.YCbCrModel = ModelFunc(yCbCrModel);
		$pkg.NYCbCrAModel = ModelFunc(nYCbCrAModel);
		$pkg.CMYKModel = ModelFunc(cmykModel);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image"] = (function() {
	var $pkg = {}, $init, bufio, errors, color, io, strconv, format, Point, Rectangle, Config, Image, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, CMYK, Paletted, Uniform, YCbCrSubsampleRatio, YCbCr, sliceType, sliceType$1, arrayType, funcType, funcType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, formats, x, x$1, x$2, x$3, RegisterFormat, Rect, NewRGBA, NewRGBA64, NewNRGBA, NewNRGBA64, NewAlpha, NewGray, NewGray16, NewPaletted, NewUniform;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	format = $pkg.format = $newType(0, $kindStruct, "image.format", true, "image", false, function(name_, magic_, decode_, decodeConfig_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.magic = "";
			this.decode = $throwNilPointerError;
			this.decodeConfig = $throwNilPointerError;
			return;
		}
		this.name = name_;
		this.magic = magic_;
		this.decode = decode_;
		this.decodeConfig = decodeConfig_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "image.Point", true, "image", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle = $pkg.Rectangle = $newType(0, $kindStruct, "image.Rectangle", true, "image", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point.ptr(0, 0);
			this.Max = new Point.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	Config = $pkg.Config = $newType(0, $kindStruct, "image.Config", true, "image", true, function(ColorModel_, Width_, Height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ColorModel = $ifaceNil;
			this.Width = 0;
			this.Height = 0;
			return;
		}
		this.ColorModel = ColorModel_;
		this.Width = Width_;
		this.Height = Height_;
	});
	Image = $pkg.Image = $newType(8, $kindInterface, "image.Image", true, "image", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "image.RGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "image.RGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "image.NRGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "image.NRGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "image.Alpha", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "image.Alpha16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "image.Gray", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "image.Gray16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "image.CMYK", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Paletted = $pkg.Paletted = $newType(0, $kindStruct, "image.Paletted", true, "image", true, function(Pix_, Stride_, Rect_, Palette_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			this.Palette = color.Palette.nil;
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
		this.Palette = Palette_;
	});
	Uniform = $pkg.Uniform = $newType(0, $kindStruct, "image.Uniform", true, "image", true, function(C_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $ifaceNil;
			return;
		}
		this.C = C_;
	});
	YCbCrSubsampleRatio = $pkg.YCbCrSubsampleRatio = $newType(4, $kindInt, "image.YCbCrSubsampleRatio", true, "image", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "image.YCbCr", true, "image", true, function(Y_, Cb_, Cr_, YStride_, CStride_, SubsampleRatio_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = sliceType$1.nil;
			this.Cb = sliceType$1.nil;
			this.Cr = sliceType$1.nil;
			this.YStride = 0;
			this.CStride = 0;
			this.SubsampleRatio = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
		this.YStride = YStride_;
		this.CStride = CStride_;
		this.SubsampleRatio = SubsampleRatio_;
		this.Rect = Rect_;
	});
	sliceType = $sliceType(format);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Bool, 256);
	funcType = $funcType([io.Reader], [Image, $error], false);
	funcType$1 = $funcType([io.Reader], [Config, $error], false);
	ptrType = $ptrType(RGBA);
	ptrType$1 = $ptrType(RGBA64);
	ptrType$2 = $ptrType(NRGBA);
	ptrType$3 = $ptrType(NRGBA64);
	ptrType$4 = $ptrType(Alpha);
	ptrType$5 = $ptrType(Alpha16);
	ptrType$6 = $ptrType(Gray);
	ptrType$7 = $ptrType(Gray16);
	ptrType$8 = $ptrType(CMYK);
	ptrType$9 = $ptrType(Paletted);
	ptrType$10 = $ptrType(Uniform);
	ptrType$11 = $ptrType(YCbCr);
	RegisterFormat = function(name, magic, decode, decodeConfig) {
		var $ptr, decode, decodeConfig, magic, name;
		formats = $append(formats, new format.ptr(name, magic, decode, decodeConfig));
	};
	$pkg.RegisterFormat = RegisterFormat;
	Point.ptr.prototype.String = function() {
		var $ptr, p;
		p = this;
		return "(" + strconv.Itoa(p.X) + "," + strconv.Itoa(p.Y) + ")";
	};
	Point.prototype.String = function() { return this.$val.String(); };
	Point.ptr.prototype.Add = function(q) {
		var $ptr, p, q;
		p = this;
		return new Point.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point.prototype.Add = function(q) { return this.$val.Add(q); };
	Point.ptr.prototype.Sub = function(q) {
		var $ptr, p, q;
		p = this;
		return new Point.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point.ptr.prototype.Mul = function(k) {
		var $ptr, k, p;
		p = this;
		return new Point.ptr($imul(p.X, k), $imul(p.Y, k));
	};
	Point.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point.ptr.prototype.Div = function(k) {
		var $ptr, _q, _q$1, k, p;
		p = this;
		return new Point.ptr((_q = p.X / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = p.Y / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point.prototype.Div = function(k) { return this.$val.Div(k); };
	Point.ptr.prototype.In = function(r) {
		var $ptr, p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point.prototype.In = function(r) { return this.$val.In(r); };
	Point.ptr.prototype.Mod = function(r) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, h, p, r, w;
		p = this;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		Point.copy(p, $clone(p, Point).Sub($clone(r.Min, Point)));
		p.X = (_r = p.X % w, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (p.X < 0) {
			p.X = p.X + (w) >> 0;
		}
		p.Y = (_r$1 = p.Y % h, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (p.Y < 0) {
			p.Y = p.Y + (h) >> 0;
		}
		return $clone(p, Point).Add($clone(r.Min, Point));
	};
	Point.prototype.Mod = function(r) { return this.$val.Mod(r); };
	Point.ptr.prototype.Eq = function(q) {
		var $ptr, p, q;
		p = this;
		return $equal(p, q, Point);
	};
	Point.prototype.Eq = function(q) { return this.$val.Eq(q); };
	Rectangle.ptr.prototype.String = function() {
		var $ptr, r;
		r = this;
		return $clone(r.Min, Point).String() + "-" + $clone(r.Max, Point).String();
	};
	Rectangle.prototype.String = function() { return this.$val.String(); };
	Rectangle.ptr.prototype.Dx = function() {
		var $ptr, r;
		r = this;
		return r.Max.X - r.Min.X >> 0;
	};
	Rectangle.prototype.Dx = function() { return this.$val.Dx(); };
	Rectangle.ptr.prototype.Dy = function() {
		var $ptr, r;
		r = this;
		return r.Max.Y - r.Min.Y >> 0;
	};
	Rectangle.prototype.Dy = function() { return this.$val.Dy(); };
	Rectangle.ptr.prototype.Size = function() {
		var $ptr, r;
		r = this;
		return new Point.ptr(r.Max.X - r.Min.X >> 0, r.Max.Y - r.Min.Y >> 0);
	};
	Rectangle.prototype.Size = function() { return this.$val.Size(); };
	Rectangle.ptr.prototype.Add = function(p) {
		var $ptr, p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle.ptr.prototype.Sub = function(p) {
		var $ptr, p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle.ptr.prototype.Inset = function(n) {
		var $ptr, _q, _q$1, n, r;
		r = this;
		if ($clone(r, Rectangle).Dx() < ($imul(2, n))) {
			r.Min.X = (_q = ((r.Min.X + r.Max.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.X = r.Min.X;
		} else {
			r.Min.X = r.Min.X + (n) >> 0;
			r.Max.X = r.Max.X - (n) >> 0;
		}
		if ($clone(r, Rectangle).Dy() < ($imul(2, n))) {
			r.Min.Y = (_q$1 = ((r.Min.Y + r.Max.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.Y = r.Min.Y;
		} else {
			r.Min.Y = r.Min.Y + (n) >> 0;
			r.Max.Y = r.Max.Y - (n) >> 0;
		}
		return r;
	};
	Rectangle.prototype.Inset = function(n) { return this.$val.Inset(n); };
	Rectangle.ptr.prototype.Intersect = function(s) {
		var $ptr, r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if (r.Min.X > r.Max.X || r.Min.Y > r.Max.Y) {
			return $pkg.ZR;
		}
		return r;
	};
	Rectangle.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle.ptr.prototype.Union = function(s) {
		var $ptr, r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle.ptr.prototype.Empty = function() {
		var $ptr, r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle.ptr.prototype.Eq = function(s) {
		var $ptr, r, s;
		r = this;
		return $equal(r, s, Rectangle) || $clone(r, Rectangle).Empty() && $clone(s, Rectangle).Empty();
	};
	Rectangle.prototype.Eq = function(s) { return this.$val.Eq(s); };
	Rectangle.ptr.prototype.Overlaps = function(s) {
		var $ptr, r, s;
		r = this;
		return !$clone(r, Rectangle).Empty() && !$clone(s, Rectangle).Empty() && r.Min.X < s.Max.X && s.Min.X < r.Max.X && r.Min.Y < s.Max.Y && s.Min.Y < r.Max.Y;
	};
	Rectangle.prototype.Overlaps = function(s) { return this.$val.Overlaps(s); };
	Rectangle.ptr.prototype.In = function(s) {
		var $ptr, r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle.prototype.In = function(s) { return this.$val.In(s); };
	Rectangle.ptr.prototype.Canon = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, r;
		r = this;
		if (r.Max.X < r.Min.X) {
			_tmp = r.Max.X;
			_tmp$1 = r.Min.X;
			r.Min.X = _tmp;
			r.Max.X = _tmp$1;
		}
		if (r.Max.Y < r.Min.Y) {
			_tmp$2 = r.Max.Y;
			_tmp$3 = r.Min.Y;
			r.Min.Y = _tmp$2;
			r.Max.Y = _tmp$3;
		}
		return r;
	};
	Rectangle.prototype.Canon = function() { return this.$val.Canon(); };
	Rectangle.ptr.prototype.At = function(x$4, y) {
		var $ptr, r, x$4, x$5, x$6, y;
		r = this;
		if ($clone((new Point.ptr(x$4, y)), Point).In($clone(r, Rectangle))) {
			return (x$5 = color.Opaque, new x$5.constructor.elem(x$5));
		}
		return (x$6 = color.Transparent, new x$6.constructor.elem(x$6));
	};
	Rectangle.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Rectangle.ptr.prototype.Bounds = function() {
		var $ptr, r;
		r = this;
		return r;
	};
	Rectangle.prototype.Bounds = function() { return this.$val.Bounds(); };
	Rectangle.ptr.prototype.ColorModel = function() {
		var $ptr, r;
		r = this;
		return color.Alpha16Model;
	};
	Rectangle.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Rect = function(x0, y0, x1, y1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, x0, x1, y0, y1;
		if (x0 > x1) {
			_tmp = x1;
			_tmp$1 = x0;
			x0 = _tmp;
			x1 = _tmp$1;
		}
		if (y0 > y1) {
			_tmp$2 = y1;
			_tmp$3 = y0;
			y0 = _tmp$2;
			y1 = _tmp$3;
		}
		return new Rectangle.ptr(new Point.ptr(x0, y0), new Point.ptr(x1, y1));
	};
	$pkg.Rect = Rect;
	RGBA.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.RGBAModel;
	};
	RGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	RGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA.ptr.prototype.RGBAAt = function(x$4, y) {
		var $ptr, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	RGBA.prototype.RGBAAt = function(x$4, y) { return this.$val.RGBAAt(x$4, y); };
	RGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	RGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA), color.RGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA.ptr.prototype.SetRGBA = function(x$4, y, c) {
		var $ptr, c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	RGBA.prototype.SetRGBA = function(x$4, y, c) { return this.$val.SetRGBA(x$4, y, c); };
	RGBA.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA = function(r) {
		var $ptr, _tmp, _tmp$1, buf, h, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		buf = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new RGBA.ptr(buf, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA = NewRGBA;
	RGBA64.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.RGBA64Model;
	};
	RGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA64.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	RGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA64.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA64.ptr.prototype.RGBA64At = function(x$4, y) {
		var $ptr, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	RGBA64.prototype.RGBA64At = function(x$4, y) { return this.$val.RGBA64At(x$4, y); };
	RGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	RGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA64), color.RGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA64.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA64.ptr.prototype.SetRGBA64 = function(x$4, y, c) {
		var $ptr, c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	RGBA64.prototype.SetRGBA64 = function(x$4, y, c) { return this.$val.SetRGBA64(x$4, y, c); };
	RGBA64.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA64.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA64 = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new RGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA64 = NewRGBA64;
	NRGBA.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.NRGBAModel;
	};
	NRGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	NRGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA.ptr.prototype.NRGBAAt = function(x$4, y) {
		var $ptr, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	NRGBA.prototype.NRGBAAt = function(x$4, y) { return this.$val.NRGBAAt(x$4, y); };
	NRGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	NRGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA), color.NRGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA.ptr.prototype.SetNRGBA = function(x$4, y, c) {
		var $ptr, c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	NRGBA.prototype.SetNRGBA = function(x$4, y, c) { return this.$val.SetNRGBA(x$4, y, c); };
	NRGBA.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new NRGBA.ptr(pix, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA = NewNRGBA;
	NRGBA64.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.NRGBA64Model;
	};
	NRGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA64.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	NRGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA64.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA64.ptr.prototype.NRGBA64At = function(x$4, y) {
		var $ptr, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	NRGBA64.prototype.NRGBA64At = function(x$4, y) { return this.$val.NRGBA64At(x$4, y); };
	NRGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	NRGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA64), color.NRGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA64.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA64.ptr.prototype.SetNRGBA64 = function(x$4, y, c) {
		var $ptr, c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	NRGBA64.prototype.SetNRGBA64 = function(x$4, y, c) { return this.$val.SetNRGBA64(x$4, y, c); };
	NRGBA64.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA64.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA64 = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new NRGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA64 = NewNRGBA64;
	Alpha.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.AlphaModel;
	};
	Alpha.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	Alpha.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.AlphaAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha.ptr.prototype.AlphaAt = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Alpha.prototype.AlphaAt = function(x$4, y) { return this.$val.AlphaAt(x$4, y); };
	Alpha.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Alpha.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.AlphaModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Alpha).A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha.ptr.prototype.SetAlpha = function(x$4, y, c) {
		var $ptr, c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.A));
	};
	Alpha.prototype.SetAlpha = function(x$4, y, c) { return this.$val.SetAlpha(x$4, y, c); };
	Alpha.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewAlpha = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Alpha.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewAlpha = NewAlpha;
	Alpha16.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.Alpha16Model;
	};
	Alpha16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha16.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	Alpha16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha16.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Alpha16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha16.ptr.prototype.Alpha16At = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Alpha16.prototype.Alpha16At = function(x$4, y) { return this.$val.Alpha16At(x$4, y); };
	Alpha16.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Alpha16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha16.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Alpha16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Alpha16), color.Alpha16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha16.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha16.ptr.prototype.SetAlpha16 = function(x$4, y, c) {
		var $ptr, c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.A << 24 >>> 24))));
	};
	Alpha16.prototype.SetAlpha16 = function(x$4, y, c) { return this.$val.SetAlpha16(x$4, y, c); };
	Alpha16.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha16.ptr.prototype.Opaque = function() {
		var $ptr, _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 2);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (2) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha16.prototype.Opaque = function() { return this.$val.Opaque(); };
	Gray.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.GrayModel;
	};
	Gray.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	Gray.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.GrayAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray.ptr.prototype.GrayAt = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Gray.prototype.GrayAt = function(x$4, y) { return this.$val.GrayAt(x$4, y); };
	Gray.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Gray.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.GrayModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Gray).Y));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray.ptr.prototype.SetGray = function(x$4, y, c) {
		var $ptr, c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.Y));
	};
	Gray.prototype.SetGray = function(x$4, y, c) { return this.$val.SetGray(x$4, y, c); };
	Gray.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray.ptr.prototype.Opaque = function() {
		var $ptr, p;
		p = this;
		return true;
	};
	Gray.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Gray.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewGray = NewGray;
	Gray16.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.Gray16Model;
	};
	Gray16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray16.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	Gray16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray16.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Gray16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray16.ptr.prototype.Gray16At = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Gray16.prototype.Gray16At = function(x$4, y) { return this.$val.Gray16At(x$4, y); };
	Gray16.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Gray16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray16.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Gray16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Gray16), color.Gray16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.Y << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray16.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray16.ptr.prototype.SetGray16 = function(x$4, y, c) {
		var $ptr, c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.Y << 24 >>> 24))));
	};
	Gray16.prototype.SetGray16 = function(x$4, y, c) { return this.$val.SetGray16(x$4, y, c); };
	Gray16.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray16.ptr.prototype.Opaque = function() {
		var $ptr, p;
		p = this;
		return true;
	};
	Gray16.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray16 = function(r) {
		var $ptr, _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(2, w)), h)));
		return new Gray16.ptr(pix, $imul(2, w), $clone(r, Rectangle));
	};
	$pkg.NewGray16 = NewGray16;
	CMYK.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.CMYKModel;
	};
	CMYK.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	CMYK.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	CMYK.prototype.Bounds = function() { return this.$val.Bounds(); };
	CMYK.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.CMYKAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	CMYK.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	CMYK.ptr.prototype.CMYKAt = function(x$4, y) {
		var $ptr, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.CMYK.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.CMYK.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	CMYK.prototype.CMYKAt = function(x$4, y) { return this.$val.CMYKAt(x$4, y); };
	CMYK.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	CMYK.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	CMYK.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.CMYKModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.CMYK), color.CMYK);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.K));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CMYK.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	CMYK.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	CMYK.ptr.prototype.SetCMYK = function(x$4, y, c) {
		var $ptr, c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.K));
	};
	CMYK.prototype.SetCMYK = function(x$4, y, c) { return this.$val.SetCMYK(x$4, y, c); };
	CMYK.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new CMYK.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new CMYK.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	CMYK.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	CMYK.ptr.prototype.Opaque = function() {
		var $ptr, p;
		p = this;
		return true;
	};
	CMYK.prototype.Opaque = function() { return this.$val.Opaque(); };
	Paletted.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return p.Palette;
	};
	Paletted.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Paletted.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	Paletted.prototype.Bounds = function() { return this.$val.Bounds(); };
	Paletted.ptr.prototype.At = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (p.Palette.$length === 0) {
			return $ifaceNil;
		}
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return (x$5 = p.Palette, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]));
		}
		i = p.PixOffset(x$4, y);
		return (x$6 = p.Palette, x$7 = (x$8 = p.Pix, ((i < 0 || i >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + i])), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
	};
	Paletted.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Paletted.ptr.prototype.PixOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Paletted.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Paletted.ptr.prototype.Set = function(x$4, y, c) {
		var $ptr, _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = p.Palette.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = ((_r << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Paletted.ptr.prototype.ColorIndexAt = function(x$4, y) {
		var $ptr, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return 0;
		}
		i = p.PixOffset(x$4, y);
		return (x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
	};
	Paletted.prototype.ColorIndexAt = function(x$4, y) { return this.$val.ColorIndexAt(x$4, y); };
	Paletted.ptr.prototype.SetColorIndex = function(x$4, y, index) {
		var $ptr, i, index, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = index));
	};
	Paletted.prototype.SetColorIndex = function(x$4, y, index) { return this.$val.SetColorIndex(x$4, y, index); };
	Paletted.ptr.prototype.SubImage = function(r) {
		var $ptr, i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Paletted.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)), p.Palette);
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Paletted.ptr($subslice(p.Pix, i), p.Stride, $clone($clone(p.Rect, Rectangle).Intersect($clone(r, Rectangle)), Rectangle), p.Palette);
	};
	Paletted.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Paletted.ptr.prototype.Opaque = function() {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, a, c, c$1, i, i0, i1, p, present, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; a = $f.a; c = $f.c; c$1 = $f.c$1; i = $f.i; i0 = $f.i0; i1 = $f.i1; p = $f.p; present = $f.present; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		present = arrayType.zero();
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			_ref = $subslice(p.Pix, i0, i1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((c < 0 || c >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[c] = true);
				_i++;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		_ref$1 = p.Palette;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { */ case 3:
				_i$1++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = c$1.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			a = _tuple[3];
			if (!((a === 65535))) {
				$s = -1; return false;
			}
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Opaque }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.p = p; $f.present = present; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewPaletted = function(r, p) {
		var $ptr, _tmp, _tmp$1, h, p, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Paletted.ptr(pix, $imul(1, w), $clone(r, Rectangle), p);
	};
	$pkg.NewPaletted = NewPaletted;
	Uniform.ptr.prototype.RGBA = function() {
		var $ptr, _r, _tuple, a, b, c, g, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; c = $f.c; g = $f.g; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		$s = -1; return [r, g, b, a];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.RGBA }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.RGBA = function() { return this.$val.RGBA(); };
	Uniform.ptr.prototype.ColorModel = function() {
		var $ptr, c;
		c = this;
		return c;
	};
	Uniform.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Uniform.ptr.prototype.Convert = function(param) {
		var $ptr, c, param;
		c = this;
		return c.C;
	};
	Uniform.prototype.Convert = function(param) { return this.$val.Convert(param); };
	Uniform.ptr.prototype.Bounds = function() {
		var $ptr, c;
		c = this;
		return new Rectangle.ptr(new Point.ptr(-1000000000, -1000000000), new Point.ptr(1000000000, 1000000000));
	};
	Uniform.prototype.Bounds = function() { return this.$val.Bounds(); };
	Uniform.ptr.prototype.At = function(x$4, y) {
		var $ptr, c, x$4, y;
		c = this;
		return c.C;
	};
	Uniform.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Uniform.ptr.prototype.Opaque = function() {
		var $ptr, _r, _tuple, a, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[3];
		$s = -1; return a === 65535;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.Opaque }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewUniform = function(c) {
		var $ptr, c;
		return new Uniform.ptr(c);
	};
	$pkg.NewUniform = NewUniform;
	YCbCrSubsampleRatio.prototype.String = function() {
		var $ptr, _1, s;
		s = this.$val;
		_1 = s;
		if (_1 === (0)) {
			return "YCbCrSubsampleRatio444";
		} else if (_1 === (1)) {
			return "YCbCrSubsampleRatio422";
		} else if (_1 === (2)) {
			return "YCbCrSubsampleRatio420";
		} else if (_1 === (3)) {
			return "YCbCrSubsampleRatio440";
		} else if (_1 === (4)) {
			return "YCbCrSubsampleRatio411";
		} else if (_1 === (5)) {
			return "YCbCrSubsampleRatio410";
		}
		return "YCbCrSubsampleRatioUnknown";
	};
	$ptrType(YCbCrSubsampleRatio).prototype.String = function() { return new YCbCrSubsampleRatio(this.$get()).String(); };
	YCbCr.ptr.prototype.ColorModel = function() {
		var $ptr, p;
		p = this;
		return color.YCbCrModel;
	};
	YCbCr.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	YCbCr.ptr.prototype.Bounds = function() {
		var $ptr, p;
		p = this;
		return p.Rect;
	};
	YCbCr.prototype.Bounds = function() { return this.$val.Bounds(); };
	YCbCr.ptr.prototype.At = function(x$4, y) {
		var $ptr, p, x$4, x$5, y;
		p = this;
		return (x$5 = p.YCbCrAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	YCbCr.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	YCbCr.ptr.prototype.YCbCrAt = function(x$4, y) {
		var $ptr, ci, p, x$4, x$5, x$6, x$7, y, yi;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.YCbCr.ptr(0, 0, 0);
		}
		yi = p.YOffset(x$4, y);
		ci = p.COffset(x$4, y);
		return new color.YCbCr.ptr((x$5 = p.Y, ((yi < 0 || yi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi])), (x$6 = p.Cb, ((ci < 0 || ci >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci])), (x$7 = p.Cr, ((ci < 0 || ci >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci])));
	};
	YCbCr.prototype.YCbCrAt = function(x$4, y) { return this.$val.YCbCrAt(x$4, y); };
	YCbCr.ptr.prototype.YOffset = function(x$4, y) {
		var $ptr, p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.YStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.YOffset = function(x$4, y) { return this.$val.YOffset(x$4, y); };
	YCbCr.ptr.prototype.COffset = function(x$4, y) {
		var $ptr, _1, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, p, x$4, y;
		p = this;
		_1 = p.SubsampleRatio;
		if (_1 === (1)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q = x$4 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$1 = p.Rect.Min.X / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (2)) {
			return ($imul((((_q$2 = y / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = p.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$4 = x$4 / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$5 = p.Rect.Min.X / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (3)) {
			return ($imul((((_q$6 = y / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = p.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
		} else if (_1 === (4)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q$8 = x$4 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$9 = p.Rect.Min.X / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (5)) {
			return ($imul((((_q$10 = y / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$11 = p.Rect.Min.Y / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$12 = x$4 / 4, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$13 = p.Rect.Min.X / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		}
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.COffset = function(x$4, y) { return this.$val.COffset(x$4, y); };
	YCbCr.ptr.prototype.SubImage = function(r) {
		var $ptr, ci, p, r, yi;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new YCbCr.ptr(sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, 0, 0, p.SubsampleRatio, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		yi = p.YOffset(r.Min.X, r.Min.Y);
		ci = p.COffset(r.Min.X, r.Min.Y);
		return new YCbCr.ptr($subslice(p.Y, yi), $subslice(p.Cb, ci), $subslice(p.Cr, ci), p.YStride, p.CStride, p.SubsampleRatio, $clone(r, Rectangle));
	};
	YCbCr.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	YCbCr.ptr.prototype.Opaque = function() {
		var $ptr, p;
		p = this;
		return true;
	};
	YCbCr.prototype.Opaque = function() { return this.$val.Opaque(); };
	Point.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([Rectangle], [Point], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Point], [$Bool], false)}];
	Rectangle.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dx", name: "Dx", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dy", name: "Dy", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [Point], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Inset", name: "Inset", pkg: "", typ: $funcType([$Int], [Rectangle], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Overlaps", name: "Overlaps", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Canon", name: "Canon", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}];
	ptrType.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBAAt", name: "RGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA", name: "SetRGBA", pkg: "", typ: $funcType([$Int, $Int, color.RGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBA64At", name: "RGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA64", name: "SetRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.RGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBAAt", name: "NRGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA", name: "SetNRGBA", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBA64At", name: "NRGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA64", name: "SetNRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "AlphaAt", name: "AlphaAt", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha", name: "SetAlpha", pkg: "", typ: $funcType([$Int, $Int, color.Alpha], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$5.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Alpha16At", name: "Alpha16At", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha16", name: "SetAlpha16", pkg: "", typ: $funcType([$Int, $Int, color.Alpha16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "GrayAt", name: "GrayAt", pkg: "", typ: $funcType([$Int, $Int], [color.Gray], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray", name: "SetGray", pkg: "", typ: $funcType([$Int, $Int, color.Gray], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Gray16At", name: "Gray16At", pkg: "", typ: $funcType([$Int, $Int], [color.Gray16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray16", name: "SetGray16", pkg: "", typ: $funcType([$Int, $Int, color.Gray16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "CMYKAt", name: "CMYKAt", pkg: "", typ: $funcType([$Int, $Int], [color.CMYK], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetCMYK", name: "SetCMYK", pkg: "", typ: $funcType([$Int, $Int, color.CMYK], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "ColorIndexAt", name: "ColorIndexAt", pkg: "", typ: $funcType([$Int, $Int], [$Uint8], false)}, {prop: "SetColorIndex", name: "SetColorIndex", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	YCbCrSubsampleRatio.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "YCbCrAt", name: "YCbCrAt", pkg: "", typ: $funcType([$Int, $Int], [color.YCbCr], false)}, {prop: "YOffset", name: "YOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "COffset", name: "COffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	format.init("image", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "magic", name: "magic", exported: false, typ: $String, tag: ""}, {prop: "decode", name: "decode", exported: false, typ: funcType, tag: ""}, {prop: "decodeConfig", name: "decodeConfig", exported: false, typ: funcType$1, tag: ""}]);
	Point.init("", [{prop: "X", name: "X", exported: true, typ: $Int, tag: ""}, {prop: "Y", name: "Y", exported: true, typ: $Int, tag: ""}]);
	Rectangle.init("", [{prop: "Min", name: "Min", exported: true, typ: Point, tag: ""}, {prop: "Max", name: "Max", exported: true, typ: Point, tag: ""}]);
	Config.init("", [{prop: "ColorModel", name: "ColorModel", exported: true, typ: color.Model, tag: ""}, {prop: "Width", name: "Width", exported: true, typ: $Int, tag: ""}, {prop: "Height", name: "Height", exported: true, typ: $Int, tag: ""}]);
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}]);
	RGBA.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	RGBA64.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	NRGBA.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	NRGBA64.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	Alpha.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	Alpha16.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	Gray.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	Gray16.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	CMYK.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	Paletted.init("", [{prop: "Pix", name: "Pix", exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}, {prop: "Palette", name: "Palette", exported: true, typ: color.Palette, tag: ""}]);
	Uniform.init("", [{prop: "C", name: "C", exported: true, typ: color.Color, tag: ""}]);
	YCbCr.init("", [{prop: "Y", name: "Y", exported: true, typ: sliceType$1, tag: ""}, {prop: "Cb", name: "Cb", exported: true, typ: sliceType$1, tag: ""}, {prop: "Cr", name: "Cr", exported: true, typ: sliceType$1, tag: ""}, {prop: "YStride", name: "YStride", exported: true, typ: $Int, tag: ""}, {prop: "CStride", name: "CStride", exported: true, typ: $Int, tag: ""}, {prop: "SubsampleRatio", name: "SubsampleRatio", exported: true, typ: YCbCrSubsampleRatio, tag: ""}, {prop: "Rect", name: "Rect", exported: true, typ: Rectangle, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		formats = sliceType.nil;
		$pkg.ZR = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
		$pkg.ErrFormat = errors.New("image: unknown format");
		$pkg.Black = NewUniform((x = color.Black, new x.constructor.elem(x)));
		$pkg.White = NewUniform((x$1 = color.White, new x$1.constructor.elem(x$1)));
		$pkg.Transparent = NewUniform((x$2 = color.Transparent, new x$2.constructor.elem(x$2)));
		$pkg.Opaque = NewUniform((x$3 = color.Opaque, new x$3.constructor.elem(x$3)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/internal/imageutil"] = (function() {
	var $pkg = {}, $init, image, DrawYCbCr;
	image = $packages["image"];
	DrawYCbCr = function(dst, r, src, sp) {
		var $ptr, _1, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, b$1, b$2, b$3, cb1, cb1$1, cb1$2, cb1$3, ci, ci$1, ci$2, ci$3, ciBase, ciBase$1, cr1, cr1$1, cr1$2, cr1$3, dpix, dpix$1, dpix$2, dpix$3, dst, g, g$1, g$2, g$3, ok, r, r$1, r$2, r$3, r$4, rgba, rgba$1, rgba$2, rgba$3, sp, src, sx, sx$1, sy, sy$1, sy$2, sy$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y$1, y$2, y$3, y0, y1, yi, yi$1, yi$2, yi$3, yy1, yy1$1, yy1$2, yy1$3;
		ok = false;
		x0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		x1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		y0 = r.Min.Y - dst.Rect.Min.Y >> 0;
		y1 = r.Max.Y - dst.Rect.Min.Y >> 0;
		_1 = src.SubsampleRatio;
		if (_1 === (0)) {
			_tmp = y0;
			_tmp$1 = sp.Y;
			y = _tmp;
			sy = _tmp$1;
			while (true) {
				if (!(!((y === y1)))) { break; }
				dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
				yi = ($imul(((sy - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci = ($imul(((sy - src.Rect.Min.Y >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x = x0;
				while (true) {
					if (!(!((x === x1)))) { break; }
					yy1 = $imul((((x$1 = src.Y, ((yi < 0 || yi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + yi])) >> 0)), 65792);
					cb1 = (((x$2 = src.Cb, ((ci < 0 || ci >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ci])) >> 0)) - 128 >> 0;
					cr1 = (((x$3 = src.Cr, ((ci < 0 || ci >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ci])) >> 0)) - 128 >> 0;
					r$1 = yy1 + ($imul(91881, cr1)) >> 0;
					if (((((r$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$1 = (r$1 >> $min((16), 31)) >> 0;
					} else {
						r$1 = ~((r$1 >> 31 >> 0)) >> 0;
					}
					g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
					if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
						g = (g >> $min((16), 31)) >> 0;
					} else {
						g = ~((g >> 31 >> 0)) >> 0;
					}
					b = yy1 + ($imul(116130, cb1)) >> 0;
					if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
						b = (b >> $min((16), 31)) >> 0;
					} else {
						b = ~((b >> 31 >> 0)) >> 0;
					}
					rgba = $subslice(dpix, x, (x + 4 >> 0), dpix.$length);
					(0 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 0] = ((r$1 << 24 >>> 24)));
					(1 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 1] = ((g << 24 >>> 24)));
					(2 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 2] = ((b << 24 >>> 24)));
					(3 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 3] = 255);
					_tmp$2 = x + 4 >> 0;
					_tmp$3 = yi + 1 >> 0;
					_tmp$4 = ci + 1 >> 0;
					x = _tmp$2;
					yi = _tmp$3;
					ci = _tmp$4;
				}
				_tmp$5 = y + 1 >> 0;
				_tmp$6 = sy + 1 >> 0;
				y = _tmp$5;
				sy = _tmp$6;
			}
		} else if (_1 === (1)) {
			_tmp$7 = y0;
			_tmp$8 = sp.Y;
			y$1 = _tmp$7;
			sy$1 = _tmp$8;
			while (true) {
				if (!(!((y$1 === y1)))) { break; }
				dpix$1 = $subslice(dst.Pix, ($imul(y$1, dst.Stride)));
				yi$1 = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.CStride)) - (_q = src.Rect.Min.X / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$9 = x0;
				_tmp$10 = sp.X;
				x$4 = _tmp$9;
				sx = _tmp$10;
				while (true) {
					if (!(!((x$4 === x1)))) { break; }
					ci$1 = ciBase + (_q$1 = sx / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$1 = $imul((((x$5 = src.Y, ((yi$1 < 0 || yi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi$1])) >> 0)), 65792);
					cb1$1 = (((x$6 = src.Cb, ((ci$1 < 0 || ci$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci$1])) >> 0)) - 128 >> 0;
					cr1$1 = (((x$7 = src.Cr, ((ci$1 < 0 || ci$1 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci$1])) >> 0)) - 128 >> 0;
					r$2 = yy1$1 + ($imul(91881, cr1$1)) >> 0;
					if (((((r$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$2 = (r$2 >> $min((16), 31)) >> 0;
					} else {
						r$2 = ~((r$2 >> 31 >> 0)) >> 0;
					}
					g$1 = (yy1$1 - ($imul(22554, cb1$1)) >> 0) - ($imul(46802, cr1$1)) >> 0;
					if (((((g$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$1 = (g$1 >> $min((16), 31)) >> 0;
					} else {
						g$1 = ~((g$1 >> 31 >> 0)) >> 0;
					}
					b$1 = yy1$1 + ($imul(116130, cb1$1)) >> 0;
					if (((((b$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$1 = (b$1 >> $min((16), 31)) >> 0;
					} else {
						b$1 = ~((b$1 >> 31 >> 0)) >> 0;
					}
					rgba$1 = $subslice(dpix$1, x$4, (x$4 + 4 >> 0), dpix$1.$length);
					(0 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 0] = ((r$2 << 24 >>> 24)));
					(1 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 1] = ((g$1 << 24 >>> 24)));
					(2 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 2] = ((b$1 << 24 >>> 24)));
					(3 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 3] = 255);
					_tmp$11 = x$4 + 4 >> 0;
					_tmp$12 = sx + 1 >> 0;
					_tmp$13 = yi$1 + 1 >> 0;
					x$4 = _tmp$11;
					sx = _tmp$12;
					yi$1 = _tmp$13;
				}
				_tmp$14 = y$1 + 1 >> 0;
				_tmp$15 = sy$1 + 1 >> 0;
				y$1 = _tmp$14;
				sy$1 = _tmp$15;
			}
		} else if (_1 === (2)) {
			_tmp$16 = y0;
			_tmp$17 = sp.Y;
			y$2 = _tmp$16;
			sy$2 = _tmp$17;
			while (true) {
				if (!(!((y$2 === y1)))) { break; }
				dpix$2 = $subslice(dst.Pix, ($imul(y$2, dst.Stride)));
				yi$2 = ($imul(((sy$2 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase$1 = ($imul((((_q$2 = sy$2 / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = src.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) - (_q$4 = src.Rect.Min.X / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$18 = x0;
				_tmp$19 = sp.X;
				x$8 = _tmp$18;
				sx$1 = _tmp$19;
				while (true) {
					if (!(!((x$8 === x1)))) { break; }
					ci$2 = ciBase$1 + (_q$5 = sx$1 / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$2 = $imul((((x$9 = src.Y, ((yi$2 < 0 || yi$2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + yi$2])) >> 0)), 65792);
					cb1$2 = (((x$10 = src.Cb, ((ci$2 < 0 || ci$2 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ci$2])) >> 0)) - 128 >> 0;
					cr1$2 = (((x$11 = src.Cr, ((ci$2 < 0 || ci$2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ci$2])) >> 0)) - 128 >> 0;
					r$3 = yy1$2 + ($imul(91881, cr1$2)) >> 0;
					if (((((r$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$3 = (r$3 >> $min((16), 31)) >> 0;
					} else {
						r$3 = ~((r$3 >> 31 >> 0)) >> 0;
					}
					g$2 = (yy1$2 - ($imul(22554, cb1$2)) >> 0) - ($imul(46802, cr1$2)) >> 0;
					if (((((g$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$2 = (g$2 >> $min((16), 31)) >> 0;
					} else {
						g$2 = ~((g$2 >> 31 >> 0)) >> 0;
					}
					b$2 = yy1$2 + ($imul(116130, cb1$2)) >> 0;
					if (((((b$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$2 = (b$2 >> $min((16), 31)) >> 0;
					} else {
						b$2 = ~((b$2 >> 31 >> 0)) >> 0;
					}
					rgba$2 = $subslice(dpix$2, x$8, (x$8 + 4 >> 0), dpix$2.$length);
					(0 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 0] = ((r$3 << 24 >>> 24)));
					(1 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 1] = ((g$2 << 24 >>> 24)));
					(2 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 2] = ((b$2 << 24 >>> 24)));
					(3 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 3] = 255);
					_tmp$20 = x$8 + 4 >> 0;
					_tmp$21 = sx$1 + 1 >> 0;
					_tmp$22 = yi$2 + 1 >> 0;
					x$8 = _tmp$20;
					sx$1 = _tmp$21;
					yi$2 = _tmp$22;
				}
				_tmp$23 = y$2 + 1 >> 0;
				_tmp$24 = sy$2 + 1 >> 0;
				y$2 = _tmp$23;
				sy$2 = _tmp$24;
			}
		} else if (_1 === (3)) {
			_tmp$25 = y0;
			_tmp$26 = sp.Y;
			y$3 = _tmp$25;
			sy$3 = _tmp$26;
			while (true) {
				if (!(!((y$3 === y1)))) { break; }
				dpix$3 = $subslice(dst.Pix, ($imul(y$3, dst.Stride)));
				yi$3 = ($imul(((sy$3 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci$3 = ($imul((((_q$6 = sy$3 / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = src.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x$12 = x0;
				while (true) {
					if (!(!((x$12 === x1)))) { break; }
					yy1$3 = $imul((((x$13 = src.Y, ((yi$3 < 0 || yi$3 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + yi$3])) >> 0)), 65792);
					cb1$3 = (((x$14 = src.Cb, ((ci$3 < 0 || ci$3 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + ci$3])) >> 0)) - 128 >> 0;
					cr1$3 = (((x$15 = src.Cr, ((ci$3 < 0 || ci$3 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + ci$3])) >> 0)) - 128 >> 0;
					r$4 = yy1$3 + ($imul(91881, cr1$3)) >> 0;
					if (((((r$4 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$4 = (r$4 >> $min((16), 31)) >> 0;
					} else {
						r$4 = ~((r$4 >> 31 >> 0)) >> 0;
					}
					g$3 = (yy1$3 - ($imul(22554, cb1$3)) >> 0) - ($imul(46802, cr1$3)) >> 0;
					if (((((g$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$3 = (g$3 >> $min((16), 31)) >> 0;
					} else {
						g$3 = ~((g$3 >> 31 >> 0)) >> 0;
					}
					b$3 = yy1$3 + ($imul(116130, cb1$3)) >> 0;
					if (((((b$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$3 = (b$3 >> $min((16), 31)) >> 0;
					} else {
						b$3 = ~((b$3 >> 31 >> 0)) >> 0;
					}
					rgba$3 = $subslice(dpix$3, x$12, (x$12 + 4 >> 0), dpix$3.$length);
					(0 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 0] = ((r$4 << 24 >>> 24)));
					(1 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 1] = ((g$3 << 24 >>> 24)));
					(2 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 2] = ((b$3 << 24 >>> 24)));
					(3 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 3] = 255);
					_tmp$27 = x$12 + 4 >> 0;
					_tmp$28 = yi$3 + 1 >> 0;
					_tmp$29 = ci$3 + 1 >> 0;
					x$12 = _tmp$27;
					yi$3 = _tmp$28;
					ci$3 = _tmp$29;
				}
				_tmp$30 = y$3 + 1 >> 0;
				_tmp$31 = sy$3 + 1 >> 0;
				y$3 = _tmp$30;
				sy$3 = _tmp$31;
			}
		} else {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	$pkg.DrawYCbCr = DrawYCbCr;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/draw"] = (function() {
	var $pkg = {}, $init, image, color, imageutil, Image, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, arrayType, sliceType, sliceType$1, clip, processBackward, Draw, DrawMask, drawFillOver, drawFillSrc, drawCopyOver, drawCopySrc, drawNRGBAOver, drawNRGBASrc, drawGray, drawCMYK, drawGlyphOver, drawRGBA, clamp, sqDiff, drawPaletted;
	image = $packages["image"];
	color = $packages["image/color"];
	imageutil = $packages["image/internal/imageutil"];
	Image = $pkg.Image = $newType(8, $kindInterface, "draw.Image", true, "image/draw", true, null);
	ptrType = $ptrType(image.Point);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.Uniform);
	ptrType$4 = $ptrType(image.NRGBA);
	ptrType$5 = $ptrType(image.YCbCr);
	ptrType$6 = $ptrType(image.Gray);
	ptrType$7 = $ptrType(image.CMYK);
	ptrType$8 = $ptrType(image.Alpha);
	ptrType$9 = $ptrType($Uint8);
	arrayType = $arrayType($Int32, 4);
	sliceType = $sliceType(arrayType);
	sliceType$1 = $sliceType($Uint8);
	clip = function(dst, r, src, sp, mask, mp) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, dst, dx, dy, mask, mp, orig, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; dst = $f.dst; dx = $f.dx; dy = $f.dy; mask = $f.mask; mp = $f.mp; orig = $f.orig; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		orig = $clone(r.Min, image.Point);
		_r = dst.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(r, image.Rectangle).Intersect($clone(_r, image.Rectangle)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$1);
		_r$2 = src.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(sp, image.Point)), image.Point)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(r, image.Rectangle).Intersect($clone(_r$3, image.Rectangle)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$4);
		/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 6:
			_r$5 = mask.Bounds(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = $clone(_r$5, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(mp, image.Point)), image.Point)); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(r, image.Rectangle).Intersect($clone(_r$6, image.Rectangle)); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			image.Rectangle.copy(r, _r$7);
		/* } */ case 7:
		dx = r.Min.X - orig.X >> 0;
		dy = r.Min.Y - orig.Y >> 0;
		if ((dx === 0) && (dy === 0)) {
			$s = -1; return;
		}
		sp.X = sp.X + (dx) >> 0;
		sp.Y = sp.Y + (dy) >> 0;
		if (!(mp === ptrType.nil)) {
			mp.X = mp.X + (dx) >> 0;
			mp.Y = mp.Y + (dy) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: clip }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.mask = mask; $f.mp = mp; $f.orig = orig; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	processBackward = function(dst, r, src, sp) {
		var $ptr, dst, r, sp, src;
		return $interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle)) && (sp.Y < r.Min.Y || ((sp.Y === r.Min.Y) && sp.X < r.Min.X));
	};
	Draw = function(dst, r, src, sp, op) {
		var $ptr, dst, op, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dst = $f.dst; op = $f.op; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = DrawMask(dst, $clone(r, image.Rectangle), src, $clone(sp, image.Point), $ifaceNil, new image.Point.ptr(0, 0), op); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f.$ptr = $ptr; $f.dst = dst; $f.op = op; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	DrawMask = function(dst, r, src, sp, mask, mp, op) {
		var $ptr, _arg, _arg$1, _arg$2, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, da, db, dg, dr, dst, dst0, dst0$1, dx, dy, ma, mask, mask0, mp, mx, my, ok, op, out, r, sa, sa$1, sa$2, sb, sb$1, sb$2, sg, sg$1, sg$2, sp, sr, sr$1, sr$2, src, src0, src0$1, src0$10, src0$11, src0$12, src0$2, src0$3, src0$4, src0$5, src0$6, src0$7, src0$8, src0$9, sx, sy, x$1, x$2, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; dst0 = $f.dst0; dst0$1 = $f.dst0$1; dx = $f.dx; dy = $f.dy; ma = $f.ma; mask = $f.mask; mask0 = $f.mask0; mp = $f.mp; mx = $f.mx; my = $f.my; ok = $f.ok; op = $f.op; out = $f.out; r = $f.r; sa = $f.sa; sa$1 = $f.sa$1; sa$2 = $f.sa$2; sb = $f.sb; sb$1 = $f.sb$1; sb$2 = $f.sb$2; sg = $f.sg; sg$1 = $f.sg$1; sg$2 = $f.sg$2; sp = $f.sp; sr = $f.sr; sr$1 = $f.sr$1; sr$2 = $f.sr$2; src = $f.src; src0 = $f.src0; src0$1 = $f.src0$1; src0$10 = $f.src0$10; src0$11 = $f.src0$11; src0$12 = $f.src0$12; src0$2 = $f.src0$2; src0$3 = $f.src0$3; src0$4 = $f.src0$4; src0$5 = $f.src0$5; src0$6 = $f.src0$6; src0$7 = $f.src0$7; src0$8 = $f.src0$8; src0$9 = $f.src0$9; sx = $f.sx; sy = $f.sy; x$1 = $f.x$1; x$2 = $f.x$2; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mp = [mp];
		out = [out];
		r = [r];
		sp = [sp];
		$r = clip(dst, r[0], src, sp[0], mask, mp[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($clone(r[0], image.Rectangle).Empty()) {
			$s = -1; return;
		}
		_ref = dst;
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 2:
			dst0 = _ref.$val;
			/* */ if (op === 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 0) { */ case 5:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 8:
					_ref$1 = src;
					/* */ if ($assertType(_ref$1, ptrType$3, true)[1]) { $s = 11; continue; }
					/* */ if ($assertType(_ref$1, ptrType$1, true)[1]) { $s = 12; continue; }
					/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 13; continue; }
					/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref$1, ptrType$6, true)[1]) { $s = 15; continue; }
					/* */ if ($assertType(_ref$1, ptrType$7, true)[1]) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($assertType(_ref$1, ptrType$3, true)[1]) { */ case 11:
						src0 = _ref$1.$val;
						_r = src0.RGBA(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple = _r;
						sr = _tuple[0];
						sg = _tuple[1];
						sb = _tuple[2];
						sa = _tuple[3];
						if (sa === 65535) {
							drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						} else {
							drawFillOver(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						}
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$1, true)[1]) { */ case 12:
						src0$1 = _ref$1.$val;
						drawCopyOver(dst0, $clone(r[0], image.Rectangle), src0$1, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 13:
						src0$2 = _ref$1.$val;
						drawNRGBAOver(dst0, $clone(r[0], image.Rectangle), src0$2, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 14:
						src0$3 = _ref$1.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$3, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 17; continue;
					/* } else if ($assertType(_ref$1, ptrType$6, true)[1]) { */ case 15:
						src0$4 = _ref$1.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$4, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$7, true)[1]) { */ case 16:
						src0$5 = _ref$1.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$5, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 17:
					$s = 10; continue;
				/* } else { */ case 9:
					_tuple$1 = $assertType(mask, ptrType$8, true);
					mask0 = _tuple$1[0];
					ok = _tuple$1[1];
					/* */ if (ok) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (ok) { */ case 19:
						_ref$2 = src;
						/* */ if ($assertType(_ref$2, ptrType$3, true)[1]) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if ($assertType(_ref$2, ptrType$3, true)[1]) { */ case 21:
							src0$6 = _ref$2.$val;
							$r = drawGlyphOver(dst0, $clone(r[0], image.Rectangle), src0$6, mask0, $clone(mp[0], image.Point)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 22:
					/* } */ case 20:
				/* } */ case 10:
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 24:
					_ref$3 = src;
					/* */ if ($assertType(_ref$3, ptrType$3, true)[1]) { $s = 26; continue; }
					/* */ if ($assertType(_ref$3, ptrType$1, true)[1]) { $s = 27; continue; }
					/* */ if ($assertType(_ref$3, ptrType$4, true)[1]) { $s = 28; continue; }
					/* */ if ($assertType(_ref$3, ptrType$5, true)[1]) { $s = 29; continue; }
					/* */ if ($assertType(_ref$3, ptrType$6, true)[1]) { $s = 30; continue; }
					/* */ if ($assertType(_ref$3, ptrType$7, true)[1]) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if ($assertType(_ref$3, ptrType$3, true)[1]) { */ case 26:
						src0$7 = _ref$3.$val;
						_r$1 = src0$7.RGBA(); /* */ $s = 33; case 33: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$2 = _r$1;
						sr$1 = _tuple$2[0];
						sg$1 = _tuple$2[1];
						sb$1 = _tuple$2[2];
						sa$1 = _tuple$2[3];
						drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr$1, sg$1, sb$1, sa$1);
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$1, true)[1]) { */ case 27:
						src0$8 = _ref$3.$val;
						drawCopySrc(dst0, $clone(r[0], image.Rectangle), src0$8, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$4, true)[1]) { */ case 28:
						src0$9 = _ref$3.$val;
						drawNRGBASrc(dst0, $clone(r[0], image.Rectangle), src0$9, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$5, true)[1]) { */ case 29:
						src0$10 = _ref$3.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$10, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 32; continue;
					/* } else if ($assertType(_ref$3, ptrType$6, true)[1]) { */ case 30:
						src0$11 = _ref$3.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$11, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$7, true)[1]) { */ case 31:
						src0$12 = _ref$3.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$12, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 32:
				/* } */ case 25:
			/* } */ case 7:
			$r = drawRGBA(dst0, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), mask, $clone(mp[0], image.Point), op); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 3:
			dst0$1 = _ref.$val;
			/* */ if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { */ case 35:
				$r = drawPaletted(dst0$1, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), false); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 36:
		/* } */ case 4:
		_tmp = r[0].Min.X;
		_tmp$1 = r[0].Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r[0].Min.Y;
		_tmp$4 = r[0].Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if (processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) {
			_tmp$6 = x1 - 1 >> 0;
			_tmp$7 = x0 - 1 >> 0;
			_tmp$8 = -1;
			x0 = _tmp$6;
			x1 = _tmp$7;
			dx = _tmp$8;
			_tmp$9 = y1 - 1 >> 0;
			_tmp$10 = y0 - 1 >> 0;
			_tmp$11 = -1;
			y0 = _tmp$9;
			y1 = _tmp$10;
			dy = _tmp$11;
		}
		out[0] = new color.RGBA64.ptr(0, 0, 0, 0);
		sy = (sp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		my = (mp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		y = y0;
		/* while (true) { */ case 38:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 39; continue; }
			sx = (sp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			mx = (mp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			x$1 = x0;
			/* while (true) { */ case 40:
				/* if (!(!((x$1 === x1)))) { break; } */ if(!(!((x$1 === x1)))) { $s = 41; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 42:
					_r$2 = mask.At(mx, my); /* */ $s = 44; case 44: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.RGBA(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					ma = _tuple$3[3];
				/* } */ case 43:
					/* */ if ((ma === 0)) { $s = 47; continue; }
					/* */ if ((ma === 65535) && (op === 1)) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if ((ma === 0)) { */ case 47:
						/* */ if (op === 0) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if (op === 0) { */ case 51:
							$s = 53; continue;
						/* } else { */ case 52:
							$r = dst.Set(x$1, y, (x$2 = color.Transparent, new x$2.constructor.elem(x$2))); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 53:
						$s = 50; continue;
					/* } else if ((ma === 65535) && (op === 1)) { */ case 48:
						_arg = x$1;
						_arg$1 = y;
						_r$4 = src.At(sx, sy); /* */ $s = 55; case 55: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_arg$2 = _r$4;
						$r = dst.Set(_arg, _arg$1, _arg$2); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 50; continue;
					/* } else { */ case 49:
						_r$5 = src.At(sx, sy); /* */ $s = 57; case 57: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = _r$5.RGBA(); /* */ $s = 58; case 58: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_tuple$4 = _r$6;
						sr$2 = _tuple$4[0];
						sg$2 = _tuple$4[1];
						sb$2 = _tuple$4[2];
						sa$2 = _tuple$4[3];
						/* */ if (op === 0) { $s = 59; continue; }
						/* */ $s = 60; continue;
						/* if (op === 0) { */ case 59:
							_r$7 = dst.At(x$1, y); /* */ $s = 62; case 62: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_r$8 = _r$7.RGBA(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_tuple$5 = _r$8;
							dr = _tuple$5[0];
							dg = _tuple$5[1];
							db = _tuple$5[2];
							da = _tuple$5[3];
							a = 65535 - ((_q = ($imul(sa$2, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0;
							out[0].R = (((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr$2, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg$2, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb$2, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa$2, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							$s = 61; continue;
						/* } else { */ case 60:
							out[0].R = (((_q$5 = ($imul(sr$2, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$6 = ($imul(sg$2, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$7 = ($imul(sb$2, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$8 = ($imul(sa$2, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
						/* } */ case 61:
						$r = dst.Set(x$1, y, out[0]); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 50:
				case 46:
				_tmp$12 = x$1 + dx >> 0;
				_tmp$13 = sx + dx >> 0;
				_tmp$14 = mx + dx >> 0;
				x$1 = _tmp$12;
				sx = _tmp$13;
				mx = _tmp$14;
			/* } */ $s = 40; continue; case 41:
			_tmp$15 = y + dy >> 0;
			_tmp$16 = sy + dy >> 0;
			_tmp$17 = my + dy >> 0;
			y = _tmp$15;
			sy = _tmp$16;
			my = _tmp$17;
		/* } */ $s = 38; continue; case 39:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawMask }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.dst0 = dst0; $f.dst0$1 = dst0$1; $f.dx = dx; $f.dy = dy; $f.ma = ma; $f.mask = mask; $f.mask0 = mask0; $f.mp = mp; $f.mx = mx; $f.my = my; $f.ok = ok; $f.op = op; $f.out = out; $f.r = r; $f.sa = sa; $f.sa$1 = sa$1; $f.sa$2 = sa$2; $f.sb = sb; $f.sb$1 = sb$1; $f.sb$2 = sb$2; $f.sg = sg; $f.sg$1 = sg$1; $f.sg$2 = sg$2; $f.sp = sp; $f.sr = sr; $f.sr$1 = sr$1; $f.sr$2 = sr$2; $f.src = src; $f.src0 = src0; $f.src0$1 = src0$1; $f.src0$10 = src0$10; $f.src0$11 = src0$11; $f.src0$12 = src0$12; $f.src0$2 = src0$2; $f.src0$3 = src0$3; $f.src0$4 = src0$4; $f.src0$5 = src0$5; $f.src0$6 = src0$6; $f.src0$7 = src0$7; $f.src0$8 = src0$8; $f.src0$9 = src0$9; $f.sx = sx; $f.sy = sy; $f.x$1 = x$1; $f.x$2 = x$2; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DrawMask = DrawMask;
	drawFillOver = function(dst, r, sr, sg, sb, sa) {
		var $ptr, _q, _q$1, _q$2, _q$3, a, da, db, dg, dr, dst, i, i0, i1, r, sa, sb, sg, sr, x$1, x$2, x$3, x$4, y;
		a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		y = r.Min.Y;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				dr = (x$1 = dst.Pix, $indexPtr(x$1.$array, x$1.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 3 >> 0), ptrType$9));
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (4) >> 0;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			y = y + (1) >> 0;
		}
	};
	drawFillSrc = function(dst, r, sr, sg, sb, sa) {
		var $ptr, dst, firstRow, i, i0, i1, r, sa, sa8, sb, sb8, sg, sg8, sr, sr8, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		sr8 = (((sr >>> 8 >>> 0) << 24 >>> 24));
		sg8 = (((sg >>> 8 >>> 0) << 24 >>> 24));
		sb8 = (((sb >>> 8 >>> 0) << 24 >>> 24));
		sa8 = (((sa >>> 8 >>> 0) << 24 >>> 24));
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		i = i0;
		while (true) {
			if (!(i < i1)) { break; }
			(x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = sr8));
			(x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = sg8));
			(x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = sb8));
			(x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = sa8));
			i = i + (4) >> 0;
		}
		firstRow = $subslice(dst.Pix, i0, i1);
		y = r.Min.Y + 1 >> 0;
		while (true) {
			if (!(y < r.Max.Y)) { break; }
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			$copySlice($subslice(dst.Pix, i0, i1), firstRow);
			y = y + (1) >> 0;
		}
	};
	drawCopyOver = function(dst, r, src, sp) {
		var $ptr, _q, _q$1, _q$2, _q$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, d0, da, db, ddelta, dg, dpix, dr, dst, dx, dy, i, i0, i1, idelta, r, s0, sa, sb, sdelta, sg, sp, spix, sr, src, x$1, x$2, x$3, x$4;
		_tmp = $clone(r, image.Rectangle).Dx();
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		dx = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		_tmp$6 = 0;
		i0 = _tmp$4;
		i1 = _tmp$5;
		idelta = _tmp$6;
		if (r.Min.Y < sp.Y || (r.Min.Y === sp.Y) && r.Min.X <= sp.X) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
			_tmp$7 = 0;
			_tmp$8 = $imul(dx, 4);
			_tmp$9 = 4;
			i0 = _tmp$7;
			i1 = _tmp$8;
			idelta = _tmp$9;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
			_tmp$10 = $imul(((dx - 1 >> 0)), 4);
			_tmp$11 = -4;
			_tmp$12 = -4;
			i0 = _tmp$10;
			i1 = _tmp$11;
			idelta = _tmp$12;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			dpix = $subslice(dst.Pix, d0);
			spix = $subslice(src.Pix, s0);
			i = i0;
			while (true) {
				if (!(!((i === i1)))) { break; }
				sr = $imul((((x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sg = $imul((((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), 257) >>> 0;
				sb = $imul((((x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), 257) >>> 0;
				sa = $imul((((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), 257) >>> 0;
				dr = $indexPtr(dpix.$array, dpix.$offset + (i + 0 >> 0), ptrType$9);
				dg = $indexPtr(dpix.$array, dpix.$offset + (i + 1 >> 0), ptrType$9);
				db = $indexPtr(dpix.$array, dpix.$offset + (i + 2 >> 0), ptrType$9);
				da = $indexPtr(dpix.$array, dpix.$offset + (i + 3 >> 0), ptrType$9);
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (idelta) >> 0;
			}
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawCopySrc = function(dst, r, src, sp) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, d0, ddelta, dst, dy, n, r, s0, sdelta, sp, src;
		_tmp = $imul(4, $clone(r, image.Rectangle).Dx());
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		n = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		if (r.Min.Y <= sp.Y) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			$copySlice($subslice(dst.Pix, d0, (d0 + n >> 0)), $subslice(src.Pix, s0, (s0 + n >> 0)));
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawNRGBAOver = function(dst, r, src, sp) {
		var $ptr, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, da, db, dg, dpix, dr, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				dr = (((x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5])) >>> 0));
				dg = (((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6])) >>> 0));
				db = (((x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7])) >>> 0));
				da = (((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8])) >>> 0));
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				(x$9 = i + 0 >> 0, ((x$9 < 0 || x$9 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$9] = ((((((_q$3 = ($imul(dr, a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$10 = i + 1 >> 0, ((x$10 < 0 || x$10 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$10] = ((((((_q$4 = ($imul(dg, a) >>> 0) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$11 = i + 2 >> 0, ((x$11 < 0 || x$11 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$11] = ((((((_q$5 = ($imul(db, a) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$12] = ((((((_q$6 = ($imul(da, a) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawNRGBASrc = function(dst, r, src, sp) {
		var $ptr, _q, _q$1, _q$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = (((sr >>> 8 >>> 0) << 24 >>> 24))));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = (((sg >>> 8 >>> 0) << 24 >>> 24))));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = (((sb >>> 8 >>> 0) << 24 >>> 24))));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = (((sa >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGray = function(dst, r, src, sp) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, p, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 1);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				p = ((si < 0 || si >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + si]);
				(x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$1] = p));
				(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$2] = p));
				(x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$3] = p));
				(x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$4] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 1 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawCMYK = function(dst, r, src, sp) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, dpix, dst, i, i0, i1, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				_tuple = color.CMYKToRGB((x$1 = si + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])), (x$2 = si + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])), (x$3 = si + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])), (x$4 = si + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = _tuple[0]));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = _tuple[1]));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = _tuple[2]));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGlyphOver = function(dst, r, src, mask, mp) {
		var $ptr, _q, _q$1, _q$2, _q$3, _q$4, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, da, db, dg, dr, dst, i, i0, i1, ma, mask, mi, mi0, mp, my, r, sa, sb, sg, sr, src, x$1, x$2, x$3, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; i = $f.i; i0 = $f.i0; i1 = $f.i1; ma = $f.ma; mask = $f.mask; mi = $f.mi; mi0 = $f.mi0; mp = $f.mp; my = $f.my; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sr = $f.sr; src = $f.src; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		mi0 = mask.PixOffset(mp.X, mp.Y);
		_r = src.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		sr = _tuple[0];
		sg = _tuple[1];
		sb = _tuple[2];
		sa = _tuple[3];
		_tmp = r.Min.Y;
		_tmp$1 = mp.Y;
		y = _tmp;
		my = _tmp$1;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			_tmp$2 = i0;
			_tmp$3 = mi0;
			i = _tmp$2;
			mi = _tmp$3;
			while (true) {
				if (!(i < i1)) { break; }
				ma = (((x$1 = mask.Pix, ((mi < 0 || mi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + mi])) >>> 0));
				if (ma === 0) {
					_tmp$4 = i + 4 >> 0;
					_tmp$5 = mi + 1 >> 0;
					i = _tmp$4;
					mi = _tmp$5;
					continue;
				}
				ma = (ma | ((ma << 8 >>> 0))) >>> 0;
				dr = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$5 = dst.Pix, $indexPtr(x$5.$array, x$5.$offset + (i + 3 >> 0), ptrType$9));
				a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
				dr.$set(((((_q$1 = ((($imul(((dr.$get() >>> 0)), a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((_q$2 = ((($imul(((dg.$get() >>> 0)), a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((_q$3 = ((($imul(((db.$get() >>> 0)), a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((_q$4 = ((($imul(((da.$get() >>> 0)), a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				_tmp$6 = i + 4 >> 0;
				_tmp$7 = mi + 1 >> 0;
				i = _tmp$6;
				mi = _tmp$7;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			mi0 = mi0 + (mask.Stride) >> 0;
			_tmp$8 = y + 1 >> 0;
			_tmp$9 = my + 1 >> 0;
			y = _tmp$8;
			my = _tmp$9;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawGlyphOver }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.ma = ma; $f.mask = mask; $f.mi = mi; $f.mi0 = mi0; $f.mp = mp; $f.my = my; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sr = sr; $f.src = src; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawRGBA = function(dst, r, src, sp, mask, mp, op) {
		var $ptr, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, da, db, dg, di, dr, dst, dx, dy, i, i0, ma, mask, mp, mx, mx0, my, op, r, sa, sb, sg, sp, sr, src, sx, sx0, sx1, sy, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; di = $f.di; dr = $f.dr; dst = $f.dst; dx = $f.dx; dy = $f.dy; i = $f.i; i0 = $f.i0; ma = $f.ma; mask = $f.mask; mp = $f.mp; mx = $f.mx; mx0 = $f.mx0; my = $f.my; op = $f.op; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; sx = $f.sx; sx0 = $f.sx0; sx1 = $f.sx1; sy = $f.sy; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = r.Min.X;
		_tmp$1 = r.Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r.Min.Y;
		_tmp$4 = r.Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if ($interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle))) {
			if (sp.Y < r.Min.Y || (sp.Y === r.Min.Y) && sp.X < r.Min.X) {
				_tmp$6 = x1 - 1 >> 0;
				_tmp$7 = x0 - 1 >> 0;
				_tmp$8 = -1;
				x0 = _tmp$6;
				x1 = _tmp$7;
				dx = _tmp$8;
				_tmp$9 = y1 - 1 >> 0;
				_tmp$10 = y0 - 1 >> 0;
				_tmp$11 = -1;
				y0 = _tmp$9;
				y1 = _tmp$10;
				dy = _tmp$11;
			}
		}
		sy = (sp.Y + y0 >> 0) - r.Min.Y >> 0;
		my = (mp.Y + y0 >> 0) - r.Min.Y >> 0;
		sx0 = (sp.X + x0 >> 0) - r.Min.X >> 0;
		mx0 = (mp.X + x0 >> 0) - r.Min.X >> 0;
		sx1 = sx0 + ((x1 - x0 >> 0)) >> 0;
		i0 = dst.PixOffset(x0, y0);
		di = $imul(dx, 4);
		y = y0;
		/* while (true) { */ case 1:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 2; continue; }
			_tmp$12 = i0;
			_tmp$13 = sx0;
			_tmp$14 = mx0;
			i = _tmp$12;
			sx = _tmp$13;
			mx = _tmp$14;
			/* while (true) { */ case 3:
				/* if (!(!((sx === sx1)))) { break; } */ if(!(!((sx === sx1)))) { $s = 4; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 5:
					_r = mask.At(mx, my); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.RGBA(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					ma = _tuple[3];
				/* } */ case 6:
				_r$2 = src.At(sx, sy); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.RGBA(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				sr = _tuple$1[0];
				sg = _tuple$1[1];
				sb = _tuple$1[2];
				sa = _tuple$1[3];
				if (op === 0) {
					dr = (((x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >>> 0));
					dg = (((x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])) >>> 0));
					db = (((x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) >>> 0));
					da = (((x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) >>> 0));
					a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
					(x$9 = dst.Pix, x$10 = i + 0 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = ((((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$11 = dst.Pix, x$12 = i + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$13 = dst.Pix, x$14 = i + 2 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = ((((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$15 = dst.Pix, x$16 = i + 3 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				} else {
					(x$17 = dst.Pix, x$18 = i + 0 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = ((((_q$5 = ($imul(sr, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$19 = dst.Pix, x$20 = i + 1 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((((_q$6 = ($imul(sg, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$21 = dst.Pix, x$22 = i + 2 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22] = ((((_q$7 = ($imul(sb, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$23 = dst.Pix, x$24 = i + 3 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24] = ((((_q$8 = ($imul(sa, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				}
				_tmp$15 = i + di >> 0;
				_tmp$16 = sx + dx >> 0;
				_tmp$17 = mx + dx >> 0;
				i = _tmp$15;
				sx = _tmp$16;
				mx = _tmp$17;
			/* } */ $s = 3; continue; case 4:
			i0 = i0 + (($imul(dy, dst.Stride))) >> 0;
			_tmp$18 = y + dy >> 0;
			_tmp$19 = sy + dy >> 0;
			_tmp$20 = my + dy >> 0;
			y = _tmp$18;
			sy = _tmp$19;
			my = _tmp$20;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawRGBA }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.di = di; $f.dr = dr; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.i = i; $f.i0 = i0; $f.ma = ma; $f.mask = mask; $f.mp = mp; $f.mx = mx; $f.mx0 = mx0; $f.my = my; $f.op = op; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.sx = sx; $f.sx0 = sx0; $f.sx1 = sx1; $f.sy = sy; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	clamp = function(i) {
		var $ptr, i;
		if (i < 0) {
			return 0;
		}
		if (i > 65535) {
			return 65535;
		}
		return i;
	};
	sqDiff = function(x$1, y) {
		var $ptr, d, x$1, y;
		d = 0;
		if (x$1 > y) {
			d = (((x$1 - y >> 0) >>> 0));
		} else {
			d = (((y - x$1 >> 0) >>> 0));
		}
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	drawPaletted = function(dst, r, src, sp, floydSteinberg$1) {
		var $ptr, _i, _i$1, _i$2, _index, _index$1, _index$10, _index$11, _index$12, _index$13, _index$14, _index$15, _index$2, _index$3, _index$4, _index$5, _index$6, _index$7, _index$8, _index$9, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, a, b, bestIndex, bestSum, col, dst, ea, eb, eg, er, floydSteinberg$1, g, i, i$1, index, ok, out, p, p$1, palette, pix, quantErrorCurr, quantErrorNext, r, r$1, sa, sb, sg, sp, sr, src, stride, sum, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _index = $f._index; _index$1 = $f._index$1; _index$10 = $f._index$10; _index$11 = $f._index$11; _index$12 = $f._index$12; _index$13 = $f._index$13; _index$14 = $f._index$14; _index$15 = $f._index$15; _index$2 = $f._index$2; _index$3 = $f._index$3; _index$4 = $f._index$4; _index$5 = $f._index$5; _index$6 = $f._index$6; _index$7 = $f._index$7; _index$8 = $f._index$8; _index$9 = $f._index$9; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; b = $f.b; bestIndex = $f.bestIndex; bestSum = $f.bestSum; col = $f.col; dst = $f.dst; ea = $f.ea; eb = $f.eb; eg = $f.eg; er = $f.er; floydSteinberg$1 = $f.floydSteinberg$1; g = $f.g; i = $f.i; i$1 = $f.i$1; index = $f.index; ok = $f.ok; out = $f.out; p = $f.p; p$1 = $f.p$1; palette = $f.palette; pix = $f.pix; quantErrorCurr = $f.quantErrorCurr; quantErrorNext = $f.quantErrorNext; r = $f.r; r$1 = $f.r$1; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; stride = $f.stride; sum = $f.sum; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = [out];
		_tmp = (sliceType.nil);
		_tmp$1 = (sliceType$1.nil);
		_tmp$2 = 0;
		palette = _tmp;
		pix = _tmp$1;
		stride = _tmp$2;
		_tuple = $assertType(dst, ptrType$2, true);
		p = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			palette = $makeSlice(sliceType, p.Palette.$length);
			_ref = p.Palette;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				col = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r = col.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				r$1 = _tuple$1[0];
				g = _tuple$1[1];
				b = _tuple$1[2];
				a = _tuple$1[3];
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[0] = ((r$1 >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[1] = ((g >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[2] = ((b >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[3] = ((a >> 0));
				_i++;
			/* } */ $s = 3; continue; case 4:
			_tmp$3 = $subslice(p.Pix, p.PixOffset(r.Min.X, r.Min.Y));
			_tmp$4 = p.Stride;
			pix = _tmp$3;
			stride = _tmp$4;
		/* } */ case 2:
		_tmp$5 = sliceType.nil;
		_tmp$6 = sliceType.nil;
		quantErrorCurr = _tmp$5;
		quantErrorNext = _tmp$6;
		if (floydSteinberg$1) {
			quantErrorCurr = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
			quantErrorNext = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
		}
		out[0] = new color.RGBA64.ptr(0, 0, 0, 65535);
		y = 0;
		/* while (true) { */ case 6:
			/* if (!(!((y === $clone(r, image.Rectangle).Dy())))) { break; } */ if(!(!((y === $clone(r, image.Rectangle).Dy())))) { $s = 7; continue; }
			x$1 = 0;
			/* while (true) { */ case 8:
				/* if (!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { break; } */ if(!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { $s = 9; continue; }
				_r$1 = src.At(sp.X + x$1 >> 0, sp.Y + y >> 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.RGBA(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				sr = _tuple$2[0];
				sg = _tuple$2[1];
				sb = _tuple$2[2];
				sa = _tuple$2[3];
				_tmp$7 = ((sr >> 0));
				_tmp$8 = ((sg >> 0));
				_tmp$9 = ((sb >> 0));
				_tmp$10 = ((sa >> 0));
				er = _tmp$7;
				eg = _tmp$8;
				eb = _tmp$9;
				ea = _tmp$10;
				if (floydSteinberg$1) {
					er = clamp(er + (_q = (x$2 = x$1 + 1 >> 0, ((x$2 < 0 || x$2 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$2]))[0] / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eg = clamp(eg + (_q$1 = (x$3 = x$1 + 1 >> 0, ((x$3 < 0 || x$3 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$3]))[1] / 16, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eb = clamp(eb + (_q$2 = (x$4 = x$1 + 1 >> 0, ((x$4 < 0 || x$4 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$4]))[2] / 16, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					ea = clamp(ea + (_q$3 = (x$5 = x$1 + 1 >> 0, ((x$5 < 0 || x$5 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$5]))[3] / 16, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
				}
				/* */ if (!(palette === sliceType.nil)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!(palette === sliceType.nil)) { */ case 12:
					_tmp$11 = 0;
					_tmp$12 = 4294967295;
					bestIndex = _tmp$11;
					bestSum = _tmp$12;
					_ref$1 = palette;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						index = _i$1;
						p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), arrayType);
						sum = ((sqDiff(er, p$1[0]) + sqDiff(eg, p$1[1]) >>> 0) + sqDiff(eb, p$1[2]) >>> 0) + sqDiff(ea, p$1[3]) >>> 0;
						if (sum < bestSum) {
							_tmp$13 = index;
							_tmp$14 = sum;
							bestIndex = _tmp$13;
							bestSum = _tmp$14;
							if (sum === 0) {
								break;
							}
						}
						_i$1++;
					}
					(x$6 = ($imul(y, stride)) + x$1 >> 0, ((x$6 < 0 || x$6 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$6] = ((bestIndex << 24 >>> 24))));
					if (!floydSteinberg$1) {
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 8; continue;
					}
					er = er - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[0]) >> 0;
					eg = eg - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[1]) >> 0;
					eb = eb - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[2]) >> 0;
					ea = ea - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[3]) >> 0;
					$s = 14; continue;
				/* } else { */ case 13:
					out[0].R = ((er << 16 >>> 16));
					out[0].G = ((eg << 16 >>> 16));
					out[0].B = ((eb << 16 >>> 16));
					out[0].A = ((ea << 16 >>> 16));
					$r = dst.Set(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0, out[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!floydSteinberg$1) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!floydSteinberg$1) { */ case 16:
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 8; continue;
					/* } */ case 17:
					_r$3 = dst.At(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.RGBA(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$3 = _r$4;
					sr = _tuple$3[0];
					sg = _tuple$3[1];
					sb = _tuple$3[2];
					sa = _tuple$3[3];
					er = er - (((sr >> 0))) >> 0;
					eg = eg - (((sg >> 0))) >> 0;
					eb = eb - (((sb >> 0))) >> 0;
					ea = ea - (((sa >> 0))) >> 0;
				/* } */ case 14:
				_index = x$1 + 0 >> 0;
				((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] = (((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] + (($imul(er, 3))) >> 0);
				_index$1 = x$1 + 0 >> 0;
				((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] = (((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] + (($imul(eg, 3))) >> 0);
				_index$2 = x$1 + 0 >> 0;
				((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] = (((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] + (($imul(eb, 3))) >> 0);
				_index$3 = x$1 + 0 >> 0;
				((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] = (((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] + (($imul(ea, 3))) >> 0);
				_index$4 = x$1 + 1 >> 0;
				((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] = (((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] + (($imul(er, 5))) >> 0);
				_index$5 = x$1 + 1 >> 0;
				((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] = (((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] + (($imul(eg, 5))) >> 0);
				_index$6 = x$1 + 1 >> 0;
				((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] = (((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] + (($imul(eb, 5))) >> 0);
				_index$7 = x$1 + 1 >> 0;
				((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] = (((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] + (($imul(ea, 5))) >> 0);
				_index$8 = x$1 + 2 >> 0;
				((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] = (((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] + (($imul(er, 1))) >> 0);
				_index$9 = x$1 + 2 >> 0;
				((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] = (((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] + (($imul(eg, 1))) >> 0);
				_index$10 = x$1 + 2 >> 0;
				((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] = (((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] + (($imul(eb, 1))) >> 0);
				_index$11 = x$1 + 2 >> 0;
				((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] = (((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] + (($imul(ea, 1))) >> 0);
				_index$12 = x$1 + 2 >> 0;
				((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] = (((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] + (($imul(er, 7))) >> 0);
				_index$13 = x$1 + 2 >> 0;
				((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] = (((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] + (($imul(eg, 7))) >> 0);
				_index$14 = x$1 + 2 >> 0;
				((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] = (((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] + (($imul(eb, 7))) >> 0);
				_index$15 = x$1 + 2 >> 0;
				((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] = (((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] + (($imul(ea, 7))) >> 0);
				x$1 = x$1 + (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			if (floydSteinberg$1) {
				_tmp$15 = quantErrorNext;
				_tmp$16 = quantErrorCurr;
				quantErrorCurr = _tmp$15;
				quantErrorNext = _tmp$16;
				_ref$2 = quantErrorNext;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$1 = _i$2;
					arrayType.copy(((i$1 < 0 || i$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + i$1]), arrayType.zero());
					_i$2++;
				}
			}
			y = y + (1) >> 0;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawPaletted }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._index = _index; $f._index$1 = _index$1; $f._index$10 = _index$10; $f._index$11 = _index$11; $f._index$12 = _index$12; $f._index$13 = _index$13; $f._index$14 = _index$14; $f._index$15 = _index$15; $f._index$2 = _index$2; $f._index$3 = _index$3; $f._index$4 = _index$4; $f._index$5 = _index$5; $f._index$6 = _index$6; $f._index$7 = _index$7; $f._index$8 = _index$8; $f._index$9 = _index$9; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.b = b; $f.bestIndex = bestIndex; $f.bestSum = bestSum; $f.col = col; $f.dst = dst; $f.ea = ea; $f.eb = eb; $f.eg = eg; $f.er = er; $f.floydSteinberg$1 = floydSteinberg$1; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.ok = ok; $f.out = out; $f.p = p; $f.p$1 = p$1; $f.palette = palette; $f.pix = pix; $f.quantErrorCurr = quantErrorCurr; $f.quantErrorNext = quantErrorNext; $f.r = r; $f.r$1 = r$1; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.stride = stride; $f.sum = sum; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = imageutil.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/raster"] = (function() {
	var $pkg = {}, $init, fmt, fixed, image, color, draw, math, strconv, Adder, Path, Span, Painter, cell, Rasterizer, Capper, CapperFunc, Joiner, JoinerFunc, stroker, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType$1, arrayType$2, sliceType$4, arrayType$3, sliceType$5, arrayType$4, arrayType$5, arrayType$6, arrayType$7, arrayType$8, ptrType$1, ptrType$6, ptrType$7, maxAbs, pNeg, pDot, pLen, pNorm, pRot45CW, pRot90CW, pRot45CCW, pRot90CCW, addPathReversed, roundCapper, roundJoiner, addArc, midpoint, angleGreaterThan45, interpolate, curviest2, Stroke;
	fmt = $packages["fmt"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	Adder = $pkg.Adder = $newType(8, $kindInterface, "raster.Adder", true, "github.com/golang/freetype/raster", true, null);
	Path = $pkg.Path = $newType(12, $kindSlice, "raster.Path", true, "github.com/golang/freetype/raster", true, null);
	Span = $pkg.Span = $newType(0, $kindStruct, "raster.Span", true, "github.com/golang/freetype/raster", true, function(Y_, X0_, X1_, Alpha_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.X0 = 0;
			this.X1 = 0;
			this.Alpha = 0;
			return;
		}
		this.Y = Y_;
		this.X0 = X0_;
		this.X1 = X1_;
		this.Alpha = Alpha_;
	});
	Painter = $pkg.Painter = $newType(8, $kindInterface, "raster.Painter", true, "github.com/golang/freetype/raster", true, null);
	cell = $pkg.cell = $newType(0, $kindStruct, "raster.cell", true, "github.com/golang/freetype/raster", false, function(xi_, area_, cover_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xi = 0;
			this.area = 0;
			this.cover = 0;
			this.next = 0;
			return;
		}
		this.xi = xi_;
		this.area = area_;
		this.cover = cover_;
		this.next = next_;
	});
	Rasterizer = $pkg.Rasterizer = $newType(0, $kindStruct, "raster.Rasterizer", true, "github.com/golang/freetype/raster", true, function(UseNonZeroWinding_, Dx_, Dy_, width_, splitScale2_, splitScale3_, a_, xi_, yi_, area_, cover_, cell_, cellIndex_, cellBuf_, cellIndexBuf_, spanBuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.UseNonZeroWinding = false;
			this.Dx = 0;
			this.Dy = 0;
			this.width = 0;
			this.splitScale2 = 0;
			this.splitScale3 = 0;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.xi = 0;
			this.yi = 0;
			this.area = 0;
			this.cover = 0;
			this.cell = sliceType$3.nil;
			this.cellIndex = sliceType$5.nil;
			this.cellBuf = arrayType$4.zero();
			this.cellIndexBuf = arrayType$5.zero();
			this.spanBuf = arrayType$6.zero();
			return;
		}
		this.UseNonZeroWinding = UseNonZeroWinding_;
		this.Dx = Dx_;
		this.Dy = Dy_;
		this.width = width_;
		this.splitScale2 = splitScale2_;
		this.splitScale3 = splitScale3_;
		this.a = a_;
		this.xi = xi_;
		this.yi = yi_;
		this.area = area_;
		this.cover = cover_;
		this.cell = cell_;
		this.cellIndex = cellIndex_;
		this.cellBuf = cellBuf_;
		this.cellIndexBuf = cellIndexBuf_;
		this.spanBuf = spanBuf_;
	});
	Capper = $pkg.Capper = $newType(8, $kindInterface, "raster.Capper", true, "github.com/golang/freetype/raster", true, null);
	CapperFunc = $pkg.CapperFunc = $newType(4, $kindFunc, "raster.CapperFunc", true, "github.com/golang/freetype/raster", true, null);
	Joiner = $pkg.Joiner = $newType(8, $kindInterface, "raster.Joiner", true, "github.com/golang/freetype/raster", true, null);
	JoinerFunc = $pkg.JoinerFunc = $newType(4, $kindFunc, "raster.JoinerFunc", true, "github.com/golang/freetype/raster", true, null);
	stroker = $pkg.stroker = $newType(0, $kindStruct, "raster.stroker", true, "github.com/golang/freetype/raster", false, function(p_, u_, cr_, jr_, r_, a_, anorm_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = $ifaceNil;
			this.u = 0;
			this.cr = $ifaceNil;
			this.jr = $ifaceNil;
			this.r = Path.nil;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.anorm = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.p = p_;
		this.u = u_;
		this.cr = cr_;
		this.jr = jr_;
		this.r = r_;
		this.a = a_;
		this.anorm = anorm_;
	});
	sliceType = $sliceType(fixed.Int26_6);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(Span);
	sliceType$3 = $sliceType(cell);
	arrayType$1 = $arrayType(fixed.Point26_6, 35);
	arrayType$2 = $arrayType($Int, 17);
	sliceType$4 = $sliceType(fixed.Point26_6);
	arrayType$3 = $arrayType(fixed.Point26_6, 52);
	sliceType$5 = $sliceType($Int);
	arrayType$4 = $arrayType(cell, 256);
	arrayType$5 = $arrayType($Int, 64);
	arrayType$6 = $arrayType(Span, 64);
	arrayType$7 = $arrayType($Int, 6);
	arrayType$8 = $arrayType(fixed.Point26_6, 13);
	ptrType$1 = $ptrType(Path);
	ptrType$6 = $ptrType(Rasterizer);
	ptrType$7 = $ptrType(stroker);
	maxAbs = function(a, b) {
		var $ptr, a, b;
		if (a < 0) {
			a = -a;
		}
		if (b < 0) {
			b = -b;
		}
		if (a < b) {
			return b;
		}
		return a;
	};
	pNeg = function(p) {
		var $ptr, p;
		return new fixed.Point26_6.ptr(-p.X, -p.Y);
	};
	pDot = function(p, q) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, p, px, py, q, qx, qy, x, x$1, x$2;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		_tmp$2 = (new $Int64(0, q.X));
		_tmp$3 = (new $Int64(0, q.Y));
		qx = _tmp$2;
		qy = _tmp$3;
		return ((x = (x$1 = $mul64(px, qx), x$2 = $mul64(py, qy), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), new fixed.Int52_12(x.$high, x.$low)));
	};
	pLen = function(p) {
		var $ptr, p, x, y;
		x = (p.X);
		y = (p.Y);
		return ((math.Sqrt(x * x + y * y) >> 0));
	};
	pNorm = function(p, length) {
		var $ptr, _tmp, _tmp$1, d, length, p, s, t, x, y;
		d = pLen($clone(p, fixed.Point26_6));
		if (d === 0) {
			return new fixed.Point26_6.ptr(0, 0);
		}
		_tmp = (new $Int64(0, length));
		_tmp$1 = (new $Int64(0, d));
		s = _tmp;
		t = _tmp$1;
		x = $div64($mul64((new $Int64(0, p.X)), s), t, false);
		y = $div64($mul64((new $Int64(0, p.Y)), s), t, false);
		return new fixed.Point26_6.ptr((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)), (((y.$low + ((y.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot45CW = function(p) {
		var $ptr, _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high - py.$high, x.$low - py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = px, new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CW = function(p) {
		var $ptr, p;
		return new fixed.Point26_6.ptr(-p.Y, p.X);
	};
	pRot45CCW = function(p) {
		var $ptr, _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high + py.$high, x.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = new $Int64(-px.$high, -px.$low), new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CCW = function(p) {
		var $ptr, p;
		return new fixed.Point26_6.ptr(p.Y, -p.X);
	};
	Path.prototype.String = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, i, p, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; p = $f.p; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = "";
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < p.$length)) { break; } */ if(!(i < p.$length)) { $s = 2; continue; }
			if (!((i === 0))) {
				s = s + (" ");
			}
				_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					_r = fmt.Sprint(new sliceType$1([((x = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					s = s + ("S0" + _r);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					_r$1 = fmt.Sprint(new sliceType$1([((x$1 = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + ("A1" + _r$1);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					_r$2 = fmt.Sprint(new sliceType$1([((x$2 = $subslice(p, (i + 1 >> 0), (i + 5 >> 0)), $subslice(new sliceType(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + ("A2" + _r$2);
					i = i + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					_r$3 = fmt.Sprint(new sliceType$1([((x$3 = $subslice(p, (i + 1 >> 0), (i + 7 >> 0)), $subslice(new sliceType(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)))])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					s = s + ("A3" + _r$3);
					i = i + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Path.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.p = p; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Path).prototype.String = function() { return this.$get().String(); };
	$ptrType(Path).prototype.Clear = function() {
		var $ptr, p;
		p = this;
		p.$set($subslice((p.$get()), 0, 0));
	};
	$ptrType(Path).prototype.Start = function(a) {
		var $ptr, a, p;
		p = this;
		p.$set($append(p.$get(), 0, a.X, a.Y, 0));
	};
	$ptrType(Path).prototype.Add1 = function(b) {
		var $ptr, b, p;
		p = this;
		p.$set($append(p.$get(), 1, b.X, b.Y, 1));
	};
	$ptrType(Path).prototype.Add2 = function(b, c) {
		var $ptr, b, c, p;
		p = this;
		p.$set($append(p.$get(), 2, b.X, b.Y, c.X, c.Y, 2));
	};
	$ptrType(Path).prototype.Add3 = function(b, c, d) {
		var $ptr, b, c, d, p;
		p = this;
		p.$set($append(p.$get(), 3, b.X, b.Y, c.X, c.Y, d.X, d.Y, 3));
	};
	$ptrType(Path).prototype.AddPath = function(q) {
		var $ptr, p, q;
		p = this;
		p.$set($appendSlice(p.$get(), $subslice(new sliceType(q.$array), q.$offset, q.$offset + q.$length)));
	};
	$ptrType(Path).prototype.AddStroke = function(q, width, cr, jr) {
		var $ptr, cr, jr, p, q, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; cr = $f.cr; jr = $f.jr; p = $f.p; q = $f.q; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Stroke(p, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(Path).prototype.AddStroke }; } $f.$ptr = $ptr; $f.cr = cr; $f.jr = jr; $f.p = p; $f.q = q; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Path.prototype.firstPoint = function() {
		var $ptr, p;
		p = this;
		return new fixed.Point26_6.ptr((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]), (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
	};
	$ptrType(Path).prototype.firstPoint = function() { return this.$get().firstPoint(); };
	Path.prototype.lastPoint = function() {
		var $ptr, p, x, x$1;
		p = this;
		return new fixed.Point26_6.ptr((x = p.$length - 3 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = p.$length - 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])));
	};
	$ptrType(Path).prototype.lastPoint = function() { return this.$get().lastPoint(); };
	addPathReversed = function(p, q) {
		var $ptr, _1, i, p, q, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; i = $f.i; p = $f.p; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		i = q.$length - 1 >> 0;
		/* while (true) { */ case 1:
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$s = -1; return;
				/* } else if (_1 === (1)) { */ case 5:
					i = i - (4) >> 0;
					$r = p.Add1(new fixed.Point26_6.ptr((x = i - 2 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					i = i - (6) >> 0;
					$r = p.Add2(new fixed.Point26_6.ptr((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 3 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i - 2 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					i = i - (8) >> 0;
					$r = p.Add3(new fixed.Point26_6.ptr((x$6 = i + 4 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 5 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 2 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 3 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i - 2 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i - 1 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11])))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addPathReversed }; } $f.$ptr = $ptr; $f._1 = _1; $f.i = i; $f.p = p; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.ptr.prototype.findCell = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, c, i, prev, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, xi;
		r = this;
		if (r.yi < 0 || r.yi >= r.cellIndex.$length) {
			return -1;
		}
		xi = r.xi;
		if (xi < 0) {
			xi = -1;
		} else if (xi > r.width) {
			xi = r.width;
		}
		_tmp = (x = r.cellIndex, x$1 = r.yi, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_tmp$1 = -1;
		i = _tmp;
		prev = _tmp$1;
		while (true) {
			if (!(!((i === -1)) && (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).xi <= xi)) { break; }
			if ((x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).xi === xi) {
				return i;
			}
			_tmp$2 = (x$4 = r.cell, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).next;
			_tmp$3 = i;
			i = _tmp$2;
			prev = _tmp$3;
		}
		c = r.cell.$length;
		if (c === r.cell.$capacity) {
			buf = $makeSlice(sliceType$3, c, ($imul(4, c)));
			$copySlice(buf, r.cell);
			r.cell = $subslice(buf, 0, (c + 1 >> 0));
		} else {
			r.cell = $subslice(r.cell, 0, (c + 1 >> 0));
		}
		cell.copy((x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])), new cell.ptr(xi, 0, 0, i));
		if (prev === -1) {
			(x$6 = r.cellIndex, x$7 = r.yi, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = c));
		} else {
			(x$8 = r.cell, ((prev < 0 || prev >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + prev])).next = c;
		}
		return c;
	};
	Rasterizer.prototype.findCell = function() { return this.$val.findCell(); };
	Rasterizer.ptr.prototype.saveCell = function() {
		var $ptr, i, r, x, x$1, x$2, x$3;
		r = this;
		if (!((r.area === 0)) || !((r.cover === 0))) {
			i = r.findCell();
			if (!((i === -1))) {
				(x$1 = r.cell, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).area = (x = r.cell, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).area + (r.area) >> 0;
				(x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).cover = (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).cover + (r.cover) >> 0;
			}
			r.area = 0;
			r.cover = 0;
		}
	};
	Rasterizer.prototype.saveCell = function() { return this.$val.saveCell(); };
	Rasterizer.ptr.prototype.setCell = function(xi, yi) {
		var $ptr, _tmp, _tmp$1, r, xi, yi;
		r = this;
		if (!((r.xi === xi)) || !((r.yi === yi))) {
			r.saveCell();
			_tmp = xi;
			_tmp$1 = yi;
			r.xi = _tmp;
			r.yi = _tmp$1;
		}
	};
	Rasterizer.prototype.setCell = function(xi, yi) { return this.$val.setCell(xi, yi); };
	Rasterizer.ptr.prototype.scan = function(yi, x0, y0f, x1, y1f) {
		var $ptr, _q, _q$1, _q$2, _q$3, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dx, dy, edge0, edge1, fullDelta, fullRem, p, q, r, x0, x0f, x0i, x1, x1f, x1i, xi, xiDelta, y, y0f, y1f, yDelta, yRem, yi;
		r = this;
		x0i = (_q = ((x0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		x0f = x0 - ((($imul(64, x0i)) >> 0)) >> 0;
		x1i = (_q$1 = ((x1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		x1f = x1 - ((($imul(64, x1i)) >> 0)) >> 0;
		if (y0f === y1f) {
			r.setCell(x1i, yi);
			return;
		}
		_tmp = x1 - x0 >> 0;
		_tmp$1 = y1f - y0f >> 0;
		dx = _tmp;
		dy = _tmp$1;
		if (x0i === x1i) {
			r.area = r.area + (((($imul(((x0f + x1f >> 0)), dy)) >> 0))) >> 0;
			r.cover = r.cover + (((dy >> 0))) >> 0;
			return;
		}
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		p = _tmp$2;
		q = _tmp$3;
		edge0 = _tmp$4;
		edge1 = _tmp$5;
		xiDelta = 0;
		if (dx > 0) {
			_tmp$6 = $imul(((64 - x0f >> 0)), dy);
			_tmp$7 = dx;
			p = _tmp$6;
			q = _tmp$7;
			_tmp$8 = 0;
			_tmp$9 = 64;
			_tmp$10 = 1;
			edge0 = _tmp$8;
			edge1 = _tmp$9;
			xiDelta = _tmp$10;
		} else {
			_tmp$11 = $imul(x0f, dy);
			_tmp$12 = -dx;
			p = _tmp$11;
			q = _tmp$12;
			_tmp$13 = 64;
			_tmp$14 = 0;
			_tmp$15 = -1;
			edge0 = _tmp$13;
			edge1 = _tmp$14;
			xiDelta = _tmp$15;
		}
		_tmp$16 = (_q$2 = p / q, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$17 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		yDelta = _tmp$16;
		yRem = _tmp$17;
		if (yRem < 0) {
			yDelta = yDelta - (1) >> 0;
			yRem = yRem + (q) >> 0;
		}
		_tmp$18 = x0i;
		_tmp$19 = y0f;
		xi = _tmp$18;
		y = _tmp$19;
		r.area = r.area + (((($imul(((x0f + edge1 >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
		_tmp$20 = xi + xiDelta >> 0;
		_tmp$21 = y + yDelta >> 0;
		xi = _tmp$20;
		y = _tmp$21;
		r.setCell(xi, yi);
		if (!((xi === x1i))) {
			p = $imul(64, (((y1f - y >> 0) + yDelta >> 0)));
			_tmp$22 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$23 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			fullDelta = _tmp$22;
			fullRem = _tmp$23;
			if (fullRem < 0) {
				fullDelta = fullDelta - (1) >> 0;
				fullRem = fullRem + (q) >> 0;
			}
			yRem = yRem - (q) >> 0;
			while (true) {
				if (!(!((xi === x1i)))) { break; }
				yDelta = fullDelta;
				yRem = yRem + (fullRem) >> 0;
				if (yRem >= 0) {
					yDelta = yDelta + (1) >> 0;
					yRem = yRem - (q) >> 0;
				}
				r.area = r.area + (((($imul(64, yDelta)) >> 0))) >> 0;
				r.cover = r.cover + (((yDelta >> 0))) >> 0;
				_tmp$24 = xi + xiDelta >> 0;
				_tmp$25 = y + yDelta >> 0;
				xi = _tmp$24;
				y = _tmp$25;
				r.setCell(xi, yi);
			}
		}
		yDelta = y1f - y >> 0;
		r.area = r.area + (((($imul(((edge0 + x1f >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
	};
	Rasterizer.prototype.scan = function(yi, x0, y0f, x1, y1f) { return this.$val.scan(yi, x0, y0f, x1, y1f); };
	Rasterizer.ptr.prototype.Start = function(a) {
		var $ptr, _q, _q$1, a, r;
		r = this;
		r.setCell((((_q = a.X / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), (((_q$1 = a.Y / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)));
		fixed.Point26_6.copy(r.a, a);
	};
	Rasterizer.prototype.Start = function(a) { return this.$val.Start(a); };
	Rasterizer.ptr.prototype.Add1 = function(b) {
		var $ptr, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, darea, dcover, dx, dy, edge0, edge0$1, edge1, edge1$1, fullDelta, fullRem, p, q, r, x, x0, x0fTimes2, x0i, x1, xDelta, xRem, y0, y0f, y0i, y1, y1f, y1i, yi, yi$1, yiDelta, yiDelta$1;
		r = this;
		_tmp = r.a.X;
		_tmp$1 = r.a.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		_tmp$2 = b.X;
		_tmp$3 = b.Y;
		x1 = _tmp$2;
		y1 = _tmp$3;
		_tmp$4 = x1 - x0 >> 0;
		_tmp$5 = y1 - y0 >> 0;
		dx = _tmp$4;
		dy = _tmp$5;
		y0i = (_q = ((y0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y0f = y0 - ((($imul(64, y0i)) >> 0)) >> 0;
		y1i = (_q$1 = ((y1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		y1f = y1 - ((($imul(64, y1i)) >> 0)) >> 0;
		if (y0i === y1i) {
			r.scan(y0i, x0, y0f, x1, y1f);
		} else if (dx === 0) {
			_tmp$6 = 0;
			_tmp$7 = 0;
			edge0 = _tmp$6;
			edge1 = _tmp$7;
			yiDelta = 0;
			if (dy > 0) {
				_tmp$8 = 0;
				_tmp$9 = 64;
				_tmp$10 = 1;
				edge0 = _tmp$8;
				edge1 = _tmp$9;
				yiDelta = _tmp$10;
			} else {
				_tmp$11 = 64;
				_tmp$12 = 0;
				_tmp$13 = -1;
				edge0 = _tmp$11;
				edge1 = _tmp$12;
				yiDelta = _tmp$13;
			}
			_tmp$14 = (_q$2 = ((x0 >> 0)) / 64, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$15 = y0i;
			x0i = _tmp$14;
			yi = _tmp$15;
			x0fTimes2 = $imul(((((x0 >> 0)) - (($imul(64, x0i))) >> 0)), 2);
			dcover = (((edge1 - y0f >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
			yi = yi + (yiDelta) >> 0;
			r.setCell(x0i, yi);
			dcover = (((edge1 - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			while (true) {
				if (!(!((yi === y1i)))) { break; }
				r.area = r.area + (darea) >> 0;
				r.cover = r.cover + (dcover) >> 0;
				yi = yi + (yiDelta) >> 0;
				r.setCell(x0i, yi);
			}
			dcover = (((y1f - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
		} else {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = 0;
			_tmp$19 = 0;
			p = _tmp$16;
			q = _tmp$17;
			edge0$1 = _tmp$18;
			edge1$1 = _tmp$19;
			yiDelta$1 = 0;
			if (dy > 0) {
				_tmp$20 = $imul(((64 - y0f >> 0)), dx);
				_tmp$21 = dy;
				p = _tmp$20;
				q = _tmp$21;
				_tmp$22 = 0;
				_tmp$23 = 64;
				_tmp$24 = 1;
				edge0$1 = _tmp$22;
				edge1$1 = _tmp$23;
				yiDelta$1 = _tmp$24;
			} else {
				_tmp$25 = $imul(y0f, dx);
				_tmp$26 = -dy;
				p = _tmp$25;
				q = _tmp$26;
				_tmp$27 = 64;
				_tmp$28 = 0;
				_tmp$29 = -1;
				edge0$1 = _tmp$27;
				edge1$1 = _tmp$28;
				yiDelta$1 = _tmp$29;
			}
			_tmp$30 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$31 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			xDelta = _tmp$30;
			xRem = _tmp$31;
			if (xRem < 0) {
				xDelta = xDelta - (1) >> 0;
				xRem = xRem + (q) >> 0;
			}
			_tmp$32 = x0;
			_tmp$33 = y0i;
			x = _tmp$32;
			yi$1 = _tmp$33;
			r.scan(yi$1, x, y0f, x + xDelta >> 0, edge1$1);
			_tmp$34 = x + xDelta >> 0;
			_tmp$35 = yi$1 + yiDelta$1 >> 0;
			x = _tmp$34;
			yi$1 = _tmp$35;
			r.setCell((_q$4 = ((x >> 0)) / 64, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
			if (!((yi$1 === y1i))) {
				p = $imul(64, dx);
				_tmp$36 = (_q$5 = p / q, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$37 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				fullDelta = _tmp$36;
				fullRem = _tmp$37;
				if (fullRem < 0) {
					fullDelta = fullDelta - (1) >> 0;
					fullRem = fullRem + (q) >> 0;
				}
				xRem = xRem - (q) >> 0;
				while (true) {
					if (!(!((yi$1 === y1i)))) { break; }
					xDelta = fullDelta;
					xRem = xRem + (fullRem) >> 0;
					if (xRem >= 0) {
						xDelta = xDelta + (1) >> 0;
						xRem = xRem - (q) >> 0;
					}
					r.scan(yi$1, x, edge0$1, x + xDelta >> 0, edge1$1);
					_tmp$38 = x + xDelta >> 0;
					_tmp$39 = yi$1 + yiDelta$1 >> 0;
					x = _tmp$38;
					yi$1 = _tmp$39;
					r.setCell((_q$6 = ((x >> 0)) / 64, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
				}
			}
			r.scan(yi$1, x, edge0$1, x1, y1f);
		}
		fixed.Point26_6.copy(r.a, b);
	};
	Rasterizer.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	Rasterizer.ptr.prototype.Add2 = function(b, c) {
		var $ptr, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, dev, i, midx, midy, mx, my, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev = (_q = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + c.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + c.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev > 0)) { break; }
			dev = (_q$1 = dev / (4), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add2 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$1.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], c);
		fixed.Point26_6.copy(pStack[1], b);
		fixed.Point26_6.copy(pStack[2], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(2, i)));
			if (s > 0) {
				mx = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$2 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X + mx >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = (_q$3 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + mx >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$4 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				my = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$5 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y + my >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = (_q$6 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + my >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$7 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$8 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$9 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	Rasterizer.ptr.prototype.Add3 = function(b, c, d) {
		var $ptr, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$15, _q$16, _q$17, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, d, dev2, dev3, i, m01x, m01y, m12x, m12y, m23x, m23y, midx, midy, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev2 = (_q = maxAbs((r.a.X - ($imul(3, ((b.X + c.X >> 0)))) >> 0) + d.X >> 0, (r.a.Y - ($imul(3, ((b.Y + c.Y >> 0)))) >> 0) + d.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		dev3 = (_q$1 = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + d.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + d.Y >> 0) / ((r.splitScale3 >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev2 > 0 || dev3 > 0)) { break; }
			dev2 = (_q$2 = dev2 / (8), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			dev3 = (_q$3 = dev3 / (4), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add3 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$3.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], d);
		fixed.Point26_6.copy(pStack[1], c);
		fixed.Point26_6.copy(pStack[2], b);
		fixed.Point26_6.copy(pStack[3], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(3, i)));
			if (s > 0) {
				m01x = (_q$4 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12x = (_q$5 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23x = (_q$6 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).X = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).X = m23x;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = m01x;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$7 = ((m01x + m12x >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (_q$8 = ((m12x + m23x >> 0)) / 2, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$9 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X >> 0)) / 2, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				m01y = (_q$10 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y >> 0)) / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12y = (_q$11 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23y = (_q$12 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).Y = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).Y = m23y;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = m01y;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$13 = ((m01y + m12y >> 0)) / 2, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (_q$14 = ((m12y + m23y >> 0)) / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$15 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y >> 0)) / 2, (_q$15 === _q$15 && _q$15 !== 1/0 && _q$15 !== -1/0) ? _q$15 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$16 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 8, (_q$16 === _q$16 && _q$16 !== 1/0 && _q$16 !== -1/0) ? _q$16 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$17 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 8, (_q$17 === _q$17 && _q$17 !== 1/0 && _q$17 !== -1/0) ? _q$17 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	Rasterizer.ptr.prototype.AddPath = function(p) {
		var $ptr, _1, i, p, r, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		r = this;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (_1 === (0)) {
				r.Start(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]))));
				i = i + (4) >> 0;
			} else if (_1 === (1)) {
				r.Add1(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]))));
				i = i + (4) >> 0;
			} else if (_1 === (2)) {
				r.Add2(new fixed.Point26_6.ptr((x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4])), (x$5 = i + 2 >> 0, ((x$5 < 0 || x$5 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$5]))), new fixed.Point26_6.ptr((x$6 = i + 3 >> 0, ((x$6 < 0 || x$6 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$6])), (x$7 = i + 4 >> 0, ((x$7 < 0 || x$7 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$7]))));
				i = i + (6) >> 0;
			} else if (_1 === (3)) {
				r.Add3(new fixed.Point26_6.ptr((x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$8])), (x$9 = i + 2 >> 0, ((x$9 < 0 || x$9 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 3 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$10])), (x$11 = i + 4 >> 0, ((x$11 < 0 || x$11 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$11]))), new fixed.Point26_6.ptr((x$12 = i + 5 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$12])), (x$13 = i + 6 >> 0, ((x$13 < 0 || x$13 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$13]))));
				i = i + (8) >> 0;
			} else {
				$panic(new $String("freetype/raster: bad path"));
			}
		}
	};
	Rasterizer.prototype.AddPath = function(p) { return this.$val.AddPath(p); };
	Rasterizer.ptr.prototype.AddStroke = function(q, width, cr, jr) {
		var $ptr, cr, jr, q, r, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; cr = $f.cr; jr = $f.jr; q = $f.q; r = $f.r; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = Stroke(r, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.AddStroke }; } $f.$ptr = $ptr; $f.cr = cr; $f.jr = jr; $f.q = q; $f.r = r; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.AddStroke = function(q, width, cr, jr) { return this.$val.AddStroke(q, width, cr, jr); };
	Rasterizer.ptr.prototype.areaToAlpha = function(area) {
		var $ptr, a, alpha, area, r;
		r = this;
		a = ((area + 1 >> 0)) >> 1 >> 0;
		if (a < 0) {
			a = -a;
		}
		alpha = ((a >>> 0));
		if (r.UseNonZeroWinding) {
			if (alpha > 4095) {
				alpha = 4095;
			}
		} else {
			alpha = (alpha & (8191)) >>> 0;
			if (alpha > 4096) {
				alpha = 8192 - alpha >>> 0;
			} else if (alpha === 4096) {
				alpha = 4095;
			}
		}
		return ((alpha << 4 >>> 0) | (alpha >>> 8 >>> 0)) >>> 0;
	};
	Rasterizer.prototype.areaToAlpha = function(area) { return this.$val.areaToAlpha(area); };
	Rasterizer.ptr.prototype.Rasterize = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, alpha, alpha$1, c, cover, p, r, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xi, xi0, xi0$1, xi1, xi1$1, yi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; alpha = $f.alpha; alpha$1 = $f.alpha$1; c = $f.c; cover = $f.cover; p = $f.p; r = $f.r; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; xi = $f.xi; xi0 = $f.xi0; xi0$1 = $f.xi0$1; xi1 = $f.xi1; xi1$1 = $f.xi1$1; yi = $f.yi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.saveCell();
		s = 0;
		yi = 0;
		/* while (true) { */ case 1:
			/* if (!(yi < r.cellIndex.$length)) { break; } */ if(!(yi < r.cellIndex.$length)) { $s = 2; continue; }
			_tmp = 0;
			_tmp$1 = 0;
			xi = _tmp;
			cover = _tmp$1;
			c = (x = r.cellIndex, ((yi < 0 || yi >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + yi]));
			/* while (true) { */ case 3:
				/* if (!(!((c === -1)))) { break; } */ if(!(!((c === -1)))) { $s = 4; continue; }
				if (!((cover === 0)) && (x$1 = r.cell, ((c < 0 || c >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + c])).xi > xi) {
					alpha = r.areaToAlpha($imul(($imul(cover, 64)), 2));
					if (!((alpha === 0))) {
						_tmp$2 = xi;
						_tmp$3 = (x$2 = r.cell, ((c < 0 || c >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + c])).xi;
						xi0 = _tmp$2;
						xi1 = _tmp$3;
						if (xi0 < 0) {
							xi0 = 0;
						}
						if (xi1 >= r.width) {
							xi1 = r.width;
						}
						if (xi0 < xi1) {
							Span.copy((x$3 = r.spanBuf, ((s < 0 || s >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[s])), new Span.ptr(yi + r.Dy >> 0, xi0 + r.Dx >> 0, xi1 + r.Dx >> 0, alpha));
							s = s + (1) >> 0;
						}
					}
				}
				cover = cover + ((x$4 = r.cell, ((c < 0 || c >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + c])).cover) >> 0;
				alpha$1 = r.areaToAlpha(($imul(($imul(cover, 64)), 2)) - (x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])).area >> 0);
				xi = (x$6 = r.cell, ((c < 0 || c >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + c])).xi + 1 >> 0;
				if (!((alpha$1 === 0))) {
					_tmp$4 = (x$7 = r.cell, ((c < 0 || c >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + c])).xi;
					_tmp$5 = xi;
					xi0$1 = _tmp$4;
					xi1$1 = _tmp$5;
					if (xi0$1 < 0) {
						xi0$1 = 0;
					}
					if (xi1$1 >= r.width) {
						xi1$1 = r.width;
					}
					if (xi0$1 < xi1$1) {
						Span.copy((x$8 = r.spanBuf, ((s < 0 || s >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[s])), new Span.ptr(yi + r.Dy >> 0, xi0$1 + r.Dx >> 0, xi1$1 + r.Dx >> 0, alpha$1));
						s = s + (1) >> 0;
					}
				}
				/* */ if (s > 62) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (s > 62) { */ case 5:
					$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), false); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					s = 0;
				/* } */ case 6:
				c = (x$9 = r.cell, ((c < 0 || c >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + c])).next;
			/* } */ $s = 3; continue; case 4:
			yi = yi + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), true); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.Rasterize }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.alpha = alpha; $f.alpha$1 = alpha$1; $f.c = c; $f.cover = cover; $f.p = p; $f.r = r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.xi = xi; $f.xi0 = xi0; $f.xi0$1 = xi0$1; $f.xi1 = xi1; $f.xi1$1 = xi1$1; $f.yi = yi; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.Rasterize = function(p) { return this.$val.Rasterize(p); };
	Rasterizer.ptr.prototype.Clear = function() {
		var $ptr, i, r, x;
		r = this;
		fixed.Point26_6.copy(r.a, new fixed.Point26_6.ptr(0, 0));
		r.xi = 0;
		r.yi = 0;
		r.area = 0;
		r.cover = 0;
		r.cell = $subslice(r.cell, 0, 0);
		i = 0;
		while (true) {
			if (!(i < r.cellIndex.$length)) { break; }
			(x = r.cellIndex, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = -1));
			i = i + (1) >> 0;
		}
	};
	Rasterizer.prototype.Clear = function() { return this.$val.Clear(); };
	Rasterizer.ptr.prototype.SetBounds = function(width, height) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, height, r, ss2, ss3, width;
		r = this;
		if (width < 0) {
			width = 0;
		}
		if (height < 0) {
			height = 0;
		}
		_tmp = 32;
		_tmp$1 = 16;
		ss2 = _tmp;
		ss3 = _tmp$1;
		if (width > 24 || height > 24) {
			_tmp$2 = $imul(2, ss2);
			_tmp$3 = $imul(2, ss3);
			ss2 = _tmp$2;
			ss3 = _tmp$3;
			if (width > 120 || height > 120) {
				_tmp$4 = $imul(2, ss2);
				_tmp$5 = $imul(2, ss3);
				ss2 = _tmp$4;
				ss3 = _tmp$5;
			}
		}
		r.width = width;
		r.splitScale2 = ss2;
		r.splitScale3 = ss3;
		r.cell = $subslice(new sliceType$3(r.cellBuf), 0, 0);
		if (height > 64) {
			r.cellIndex = $makeSlice(sliceType$5, height);
		} else {
			r.cellIndex = $subslice(new sliceType$5(r.cellIndexBuf), 0, height);
		}
		r.Clear();
	};
	Rasterizer.prototype.SetBounds = function(width, height) { return this.$val.SetBounds(width, height); };
	CapperFunc.prototype.Cap = function(p, halfWidth, pivot, n1) {
		var $ptr, f, halfWidth, n1, p, pivot, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(p, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapperFunc.prototype.Cap }; } $f.$ptr = $ptr; $f.f = f; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CapperFunc).prototype.Cap = function(p, halfWidth, pivot, n1) { return new CapperFunc(this.$get()).Cap(p, halfWidth, pivot, n1); };
	JoinerFunc.prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) {
		var $ptr, f, halfWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; halfWidth = $f.halfWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(lhs, rhs, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JoinerFunc.prototype.Join }; } $f.$ptr = $ptr; $f.f = f; $f.halfWidth = halfWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(JoinerFunc).prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) { return new JoinerFunc(this.$get()).Join(lhs, rhs, halfWidth, pivot, n0, n1); };
	roundCapper = function(p, halfWidth, pivot, n1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, d, e, end, halfWidth, n1, p, pivot, side, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; e = $f.e; end = $f.end; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; side = $f.side; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(pRot90CCW($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		side = $clone($clone(pivot, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6);
		_tmp = $clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		_tmp$1 = $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		start = $clone(_tmp, fixed.Point26_6);
		end = $clone(_tmp$1, fixed.Point26_6);
		_tmp$2 = $clone($clone(n1, fixed.Point26_6).Mul(35), fixed.Point26_6);
		_tmp$3 = $clone($clone(e, fixed.Point26_6).Mul(35), fixed.Point26_6);
		d = $clone(_tmp$2, fixed.Point26_6);
		e = $clone(_tmp$3, fixed.Point26_6);
		$r = p.Add3($clone($clone(start, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone($clone(side, fixed.Point26_6).Sub($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone(side, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.Add3($clone($clone(side, fixed.Point26_6).Add($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone($clone(end, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone(end, fixed.Point26_6)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundCapper }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.e = e; $f.end = end; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.side = side; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	roundJoiner = function(lhs, rhs, haflWidth, pivot, n0, n1) {
		var $ptr, dot, haflWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dot = $f.dot; haflWidth = $f.haflWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = pDot($clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(n1, fixed.Point26_6));
		/* */ if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { */ case 1:
			$r = addArc(lhs, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = rhs.Add1($clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = lhs.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = addArc(rhs, $clone(pivot, fixed.Point26_6), $clone(pNeg($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundJoiner }; } $f.$ptr = $ptr; $f.dot = dot; $f.haflWidth = haflWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	addArc = function(p, pivot, n0, n1) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, d, m0, m1, m2, multiple, n0, n0t, n0t$1, n1, p, pivot, pm1, pm1$1, r2, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; multiple = $f.multiple; n0 = $f.n0; n0t = $f.n0t; n0t$1 = $f.n0t$1; n1 = $f.n1; p = $f.p; pivot = $f.pivot; pm1 = $f.pm1; pm1$1 = $f.pm1$1; r2 = $f.r2; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r2 = pDot($clone(n0, fixed.Point26_6), $clone(n0, fixed.Point26_6));
		/* */ if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { */ case 1:
			$r = p.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		s = new fixed.Point26_6.ptr(0, 0);
		m0 = $clone(pRot45CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m1 = $clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m2 = $clone(pRot90CW($clone(m0, fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { */ case 4:
			/* */ if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { */ case 7:
				/* */ if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { */ case 10:
					fixed.Point26_6.copy(s, n0);
					$s = 12; continue;
				/* } else { */ case 11:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m0);
				/* } */ case 12:
				$s = 9; continue;
			/* } else { */ case 8:
				_tmp = $clone($clone(pivot, fixed.Point26_6).Add($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$1 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1 = $clone(_tmp, fixed.Point26_6);
				n0t = $clone(_tmp$1, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Add($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone(pm1, fixed.Point26_6)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { */ case 16:
					fixed.Point26_6.copy(s, m1);
					$s = 18; continue;
				/* } else { */ case 17:
					$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Sub($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m2);
				/* } */ case 18:
			/* } */ case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			/* */ if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { */ case 20:
				/* */ if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { */ case 23:
					fixed.Point26_6.copy(s, n0);
					$s = 25; continue;
				/* } else { */ case 24:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m2, fixed.Point26_6)));
				/* } */ case 25:
				$s = 22; continue;
			/* } else { */ case 21:
				_tmp$2 = $clone($clone(pivot, fixed.Point26_6).Sub($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$3 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1$1 = $clone(_tmp$2, fixed.Point26_6);
				n0t$1 = $clone(_tmp$3, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Add($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone(pm1$1, fixed.Point26_6)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { */ case 29:
					fixed.Point26_6.copy(s, pNeg($clone(m1, fixed.Point26_6)));
					$s = 31; continue;
				/* } else { */ case 30:
					$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Sub($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m0, fixed.Point26_6)));
				/* } */ case 31:
			/* } */ case 22:
		/* } */ case 6:
		d = $div64($mul64(new fixed.Int52_12(0, 256), pDot($clone(s, fixed.Point26_6), $clone(n1, fixed.Point26_6))), r2, false);
		multiple = (((x$7 = (x$8 = $div64($mul64(new fixed.Int52_12(0, 22), (new fixed.Int52_12(d.$high - 0, d.$low - 181))), new fixed.Int52_12(0, 75), false), new fixed.Int52_12(0 - x$8.$high, 150 - x$8.$low)), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 2 >> 0;
		$r = p.Add2($clone($clone(pivot, fixed.Point26_6).Add($clone($clone($clone(s, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6).Mul(multiple), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addArc }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.multiple = multiple; $f.n0 = n0; $f.n0t = n0t; $f.n0t$1 = n0t$1; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.pm1 = pm1; $f.pm1$1 = pm1$1; $f.r2 = r2; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.$s = $s; $f.$r = $r; return $f;
	};
	midpoint = function(a, b) {
		var $ptr, _q, _q$1, a, b;
		return new fixed.Point26_6.ptr((_q = ((a.X + b.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((a.Y + b.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	angleGreaterThan45 = function(v0, v1) {
		var $ptr, v, v0, v1, x, x$1;
		v = $clone(pRot45CCW($clone(v0, fixed.Point26_6)), fixed.Point26_6);
		return (x = pDot($clone(v, fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = pDot($clone(pRot90CW($clone(v, fixed.Point26_6)), fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0)));
	};
	interpolate = function(a, b, t) {
		var $ptr, a, b, s, t, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		s = new fixed.Int52_12(0 - t.$high, 4096 - t.$low);
		x$2 = (x = $mul64(s, (new fixed.Int52_12(0, a.X))), x$1 = $mul64(t, (new fixed.Int52_12(0, b.X))), new fixed.Int52_12(x.$high + x$1.$high, x.$low + x$1.$low));
		y = (x$3 = $mul64(s, (new fixed.Int52_12(0, a.Y))), x$4 = $mul64(t, (new fixed.Int52_12(0, b.Y))), new fixed.Int52_12(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		return new fixed.Point26_6.ptr((((x$5 = $shiftRightInt64(x$2, 12), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)), (((x$6 = $shiftRightInt64(y, 12), x$6.$low + ((x$6.$high >> 31) * 4294967296)) >> 0)));
	};
	curviest2 = function(a, b, c) {
		var $ptr, a, b, c, dx, dy, ex, ey, x, x$1, x$2, x$3, x$4;
		dx = (new $Int64(0, (b.X - a.X >> 0)));
		dy = (new $Int64(0, (b.Y - a.Y >> 0)));
		ex = (new $Int64(0, ((c.X - ($imul(2, b.X)) >> 0) + a.X >> 0)));
		ey = (new $Int64(0, ((c.Y - ($imul(2, b.Y)) >> 0) + a.Y >> 0)));
		if ((ex.$high === 0 && ex.$low === 0) && (ey.$high === 0 && ey.$low === 0)) {
			return new fixed.Int52_12(0, 2048);
		}
		return ((x = $div64($mul64(new $Int64(-1, 4294963200), ((x$1 = $mul64(dx, ex), x$2 = $mul64(dy, ey), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)))), ((x$3 = $mul64(ex, ex), x$4 = $mul64(ey, ey), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low))), false), new fixed.Int52_12(x.$high, x.$low)));
	};
	stroker.ptr.prototype.addNonCurvy2 = function(b, c) {
		var $ptr, _tmp, _tmp$1, a, ab, abIsSmall, anorm, b, b$1, bc, bcIsSmall, bnorm, c, c$1, cnorm, depth, ds, k, mab, mac, mbc, ps, t, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; ab = $f.ab; abIsSmall = $f.abIsSmall; anorm = $f.anorm; b = $f.b; b$1 = $f.b$1; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bnorm = $f.bnorm; c = $f.c; c$1 = $f.c$1; cnorm = $f.cnorm; depth = $f.depth; ds = $f.ds; k = $f.k; mab = $f.mab; mac = $f.mac; mbc = $f.mbc; ps = $f.ps; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ds = arrayType$7.zero();
		ps = arrayType$8.zero();
		t = 0;
		ds[0] = 0;
		fixed.Point26_6.copy(ps[2], k.a);
		fixed.Point26_6.copy(ps[1], b);
		fixed.Point26_6.copy(ps[0], c);
		anorm = $clone(k.anorm, fixed.Point26_6);
		cnorm = new fixed.Point26_6.ptr(0, 0);
		/* while (true) { */ case 1:
			depth = ((t < 0 || t >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[t]);
			a = $clone((x = ($imul(2, t)) + 2 >> 0, ((x < 0 || x >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x])), fixed.Point26_6);
			b$1 = $clone((x$1 = ($imul(2, t)) + 1 >> 0, ((x$1 < 0 || x$1 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$1])), fixed.Point26_6);
			c$1 = $clone((x$2 = ($imul(2, t)) + 0 >> 0, ((x$2 < 0 || x$2 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$2])), fixed.Point26_6);
			ab = $clone($clone(b$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6);
			bc = $clone($clone(c$1, fixed.Point26_6).Sub($clone(b$1, fixed.Point26_6)), fixed.Point26_6);
			abIsSmall = (x$3 = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 4096)));
			bcIsSmall = (x$4 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 4096)));
			/* */ if (abIsSmall && bcIsSmall) { $s = 3; continue; }
			/* */ if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (abIsSmall && bcIsSmall) { */ case 3:
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				mac = $clone(midpoint($clone(a, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mac, fixed.Point26_6), $clone(anorm, fixed.Point26_6), $clone(cnorm, fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mac, fixed.Point26_6), $clone(pNeg($clone(anorm, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { */ case 4:
				mab = $clone(midpoint($clone(a, fixed.Point26_6), $clone(b$1, fixed.Point26_6)), fixed.Point26_6);
				mbc = $clone(midpoint($clone(b$1, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				t = t + (1) >> 0;
				(x$5 = t + 0 >> 0, ((x$5 < 0 || x$5 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$5] = (depth + 1 >> 0)));
				(x$6 = t - 1 >> 0, ((x$6 < 0 || x$6 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$6] = (depth + 1 >> 0)));
				fixed.Point26_6.copy((x$7 = ($imul(2, t)) + 2 >> 0, ((x$7 < 0 || x$7 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$7])), a);
				fixed.Point26_6.copy((x$8 = ($imul(2, t)) + 1 >> 0, ((x$8 < 0 || x$8 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$8])), mab);
				fixed.Point26_6.copy((x$9 = ($imul(2, t)) + 0 >> 0, ((x$9 < 0 || x$9 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$9])), midpoint($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6)));
				fixed.Point26_6.copy((x$10 = ($imul(2, t)) - 1 >> 0, ((x$10 < 0 || x$10 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$10])), mbc);
				/* continue; */ $s = 1; continue;
				$s = 6; continue;
			/* } else { */ case 5:
				bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				$r = k.p.Add2($clone($clone(b$1, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Add($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add2($clone($clone(b$1, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Sub($clone(cnorm, fixed.Point26_6)), fixed.Point26_6));
			/* } */ case 6:
			if (t === 0) {
				_tmp = $clone(c$1, fixed.Point26_6);
				_tmp$1 = $clone(cnorm, fixed.Point26_6);
				fixed.Point26_6.copy(k.a, _tmp);
				fixed.Point26_6.copy(k.anorm, _tmp$1);
				$s = -1; return;
			}
			t = t - (1) >> 0;
			fixed.Point26_6.copy(anorm, cnorm);
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("unreachable"));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.addNonCurvy2 }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.anorm = anorm; $f.b = b; $f.b$1 = b$1; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bnorm = bnorm; $f.c = c; $f.c$1 = c$1; $f.cnorm = cnorm; $f.depth = depth; $f.ds = ds; $f.k = k; $f.mab = mab; $f.mac = mac; $f.mbc = mbc; $f.ps = ps; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.addNonCurvy2 = function(b, c) { return this.$val.addNonCurvy2(b, c); };
	stroker.ptr.prototype.Add1 = function(b) {
		var $ptr, _tmp, _tmp$1, b, bnorm, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; bnorm = $f.bnorm; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(bnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = k.p.Add1($clone($clone(b, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(b, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
		_tmp = $clone(b, fixed.Point26_6);
		_tmp$1 = $clone(bnorm, fixed.Point26_6);
		fixed.Point26_6.copy(k.a, _tmp);
		fixed.Point26_6.copy(k.anorm, _tmp$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add1 }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.bnorm = bnorm; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	stroker.ptr.prototype.Add2 = function(b, c) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ab, abIsSmall, abnorm, acnorm, b, bc, bcIsSmall, bcnorm, c, k, mab, mabc, mbc, pArc, t, x, x$1, x$2, x$3, x$4, x$5, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ab = $f.ab; abIsSmall = $f.abIsSmall; abnorm = $f.abnorm; acnorm = $f.acnorm; b = $f.b; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bcnorm = $f.bcnorm; c = $f.c; k = $f.k; mab = $f.mab; mabc = $f.mabc; mbc = $f.mbc; pArc = $f.pArc; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ab = $clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6);
		bc = $clone($clone(c, fixed.Point26_6).Sub($clone(b, fixed.Point26_6)), fixed.Point26_6);
		abnorm = $clone(pRot90CCW($clone(pNorm($clone(ab, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(abnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		abIsSmall = (x = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 1024)));
		bcIsSmall = (x$1 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 1024)));
		/* */ if (abIsSmall || bcIsSmall) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (abIsSmall || bcIsSmall) { */ case 6:
			acnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(acnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(acnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp = $clone(c, fixed.Point26_6);
			_tmp$1 = $clone(acnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp);
			fixed.Point26_6.copy(k.anorm, _tmp$1);
			$s = -1; return;
		/* } */ case 7:
		t = curviest2($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6));
		/* */ if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { */ case 9:
			$r = k.addNonCurvy2($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 10:
		mab = $clone(interpolate($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), t), fixed.Point26_6);
		mbc = $clone(interpolate($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6), t), fixed.Point26_6);
		mabc = $clone(interpolate($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6), t), fixed.Point26_6);
		bcnorm = $clone(pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { */ case 12:
			pArc = (x$5 = pDot($clone(abnorm, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$5.$high < 0 || (x$5.$high === 0 && x$5.$low < 0)));
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (pArc) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (pArc) { */ case 15:
				z = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(abnorm, fixed.Point26_6), $clone(z, fixed.Point26_6)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(z, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			/* */ if (!pArc) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!pArc) { */ case 21:
				z$1 = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(pNeg($clone(abnorm, fixed.Point26_6)), fixed.Point26_6), $clone(z$1, fixed.Point26_6)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(z$1, fixed.Point26_6), $clone(pNeg($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp$2 = $clone(c, fixed.Point26_6);
			_tmp$3 = $clone(bcnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp$2);
			fixed.Point26_6.copy(k.anorm, _tmp$3);
			$s = -1; return;
		/* } */ case 13:
		$r = k.addNonCurvy2($clone(mab, fixed.Point26_6), $clone(mabc, fixed.Point26_6)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = k.addNonCurvy2($clone(mbc, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add2 }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.abnorm = abnorm; $f.acnorm = acnorm; $f.b = b; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bcnorm = bcnorm; $f.c = c; $f.k = k; $f.mab = mab; $f.mabc = mabc; $f.mbc = mbc; $f.pArc = pArc; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	stroker.ptr.prototype.Add3 = function(b, c, d) {
		var $ptr, b, c, d, k;
		k = this;
		$panic(new $String("freetype/raster: stroke unimplemented for cubic segments"));
	};
	stroker.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	stroker.ptr.prototype.stroke = function(q) {
		var $ptr, _1, i, k, pivot, q, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; i = $f.i; k = $f.k; pivot = $f.pivot; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		k.r = $makeSlice(Path, 0, q.$length);
		fixed.Point26_6.copy(k.a, new fixed.Point26_6.ptr((1 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 1]), (2 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 2])));
		i = 4;
		/* while (true) { */ case 1:
			/* if (!(i < q.$length)) { break; } */ if(!(i < q.$length)) { $s = 2; continue; }
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (1)) { $s = 4; continue; }
				/* */ if (_1 === (2)) { $s = 5; continue; }
				/* */ if (_1 === (3)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (1)) { */ case 4:
					$r = k.Add1(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (4) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (2)) { */ case 5:
					$r = k.Add2(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i + 4 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (6) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (3)) { */ case 6:
					k.Add3(new fixed.Point26_6.ptr((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 4 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 5 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i + 6 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11]))));
					i = i + (8) >> 0;
					$s = 8; continue;
				/* } else { */ case 7:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 8:
			case 3:
		/* } */ $s = 1; continue; case 2:
		if (k.r.$length === 0) {
			$s = -1; return;
		}
		$r = k.cr.Cap(k.p, k.u, $clone(q.lastPoint(), fixed.Point26_6), $clone(pNeg($clone(k.anorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addPathReversed(k.p, k.r); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = $clone(q.firstPoint(), fixed.Point26_6);
		$r = k.cr.Cap(k.p, k.u, $clone(pivot, fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub(new fixed.Point26_6.ptr((x$12 = k.r, (1 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 1])), (x$13 = k.r, (2 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 2])))), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.stroke }; } $f.$ptr = $ptr; $f._1 = _1; $f.i = i; $f.k = k; $f.pivot = pivot; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.stroke = function(q) { return this.$val.stroke(q); };
	Stroke = function(p, q, width, cr, jr) {
		var $ptr, _1, _q, _tmp, _tmp$1, cr, i, j, jr, p, q, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; cr = $f.cr; i = $f.i; j = $f.j; jr = $f.jr; p = $f.p; q = $f.q; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		if ($interfaceIsEqual(cr, $ifaceNil)) {
			cr = $pkg.RoundCapper;
		}
		if ($interfaceIsEqual(jr, $ifaceNil)) {
			jr = $pkg.RoundJoiner;
		}
		if (!(((0 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 0]) === 0))) {
			$panic(new $String("freetype/raster: bad path"));
		}
		s = new stroker.ptr(p, (_q = width / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), cr, jr, Path.nil, new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		i = 0;
		j = 4;
		/* while (true) { */ case 1:
			/* if (!(j < q.$length)) { break; } */ if(!(j < q.$length)) { $s = 2; continue; }
				_1 = ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$r = s.stroke($subslice(q, i, j)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp = j;
					_tmp$1 = j + 4 >> 0;
					i = _tmp;
					j = _tmp$1;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					j = j + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					j = j + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					j = j + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = s.stroke($subslice(q, i)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stroke }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.cr = cr; $f.i = i; $f.j = j; $f.jr = jr; $f.p = p; $f.q = q; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stroke = Stroke;
	Path.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "firstPoint", name: "firstPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}, {prop: "lastPoint", name: "lastPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}];
	ptrType$1.methods = [{prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}];
	ptrType$6.methods = [{prop: "findCell", name: "findCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [$Int], false)}, {prop: "saveCell", name: "saveCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [], false)}, {prop: "setCell", name: "setCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, $Int], [], false)}, {prop: "scan", name: "scan", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}, {prop: "areaToAlpha", name: "areaToAlpha", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int], [$Uint32], false)}, {prop: "Rasterize", name: "Rasterize", pkg: "", typ: $funcType([Painter], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "SetBounds", name: "SetBounds", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	CapperFunc.methods = [{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	JoinerFunc.methods = [{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	ptrType$7.methods = [{prop: "addNonCurvy2", name: "addNonCurvy2", pkg: "github.com/golang/freetype/raster", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "stroke", name: "stroke", pkg: "github.com/golang/freetype/raster", typ: $funcType([Path], [], false)}];
	Adder.init([{prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}]);
	Path.init(fixed.Int26_6);
	Span.init("", [{prop: "Y", name: "Y", exported: true, typ: $Int, tag: ""}, {prop: "X0", name: "X0", exported: true, typ: $Int, tag: ""}, {prop: "X1", name: "X1", exported: true, typ: $Int, tag: ""}, {prop: "Alpha", name: "Alpha", exported: true, typ: $Uint32, tag: ""}]);
	Painter.init([{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$2, $Bool], [], false)}]);
	cell.init("github.com/golang/freetype/raster", [{prop: "xi", name: "xi", exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", exported: false, typ: $Int, tag: ""}, {prop: "next", name: "next", exported: false, typ: $Int, tag: ""}]);
	Rasterizer.init("github.com/golang/freetype/raster", [{prop: "UseNonZeroWinding", name: "UseNonZeroWinding", exported: true, typ: $Bool, tag: ""}, {prop: "Dx", name: "Dx", exported: true, typ: $Int, tag: ""}, {prop: "Dy", name: "Dy", exported: true, typ: $Int, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "splitScale2", name: "splitScale2", exported: false, typ: $Int, tag: ""}, {prop: "splitScale3", name: "splitScale3", exported: false, typ: $Int, tag: ""}, {prop: "a", name: "a", exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "xi", name: "xi", exported: false, typ: $Int, tag: ""}, {prop: "yi", name: "yi", exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", exported: false, typ: $Int, tag: ""}, {prop: "cell", name: "cell", exported: false, typ: sliceType$3, tag: ""}, {prop: "cellIndex", name: "cellIndex", exported: false, typ: sliceType$5, tag: ""}, {prop: "cellBuf", name: "cellBuf", exported: false, typ: arrayType$4, tag: ""}, {prop: "cellIndexBuf", name: "cellIndexBuf", exported: false, typ: arrayType$5, tag: ""}, {prop: "spanBuf", name: "spanBuf", exported: false, typ: arrayType$6, tag: ""}]);
	Capper.init([{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	CapperFunc.init([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	Joiner.init([{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	JoinerFunc.init([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	stroker.init("github.com/golang/freetype/raster", [{prop: "p", name: "p", exported: false, typ: Adder, tag: ""}, {prop: "u", name: "u", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "cr", name: "cr", exported: false, typ: Capper, tag: ""}, {prop: "jr", name: "jr", exported: false, typ: Joiner, tag: ""}, {prop: "r", name: "r", exported: false, typ: Path, tag: ""}, {prop: "a", name: "a", exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "anorm", name: "anorm", exported: false, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.RoundCapper = new CapperFunc((roundCapper));
		$pkg.RoundJoiner = new JoinerFunc((roundJoiner));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/font"] = (function() {
	var $pkg = {}, $init, fixed, image, draw, io, utf8, Face, Metrics, Drawer, Hinting, sliceType, ptrType, BoundBytes, BoundString, MeasureBytes, MeasureString;
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Face = $pkg.Face = $newType(8, $kindInterface, "font.Face", true, "golang.org/x/image/font", true, null);
	Metrics = $pkg.Metrics = $newType(0, $kindStruct, "font.Metrics", true, "golang.org/x/image/font", true, function(Height_, Ascent_, Descent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Height = 0;
			this.Ascent = 0;
			this.Descent = 0;
			return;
		}
		this.Height = Height_;
		this.Ascent = Ascent_;
		this.Descent = Descent_;
	});
	Drawer = $pkg.Drawer = $newType(0, $kindStruct, "font.Drawer", true, "golang.org/x/image/font", true, function(Dst_, Src_, Face_, Dot_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dst = $ifaceNil;
			this.Src = $ifaceNil;
			this.Face = $ifaceNil;
			this.Dot = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.Dst = Dst_;
		this.Src = Src_;
		this.Face = Face_;
		this.Dot = Dot_;
	});
	Hinting = $pkg.Hinting = $newType(4, $kindInt, "font.Hinting", true, "golang.org/x/image/font", true, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Drawer);
	Drawer.ptr.prototype.DrawBytes = function(s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, advance, c, d, dr, mask, maskp, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			dr = $clone(_tuple$1[0], image.Rectangle);
			mask = _tuple$1[1];
			maskp = $clone(_tuple$1[2], image.Point);
			advance = _tuple$1[3];
			ok = _tuple$1[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawBytes = function(s) { return this.$val.DrawBytes(s); };
	Drawer.ptr.prototype.DrawString = function(s) {
		var $ptr, _i, _r, _r$1, _ref, _rune, _tuple, advance, c, d, dr, mask, maskp, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			dr = $clone(_tuple[0], image.Rectangle);
			mask = _tuple[1];
			maskp = $clone(_tuple[2], image.Point);
			advance = _tuple[3];
			ok = _tuple[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawString = function(s) { return this.$val.DrawString(s); };
	Drawer.ptr.prototype.BoundBytes = function(s) {
		var $ptr, _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundBytes = function(s) { return this.$val.BoundBytes(s); };
	Drawer.ptr.prototype.BoundString = function(s) {
		var $ptr, _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundString = function(s) { return this.$val.BoundString(s); };
	Drawer.ptr.prototype.MeasureBytes = function(s) {
		var $ptr, _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureBytes = function(s) { return this.$val.MeasureBytes(s); };
	Drawer.ptr.prototype.MeasureString = function(s) {
		var $ptr, _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureString }; } $f.$ptr = $ptr; $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureString = function(s) { return this.$val.MeasureString(s); };
	BoundBytes = function(f, s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, a, advance, b, bounds, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			b = $clone(_tuple$1[0], fixed.Rectangle26_6);
			a = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundBytes = BoundBytes;
	BoundString = function(f, s) {
		var $ptr, _i, _r, _r$1, _ref, _rune, _tuple, a, advance, b, bounds, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			b = $clone(_tuple[0], fixed.Rectangle26_6);
			a = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundString = BoundString;
	MeasureBytes = function(f, s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, a, advance, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			a = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureBytes = MeasureBytes;
	MeasureString = function(f, s) {
		var $ptr, _i, _r, _r$1, _ref, _rune, _tuple, a, advance, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			a = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureString = MeasureString;
	ptrType.methods = [{prop: "DrawBytes", name: "DrawBytes", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "DrawString", name: "DrawString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "BoundBytes", name: "BoundBytes", pkg: "", typ: $funcType([sliceType], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "BoundString", name: "BoundString", pkg: "", typ: $funcType([$String], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "MeasureBytes", name: "MeasureBytes", pkg: "", typ: $funcType([sliceType], [fixed.Int26_6], false)}, {prop: "MeasureString", name: "MeasureString", pkg: "", typ: $funcType([$String], [fixed.Int26_6], false)}];
	Face.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [Metrics], false)}]);
	Metrics.init("", [{prop: "Height", name: "Height", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Ascent", name: "Ascent", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Descent", name: "Descent", exported: true, typ: fixed.Int26_6, tag: ""}]);
	Drawer.init("", [{prop: "Dst", name: "Dst", exported: true, typ: draw.Image, tag: ""}, {prop: "Src", name: "Src", exported: true, typ: image.Image, tag: ""}, {prop: "Face", name: "Face", exported: true, typ: Face, tag: ""}, {prop: "Dot", name: "Dot", exported: true, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixed.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/truetype"] = (function() {
	var $pkg = {}, $init, errors, fmt, raster, font, fixed, image, math, Options, glyphCacheEntry, glyphCacheKey, glyphCacheVal, indexCacheEntry, face, facePainter, Point, GlyphBuf, pointType, callStackEntry, hinter, graphicsState, f2dot14, Index, NameID, HMetric, VMetric, FormatError, UnsupportedError, cm, Font, arrayType, arrayType$1, ptrType, ptrType$1, ptrType$2, sliceType, sliceType$1, sliceType$2, arrayType$2, arrayType$3, arrayType$4, sliceType$3, sliceType$4, arrayType$5, arrayType$6, sliceType$5, arrayType$7, arrayType$8, sliceType$6, arrayType$9, arrayType$10, ptrType$3, sliceType$7, sliceType$8, ptrType$4, sliceType$9, ptrType$5, ptrType$6, mapType, globalDefaultGS, popCount, powerOf2, subPixels, NewFace, clear, resetTwilightPoints, skipInstructionPayload, normalize, fabs, fdiv, fmul, dotProduct, mulDiv, bool2int32, u32, u16, readTable, parseSubtables, printable, Parse, parse;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	raster = $packages["github.com/golang/freetype/raster"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	math = $packages["math"];
	Options = $pkg.Options = $newType(0, $kindStruct, "truetype.Options", true, "github.com/golang/freetype/truetype", true, function(Size_, DPI_, Hinting_, GlyphCacheEntries_, SubPixelsX_, SubPixelsY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Size = 0;
			this.DPI = 0;
			this.Hinting = 0;
			this.GlyphCacheEntries = 0;
			this.SubPixelsX = 0;
			this.SubPixelsY = 0;
			return;
		}
		this.Size = Size_;
		this.DPI = DPI_;
		this.Hinting = Hinting_;
		this.GlyphCacheEntries = GlyphCacheEntries_;
		this.SubPixelsX = SubPixelsX_;
		this.SubPixelsY = SubPixelsY_;
	});
	glyphCacheEntry = $pkg.glyphCacheEntry = $newType(0, $kindStruct, "truetype.glyphCacheEntry", true, "github.com/golang/freetype/truetype", false, function(key_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = new glyphCacheKey.ptr(0, 0, 0);
			this.val = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			return;
		}
		this.key = key_;
		this.val = val_;
	});
	glyphCacheKey = $pkg.glyphCacheKey = $newType(0, $kindStruct, "truetype.glyphCacheKey", true, "github.com/golang/freetype/truetype", false, function(index_, fx_, fy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.index = 0;
			this.fx = 0;
			this.fy = 0;
			return;
		}
		this.index = index_;
		this.fx = fx_;
		this.fy = fy_;
	});
	glyphCacheVal = $pkg.glyphCacheVal = $newType(0, $kindStruct, "truetype.glyphCacheVal", true, "github.com/golang/freetype/truetype", false, function(advanceWidth_, offset_, gw_, gh_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.advanceWidth = 0;
			this.offset = new image.Point.ptr(0, 0);
			this.gw = 0;
			this.gh = 0;
			return;
		}
		this.advanceWidth = advanceWidth_;
		this.offset = offset_;
		this.gw = gw_;
		this.gh = gh_;
	});
	indexCacheEntry = $pkg.indexCacheEntry = $newType(0, $kindStruct, "truetype.indexCacheEntry", true, "github.com/golang/freetype/truetype", false, function(rune_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rune = 0;
			this.index = 0;
			return;
		}
		this.rune = rune_;
		this.index = index_;
	});
	face = $pkg.face = $newType(0, $kindStruct, "truetype.face", true, "github.com/golang/freetype/truetype", false, function(f_, hinting_, scale_, subPixelX_, subPixelBiasX_, subPixelMaskX_, subPixelY_, subPixelBiasY_, subPixelMaskY_, masks_, glyphCache_, r_, p_, paintOffset_, maxw_, maxh_, glyphBuf_, indexCache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = ptrType$1.nil;
			this.hinting = 0;
			this.scale = 0;
			this.subPixelX = 0;
			this.subPixelBiasX = 0;
			this.subPixelMaskX = 0;
			this.subPixelY = 0;
			this.subPixelBiasY = 0;
			this.subPixelMaskY = 0;
			this.masks = ptrType$2.nil;
			this.glyphCache = sliceType.nil;
			this.r = new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero());
			this.p = $ifaceNil;
			this.paintOffset = 0;
			this.maxw = 0;
			this.maxh = 0;
			this.glyphBuf = new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil);
			this.indexCache = arrayType$8.zero();
			return;
		}
		this.f = f_;
		this.hinting = hinting_;
		this.scale = scale_;
		this.subPixelX = subPixelX_;
		this.subPixelBiasX = subPixelBiasX_;
		this.subPixelMaskX = subPixelMaskX_;
		this.subPixelY = subPixelY_;
		this.subPixelBiasY = subPixelBiasY_;
		this.subPixelMaskY = subPixelMaskY_;
		this.masks = masks_;
		this.glyphCache = glyphCache_;
		this.r = r_;
		this.p = p_;
		this.paintOffset = paintOffset_;
		this.maxw = maxw_;
		this.maxh = maxh_;
		this.glyphBuf = glyphBuf_;
		this.indexCache = indexCache_;
	});
	facePainter = $pkg.facePainter = $newType(0, $kindStruct, "truetype.facePainter", true, "github.com/golang/freetype/truetype", false, function(a_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = ptrType$4.nil;
			return;
		}
		this.a = a_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "truetype.Point", true, "github.com/golang/freetype/truetype", true, function(X_, Y_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Flags = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Flags = Flags_;
	});
	GlyphBuf = $pkg.GlyphBuf = $newType(0, $kindStruct, "truetype.GlyphBuf", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, Bounds_, Points_, Unhinted_, InFontUnits_, Ends_, font_, scale_, hinting_, hinter_, phantomPoints_, pp1x_, metricsSet_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.Bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.Points = sliceType$3.nil;
			this.Unhinted = sliceType$3.nil;
			this.InFontUnits = sliceType$3.nil;
			this.Ends = sliceType$2.nil;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.hinting = 0;
			this.hinter = new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil);
			this.phantomPoints = arrayType$7.zero();
			this.pp1x = 0;
			this.metricsSet = false;
			this.tmp = sliceType$3.nil;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.Bounds = Bounds_;
		this.Points = Points_;
		this.Unhinted = Unhinted_;
		this.InFontUnits = InFontUnits_;
		this.Ends = Ends_;
		this.font = font_;
		this.scale = scale_;
		this.hinting = hinting_;
		this.hinter = hinter_;
		this.phantomPoints = phantomPoints_;
		this.pp1x = pp1x_;
		this.metricsSet = metricsSet_;
		this.tmp = tmp_;
	});
	pointType = $pkg.pointType = $newType(4, $kindUint32, "truetype.pointType", true, "github.com/golang/freetype/truetype", false, null);
	callStackEntry = $pkg.callStackEntry = $newType(0, $kindStruct, "truetype.callStackEntry", true, "github.com/golang/freetype/truetype", false, function(program_, pc_, loopCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.program = sliceType$6.nil;
			this.pc = 0;
			this.loopCount = 0;
			return;
		}
		this.program = program_;
		this.pc = pc_;
		this.loopCount = loopCount_;
	});
	hinter = $pkg.hinter = $newType(0, $kindStruct, "truetype.hinter", true, "github.com/golang/freetype/truetype", false, function(stack_, store_, functions_, font_, scale_, gs_, defaultGS_, points_, ends_, scaledCVTInitialized_, scaledCVT_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.stack = sliceType$4.nil;
			this.store = sliceType$4.nil;
			this.functions = false;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.gs = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.defaultGS = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.points = arrayType$6.zero();
			this.ends = sliceType$2.nil;
			this.scaledCVTInitialized = false;
			this.scaledCVT = sliceType$5.nil;
			return;
		}
		this.stack = stack_;
		this.store = store_;
		this.functions = functions_;
		this.font = font_;
		this.scale = scale_;
		this.gs = gs_;
		this.defaultGS = defaultGS_;
		this.points = points_;
		this.ends = ends_;
		this.scaledCVTInitialized = scaledCVTInitialized_;
		this.scaledCVT = scaledCVT_;
	});
	graphicsState = $pkg.graphicsState = $newType(0, $kindStruct, "truetype.graphicsState", true, "github.com/golang/freetype/truetype", false, function(pv_, fv_, dv_, rp_, zp_, controlValueCutIn_, singleWidthCutIn_, singleWidth_, deltaBase_, deltaShift_, minDist_, loop_, roundPeriod_, roundPhase_, roundThreshold_, roundSuper45_, autoFlip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pv = arrayType.zero();
			this.fv = arrayType.zero();
			this.dv = arrayType.zero();
			this.rp = arrayType$1.zero();
			this.zp = arrayType$1.zero();
			this.controlValueCutIn = 0;
			this.singleWidthCutIn = 0;
			this.singleWidth = 0;
			this.deltaBase = 0;
			this.deltaShift = 0;
			this.minDist = 0;
			this.loop = 0;
			this.roundPeriod = 0;
			this.roundPhase = 0;
			this.roundThreshold = 0;
			this.roundSuper45 = false;
			this.autoFlip = false;
			return;
		}
		this.pv = pv_;
		this.fv = fv_;
		this.dv = dv_;
		this.rp = rp_;
		this.zp = zp_;
		this.controlValueCutIn = controlValueCutIn_;
		this.singleWidthCutIn = singleWidthCutIn_;
		this.singleWidth = singleWidth_;
		this.deltaBase = deltaBase_;
		this.deltaShift = deltaShift_;
		this.minDist = minDist_;
		this.loop = loop_;
		this.roundPeriod = roundPeriod_;
		this.roundPhase = roundPhase_;
		this.roundThreshold = roundThreshold_;
		this.roundSuper45 = roundSuper45_;
		this.autoFlip = autoFlip_;
	});
	f2dot14 = $pkg.f2dot14 = $newType(2, $kindInt16, "truetype.f2dot14", true, "github.com/golang/freetype/truetype", false, null);
	Index = $pkg.Index = $newType(2, $kindUint16, "truetype.Index", true, "github.com/golang/freetype/truetype", true, null);
	NameID = $pkg.NameID = $newType(2, $kindUint16, "truetype.NameID", true, "github.com/golang/freetype/truetype", true, null);
	HMetric = $pkg.HMetric = $newType(0, $kindStruct, "truetype.HMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, LeftSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.LeftSideBearing = 0;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.LeftSideBearing = LeftSideBearing_;
	});
	VMetric = $pkg.VMetric = $newType(0, $kindStruct, "truetype.VMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceHeight_, TopSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceHeight = 0;
			this.TopSideBearing = 0;
			return;
		}
		this.AdvanceHeight = AdvanceHeight_;
		this.TopSideBearing = TopSideBearing_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "truetype.FormatError", true, "github.com/golang/freetype/truetype", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "truetype.UnsupportedError", true, "github.com/golang/freetype/truetype", true, null);
	cm = $pkg.cm = $newType(0, $kindStruct, "truetype.cm", true, "github.com/golang/freetype/truetype", false, function(start_, end_, delta_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.start = 0;
			this.end = 0;
			this.delta = 0;
			this.offset = 0;
			return;
		}
		this.start = start_;
		this.end = end_;
		this.delta = delta_;
		this.offset = offset_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "truetype.Font", true, "github.com/golang/freetype/truetype", true, function(cmap_, cvt_, fpgm_, glyf_, hdmx_, head_, hhea_, hmtx_, kern_, loca_, maxp_, name_, os2_, prep_, vmtx_, cmapIndexes_, cm_, locaOffsetFormat_, nGlyph_, nHMetric_, nKern_, fUnitsPerEm_, ascent_, descent_, bounds_, maxTwilightPoints_, maxStorage_, maxFunctionDefs_, maxStackElements_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cmap = sliceType$6.nil;
			this.cvt = sliceType$6.nil;
			this.fpgm = sliceType$6.nil;
			this.glyf = sliceType$6.nil;
			this.hdmx = sliceType$6.nil;
			this.head = sliceType$6.nil;
			this.hhea = sliceType$6.nil;
			this.hmtx = sliceType$6.nil;
			this.kern = sliceType$6.nil;
			this.loca = sliceType$6.nil;
			this.maxp = sliceType$6.nil;
			this.name = sliceType$6.nil;
			this.os2 = sliceType$6.nil;
			this.prep = sliceType$6.nil;
			this.vmtx = sliceType$6.nil;
			this.cmapIndexes = sliceType$6.nil;
			this.cm = sliceType$8.nil;
			this.locaOffsetFormat = 0;
			this.nGlyph = 0;
			this.nHMetric = 0;
			this.nKern = 0;
			this.fUnitsPerEm = 0;
			this.ascent = 0;
			this.descent = 0;
			this.bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.maxTwilightPoints = 0;
			this.maxStorage = 0;
			this.maxFunctionDefs = 0;
			this.maxStackElements = 0;
			return;
		}
		this.cmap = cmap_;
		this.cvt = cvt_;
		this.fpgm = fpgm_;
		this.glyf = glyf_;
		this.hdmx = hdmx_;
		this.head = head_;
		this.hhea = hhea_;
		this.hmtx = hmtx_;
		this.kern = kern_;
		this.loca = loca_;
		this.maxp = maxp_;
		this.name = name_;
		this.os2 = os2_;
		this.prep = prep_;
		this.vmtx = vmtx_;
		this.cmapIndexes = cmapIndexes_;
		this.cm = cm_;
		this.locaOffsetFormat = locaOffsetFormat_;
		this.nGlyph = nGlyph_;
		this.nHMetric = nHMetric_;
		this.nKern = nKern_;
		this.fUnitsPerEm = fUnitsPerEm_;
		this.ascent = ascent_;
		this.descent = descent_;
		this.bounds = bounds_;
		this.maxTwilightPoints = maxTwilightPoints_;
		this.maxStorage = maxStorage_;
		this.maxFunctionDefs = maxFunctionDefs_;
		this.maxStackElements = maxStackElements_;
	});
	arrayType = $arrayType(f2dot14, 2);
	arrayType$1 = $arrayType($Int32, 3);
	ptrType = $ptrType(Options);
	ptrType$1 = $ptrType(Font);
	ptrType$2 = $ptrType(image.Alpha);
	sliceType = $sliceType(glyphCacheEntry);
	sliceType$1 = $sliceType(raster.cell);
	sliceType$2 = $sliceType($Int);
	arrayType$2 = $arrayType(raster.cell, 256);
	arrayType$3 = $arrayType($Int, 64);
	arrayType$4 = $arrayType(raster.Span, 64);
	sliceType$3 = $sliceType(Point);
	sliceType$4 = $sliceType($Int32);
	arrayType$5 = $arrayType(sliceType$3, 3);
	arrayType$6 = $arrayType(arrayType$5, 2);
	sliceType$5 = $sliceType(fixed.Int26_6);
	arrayType$7 = $arrayType(Point, 4);
	arrayType$8 = $arrayType(indexCacheEntry, 256);
	sliceType$6 = $sliceType($Uint8);
	arrayType$9 = $arrayType($Int16, 4);
	arrayType$10 = $arrayType(callStackEntry, 32);
	ptrType$3 = $ptrType(Point);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType(cm);
	ptrType$4 = $ptrType(face);
	sliceType$9 = $sliceType(raster.Span);
	ptrType$5 = $ptrType(GlyphBuf);
	ptrType$6 = $ptrType(hinter);
	mapType = $mapType($Int32, sliceType$6);
	powerOf2 = function(i) {
		var $ptr, i;
		return !((i === 0)) && (((i & ((i - 1 >> 0)))) === 0);
	};
	Options.ptr.prototype.size = function() {
		var $ptr, o;
		o = this;
		if (!(o === ptrType.nil) && o.Size > 0) {
			return o.Size;
		}
		return 12;
	};
	Options.prototype.size = function() { return this.$val.size(); };
	Options.ptr.prototype.dpi = function() {
		var $ptr, o;
		o = this;
		if (!(o === ptrType.nil) && o.DPI > 0) {
			return o.DPI;
		}
		return 72;
	};
	Options.prototype.dpi = function() { return this.$val.dpi(); };
	Options.ptr.prototype.hinting = function() {
		var $ptr, _1, o;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.Hinting;
			if ((_1 === (1)) || (_1 === (2))) {
				return 2;
			}
		}
		return 0;
	};
	Options.prototype.hinting = function() { return this.$val.hinting(); };
	Options.ptr.prototype.glyphCacheEntries = function() {
		var $ptr, o;
		o = this;
		if (!(o === ptrType.nil) && powerOf2(o.GlyphCacheEntries)) {
			return o.GlyphCacheEntries;
		}
		return 512;
	};
	Options.prototype.glyphCacheEntries = function() { return this.$val.glyphCacheEntries(); };
	Options.ptr.prototype.subPixelsX = function() {
		var $ptr, _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(4);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsX = function() { return this.$val.subPixelsX(); };
	Options.ptr.prototype.subPixelsY = function() {
		var $ptr, _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(1);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsY = function() { return this.$val.subPixelsY(); };
	subPixels = function(q) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, _tmp$2, bias, mask, q, value;
		value = 0;
		bias = 0;
		mask = 0;
		_tmp = ((q >>> 0));
		_tmp$1 = (_q = 32 / ((q >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$2 = (_q$1 = -64 / ((q >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		value = _tmp;
		bias = _tmp$1;
		mask = _tmp$2;
		return [value, bias, mask];
	};
	NewFace = function(f, opts) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tuple, _tuple$1, a, b, f, i, i$1, opts, x, x$1, x$2, xmax, xmin, ymax, ymin;
		a = new face.ptr(f, opts.hinting(), ((0.5 + (opts.size() * opts.dpi() * 64 / 72) >> 0)), 0, 0, 0, 0, 0, 0, ptrType$2.nil, $makeSlice(sliceType, opts.glyphCacheEntries()), new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero()), $ifaceNil, 0, 0, 0, new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil), arrayType$8.zero());
		_tuple = opts.subPixelsX();
		a.subPixelX = _tuple[0];
		a.subPixelBiasX = _tuple[1];
		a.subPixelMaskX = _tuple[2];
		_tuple$1 = opts.subPixelsY();
		a.subPixelY = _tuple$1[0];
		a.subPixelBiasY = _tuple$1[1];
		a.subPixelMaskY = _tuple$1[2];
		_ref = a.glyphCache;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = a.glyphCache, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).key.fy = 255;
			_i++;
		}
		_ref$1 = a.indexCache;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			(x$1 = a.indexCache, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1])).rune = -1;
			_i$1++;
		}
		b = $clone(f.Bounds(a.scale), fixed.Rectangle26_6);
		xmin = ((b.Min.X >> 0)) >> 6 >> 0;
		ymin = -((b.Max.Y >> 0)) >> 6 >> 0;
		xmax = (((b.Max.X + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = -(((b.Min.Y - 63 >> 0) >> 0)) >> 6 >> 0;
		a.maxw = xmax - xmin >> 0;
		a.maxh = ymax - ymin >> 0;
		a.masks = image.NewAlpha($clone(image.Rect(0, 0, a.maxw, $imul(a.maxh, a.glyphCache.$length)), image.Rectangle));
		a.r.SetBounds(a.maxw, a.maxh);
		a.p = (x$2 = new facePainter.ptr(a), new x$2.constructor.elem(x$2));
		return a;
	};
	$pkg.NewFace = NewFace;
	face.ptr.prototype.index = function(r) {
		var $ptr, a, c, i, r, x, x$1;
		a = this;
		c = (x = a.indexCache, x$1 = r & 255, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
		if (c.rune === r) {
			return c.index;
		}
		i = a.f.Index(r);
		c.rune = r;
		c.index = i;
		return i;
	};
	face.prototype.index = function(r) { return this.$val.index(r); };
	face.ptr.prototype.Close = function() {
		var $ptr, a;
		a = this;
		return $ifaceNil;
	};
	face.prototype.Close = function() { return this.$val.Close(); };
	face.ptr.prototype.Metrics = function() {
		var $ptr, a, fupe, scale;
		a = this;
		scale = (a.scale);
		fupe = (a.f.FUnitsPerEm());
		return new font.Metrics.ptr(a.scale, ((math.Ceil(scale * (a.f.ascent) / fupe) >> 0)), ((math.Ceil(scale * (-a.f.descent) / fupe) >> 0)));
	};
	face.prototype.Metrics = function() { return this.$val.Metrics(); };
	face.ptr.prototype.Kern = function(r0, r1) {
		var $ptr, a, i0, i1, kern, r0, r1;
		a = this;
		i0 = a.index(r0);
		i1 = a.index(r1);
		kern = a.f.Kern(a.scale, i0, i1);
		if (!((a.hinting === 0))) {
			kern = (((kern + 32 >> 0)) & ~63) >> 0;
		}
		return kern;
	};
	face.prototype.Kern = function(r0, r1) { return this.$val.Kern(r0, r1); };
	face.ptr.prototype.Glyph = function(dot, r) {
		var $ptr, _q, _q$1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, advance, cIndex, dot, dotX, dotY, dr, fx, fy, index, ix, iy, k, mask, maskp, ok, ok$1, r, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; advance = $f.advance; cIndex = $f.cIndex; dot = $f.dot; dotX = $f.dotX; dotY = $f.dotY; dr = $f.dr; fx = $f.fx; fy = $f.fy; index = $f.index; ix = $f.ix; iy = $f.iy; k = $f.k; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dr = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		mask = $ifaceNil;
		maskp = new image.Point.ptr(0, 0);
		advance = 0;
		ok = false;
		a = this;
		dotX = ((dot.X + a.subPixelBiasX >> 0)) & a.subPixelMaskX;
		dotY = ((dot.Y + a.subPixelBiasY >> 0)) & a.subPixelMaskY;
		_tmp = (((dotX >> 6 >> 0) >> 0));
		_tmp$1 = dotX & 63;
		ix = _tmp;
		fx = _tmp$1;
		_tmp$2 = (((dotY >> 6 >> 0) >> 0));
		_tmp$3 = dotY & 63;
		iy = _tmp$2;
		fy = _tmp$3;
		index = a.index(r);
		cIndex = ((index >>> 0));
		cIndex = ($imul(cIndex, a.subPixelX) >>> 0) - (((_q = fx / a.subPixelMaskX, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = ($imul(cIndex, a.subPixelY) >>> 0) - (((_q$1 = fy / a.subPixelMaskY, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = (cIndex & ((((a.glyphCache.$length - 1 >> 0) >>> 0)))) >>> 0;
		a.paintOffset = $imul(a.maxh, ((cIndex >> 0)));
		k = new glyphCacheKey.ptr(index, ((fx << 24 >>> 24)), ((fy << 24 >>> 24)));
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		/* */ if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { */ case 1:
			ok$1 = false;
			_r = a.rasterize(index, fx, fy); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			glyphCacheVal.copy(v, _tuple[0]);
			ok$1 = _tuple[1];
			if (!ok$1) {
				_tmp$4 = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
				_tmp$5 = $ifaceNil;
				_tmp$6 = new image.Point.ptr(0, 0);
				_tmp$7 = 0;
				_tmp$8 = false;
				image.Rectangle.copy(dr, _tmp$4);
				mask = _tmp$5;
				image.Point.copy(maskp, _tmp$6);
				advance = _tmp$7;
				ok = _tmp$8;
				$s = -1; return [dr, mask, maskp, advance, ok];
			}
			glyphCacheEntry.copy((x$1 = a.glyphCache, ((cIndex < 0 || cIndex >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + cIndex])), new glyphCacheEntry.ptr($clone(k, glyphCacheKey), $clone(v, glyphCacheVal)));
			$s = 3; continue;
		/* } else { */ case 2:
			glyphCacheVal.copy(v, (x$2 = a.glyphCache, ((cIndex < 0 || cIndex >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cIndex])).val);
		/* } */ case 3:
		image.Point.copy(dr.Min, new image.Point.ptr(ix + v.offset.X >> 0, iy + v.offset.Y >> 0));
		image.Point.copy(dr.Max, new image.Point.ptr(dr.Min.X + v.gw >> 0, dr.Min.Y + v.gh >> 0));
		_tmp$9 = $clone(dr, image.Rectangle);
		_tmp$10 = a.masks;
		_tmp$11 = new image.Point.ptr(0, a.paintOffset);
		_tmp$12 = v.advanceWidth;
		_tmp$13 = true;
		image.Rectangle.copy(dr, _tmp$9);
		mask = _tmp$10;
		image.Point.copy(maskp, _tmp$11);
		advance = _tmp$12;
		ok = _tmp$13;
		$s = -1; return [dr, mask, maskp, advance, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.Glyph }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.cIndex = cIndex; $f.dot = dot; $f.dotX = dotX; $f.dotY = dotY; $f.dr = dr; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ix = ix; $f.iy = iy; $f.k = k; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.Glyph = function(dot, r) { return this.$val.Glyph(dot, r); };
	face.ptr.prototype.GlyphBounds = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a, advance, bounds, err, ok, r, xmax, xmin, ymax, ymin;
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$1 = 0;
			_tmp$2 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp);
			advance = _tmp$1;
			ok = _tmp$2;
			return [bounds, advance, ok];
		}
		xmin = a.glyphBuf.Bounds.Min.X;
		ymin = -a.glyphBuf.Bounds.Max.Y;
		xmax = a.glyphBuf.Bounds.Max.X;
		ymax = -a.glyphBuf.Bounds.Min.Y;
		if (xmin > xmax || ymin > ymax) {
			_tmp$3 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$4 = 0;
			_tmp$5 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp$3);
			advance = _tmp$4;
			ok = _tmp$5;
			return [bounds, advance, ok];
		}
		_tmp$6 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(xmin, ymin), new fixed.Point26_6.ptr(xmax, ymax));
		_tmp$7 = a.glyphBuf.AdvanceWidth;
		_tmp$8 = true;
		fixed.Rectangle26_6.copy(bounds, _tmp$6);
		advance = _tmp$7;
		ok = _tmp$8;
		return [bounds, advance, ok];
	};
	face.prototype.GlyphBounds = function(r) { return this.$val.GlyphBounds(r); };
	face.ptr.prototype.GlyphAdvance = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, a, advance, err, ok, r;
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = false;
			advance = _tmp;
			ok = _tmp$1;
			return [advance, ok];
		}
		_tmp$2 = a.glyphBuf.AdvanceWidth;
		_tmp$3 = true;
		advance = _tmp$2;
		ok = _tmp$3;
		return [advance, ok];
	};
	face.prototype.GlyphAdvance = function(r) { return this.$val.GlyphAdvance(r); };
	face.ptr.prototype.rasterize = function(index, fx, fy) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, e0, e1, err, fx, fy, index, ok, pixOffset, v, xmax, xmin, ymax, ymin, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; e0 = $f.e0; e1 = $f.e1; err = $f.err; fx = $f.fx; fy = $f.fy; index = $f.index; ok = $f.ok; pixOffset = $f.pixOffset; v = $f.v; xmax = $f.xmax; xmin = $f.xmin; ymax = $f.ymax; ymin = $f.ymin; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, index, a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$1 = false;
			glyphCacheVal.copy(v, _tmp);
			ok = _tmp$1;
			$s = -1; return [v, ok];
		}
		xmin = (((fx + a.glyphBuf.Bounds.Min.X >> 0) >> 0)) >> 6 >> 0;
		ymin = (((fy - a.glyphBuf.Bounds.Max.Y >> 0) >> 0)) >> 6 >> 0;
		xmax = ((((fx + a.glyphBuf.Bounds.Max.X >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = ((((fy - a.glyphBuf.Bounds.Min.Y >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		if (xmin > xmax || ymin > ymax) {
			_tmp$2 = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$3 = false;
			glyphCacheVal.copy(v, _tmp$2);
			ok = _tmp$3;
			$s = -1; return [v, ok];
		}
		fx = fx - ((((xmin << 6 >> 0) >> 0))) >> 0;
		fy = fy - ((((ymin << 6 >> 0) >> 0))) >> 0;
		a.r.Clear();
		pixOffset = $imul(a.paintOffset, a.maxw);
		clear($subslice(a.masks.Pix, pixOffset, (pixOffset + ($imul(a.maxw, a.maxh)) >> 0)));
		e0 = 0;
		_ref = a.glyphBuf.Ends;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			a.drawContour($subslice(a.glyphBuf.Points, e0, e1), fx, fy);
			e0 = e1;
			_i++;
		}
		$r = a.r.Rasterize(a.p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = new glyphCacheVal.ptr(a.glyphBuf.AdvanceWidth, new image.Point.ptr(xmin, ymin), xmax - xmin >> 0, ymax - ymin >> 0);
		_tmp$5 = true;
		glyphCacheVal.copy(v, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [v, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.rasterize }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.e0 = e0; $f.e1 = e1; $f.err = err; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ok = ok; $f.pixOffset = pixOffset; $f.v = v; $f.xmax = xmax; $f.xmin = xmin; $f.ymax = ymax; $f.ymin = ymin; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.rasterize = function(index, fx, fy) { return this.$val.rasterize(index, fx, fy); };
	clear = function(pix) {
		var $ptr, _i, _ref, i, pix;
		_ref = pix;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + i] = 0);
			_i++;
		}
	};
	face.ptr.prototype.drawContour = function(ps, dx, dy) {
		var $ptr, _i, _q, _q$1, _q$2, _q$3, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, a, dx, dy, last, mid, on, on0, others, p, ps, q, q0, start, x, x$1, x$2;
		a = this;
		if (ps.$length === 0) {
			return;
		}
		start = new fixed.Point26_6.ptr(dx + (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).X >> 0, dy - (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Y >> 0);
		others = sliceType$3.nil;
		if (!(((((0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Flags & 1) >>> 0) === 0))) {
			others = $subslice(ps, 1);
		} else {
			last = new fixed.Point26_6.ptr(dx + (x = ps.$length - 1 >> 0, ((x < 0 || x >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x])).X >> 0, dy - (x$1 = ps.$length - 1 >> 0, ((x$1 < 0 || x$1 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$1])).Y >> 0);
			if (!(((((x$2 = ps.$length - 1 >> 0, ((x$2 < 0 || x$2 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$2])).Flags & 1) >>> 0) === 0))) {
				fixed.Point26_6.copy(start, last);
				others = $subslice(ps, 0, (ps.$length - 1 >> 0));
			} else {
				fixed.Point26_6.copy(start, new fixed.Point26_6.ptr((_q = ((start.X + last.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((start.Y + last.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
				others = ps;
			}
		}
		a.r.Start($clone(start, fixed.Point26_6));
		_tmp = $clone(start, fixed.Point26_6);
		_tmp$1 = true;
		q0 = $clone(_tmp, fixed.Point26_6);
		on0 = _tmp$1;
		_ref = others;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Point);
			q = new fixed.Point26_6.ptr(dx + p.X >> 0, dy - p.Y >> 0);
			on = !((((p.Flags & 1) >>> 0) === 0));
			if (on) {
				if (on0) {
					a.r.Add1($clone(q, fixed.Point26_6));
				} else {
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(q, fixed.Point26_6));
				}
			} else {
				if (on0) {
				} else {
					mid = new fixed.Point26_6.ptr((_q$2 = ((q0.X + q.X >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), (_q$3 = ((q0.Y + q.Y >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")));
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(mid, fixed.Point26_6));
				}
			}
			_tmp$2 = $clone(q, fixed.Point26_6);
			_tmp$3 = on;
			fixed.Point26_6.copy(q0, _tmp$2);
			on0 = _tmp$3;
			_i++;
		}
		if (on0) {
			a.r.Add1($clone(start, fixed.Point26_6));
		} else {
			a.r.Add2($clone(q0, fixed.Point26_6), $clone(start, fixed.Point26_6));
		}
	};
	face.prototype.drawContour = function(ps, dx, dy) { return this.$val.drawContour(ps, dx, dy); };
	facePainter.ptr.prototype.Paint = function(ss, done) {
		var $ptr, _i, _i$1, _ref, _ref$1, b, base, color, done, i, m, p, p$1, s, ss;
		p = this;
		m = p.a.masks;
		b = $clone(m.Bounds(), image.Rectangle);
		b.Min.Y = p.a.paintOffset;
		b.Max.Y = p.a.paintOffset + p.a.maxh >> 0;
		_ref = ss;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), raster.Span);
			s.Y = s.Y + (p.a.paintOffset) >> 0;
			if (s.Y < b.Min.Y) {
				_i++;
				continue;
			}
			if (s.Y >= b.Max.Y) {
				return;
			}
			if (s.X0 < b.Min.X) {
				s.X0 = b.Min.X;
			}
			if (s.X1 > b.Max.X) {
				s.X1 = b.Max.X;
			}
			if (s.X0 >= s.X1) {
				_i++;
				continue;
			}
			base = ($imul(((s.Y - m.Rect.Min.Y >> 0)), m.Stride)) - m.Rect.Min.X >> 0;
			p$1 = $subslice(m.Pix, (base + s.X0 >> 0), (base + s.X1 >> 0));
			color = (((s.Alpha >>> 8 >>> 0) << 24 >>> 24));
			_ref$1 = p$1;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				((i < 0 || i >= p$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : p$1.$array[p$1.$offset + i] = color);
				_i$1++;
			}
			_i++;
		}
	};
	facePainter.prototype.Paint = function(ss, done) { return this.$val.Paint(ss, done); };
	GlyphBuf.ptr.prototype.Load = function(f, scale, i, h) {
		var $ptr, _i, _i$1, _ref, _ref$1, advanceWidth, err, err$1, f, g, h, hdmx, i, i$1, n, p, p$1, pp1x, scale, x, x$1, x$2, x$3;
		g = this;
		g.Points = $subslice(g.Points, 0, 0);
		g.Unhinted = $subslice(g.Unhinted, 0, 0);
		g.InFontUnits = $subslice(g.InFontUnits, 0, 0);
		g.Ends = $subslice(g.Ends, 0, 0);
		g.font = f;
		g.hinting = h;
		g.scale = scale;
		g.pp1x = 0;
		arrayType$7.copy(g.phantomPoints, arrayType$7.zero());
		g.metricsSet = false;
		if (!((h === 0))) {
			err = g.hinter.init(f, scale);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		err$1 = g.load(0, i, true);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		pp1x = g.pp1x;
		if (!((h === 0))) {
			pp1x = g.phantomPoints[0].X;
		}
		if (!((pp1x === 0))) {
			_ref = g.Points;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				(x$1 = g.Points, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).X = (x = g.Points, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1])).X - (pp1x) >> 0;
				_i++;
			}
		}
		advanceWidth = g.phantomPoints[1].X - g.phantomPoints[0].X >> 0;
		if (!((h === 0))) {
			if (f.hdmx.$length >= 8) {
				n = u32(f.hdmx, 4);
				if (n > (3 + ((i >>> 0)) >>> 0)) {
					hdmx = $subslice(f.hdmx, 8);
					while (true) {
						if (!(((hdmx.$length >>> 0)) >= n)) { break; }
						if ((((0 >= hdmx.$length ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + 0]) >> 0)) === (scale >> 6 >> 0)) {
							advanceWidth = (((x$2 = 2 + i << 16 >>> 16, ((x$2 < 0 || x$2 >= hdmx.$length) ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + x$2])) >> 0)) << 6 >> 0;
							break;
						}
						hdmx = $subslice(hdmx, n);
					}
				}
			}
			advanceWidth = (((advanceWidth + 32 >> 0)) & ~63) >> 0;
		}
		g.AdvanceWidth = advanceWidth;
		if (g.Points.$length === 0) {
			fixed.Rectangle26_6.copy(g.Bounds, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)));
		} else {
			p = $clone((x$3 = g.Points, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), Point);
			g.Bounds.Min.X = p.X;
			g.Bounds.Max.X = p.X;
			g.Bounds.Min.Y = p.Y;
			g.Bounds.Max.Y = p.Y;
			_ref$1 = $subslice(g.Points, 1);
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), Point);
				if (g.Bounds.Min.X > p$1.X) {
					g.Bounds.Min.X = p$1.X;
				} else if (g.Bounds.Max.X < p$1.X) {
					g.Bounds.Max.X = p$1.X;
				}
				if (g.Bounds.Min.Y > p$1.Y) {
					g.Bounds.Min.Y = p$1.Y;
				} else if (g.Bounds.Max.Y < p$1.Y) {
					g.Bounds.Max.Y = p$1.Y;
				}
				_i$1++;
			}
			if (!((h === 0))) {
				g.Bounds.Min.X = (g.Bounds.Min.X & ~(63)) >> 0;
				g.Bounds.Min.Y = (g.Bounds.Min.Y & ~(63)) >> 0;
				g.Bounds.Max.X = g.Bounds.Max.X + (63) >> 0;
				g.Bounds.Max.X = (g.Bounds.Max.X & ~(63)) >> 0;
				g.Bounds.Max.Y = g.Bounds.Max.Y + (63) >> 0;
				g.Bounds.Max.Y = (g.Bounds.Max.Y & ~(63)) >> 0;
			}
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.Load = function(f, scale, i, h) { return this.$val.Load(f, scale, i, h); };
	GlyphBuf.ptr.prototype.load = function(recursion, i, useMyMetrics) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, boundsXMin, boundsYMax, err, err$1, err$2, g, g0, g1, glyf, i, i$1, ne, ne0, np0, pp1x, program, recursion, uhm, useMyMetrics, uvm, x, x$1, x$2, x$3;
		err = $ifaceNil;
		g = this;
		if (recursion >= 32) {
			err = new UnsupportedError("excessive compound glyph recursion");
			return err;
		}
		_tmp = 0;
		_tmp$1 = 0;
		g0 = _tmp;
		g1 = _tmp$1;
		if (g.font.locaOffsetFormat === 1) {
			g0 = $imul(2, ((u16(g.font.loca, $imul(2, ((i >> 0)))) >>> 0))) >>> 0;
			g1 = $imul(2, ((u16(g.font.loca, ($imul(2, ((i >> 0)))) + 2 >> 0) >>> 0))) >>> 0;
		} else {
			g0 = u32(g.font.loca, $imul(4, ((i >> 0))));
			g1 = u32(g.font.loca, ($imul(4, ((i >> 0)))) + 4 >> 0);
		}
		_tmp$2 = (sliceType$6.nil);
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		glyf = _tmp$2;
		ne = _tmp$3;
		boundsXMin = _tmp$4;
		boundsYMax = _tmp$5;
		if ((g0 + 10 >>> 0) <= g1) {
			glyf = $subslice(g.font.glyf, g0, g1);
			ne = ((((u16(glyf, 0) << 16 >> 16)) >> 0));
			boundsXMin = ((((u16(glyf, 2) << 16 >> 16)) >> 0));
			boundsYMax = ((((u16(glyf, 8) << 16 >> 16)) >> 0));
		}
		_tmp$6 = $clone(g.font.unscaledHMetric(i), HMetric);
		_tmp$7 = 0;
		uhm = $clone(_tmp$6, HMetric);
		pp1x = _tmp$7;
		uvm = $clone(g.font.unscaledVMetric(i, boundsYMax), VMetric);
		arrayType$7.copy(g.phantomPoints, $toNativeArray($kindStruct, [new Point.ptr(boundsXMin - uhm.LeftSideBearing >> 0, 0, 0), new Point.ptr((boundsXMin - uhm.LeftSideBearing >> 0) + uhm.AdvanceWidth >> 0, 0, 0), new Point.ptr((_q = uhm.AdvanceWidth / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), boundsYMax + uvm.TopSideBearing >> 0, 0), new Point.ptr((_q$1 = uhm.AdvanceWidth / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), (boundsYMax + uvm.TopSideBearing >> 0) - uvm.AdvanceHeight >> 0, 0)]));
		if (glyf.$length === 0) {
			g.addPhantomsAndScale(g.Points.$length, g.Points.$length, true, true);
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			err = $ifaceNil;
			return err;
		}
		if (ne < 0) {
			if (!((ne === -1))) {
				err = new UnsupportedError("negative number of contours");
				return err;
			}
			pp1x = g.font.scale($imul(g.scale, ((boundsXMin - uhm.LeftSideBearing >> 0))));
			err$1 = g.loadCompound(recursion, $clone(uhm, HMetric), i, glyf, useMyMetrics);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
		} else {
			_tmp$8 = g.Points.$length;
			_tmp$9 = g.Ends.$length;
			np0 = _tmp$8;
			ne0 = _tmp$9;
			program = g.loadSimple(glyf, ne);
			g.addPhantomsAndScale(np0, np0, true, true);
			pp1x = (x = g.Points, x$1 = g.Points.$length - 4 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).X;
			if (!((g.hinting === 0))) {
				if (!((program.$length === 0))) {
					err$2 = g.hinter.run(program, $subslice(g.Points, np0), $subslice(g.Unhinted, np0), $subslice(g.InFontUnits, np0), $subslice(g.Ends, ne0));
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						err = err$2;
						return err;
					}
				}
				g.InFontUnits = $subslice(g.InFontUnits, 0, (g.InFontUnits.$length - 4 >> 0));
				g.Unhinted = $subslice(g.Unhinted, 0, (g.Unhinted.$length - 4 >> 0));
			}
			if (useMyMetrics) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			}
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			if (!((np0 === 0))) {
				i$1 = ne0;
				while (true) {
					if (!(i$1 < g.Ends.$length)) { break; }
					(x$3 = g.Ends, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1] = ((x$2 = g.Ends, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])) + (np0) >> 0)));
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (useMyMetrics && !g.metricsSet) {
			g.metricsSet = true;
			g.pp1x = pp1x;
		}
		err = $ifaceNil;
		return err;
	};
	GlyphBuf.prototype.load = function(recursion, i, useMyMetrics) { return this.$val.load(recursion, i, useMyMetrics); };
	GlyphBuf.ptr.prototype.loadSimple = function(glyf, ne) {
		var $ptr, c, count, dx, dy, f, f$1, g, glyf, i, i$1, i$2, i$3, instrLen, ne, np0, np1, offset, program, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		program = sliceType$6.nil;
		g = this;
		offset = 10;
		i = 0;
		while (true) {
			if (!(i < ne)) { break; }
			g.Ends = $append(g.Ends, 1 + ((u16(glyf, offset) >> 0)) >> 0);
			offset = offset + (2) >> 0;
			i = i + (1) >> 0;
		}
		instrLen = ((u16(glyf, offset) >> 0));
		offset = offset + (2) >> 0;
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		offset = offset + (instrLen) >> 0;
		if (ne === 0) {
			program = program;
			return program;
		}
		np0 = g.Points.$length;
		np1 = np0 + ((x = g.Ends, x$1 = g.Ends.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))) >> 0;
		i$1 = np0;
		while (true) {
			if (!(i$1 < np1)) { break; }
			c = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) >>> 0));
			offset = offset + (1) >> 0;
			g.Points = $append(g.Points, new Point.ptr(0, 0, c));
			i$1 = i$1 + (1) >> 0;
			if (!((((c & 8) >>> 0) === 0))) {
				count = ((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]);
				offset = offset + (1) >> 0;
				while (true) {
					if (!(count > 0)) { break; }
					g.Points = $append(g.Points, new Point.ptr(0, 0, c));
					i$1 = i$1 + (1) >> 0;
					count = count - (1) << 24 >>> 24;
				}
			}
		}
		x$2 = 0;
		i$2 = np0;
		while (true) {
			if (!(i$2 < np1)) { break; }
			f = (x$3 = g.Points, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2])).Flags;
			if (!((((f & 2) >>> 0) === 0))) {
				dx = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f & 16) >>> 0) === 0) {
					x$2 = x$2 - (dx) << 16 >> 16;
				} else {
					x$2 = x$2 + (dx) << 16 >> 16;
				}
			} else if (((f & 16) >>> 0) === 0) {
				x$2 = x$2 + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$4 = g.Points, ((i$2 < 0 || i$2 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$2])).X = ((x$2 >> 0));
			i$2 = i$2 + (1) >> 0;
		}
		y = 0;
		i$3 = np0;
		while (true) {
			if (!(i$3 < np1)) { break; }
			f$1 = (x$5 = g.Points, ((i$3 < 0 || i$3 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$3])).Flags;
			if (!((((f$1 & 4) >>> 0) === 0))) {
				dy = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f$1 & 32) >>> 0) === 0) {
					y = y - (dy) << 16 >> 16;
				} else {
					y = y + (dy) << 16 >> 16;
				}
			} else if (((f$1 & 32) >>> 0) === 0) {
				y = y + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$6 = g.Points, ((i$3 < 0 || i$3 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$3])).Y = ((y >> 0));
			i$3 = i$3 + (1) >> 0;
		}
		program = program;
		return program;
	};
	GlyphBuf.prototype.loadSimple = function(glyf, ne) { return this.$val.loadSimple(glyf, ne); };
	GlyphBuf.ptr.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, component, componentUMM, dx, dy, ends, err, err$1, flags, g, glyf, hasTransform, i, i$1, i$2, instrLen, j, j$1, j$2, ne0, newX, newY, np0, np0$1, offset, p, p$1, points, program, recursion, savedPP, transform, uhm, useMyMetrics, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = this;
		_tmp = g.Points.$length;
		_tmp$1 = g.Ends.$length;
		np0 = _tmp;
		ne0 = _tmp$1;
		offset = 10;
		while (true) {
			flags = u16(glyf, offset);
			component = ((u16(glyf, offset + 2 >> 0) << 16 >>> 16));
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = arrayType$9.zero();
			_tmp$5 = false;
			dx = _tmp$2;
			dy = _tmp$3;
			transform = $clone(_tmp$4, arrayType$9);
			hasTransform = _tmp$5;
			if (!((((flags & 1) >>> 0) === 0))) {
				dx = ((((u16(glyf, offset + 4 >> 0) << 16 >> 16)) >> 0));
				dy = ((((u16(glyf, offset + 6 >> 0) << 16 >> 16)) >> 0));
				offset = offset + (8) >> 0;
			} else {
				dx = (((((((x = offset + 4 >> 0, ((x < 0 || x >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x])) << 24 >> 24)) << 16 >> 16)) >> 0));
				dy = (((((((x$1 = offset + 5 >> 0, ((x$1 < 0 || x$1 >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x$1])) << 24 >> 24)) << 16 >> 16)) >> 0));
				offset = offset + (6) >> 0;
			}
			if (((flags & 2) >>> 0) === 0) {
				return new UnsupportedError("compound glyph transform vector");
			}
			if (!((((flags & 200) >>> 0) === 0))) {
				hasTransform = true;
				if (!((((flags & 8) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = transform[0];
					offset = offset + (2) >> 0;
				} else if (!((((flags & 64) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					offset = offset + (4) >> 0;
				} else if (!((((flags & 128) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[1] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					transform[2] = ((u16(glyf, offset + 4 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 6 >> 0) << 16 >> 16));
					offset = offset + (8) >> 0;
				}
			}
			savedPP = $clone(g.phantomPoints, arrayType$7);
			np0$1 = g.Points.$length;
			componentUMM = useMyMetrics && (!((((flags & 512) >>> 0) === 0)));
			err = g.load(recursion + 1 >>> 0, component, componentUMM);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			if (((flags & 512) >>> 0) === 0) {
				arrayType$7.copy(g.phantomPoints, savedPP);
			}
			if (hasTransform) {
				j = np0$1;
				while (true) {
					if (!(j < g.Points.$length)) { break; }
					p = (x$2 = g.Points, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]));
					newX = (0 + (((x$3 = $shiftRightInt64(((x$4 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[0]))), new $Int64(x$4.$high + 0, x$4.$low + 8192))), 14), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$5 = $shiftRightInt64(((x$6 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[2]))), new $Int64(x$6.$high + 0, x$6.$low + 8192))), 14), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) >> 0;
					newY = (0 + (((x$7 = $shiftRightInt64(((x$8 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[1]))), new $Int64(x$8.$high + 0, x$8.$low + 8192))), 14), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$9 = $shiftRightInt64(((x$10 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[3]))), new $Int64(x$10.$high + 0, x$10.$low + 8192))), 14), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0)) >> 0;
					_tmp$6 = newX;
					_tmp$7 = newY;
					p.X = _tmp$6;
					p.Y = _tmp$7;
					j = j + (1) >> 0;
				}
			}
			dx = g.font.scale($imul(g.scale, dx));
			dy = g.font.scale($imul(g.scale, dy));
			if (!((((flags & 4) >>> 0) === 0))) {
				dx = (((dx + 32 >> 0)) & ~63) >> 0;
				dy = (((dy + 32 >> 0)) & ~63) >> 0;
			}
			j$1 = np0$1;
			while (true) {
				if (!(j$1 < g.Points.$length)) { break; }
				p$1 = (x$11 = g.Points, ((j$1 < 0 || j$1 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + j$1]));
				p$1.X = p$1.X + (dx) >> 0;
				p$1.Y = p$1.Y + (dy) >> 0;
				j$1 = j$1 + (1) >> 0;
			}
			if (((flags & 32) >>> 0) === 0) {
				break;
			}
		}
		instrLen = 0;
		if (!((g.hinting === 0)) && (offset + 2 >> 0) <= glyf.$length) {
			instrLen = ((u16(glyf, offset) >> 0));
			offset = offset + (2) >> 0;
		}
		g.addPhantomsAndScale(np0, g.Points.$length, false, instrLen > 0);
		_tmp$8 = $subslice(g.Points, np0);
		_tmp$9 = $subslice(g.Ends, ne0);
		points = _tmp$8;
		ends = _tmp$9;
		g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
		_ref = points;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j$2 = _i;
			((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags = (((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags & ~(192)) >>> 0;
			_i++;
		}
		if (instrLen === 0) {
			if (!g.metricsSet) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
			}
			return $ifaceNil;
		}
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		if (!((np0 === 0))) {
			_ref$1 = ends;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1] = (((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1]) - (np0) >> 0));
				_i$1++;
			}
		}
		g.tmp = $appendSlice($subslice(g.tmp, 0, 0), points);
		err$1 = g.hinter.run(program, points, g.tmp, g.tmp, ends);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		if (!((np0 === 0))) {
			_ref$2 = ends;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i$2 = _i$2;
				((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2] = (((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2]) + (np0) >> 0));
				_i$2++;
			}
		}
		if (!g.metricsSet) {
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) { return this.$val.loadCompound(recursion, uhm, i, glyf, useMyMetrics); };
	GlyphBuf.ptr.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) {
		var $ptr, adjust, dx, g, i, i$1, np0, np1, p, p$1, pp1x, simple, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		g = this;
		g.Points = $appendSlice(g.Points, new sliceType$3(g.phantomPoints));
		if (simple && !((g.hinting === 0))) {
			g.InFontUnits = $appendSlice(g.InFontUnits, $subslice(g.Points, np1));
		}
		i = np1;
		while (true) {
			if (!(i < g.Points.$length)) { break; }
			p = (x = g.Points, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			p.X = g.font.scale($imul(g.scale, p.X));
			p.Y = g.font.scale($imul(g.scale, p.Y));
			i = i + (1) >> 0;
		}
		if (g.hinting === 0) {
			return;
		}
		if (adjust) {
			pp1x = (x$1 = g.Points, x$2 = g.Points.$length - 4 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).X;
			dx = (((((pp1x + 32 >> 0)) & ~63) >> 0)) - pp1x >> 0;
			if (!((dx === 0))) {
				i$1 = np0;
				while (true) {
					if (!(i$1 < g.Points.$length)) { break; }
					(x$4 = g.Points, ((i$1 < 0 || i$1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$1])).X = (x$3 = g.Points, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1])).X + (dx) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (simple) {
			g.Unhinted = $appendSlice(g.Unhinted, $subslice(g.Points, np1));
		}
		p$1 = (x$5 = g.Points, x$6 = g.Points.$length - 3 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
		p$1.X = (((p$1.X + 32 >> 0)) & ~63) >> 0;
		p$1 = (x$7 = g.Points, x$8 = g.Points.$length - 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		p$1.Y = (((p$1.Y + 32 >> 0)) & ~63) >> 0;
	};
	GlyphBuf.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) { return this.$val.addPhantomsAndScale(np0, np1, simple, adjust); };
	resetTwilightPoints = function(f, p) {
		var $ptr, _i, _ref, f, i, n, p;
		n = ((f.maxTwilightPoints >> 0)) + 4 >> 0;
		if (n <= p.$capacity) {
			p = $subslice(p, 0, n);
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				Point.copy(((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]), new Point.ptr(0, 0, 0));
				_i++;
			}
		} else {
			p = $makeSlice(sliceType$3, n);
		}
		return p;
	};
	hinter.ptr.prototype.init = function(f, scale) {
		var $ptr, _entry, _i, _keys, _ref, _tmp, _tmp$1, err, err$1, f, h, k, rescale, scale, x, x$1;
		h = this;
		h.points[0][0] = resetTwilightPoints(f, h.points[0][0]);
		h.points[0][1] = resetTwilightPoints(f, h.points[0][1]);
		h.points[0][2] = resetTwilightPoints(f, h.points[0][2]);
		rescale = !((h.scale === scale));
		if (!(h.font === f)) {
			_tmp = f;
			_tmp$1 = true;
			h.font = _tmp;
			rescale = _tmp$1;
			if (h.functions === false) {
				h.functions = {};
			} else {
				_ref = h.functions;
				_i = 0;
				_keys = $keys(_ref);
				while (true) {
					if (!(_i < _keys.length)) { break; }
					_entry = _ref[_keys[_i]];
					if (_entry === undefined) {
						_i++;
						continue;
					}
					k = _entry.k;
					delete h.functions[$Int32.keyFor(k)];
					_i++;
				}
			}
			x = ((f.maxStackElements >> 0));
			if (x > h.stack.$length) {
				x = x + (255) >> 0;
				x = (x & ~(255)) >> 0;
				h.stack = $makeSlice(sliceType$4, x);
			}
			x$1 = ((f.maxStorage >> 0));
			if (x$1 > h.store.$length) {
				x$1 = x$1 + (15) >> 0;
				x$1 = (x$1 & ~(15)) >> 0;
				h.store = $makeSlice(sliceType$4, x$1);
			}
			if (!((f.fpgm.$length === 0))) {
				err = h.run(f.fpgm, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
		}
		if (rescale) {
			h.scale = scale;
			h.scaledCVTInitialized = false;
			graphicsState.copy(h.defaultGS, globalDefaultGS);
			if (!((f.prep.$length === 0))) {
				err$1 = h.run(f.prep, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
				graphicsState.copy(h.defaultGS, h.gs);
				arrayType.copy(h.defaultGS.pv, globalDefaultGS.pv);
				arrayType.copy(h.defaultGS.fv, globalDefaultGS.fv);
				arrayType.copy(h.defaultGS.dv, globalDefaultGS.dv);
				arrayType$1.copy(h.defaultGS.rp, globalDefaultGS.rp);
				arrayType$1.copy(h.defaultGS.zp, globalDefaultGS.zp);
				h.defaultGS.loop = globalDefaultGS.loop;
			}
		}
		return $ifaceNil;
	};
	hinter.prototype.init = function(f, scale) { return this.$val.init(f, scale); };
	hinter.ptr.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) {
		var $ptr, _1, _2, _3, _4, _5, _entry, _i, _index, _index$1, _index$2, _index$3, _index$4, _key, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, a0, a1, absDisc, absDotP, b, b0, b1, c, c$1, callStack, callStackTop, contour, curDist, curDist$1, curDist$2, curP, curRange, curTouched, cvtDist, d, d$1, d$2, d$3, d$4, d$5, dax, day, dbx, dby, depth, discriminant, distance, distance$1, distance$2, distance$3, distance$4, dotProduct$1, dx, dx$1, dx$2, dy, dy$1, dy$2, end, ends, f, firstTouched, h, i, i$1, i$10, i$11, i$12, i$13, i$14, i$15, i$16, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, iupY, j, j$1, j$2, j0, j1, limit, mask, move, n, newDist, ok, ok$1, ok$2, ok$3, ok$4, ok$5, oldDist, oldDist$1, oldDist$2, oldDist$3, oldP, oldRange, opcode, p, p$1, p$10, p$11, p$12, p$13, p$14, p$15, p$16, p$17, p$18, p$2, p$3, p$4, p$5, p$6, p$7, p$8, p$9, p0, p0$1, p1, p1$1, p1$2, p2, pCurrent, pInFontUnits, pUnhinted, pc, pointType$1, points, points$1, ppem, prevEnd, program, pt, pt$1, q, q$1, q$2, q$3, q$4, ref, ref$1, ref$2, ref$3, res, rx, ry, scale, startPC, steps, top, twilight, v, v$1, val, width, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, y, zonePointer, zonePointer$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		h = this;
		graphicsState.copy(h.gs, h.defaultGS);
		h.points[1][0] = pCurrent;
		h.points[1][1] = pUnhinted;
		h.points[1][2] = pInFontUnits;
		h.ends = ends;
		if (program.$length > 50000) {
			$s = -1; return errors.New("truetype: hinting: too many instructions");
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		steps = _tmp;
		pc = _tmp$1;
		top = _tmp$2;
		opcode = 0;
		callStack = arrayType$10.zero();
		callStackTop = 0;
		/* while (true) { */ case 1:
			/* if (!(0 <= pc && pc < program.$length)) { break; } */ if(!(0 <= pc && pc < program.$length)) { $s = 2; continue; }
			steps = steps + (1) >> 0;
			if (steps === 100000) {
				$s = -1; return errors.New("truetype: hinting: too many steps");
			}
			opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			if (top < ((((opcode < 0 || opcode >= popCount.length) ? ($throwRuntimeError("index out of range"), undefined) : popCount[opcode]) >> 0))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
				_1 = opcode;
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ if (_1 === (4)) { $s = 8; continue; }
				/* */ if (_1 === (5)) { $s = 9; continue; }
				/* */ if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (11)) { $s = 12; continue; }
				/* */ if (_1 === (12)) { $s = 13; continue; }
				/* */ if (_1 === (13)) { $s = 14; continue; }
				/* */ if (_1 === (14)) { $s = 15; continue; }
				/* */ if (_1 === (15)) { $s = 16; continue; }
				/* */ if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { $s = 17; continue; }
				/* */ if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { $s = 18; continue; }
				/* */ if (_1 === (22)) { $s = 19; continue; }
				/* */ if (_1 === (23)) { $s = 20; continue; }
				/* */ if (_1 === (24)) { $s = 21; continue; }
				/* */ if (_1 === (25)) { $s = 22; continue; }
				/* */ if (_1 === (26)) { $s = 23; continue; }
				/* */ if (_1 === (27)) { $s = 24; continue; }
				/* */ if (_1 === (28)) { $s = 25; continue; }
				/* */ if (_1 === (29)) { $s = 26; continue; }
				/* */ if (_1 === (30)) { $s = 27; continue; }
				/* */ if (_1 === (31)) { $s = 28; continue; }
				/* */ if (_1 === (32)) { $s = 29; continue; }
				/* */ if (_1 === (33)) { $s = 30; continue; }
				/* */ if (_1 === (34)) { $s = 31; continue; }
				/* */ if (_1 === (35)) { $s = 32; continue; }
				/* */ if (_1 === (36)) { $s = 33; continue; }
				/* */ if ((_1 === (37)) || (_1 === (38))) { $s = 34; continue; }
				/* */ if (_1 === (39)) { $s = 35; continue; }
				/* */ if (_1 === (41)) { $s = 36; continue; }
				/* */ if ((_1 === (42)) || (_1 === (43))) { $s = 37; continue; }
				/* */ if (_1 === (44)) { $s = 38; continue; }
				/* */ if (_1 === (45)) { $s = 39; continue; }
				/* */ if ((_1 === (46)) || (_1 === (47))) { $s = 40; continue; }
				/* */ if ((_1 === (48)) || (_1 === (49))) { $s = 41; continue; }
				/* */ if ((_1 === (50)) || (_1 === (51))) { $s = 42; continue; }
				/* */ if ((_1 === (52)) || (_1 === (53))) { $s = 43; continue; }
				/* */ if ((_1 === (54)) || (_1 === (55))) { $s = 44; continue; }
				/* */ if (_1 === (56)) { $s = 45; continue; }
				/* */ if (_1 === (57)) { $s = 46; continue; }
				/* */ if ((_1 === (58)) || (_1 === (59))) { $s = 47; continue; }
				/* */ if (_1 === (60)) { $s = 48; continue; }
				/* */ if (_1 === (61)) { $s = 49; continue; }
				/* */ if ((_1 === (62)) || (_1 === (63))) { $s = 50; continue; }
				/* */ if (_1 === (64)) { $s = 51; continue; }
				/* */ if (_1 === (65)) { $s = 52; continue; }
				/* */ if (_1 === (66)) { $s = 53; continue; }
				/* */ if (_1 === (67)) { $s = 54; continue; }
				/* */ if (_1 === (68)) { $s = 55; continue; }
				/* */ if (_1 === (69)) { $s = 56; continue; }
				/* */ if ((_1 === (70)) || (_1 === (71))) { $s = 57; continue; }
				/* */ if (_1 === (72)) { $s = 58; continue; }
				/* */ if ((_1 === (73)) || (_1 === (74))) { $s = 59; continue; }
				/* */ if ((_1 === (75)) || (_1 === (76))) { $s = 60; continue; }
				/* */ if ((_1 === (77)) || (_1 === (78))) { $s = 61; continue; }
				/* */ if (_1 === (79)) { $s = 62; continue; }
				/* */ if (_1 === (80)) { $s = 63; continue; }
				/* */ if (_1 === (81)) { $s = 64; continue; }
				/* */ if (_1 === (82)) { $s = 65; continue; }
				/* */ if (_1 === (83)) { $s = 66; continue; }
				/* */ if (_1 === (84)) { $s = 67; continue; }
				/* */ if (_1 === (85)) { $s = 68; continue; }
				/* */ if ((_1 === (86)) || (_1 === (87))) { $s = 69; continue; }
				/* */ if (_1 === (88)) { $s = 70; continue; }
				/* */ if (_1 === (89)) { $s = 71; continue; }
				/* */ if (_1 === (90)) { $s = 72; continue; }
				/* */ if (_1 === (91)) { $s = 73; continue; }
				/* */ if (_1 === (92)) { $s = 74; continue; }
				/* */ if (_1 === (93)) { $s = 75; continue; }
				/* */ if (_1 === (94)) { $s = 76; continue; }
				/* */ if (_1 === (95)) { $s = 77; continue; }
				/* */ if (_1 === (96)) { $s = 78; continue; }
				/* */ if (_1 === (97)) { $s = 79; continue; }
				/* */ if (_1 === (98)) { $s = 80; continue; }
				/* */ if (_1 === (99)) { $s = 81; continue; }
				/* */ if (_1 === (100)) { $s = 82; continue; }
				/* */ if (_1 === (101)) { $s = 83; continue; }
				/* */ if (_1 === (102)) { $s = 84; continue; }
				/* */ if (_1 === (103)) { $s = 85; continue; }
				/* */ if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { $s = 86; continue; }
				/* */ if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { $s = 87; continue; }
				/* */ if (_1 === (112)) { $s = 88; continue; }
				/* */ if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { $s = 89; continue; }
				/* */ if ((_1 === (118)) || (_1 === (119))) { $s = 90; continue; }
				/* */ if (_1 === (120)) { $s = 91; continue; }
				/* */ if (_1 === (121)) { $s = 92; continue; }
				/* */ if (_1 === (122)) { $s = 93; continue; }
				/* */ if (_1 === (124)) { $s = 94; continue; }
				/* */ if (_1 === (125)) { $s = 95; continue; }
				/* */ if ((_1 === (126)) || (_1 === (127))) { $s = 96; continue; }
				/* */ if (_1 === (128)) { $s = 97; continue; }
				/* */ if ((_1 === (129)) || (_1 === (130))) { $s = 98; continue; }
				/* */ if (_1 === (133)) { $s = 99; continue; }
				/* */ if ((_1 === (134)) || (_1 === (135))) { $s = 100; continue; }
				/* */ if (_1 === (136)) { $s = 101; continue; }
				/* */ if (_1 === (137)) { $s = 102; continue; }
				/* */ if (_1 === (138)) { $s = 103; continue; }
				/* */ if (_1 === (139)) { $s = 104; continue; }
				/* */ if (_1 === (140)) { $s = 105; continue; }
				/* */ if (_1 === (141)) { $s = 106; continue; }
				/* */ if (_1 === (142)) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if (_1 === (0)) { */ case 4:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (1)) { */ case 5:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (2)) { */ case 6:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (3)) { */ case 7:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (4)) { */ case 8:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (5)) { */ case 9:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { */ case 10:
					top = top - (2) >> 0;
					p1 = h.point(0, 0, (x = h.stack, x$1 = top + 0 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
					p2 = h.point(0, 0, (x$2 = h.stack, x$3 = top + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])));
					if (p1 === ptrType$3.nil || p2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dx = (((p1.X - p2.X >> 0) << 16 >> 16));
					dy = (((p1.Y - p2.Y >> 0) << 16 >> 16));
					if ((dx === 0) && (dy === 0)) {
						dx = 16384;
					} else if (!((((opcode & 1) >>> 0) === 0))) {
						_tmp$3 = -dy;
						_tmp$4 = dx;
						dx = _tmp$3;
						dy = _tmp$4;
					}
					v = $clone(normalize(dx, dy), arrayType);
					if (opcode < 8) {
						arrayType.copy(h.gs.pv, v);
						arrayType.copy(h.gs.dv, v);
					} else {
						arrayType.copy(h.gs.fv, v);
					}
					$s = 109; continue;
				/* } else if (_1 === (10)) { */ case 11:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.pv, normalize((((x$4 = h.stack, ((top < 0 || top >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + top])) << 16 >> 16)), (((x$5 = h.stack, x$6 = top + 1 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >> 16))));
					arrayType.copy(h.gs.dv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (11)) { */ case 12:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.fv, normalize((((x$7 = h.stack, ((top < 0 || top >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + top])) << 16 >> 16)), (((x$8 = h.stack, x$9 = top + 1 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) << 16 >> 16))));
					$s = 109; continue;
				/* } else if (_1 === (12)) { */ case 13:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$10 = h.stack, x$11 = top + 0 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = ((h.gs.pv[0] >> 0))));
					(x$12 = h.stack, x$13 = top + 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13] = ((h.gs.pv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (13)) { */ case 14:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$14 = h.stack, x$15 = top + 0 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + x$15] = ((h.gs.fv[0] >> 0))));
					(x$16 = h.stack, x$17 = top + 1 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17] = ((h.gs.fv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (14)) { */ case 15:
					arrayType.copy(h.gs.fv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (15)) { */ case 16:
					top = top - (5) >> 0;
					p = h.point(2, 0, (x$18 = h.stack, x$19 = top + 0 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + x$19])));
					a0 = h.point(1, 0, (x$20 = h.stack, x$21 = top + 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21])));
					a1 = h.point(1, 0, (x$22 = h.stack, x$23 = top + 2 >> 0, ((x$23 < 0 || x$23 >= x$22.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$22.$array[x$22.$offset + x$23])));
					b0 = h.point(0, 0, (x$24 = h.stack, x$25 = top + 3 >> 0, ((x$25 < 0 || x$25 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + x$25])));
					b1 = h.point(0, 0, (x$26 = h.stack, x$27 = top + 4 >> 0, ((x$27 < 0 || x$27 >= x$26.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$26.$array[x$26.$offset + x$27])));
					if (p === ptrType$3.nil || a0 === ptrType$3.nil || a1 === ptrType$3.nil || b0 === ptrType$3.nil || b1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dbx = b1.X - b0.X >> 0;
					dby = b1.Y - b0.Y >> 0;
					dax = a1.X - a0.X >> 0;
					day = a1.Y - a0.Y >> 0;
					dx$1 = b0.X - a0.X >> 0;
					dy$1 = b0.Y - a0.Y >> 0;
					discriminant = (x$28 = mulDiv((new $Int64(0, dax)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$29 = mulDiv((new $Int64(0, day)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$28.$high + x$29.$high, x$28.$low + x$29.$low));
					dotProduct$1 = (x$30 = mulDiv((new $Int64(0, dax)), (new $Int64(0, dbx)), new $Int64(0, 64)), x$31 = mulDiv((new $Int64(0, day)), (new $Int64(0, dby)), new $Int64(0, 64)), new $Int64(x$30.$high + x$31.$high, x$30.$low + x$31.$low));
					_tmp$5 = discriminant;
					_tmp$6 = dotProduct$1;
					absDisc = _tmp$5;
					absDotP = _tmp$6;
					if ((absDisc.$high < 0 || (absDisc.$high === 0 && absDisc.$low < 0))) {
						absDisc = new $Int64(-absDisc.$high, -absDisc.$low);
					}
					if ((absDotP.$high < 0 || (absDotP.$high === 0 && absDotP.$low < 0))) {
						absDotP = new $Int64(-absDotP.$high, -absDotP.$low);
					}
					if ((x$32 = $mul64(new $Int64(0, 19), absDisc), (x$32.$high > absDotP.$high || (x$32.$high === absDotP.$high && x$32.$low > absDotP.$low)))) {
						val = (x$33 = mulDiv((new $Int64(0, dx$1)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$34 = mulDiv((new $Int64(0, dy$1)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$33.$high + x$34.$high, x$33.$low + x$34.$low));
						rx = mulDiv(val, (new $Int64(0, dax)), discriminant);
						ry = mulDiv(val, (new $Int64(0, day)), discriminant);
						p.X = a0.X + (((rx.$low + ((rx.$high >> 31) * 4294967296)) >> 0)) >> 0;
						p.Y = a0.Y + (((ry.$low + ((ry.$high >> 31) * 4294967296)) >> 0)) >> 0;
					} else {
						p.X = (_q = ((((a0.X + a1.X >> 0) + b0.X >> 0) + b1.X >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
						p.Y = (_q$1 = ((((a0.Y + a1.Y >> 0) + b0.Y >> 0) + b1.Y >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					p.Flags = (p.Flags | (192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { */ case 17:
					top = top - (1) >> 0;
					(x$36 = h.gs.rp, x$37 = opcode - 16 << 24 >>> 24, ((x$37 < 0 || x$37 >= x$36.length) ? ($throwRuntimeError("index out of range"), undefined) : x$36[x$37] = (x$35 = h.stack, ((top < 0 || top >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + top]))));
					$s = 109; continue;
				/* } else if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { */ case 18:
					top = top - (1) >> 0;
					(x$39 = h.gs.zp, x$40 = opcode - 19 << 24 >>> 24, ((x$40 < 0 || x$40 >= x$39.length) ? ($throwRuntimeError("index out of range"), undefined) : x$39[x$40] = (x$38 = h.stack, ((top < 0 || top >= x$38.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$38.$array[x$38.$offset + top]))));
					$s = 109; continue;
				/* } else if (_1 === (22)) { */ case 19:
					top = top - (1) >> 0;
					h.gs.zp[0] = (x$41 = h.stack, ((top < 0 || top >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + top]));
					h.gs.zp[1] = (x$42 = h.stack, ((top < 0 || top >= x$42.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$42.$array[x$42.$offset + top]));
					h.gs.zp[2] = (x$43 = h.stack, ((top < 0 || top >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (23)) { */ case 20:
					top = top - (1) >> 0;
					if ((x$44 = h.stack, ((top < 0 || top >= x$44.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$44.$array[x$44.$offset + top])) < 0) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					h.gs.loop = (x$45 = h.stack, ((top < 0 || top >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (24)) { */ case 21:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (25)) { */ case 22:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 32;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (26)) { */ case 23:
					top = top - (1) >> 0;
					h.gs.minDist = (((x$46 = h.stack, ((top < 0 || top >= x$46.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$46.$array[x$46.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (27)) { */ case 24:
					opcode = 1;
					/* goto ifelse */ $s = 110; continue;
					$s = 109; continue;
				/* } else if (_1 === (28)) { */ case 25:
					top = top - (1) >> 0;
					pc = pc + ((((x$47 = h.stack, ((top < 0 || top >= x$47.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$47.$array[x$47.$offset + top])) >> 0))) >> 0;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (29)) { */ case 26:
					top = top - (1) >> 0;
					h.gs.controlValueCutIn = (((x$48 = h.stack, ((top < 0 || top >= x$48.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$48.$array[x$48.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (30)) { */ case 27:
					top = top - (1) >> 0;
					h.gs.singleWidthCutIn = (((x$49 = h.stack, ((top < 0 || top >= x$49.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$49.$array[x$49.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (31)) { */ case 28:
					top = top - (1) >> 0;
					h.gs.singleWidth = h.font.scale($imul(h.scale, (((x$50 = h.stack, ((top < 0 || top >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + top])) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (32)) { */ case 29:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$53 = h.stack, ((top < 0 || top >= x$53.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$53.$array[x$53.$offset + top] = (x$51 = h.stack, x$52 = top - 1 >> 0, ((x$52 < 0 || x$52 >= x$51.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$51.$array[x$51.$offset + x$52]))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (33)) { */ case 30:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (34)) { */ case 31:
					top = 0;
					$s = 109; continue;
				/* } else if (_1 === (35)) { */ case 32:
					_tmp$7 = (x$54 = h.stack, x$55 = top - 2 >> 0, ((x$55 < 0 || x$55 >= x$54.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$54.$array[x$54.$offset + x$55]));
					_tmp$8 = (x$56 = h.stack, x$57 = top - 1 >> 0, ((x$57 < 0 || x$57 >= x$56.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$56.$array[x$56.$offset + x$57]));
					(x$58 = h.stack, x$59 = top - 1 >> 0, ((x$59 < 0 || x$59 >= x$58.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$58.$array[x$58.$offset + x$59] = _tmp$7));
					(x$60 = h.stack, x$61 = top - 2 >> 0, ((x$61 < 0 || x$61 >= x$60.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$60.$array[x$60.$offset + x$61] = _tmp$8));
					$s = 109; continue;
				/* } else if (_1 === (36)) { */ case 33:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$62 = h.stack, ((top < 0 || top >= x$62.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$62.$array[x$62.$offset + top] = ((top >> 0))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (37)) || (_1 === (38))) { */ case 34:
					x$65 = (((x$63 = h.stack, x$64 = top - 1 >> 0, ((x$64 < 0 || x$64 >= x$63.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$63.$array[x$63.$offset + x$64])) >> 0));
					if (x$65 <= 0 || x$65 >= top) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$68 = h.stack, x$69 = top - 1 >> 0, ((x$69 < 0 || x$69 >= x$68.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$68.$array[x$68.$offset + x$69] = (x$66 = h.stack, x$67 = (top - 1 >> 0) - x$65 >> 0, ((x$67 < 0 || x$67 >= x$66.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$66.$array[x$66.$offset + x$67]))));
					if (opcode === 38) {
						$copySlice($subslice(h.stack, ((top - 1 >> 0) - x$65 >> 0), (top - 1 >> 0)), $subslice(h.stack, (top - x$65 >> 0), top));
						top = top - (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (39)) { */ case 35:
					top = top - (2) >> 0;
					p$1 = h.point(1, 0, (x$70 = h.stack, ((top < 0 || top >= x$70.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$70.$array[x$70.$offset + top])));
					q = h.point(0, 0, (x$71 = h.stack, x$72 = top + 1 >> 0, ((x$72 < 0 || x$72 >= x$71.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$71.$array[x$71.$offset + x$72])));
					if (p$1 === ptrType$3.nil || q === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d = (_q$2 = dotProduct(((q.X - p$1.X >> 0)), ((q.Y - p$1.Y >> 0)), $clone(h.gs.pv, arrayType)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					h.move(p$1, d, true);
					h.move(q, -d, true);
					$s = 109; continue;
				/* } else if (_1 === (41)) { */ case 36:
					top = top - (1) >> 0;
					p$2 = h.point(0, 0, (x$73 = h.stack, ((top < 0 || top >= x$73.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$73.$array[x$73.$offset + top])));
					if (p$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					p$2.Flags = (p$2.Flags & ~(192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (42)) || (_1 === (43))) { */ case 37:
					if (callStackTop >= 32) {
						$s = -1; return errors.New("truetype: hinting: call stack overflow");
					}
					top = top - (1) >> 0;
					_tuple = (_entry = h.functions[$Int32.keyFor((x$74 = h.stack, ((top < 0 || top >= x$74.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$74.$array[x$74.$offset + top])))], _entry !== undefined ? [_entry.v, true] : [sliceType$6.nil, false]);
					f = _tuple[0];
					ok = _tuple[1];
					if (!ok) {
						$s = -1; return errors.New("truetype: hinting: undefined function");
					}
					callStackEntry.copy(((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]), new callStackEntry.ptr(program, pc, 1));
					if (opcode === 42) {
						top = top - (1) >> 0;
						if ((x$75 = h.stack, ((top < 0 || top >= x$75.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$75.$array[x$75.$offset + top])) === 0) {
							/* break; */ $s = 3; continue;
						}
						((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = (x$76 = h.stack, ((top < 0 || top >= x$76.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$76.$array[x$76.$offset + top]));
					}
					callStackTop = callStackTop + (1) >> 0;
					_tmp$9 = f;
					_tmp$10 = 0;
					program = _tmp$9;
					pc = _tmp$10;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (44)) { */ case 38:
					startPC = pc + 1 >> 0;
					fdefloop:
					while (true) {
						pc = pc + (1) >> 0;
						if (pc >= program.$length) {
							$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
						}
						_2 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
						if (_2 === (44)) {
							$s = -1; return errors.New("truetype: hinting: nested FDEF");
						} else if (_2 === (45)) {
							top = top - (1) >> 0;
							_key = (x$77 = h.stack, ((top < 0 || top >= x$77.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$77.$array[x$77.$offset + top])); (h.functions || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key)] = { k: _key, v: $subslice(program, startPC, (pc + 1 >> 0)) };
							break fdefloop;
						} else {
							ok$1 = false;
							_tuple$1 = skipInstructionPayload(program, pc);
							pc = _tuple$1[0];
							ok$1 = _tuple$1[1];
							if (!ok$1) {
								$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
							}
						}
					}
					$s = 109; continue;
				/* } else if (_1 === (45)) { */ case 39:
					if (callStackTop === 0) {
						$s = -1; return errors.New("truetype: hinting: call stack underflow");
					}
					callStackTop = callStackTop - (1) >> 0;
					((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount - (1) >> 0;
					if (!((((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount === 0))) {
						callStackTop = callStackTop + (1) >> 0;
						pc = 0;
						/* continue; */ $s = 1; continue;
					}
					_tmp$11 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).program;
					_tmp$12 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).pc;
					program = _tmp$11;
					pc = _tmp$12;
					$s = 109; continue;
				/* } else if ((_1 === (46)) || (_1 === (47))) { */ case 40:
					top = top - (1) >> 0;
					i = (x$78 = h.stack, ((top < 0 || top >= x$78.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$78.$array[x$78.$offset + top]));
					p$3 = h.point(0, 0, i);
					if (p$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					distance = 0;
					if (opcode === 47) {
						distance = dotProduct(p$3.X, p$3.Y, $clone(h.gs.pv, arrayType));
						distance = h.round(distance) - distance >> 0;
					}
					h.move(p$3, distance, true);
					h.gs.rp[0] = i;
					h.gs.rp[1] = i;
					$s = 109; continue;
				/* } else if ((_1 === (48)) || (_1 === (49))) { */ case 41:
					_tmp$13 = opcode === 48;
					_tmp$14 = 64;
					iupY = _tmp$13;
					mask = _tmp$14;
					if (iupY) {
						mask = 128;
					}
					prevEnd = 0;
					_ref = h.ends;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						end = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						i$1 = prevEnd;
						while (true) {
							if (!(i$1 < end)) { break; }
							while (true) {
								if (!(i$1 < end && ((((x$79 = h.points[1][0], ((i$1 < 0 || i$1 >= x$79.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$79.$array[x$79.$offset + i$1])).Flags & mask) >>> 0) === 0))) { break; }
								i$1 = i$1 + (1) >> 0;
							}
							if (i$1 === end) {
								break;
							}
							_tmp$15 = i$1;
							_tmp$16 = i$1;
							firstTouched = _tmp$15;
							curTouched = _tmp$16;
							i$1 = i$1 + (1) >> 0;
							while (true) {
								if (!(i$1 < end)) { break; }
								if (!(((((x$80 = h.points[1][0], ((i$1 < 0 || i$1 >= x$80.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$80.$array[x$80.$offset + i$1])).Flags & mask) >>> 0) === 0))) {
									h.iupInterp(iupY, curTouched + 1 >> 0, i$1 - 1 >> 0, curTouched, i$1);
									curTouched = i$1;
								}
								i$1 = i$1 + (1) >> 0;
							}
							if (curTouched === firstTouched) {
								h.iupShift(iupY, prevEnd, end, curTouched);
							} else {
								h.iupInterp(iupY, curTouched + 1 >> 0, end - 1 >> 0, curTouched, firstTouched);
								if (firstTouched > 0) {
									h.iupInterp(iupY, prevEnd, firstTouched - 1 >> 0, curTouched, firstTouched);
								}
							}
							i$1 = i$1 + (1) >> 0;
						}
						prevEnd = end;
						_i++;
					}
					$s = 109; continue;
				/* } else if ((_1 === (50)) || (_1 === (51))) { */ case 42:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					_tuple$2 = h.displacement(((opcode & 1) >>> 0) === 0);
					d$1 = _tuple$2[2];
					ok$2 = _tuple$2[3];
					if (!ok$2) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$4 = h.point(2, 0, (x$81 = h.stack, ((top < 0 || top >= x$81.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$81.$array[x$81.$offset + top])));
						if (p$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$4, d$1, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (52)) || (_1 === (53))) { */ case 43:
					top = top - (1) >> 0;
					_tuple$3 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer = _tuple$3[0];
					i$2 = _tuple$3[1];
					d$2 = _tuple$3[2];
					ok$3 = _tuple$3[3];
					if (!ok$3) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					if (h.gs.zp[2] === 0) {
						$s = -1; return errors.New("hinting: unimplemented SHC instruction");
					}
					contour = (x$82 = h.stack, ((top < 0 || top >= x$82.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$82.$array[x$82.$offset + top]));
					if (contour < 0 || ends.$length <= ((contour >> 0))) {
						$s = -1; return errors.New("truetype: hinting: contour out of range");
					}
					_tmp$17 = 0;
					_tmp$18 = (((x$83 = h.ends, ((contour < 0 || contour >= x$83.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$83.$array[x$83.$offset + contour])) >> 0));
					j0 = _tmp$17;
					j1 = _tmp$18;
					if (contour > 0) {
						j0 = (((x$84 = h.ends, x$85 = contour - 1 >> 0, ((x$85 < 0 || x$85 >= x$84.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$84.$array[x$84.$offset + x$85])) >> 0));
					}
					move = !(((x$86 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$86.length) ? ($throwRuntimeError("index out of range"), undefined) : x$86[zonePointer])) === h.gs.zp[2]));
					j = j0;
					while (true) {
						if (!(j < j1)) { break; }
						if (move || !((j === i$2))) {
							h.move(h.point(2, 0, j), d$2, true);
						}
						j = j + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if ((_1 === (54)) || (_1 === (55))) { */ case 44:
					top = top - (1) >> 0;
					_tuple$4 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer$1 = _tuple$4[0];
					i$3 = _tuple$4[1];
					d$3 = _tuple$4[2];
					ok$4 = _tuple$4[3];
					if (!ok$4) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					limit = (((x$87 = h.points, x$88 = h.gs.zp[2], ((x$88 < 0 || x$88 >= x$87.length) ? ($throwRuntimeError("index out of range"), undefined) : x$87[x$88]))[0].$length >> 0));
					if (h.gs.zp[2] === 1) {
						limit = limit - (4) >> 0;
					}
					j$1 = 0;
					while (true) {
						if (!(j$1 < limit)) { break; }
						if (!((i$3 === j$1)) || !(((x$89 = h.gs.zp, ((zonePointer$1 < 0 || zonePointer$1 >= x$89.length) ? ($throwRuntimeError("index out of range"), undefined) : x$89[zonePointer$1])) === h.gs.zp[2]))) {
							h.move(h.point(2, 0, j$1), d$3, false);
						}
						j$1 = j$1 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (56)) { */ case 45:
					top = top - (1) >> 0;
					d$4 = (((x$90 = h.stack, ((top < 0 || top >= x$90.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$90.$array[x$90.$offset + top])) >> 0));
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$5 = h.point(2, 0, (x$91 = h.stack, ((top < 0 || top >= x$91.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$91.$array[x$91.$offset + top])));
						if (p$5 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$5, d$4, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (57)) { */ case 46:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					pointType$1 = 2;
					twilight = (h.gs.zp[0] === 0) || (h.gs.zp[1] === 0) || (h.gs.zp[2] === 0);
					if (twilight) {
						pointType$1 = 1;
					}
					p$6 = h.point(1, pointType$1, h.gs.rp[2]);
					oldP = h.point(0, pointType$1, h.gs.rp[1]);
					oldRange = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
					p$6 = h.point(1, 0, h.gs.rp[2]);
					curP = h.point(0, 0, h.gs.rp[1]);
					curRange = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$4 = (x$92 = h.stack, ((top < 0 || top >= x$92.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$92.$array[x$92.$offset + top]));
						p$6 = h.point(2, pointType$1, i$4);
						oldDist = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
						p$6 = h.point(2, 0, i$4);
						curDist = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
						newDist = 0;
						if (!((oldDist === 0))) {
							if (!((oldRange === 0))) {
								newDist = (((x$93 = mulDiv((new $Int64(0, oldDist)), (new $Int64(0, curRange)), (new $Int64(0, oldRange))), x$93.$low + ((x$93.$high >> 31) * 4294967296)) >> 0));
							} else {
								newDist = -oldDist;
							}
						}
						h.move(p$6, newDist - curDist >> 0, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (58)) || (_1 === (59))) { */ case 47:
					top = top - (2) >> 0;
					i$5 = (x$94 = h.stack, ((top < 0 || top >= x$94.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$94.$array[x$94.$offset + top]));
					distance$1 = (((x$95 = h.stack, x$96 = top + 1 >> 0, ((x$96 < 0 || x$96 >= x$95.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$95.$array[x$95.$offset + x$96])) >> 0));
					ref = h.point(0, 0, h.gs.rp[0]);
					p$7 = h.point(1, 0, i$5);
					if (ref === ptrType$3.nil || p$7 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					curDist$1 = dotProduct(p$7.X - ref.X >> 0, p$7.Y - ref.Y >> 0, $clone(h.gs.pv, arrayType));
					if (opcode === 59) {
						h.gs.rp[0] = i$5;
					}
					h.gs.rp[1] = h.gs.rp[0];
					h.gs.rp[2] = i$5;
					h.move(p$7, distance$1 - curDist$1 >> 0, true);
					$s = 109; continue;
				/* } else if (_1 === (60)) { */ case 48:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					ref$1 = h.point(0, 0, h.gs.rp[0]);
					if (ref$1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$8 = h.point(1, 0, (x$97 = h.stack, ((top < 0 || top >= x$97.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$97.$array[x$97.$offset + top])));
						if (p$8 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$8, -dotProduct(p$8.X - ref$1.X >> 0, p$8.Y - ref$1.Y >> 0, $clone(h.gs.pv, arrayType)), true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (61)) { */ case 49:
					h.gs.roundPeriod = 32;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 16;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (62)) || (_1 === (63))) { */ case 50:
					top = top - (2) >> 0;
					i$6 = (x$98 = h.stack, ((top < 0 || top >= x$98.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$98.$array[x$98.$offset + top]));
					distance$2 = h.getScaledCVT((x$99 = h.stack, x$100 = top + 1 >> 0, ((x$100 < 0 || x$100 >= x$99.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$99.$array[x$99.$offset + x$100])));
					if (h.gs.zp[0] === 0) {
						p$9 = h.point(0, 1, i$6);
						q$1 = h.point(0, 0, i$6);
						p$9.X = (((x$101 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[0])))), 14), x$101.$low + ((x$101.$high >> 31) * 4294967296)) >> 0));
						p$9.Y = (((x$102 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[1])))), 14), x$102.$low + ((x$102.$high >> 31) * 4294967296)) >> 0));
						Point.copy(q$1, p$9);
					}
					p$10 = h.point(0, 0, i$6);
					oldDist$1 = dotProduct(p$10.X, p$10.Y, $clone(h.gs.pv, arrayType));
					if (opcode === 63) {
						if (fabs(distance$2 - oldDist$1 >> 0) > h.gs.controlValueCutIn) {
							distance$2 = oldDist$1;
						}
						distance$2 = h.round(distance$2);
					}
					h.move(p$10, distance$2 - oldDist$1 >> 0, true);
					h.gs.rp[0] = i$6;
					h.gs.rp[1] = i$6;
					$s = 109; continue;
				/* } else if (_1 === (64)) { */ case 51:
					opcode = 0;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (65)) { */ case 52:
					opcode = 128;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (66)) { */ case 53:
					top = top - (2) >> 0;
					i$7 = (((x$103 = h.stack, ((top < 0 || top >= x$103.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$103.$array[x$103.$offset + top])) >> 0));
					if (i$7 < 0 || h.store.$length <= i$7) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$106 = h.store, ((i$7 < 0 || i$7 >= x$106.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$106.$array[x$106.$offset + i$7] = (x$104 = h.stack, x$105 = top + 1 >> 0, ((x$105 < 0 || x$105 >= x$104.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$104.$array[x$104.$offset + x$105]))));
					$s = 109; continue;
				/* } else if (_1 === (67)) { */ case 54:
					i$8 = (((x$107 = h.stack, x$108 = top - 1 >> 0, ((x$108 < 0 || x$108 >= x$107.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$107.$array[x$107.$offset + x$108])) >> 0));
					if (i$8 < 0 || h.store.$length <= i$8) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$110 = h.stack, x$111 = top - 1 >> 0, ((x$111 < 0 || x$111 >= x$110.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$110.$array[x$110.$offset + x$111] = (x$109 = h.store, ((i$8 < 0 || i$8 >= x$109.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$109.$array[x$109.$offset + i$8]))));
					$s = 109; continue;
				/* } else if (_1 === (68)) { */ case 55:
					top = top - (2) >> 0;
					h.setScaledCVT((x$112 = h.stack, ((top < 0 || top >= x$112.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$112.$array[x$112.$offset + top])), (((x$113 = h.stack, x$114 = top + 1 >> 0, ((x$114 < 0 || x$114 >= x$113.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$113.$array[x$113.$offset + x$114])) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (69)) { */ case 56:
					(x$117 = h.stack, x$118 = top - 1 >> 0, ((x$118 < 0 || x$118 >= x$117.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$117.$array[x$117.$offset + x$118] = ((h.getScaledCVT((x$115 = h.stack, x$116 = top - 1 >> 0, ((x$116 < 0 || x$116 >= x$115.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$115.$array[x$115.$offset + x$116]))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (70)) || (_1 === (71))) { */ case 57:
					i$9 = (x$119 = h.stack, x$120 = top - 1 >> 0, ((x$120 < 0 || x$120 >= x$119.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$119.$array[x$119.$offset + x$120]));
					if (opcode === 70) {
						p$11 = h.point(2, 0, i$9);
						(x$121 = h.stack, x$122 = top - 1 >> 0, ((x$122 < 0 || x$122 >= x$121.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$121.$array[x$121.$offset + x$122] = ((dotProduct(p$11.X, p$11.Y, $clone(h.gs.pv, arrayType)) >> 0))));
					} else {
						p$12 = h.point(2, 1, i$9);
						(x$123 = h.stack, x$124 = top - 1 >> 0, ((x$124 < 0 || x$124 >= x$123.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$123.$array[x$123.$offset + x$124] = ((dotProduct(p$12.X, p$12.Y, $clone(h.gs.dv, arrayType)) >> 0))));
					}
					$s = 109; continue;
				/* } else if (_1 === (72)) { */ case 58:
					top = top - (2) >> 0;
					i$10 = (x$125 = h.stack, ((top < 0 || top >= x$125.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$125.$array[x$125.$offset + top]));
					p$13 = h.point(2, 0, i$10);
					if (p$13 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					c = dotProduct(p$13.X, p$13.Y, $clone(h.gs.pv, arrayType));
					h.move(p$13, (((x$126 = h.stack, x$127 = top + 1 >> 0, ((x$127 < 0 || x$127 >= x$126.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$126.$array[x$126.$offset + x$127])) >> 0)) - c >> 0, true);
					if (!((h.gs.zp[2] === 0))) {
						/* break; */ $s = 3; continue;
					}
					q$2 = h.point(2, 1, i$10);
					if (q$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					q$2.X = p$13.X;
					q$2.Y = p$13.Y;
					$s = 109; continue;
				/* } else if ((_1 === (73)) || (_1 === (74))) { */ case 59:
					top = top - (1) >> 0;
					_tmp$19 = 0;
					_tmp$20 = arrayType.zero();
					_tmp$21 = false;
					pt = _tmp$19;
					v$1 = $clone(_tmp$20, arrayType);
					scale = _tmp$21;
					if (opcode === 73) {
						pt = 0;
						arrayType.copy(v$1, h.gs.pv);
					} else if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
						pt = 1;
						arrayType.copy(v$1, h.gs.dv);
					} else {
						pt = 2;
						arrayType.copy(v$1, h.gs.dv);
						scale = true;
					}
					p$14 = h.point(0, pt, (x$128 = h.stack, x$129 = top - 1 >> 0, ((x$129 < 0 || x$129 >= x$128.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$128.$array[x$128.$offset + x$129])));
					q$3 = h.point(1, pt, (x$130 = h.stack, ((top < 0 || top >= x$130.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$130.$array[x$130.$offset + top])));
					if (p$14 === ptrType$3.nil || q$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d$5 = ((dotProduct(p$14.X - q$3.X >> 0, p$14.Y - q$3.Y >> 0, $clone(v$1, arrayType)) >> 0));
					if (scale) {
						d$5 = (((x$131 = $div64((new $Int64(0, ($imul(d$5, ((h.scale >> 0)))))), (new $Int64(0, h.font.fUnitsPerEm)), false), x$131.$low + ((x$131.$high >> 31) * 4294967296)) >> 0));
					}
					(x$132 = h.stack, x$133 = top - 1 >> 0, ((x$133 < 0 || x$133 >= x$132.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$132.$array[x$132.$offset + x$133] = d$5));
					$s = 109; continue;
				/* } else if ((_1 === (75)) || (_1 === (76))) { */ case 60:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$134 = h.stack, ((top < 0 || top >= x$134.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$134.$array[x$134.$offset + top] = (((h.scale >> 0)) >> 6 >> 0)));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (77)) || (_1 === (78))) { */ case 61:
					h.gs.autoFlip = opcode === 77;
					$s = 109; continue;
				/* } else if (_1 === (79)) { */ case 62:
					$s = 109; continue;
				/* } else if (_1 === (80)) { */ case 63:
					top = top - (1) >> 0;
					(x$138 = h.stack, x$139 = top - 1 >> 0, ((x$139 < 0 || x$139 >= x$138.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$138.$array[x$138.$offset + x$139] = bool2int32((x$135 = h.stack, x$136 = top - 1 >> 0, ((x$136 < 0 || x$136 >= x$135.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$135.$array[x$135.$offset + x$136])) < (x$137 = h.stack, ((top < 0 || top >= x$137.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$137.$array[x$137.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (81)) { */ case 64:
					top = top - (1) >> 0;
					(x$143 = h.stack, x$144 = top - 1 >> 0, ((x$144 < 0 || x$144 >= x$143.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$143.$array[x$143.$offset + x$144] = bool2int32((x$140 = h.stack, x$141 = top - 1 >> 0, ((x$141 < 0 || x$141 >= x$140.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$140.$array[x$140.$offset + x$141])) <= (x$142 = h.stack, ((top < 0 || top >= x$142.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$142.$array[x$142.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (82)) { */ case 65:
					top = top - (1) >> 0;
					(x$148 = h.stack, x$149 = top - 1 >> 0, ((x$149 < 0 || x$149 >= x$148.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$148.$array[x$148.$offset + x$149] = bool2int32((x$145 = h.stack, x$146 = top - 1 >> 0, ((x$146 < 0 || x$146 >= x$145.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$145.$array[x$145.$offset + x$146])) > (x$147 = h.stack, ((top < 0 || top >= x$147.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$147.$array[x$147.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (83)) { */ case 66:
					top = top - (1) >> 0;
					(x$153 = h.stack, x$154 = top - 1 >> 0, ((x$154 < 0 || x$154 >= x$153.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$153.$array[x$153.$offset + x$154] = bool2int32((x$150 = h.stack, x$151 = top - 1 >> 0, ((x$151 < 0 || x$151 >= x$150.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$150.$array[x$150.$offset + x$151])) >= (x$152 = h.stack, ((top < 0 || top >= x$152.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$152.$array[x$152.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (84)) { */ case 67:
					top = top - (1) >> 0;
					(x$158 = h.stack, x$159 = top - 1 >> 0, ((x$159 < 0 || x$159 >= x$158.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$158.$array[x$158.$offset + x$159] = bool2int32((x$155 = h.stack, x$156 = top - 1 >> 0, ((x$156 < 0 || x$156 >= x$155.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$155.$array[x$155.$offset + x$156])) === (x$157 = h.stack, ((top < 0 || top >= x$157.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$157.$array[x$157.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (85)) { */ case 68:
					top = top - (1) >> 0;
					(x$163 = h.stack, x$164 = top - 1 >> 0, ((x$164 < 0 || x$164 >= x$163.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$163.$array[x$163.$offset + x$164] = bool2int32(!(((x$160 = h.stack, x$161 = top - 1 >> 0, ((x$161 < 0 || x$161 >= x$160.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$160.$array[x$160.$offset + x$161])) === (x$162 = h.stack, ((top < 0 || top >= x$162.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$162.$array[x$162.$offset + top])))))));
					$s = 109; continue;
				/* } else if ((_1 === (86)) || (_1 === (87))) { */ case 69:
					i$11 = h.round((((x$165 = h.stack, x$166 = top - 1 >> 0, ((x$166 < 0 || x$166 >= x$165.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$165.$array[x$165.$offset + x$166])) >> 0))) >> 6 >> 0;
					(x$167 = h.stack, x$168 = top - 1 >> 0, ((x$168 < 0 || x$168 >= x$167.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$167.$array[x$167.$offset + x$168] = (((((i$11 & 1) >> 0)) ^ (((opcode - 86 << 24 >>> 24) >> 0))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (88)) { */ case 70:
					top = top - (1) >> 0;
					/* */ if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { $s = 112; continue; }
					/* */ $s = 113; continue;
					/* if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { */ case 112:
						opcode = 0;
						/* goto ifelse */ $s = 110; continue;
					/* } */ case 113:
					$s = 109; continue;
				/* } else if (_1 === (89)) { */ case 71:
					$s = 109; continue;
				/* } else if (_1 === (90)) { */ case 72:
					top = top - (1) >> 0;
					(x$173 = h.stack, x$174 = top - 1 >> 0, ((x$174 < 0 || x$174 >= x$173.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$173.$array[x$173.$offset + x$174] = bool2int32(!(((x$170 = h.stack, x$171 = top - 1 >> 0, ((x$171 < 0 || x$171 >= x$170.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$170.$array[x$170.$offset + x$171])) === 0)) && !(((x$172 = h.stack, ((top < 0 || top >= x$172.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$172.$array[x$172.$offset + top])) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (91)) { */ case 73:
					top = top - (1) >> 0;
					(x$178 = h.stack, x$179 = top - 1 >> 0, ((x$179 < 0 || x$179 >= x$178.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$178.$array[x$178.$offset + x$179] = bool2int32(!((((x$175 = h.stack, x$176 = top - 1 >> 0, ((x$176 < 0 || x$176 >= x$175.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$175.$array[x$175.$offset + x$176])) | (x$177 = h.stack, ((top < 0 || top >= x$177.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$177.$array[x$177.$offset + top]))) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (92)) { */ case 74:
					(x$182 = h.stack, x$183 = top - 1 >> 0, ((x$183 < 0 || x$183 >= x$182.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$182.$array[x$182.$offset + x$183] = bool2int32((x$180 = h.stack, x$181 = top - 1 >> 0, ((x$181 < 0 || x$181 >= x$180.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$180.$array[x$180.$offset + x$181])) === 0)));
					$s = 109; continue;
				/* } else if (_1 === (93)) { */ case 75:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if (_1 === (94)) { */ case 76:
					top = top - (1) >> 0;
					h.gs.deltaBase = (x$184 = h.stack, ((top < 0 || top >= x$184.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$184.$array[x$184.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (95)) { */ case 77:
					top = top - (1) >> 0;
					h.gs.deltaShift = (x$185 = h.stack, ((top < 0 || top >= x$185.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$185.$array[x$185.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (96)) { */ case 78:
					top = top - (1) >> 0;
					_index = top - 1 >> 0;
					(x$188 = h.stack, ((_index < 0 || _index >= x$188.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$188.$array[x$188.$offset + _index] = ((x$186 = h.stack, ((_index < 0 || _index >= x$186.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$186.$array[x$186.$offset + _index])) + ((x$187 = h.stack, ((top < 0 || top >= x$187.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$187.$array[x$187.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (97)) { */ case 79:
					top = top - (1) >> 0;
					_index$1 = top - 1 >> 0;
					(x$191 = h.stack, ((_index$1 < 0 || _index$1 >= x$191.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$191.$array[x$191.$offset + _index$1] = ((x$189 = h.stack, ((_index$1 < 0 || _index$1 >= x$189.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$189.$array[x$189.$offset + _index$1])) - ((x$190 = h.stack, ((top < 0 || top >= x$190.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$190.$array[x$190.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (98)) { */ case 80:
					top = top - (1) >> 0;
					if ((x$192 = h.stack, ((top < 0 || top >= x$192.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$192.$array[x$192.$offset + top])) === 0) {
						$s = -1; return errors.New("truetype: hinting: division by zero");
					}
					(x$196 = h.stack, x$197 = top - 1 >> 0, ((x$197 < 0 || x$197 >= x$196.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$196.$array[x$196.$offset + x$197] = ((fdiv((((x$193 = h.stack, x$194 = top - 1 >> 0, ((x$194 < 0 || x$194 >= x$193.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$193.$array[x$193.$offset + x$194])) >> 0)), (((x$195 = h.stack, ((top < 0 || top >= x$195.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$195.$array[x$195.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (99)) { */ case 81:
					top = top - (1) >> 0;
					(x$201 = h.stack, x$202 = top - 1 >> 0, ((x$202 < 0 || x$202 >= x$201.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$201.$array[x$201.$offset + x$202] = ((fmul((((x$198 = h.stack, x$199 = top - 1 >> 0, ((x$199 < 0 || x$199 >= x$198.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$198.$array[x$198.$offset + x$199])) >> 0)), (((x$200 = h.stack, ((top < 0 || top >= x$200.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$200.$array[x$200.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (100)) { */ case 82:
					if ((x$203 = h.stack, x$204 = top - 1 >> 0, ((x$204 < 0 || x$204 >= x$203.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$203.$array[x$203.$offset + x$204])) < 0) {
						(x$207 = h.stack, x$208 = top - 1 >> 0, ((x$208 < 0 || x$208 >= x$207.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$207.$array[x$207.$offset + x$208] = -(x$205 = h.stack, x$206 = top - 1 >> 0, ((x$206 < 0 || x$206 >= x$205.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$205.$array[x$205.$offset + x$206]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (101)) { */ case 83:
					(x$211 = h.stack, x$212 = top - 1 >> 0, ((x$212 < 0 || x$212 >= x$211.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$211.$array[x$211.$offset + x$212] = -(x$209 = h.stack, x$210 = top - 1 >> 0, ((x$210 < 0 || x$210 >= x$209.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$209.$array[x$209.$offset + x$210]))));
					$s = 109; continue;
				/* } else if (_1 === (102)) { */ case 84:
					_index$2 = top - 1 >> 0;
					(x$214 = h.stack, ((_index$2 < 0 || _index$2 >= x$214.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$214.$array[x$214.$offset + _index$2] = (((x$213 = h.stack, ((_index$2 < 0 || _index$2 >= x$213.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$213.$array[x$213.$offset + _index$2])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (103)) { */ case 85:
					_index$3 = top - 1 >> 0;
					(x$216 = h.stack, ((_index$3 < 0 || _index$3 >= x$216.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$216.$array[x$216.$offset + _index$3] = ((x$215 = h.stack, ((_index$3 < 0 || _index$3 >= x$215.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$215.$array[x$215.$offset + _index$3])) + (63) >> 0)));
					_index$4 = top - 1 >> 0;
					(x$218 = h.stack, ((_index$4 < 0 || _index$4 >= x$218.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$218.$array[x$218.$offset + _index$4] = (((x$217 = h.stack, ((_index$4 < 0 || _index$4 >= x$217.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$217.$array[x$217.$offset + _index$4])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { */ case 86:
					(x$221 = h.stack, x$222 = top - 1 >> 0, ((x$222 < 0 || x$222 >= x$221.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$221.$array[x$221.$offset + x$222] = ((h.round((((x$219 = h.stack, x$220 = top - 1 >> 0, ((x$220 < 0 || x$220 >= x$219.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$219.$array[x$219.$offset + x$220])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { */ case 87:
					$s = 109; continue;
				/* } else if (_1 === (112)) { */ case 88:
					top = top - (2) >> 0;
					h.setScaledCVT((x$223 = h.stack, ((top < 0 || top >= x$223.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$223.$array[x$223.$offset + top])), h.font.scale($imul(h.scale, (((x$224 = h.stack, x$225 = top + 1 >> 0, ((x$225 < 0 || x$225 >= x$224.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$224.$array[x$224.$offset + x$225])) >> 0)))));
					$s = 109; continue;
				/* } else if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { */ case 89:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if ((_1 === (118)) || (_1 === (119))) { */ case 90:
					top = top - (1) >> 0;
					_3 = (((x$226 = h.stack, ((top < 0 || top >= x$226.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$226.$array[x$226.$offset + top])) >> 6 >> 0)) & 3;
					if (_3 === (0)) {
						h.gs.roundPeriod = 32;
					} else if ((_3 === (1)) || (_3 === (3))) {
						h.gs.roundPeriod = 64;
					} else if (_3 === (2)) {
						h.gs.roundPeriod = 128;
					}
					h.gs.roundSuper45 = opcode === 119;
					if (h.gs.roundSuper45) {
						h.gs.roundPeriod = $imul(h.gs.roundPeriod, (46341));
						h.gs.roundPeriod = (_q$3 = h.gs.roundPeriod / (65536), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					h.gs.roundPhase = (_q$4 = ($imul(h.gs.roundPeriod, ((((((x$227 = h.stack, ((top < 0 || top >= x$227.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$227.$array[x$227.$offset + top])) >> 4 >> 0)) & 3) >> 0)))) / 4, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
					x$229 = (x$228 = h.stack, ((top < 0 || top >= x$228.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$228.$array[x$228.$offset + top])) & 15;
					if (!((x$229 === 0))) {
						h.gs.roundThreshold = (_q$5 = ($imul(h.gs.roundPeriod, (((x$229 - 4 >> 0) >> 0)))) / 8, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
					} else {
						h.gs.roundThreshold = h.gs.roundPeriod - 1 >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (120)) { */ case 91:
					top = top - (2) >> 0;
					if (!(((x$230 = h.stack, x$231 = top + 1 >> 0, ((x$231 < 0 || x$231 >= x$230.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$230.$array[x$230.$offset + x$231])) === 0))) {
						pc = pc + ((((x$232 = h.stack, ((top < 0 || top >= x$232.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$232.$array[x$232.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (121)) { */ case 92:
					top = top - (2) >> 0;
					if ((x$233 = h.stack, x$234 = top + 1 >> 0, ((x$234 < 0 || x$234 >= x$233.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$233.$array[x$233.$offset + x$234])) === 0) {
						pc = pc + ((((x$235 = h.stack, ((top < 0 || top >= x$235.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$235.$array[x$235.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (122)) { */ case 93:
					h.gs.roundPeriod = 0;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (124)) { */ case 94:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 63;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (125)) { */ case 95:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (126)) || (_1 === (127))) { */ case 96:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (128)) { */ case 97:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					points = h.points[1][0];
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$12 = (x$236 = h.stack, ((top < 0 || top >= x$236.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$236.$array[x$236.$offset + top]));
						if (i$12 < 0 || points.$length <= ((i$12 >> 0))) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags = (((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags ^ (1)) >>> 0;
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (129)) || (_1 === (130))) { */ case 98:
					top = top - (2) >> 0;
					_tmp$22 = (x$237 = h.stack, ((top < 0 || top >= x$237.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$237.$array[x$237.$offset + top]));
					_tmp$23 = (x$238 = h.stack, x$239 = top + 1 >> 0, ((x$239 < 0 || x$239 >= x$238.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$238.$array[x$238.$offset + x$239]));
					_tmp$24 = h.points[1][0];
					i$13 = _tmp$22;
					j$2 = _tmp$23;
					points$1 = _tmp$24;
					if (i$13 < 0 || points$1.$length <= ((i$13 >> 0)) || j$2 < 0 || points$1.$length <= ((j$2 >> 0))) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(i$13 <= j$2)) { break; }
						if (opcode === 129) {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags | (1)) >>> 0;
						} else {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags & ~(1)) >>> 0;
						}
						i$13 = i$13 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (133)) { */ case 99:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (134)) || (_1 === (135))) { */ case 100:
					top = top - (2) >> 0;
					i$14 = 0;
					while (true) {
						if (!(i$14 < 2)) { break; }
						pt$1 = 1;
						if (!((i$14 === 0))) {
							pt$1 = 0;
						}
						p$15 = h.point(1, pt$1, (x$240 = h.stack, ((top < 0 || top >= x$240.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$240.$array[x$240.$offset + top])));
						q$4 = h.point(2, pt$1, (x$241 = h.stack, x$242 = top + 1 >> 0, ((x$242 < 0 || x$242 >= x$241.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$241.$array[x$241.$offset + x$242])));
						if (p$15 === ptrType$3.nil || q$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						dx$2 = (((p$15.X - q$4.X >> 0) << 16 >> 16));
						dy$2 = (((p$15.Y - q$4.Y >> 0) << 16 >> 16));
						if ((dx$2 === 0) && (dy$2 === 0)) {
							dx$2 = 16384;
						} else if (!((((opcode & 1) >>> 0) === 0))) {
							_tmp$25 = -dy$2;
							_tmp$26 = dx$2;
							dx$2 = _tmp$25;
							dy$2 = _tmp$26;
						}
						if (i$14 === 0) {
							arrayType.copy(h.gs.dv, normalize(dx$2, dy$2));
						} else {
							arrayType.copy(h.gs.pv, normalize(dx$2, dy$2));
						}
						i$14 = i$14 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (136)) { */ case 101:
					res = 0;
					if (!((((x$243 = h.stack, x$244 = top - 1 >> 0, ((x$244 < 0 || x$244 >= x$243.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$243.$array[x$243.$offset + x$244])) & 1) === 0))) {
						res = res | (35);
					}
					if (!((((x$245 = h.stack, x$246 = top - 1 >> 0, ((x$246 < 0 || x$246 >= x$245.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$245.$array[x$245.$offset + x$246])) & 32) === 0))) {
						res = res | (4096);
					}
					(x$247 = h.stack, x$248 = top - 1 >> 0, ((x$248 < 0 || x$248 >= x$247.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$247.$array[x$247.$offset + x$248] = res));
					$s = 109; continue;
				/* } else if (_1 === (137)) { */ case 102:
					$s = -1; return errors.New("truetype: hinting: unsupported IDEF instruction");
				/* } else if (_1 === (138)) { */ case 103:
					_tmp$27 = (x$249 = h.stack, x$250 = top - 3 >> 0, ((x$250 < 0 || x$250 >= x$249.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$249.$array[x$249.$offset + x$250]));
					_tmp$28 = (x$251 = h.stack, x$252 = top - 2 >> 0, ((x$252 < 0 || x$252 >= x$251.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$251.$array[x$251.$offset + x$252]));
					_tmp$29 = (x$253 = h.stack, x$254 = top - 1 >> 0, ((x$254 < 0 || x$254 >= x$253.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$253.$array[x$253.$offset + x$254]));
					(x$255 = h.stack, x$256 = top - 1 >> 0, ((x$256 < 0 || x$256 >= x$255.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$255.$array[x$255.$offset + x$256] = _tmp$27));
					(x$257 = h.stack, x$258 = top - 3 >> 0, ((x$258 < 0 || x$258 >= x$257.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$257.$array[x$257.$offset + x$258] = _tmp$28));
					(x$259 = h.stack, x$260 = top - 2 >> 0, ((x$260 < 0 || x$260 >= x$259.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$259.$array[x$259.$offset + x$260] = _tmp$29));
					$s = 109; continue;
				/* } else if (_1 === (139)) { */ case 104:
					top = top - (1) >> 0;
					if ((x$261 = h.stack, x$262 = top - 1 >> 0, ((x$262 < 0 || x$262 >= x$261.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$261.$array[x$261.$offset + x$262])) < (x$263 = h.stack, ((top < 0 || top >= x$263.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$263.$array[x$263.$offset + top]))) {
						(x$265 = h.stack, x$266 = top - 1 >> 0, ((x$266 < 0 || x$266 >= x$265.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$265.$array[x$265.$offset + x$266] = (x$264 = h.stack, ((top < 0 || top >= x$264.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$264.$array[x$264.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (140)) { */ case 105:
					top = top - (1) >> 0;
					if ((x$267 = h.stack, x$268 = top - 1 >> 0, ((x$268 < 0 || x$268 >= x$267.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$267.$array[x$267.$offset + x$268])) > (x$269 = h.stack, ((top < 0 || top >= x$269.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$269.$array[x$269.$offset + top]))) {
						(x$271 = h.stack, x$272 = top - 1 >> 0, ((x$272 < 0 || x$272 >= x$271.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$271.$array[x$271.$offset + x$272] = (x$270 = h.stack, ((top < 0 || top >= x$270.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$270.$array[x$270.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (141)) { */ case 106:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (142)) { */ case 107:
					top = top - (2) >> 0;
					$s = 109; continue;
				/* } else { */ case 108:
					if (opcode < 176) {
						$s = -1; return errors.New("truetype: hinting: unrecognized instruction");
					}
					/* */ if (opcode < 192) { $s = 115; continue; }
					/* */ $s = 116; continue;
					/* if (opcode < 192) { */ case 115:
						if (opcode < 184) {
							opcode = opcode - (175) << 24 >>> 24;
						} else {
							opcode = opcode - (55) << 24 >>> 24;
						}
						/* goto push */ $s = 111; continue;
					/* } */ case 116:
					if (opcode < 224) {
						top = top - (1) >> 0;
						i$15 = (x$273 = h.stack, ((top < 0 || top >= x$273.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$273.$array[x$273.$offset + top]));
						ref$2 = h.point(0, 0, h.gs.rp[0]);
						p$16 = h.point(1, 0, i$15);
						if (ref$2 === ptrType$3.nil || p$16 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$2 = 0;
						if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
							p0 = h.point(1, 1, i$15);
							p1$1 = h.point(0, 1, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0.X - p1$1.X >> 0, p0.Y - p1$1.Y >> 0, $clone(h.gs.dv, arrayType));
						} else {
							p0$1 = h.point(1, 2, i$15);
							p1$2 = h.point(0, 2, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0$1.X - p1$2.X >> 0, p0$1.Y - p1$2.Y >> 0, $clone(h.gs.dv, arrayType));
							oldDist$2 = h.font.scale($imul(h.scale, oldDist$2));
						}
						x$274 = fabs(oldDist$2 - h.gs.singleWidth >> 0);
						if (x$274 < h.gs.singleWidthCutIn) {
							if (oldDist$2 >= 0) {
								oldDist$2 = h.gs.singleWidth;
							} else {
								oldDist$2 = -h.gs.singleWidth;
							}
						}
						distance$3 = oldDist$2;
						if (!((((opcode & 4) >>> 0) === 0))) {
							distance$3 = h.round(oldDist$2);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$2 >= 0) {
								if (distance$3 < h.gs.minDist) {
									distance$3 = h.gs.minDist;
								}
							} else {
								if (distance$3 > -h.gs.minDist) {
									distance$3 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$15;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$15;
						}
						oldDist$2 = dotProduct(p$16.X - ref$2.X >> 0, p$16.Y - ref$2.Y >> 0, $clone(h.gs.pv, arrayType));
						h.move(p$16, distance$3 - oldDist$2 >> 0, true);
					} else {
						top = top - (2) >> 0;
						i$16 = (x$275 = h.stack, ((top < 0 || top >= x$275.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$275.$array[x$275.$offset + top]));
						cvtDist = h.getScaledCVT((x$276 = h.stack, x$277 = top + 1 >> 0, ((x$277 < 0 || x$277 >= x$276.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$276.$array[x$276.$offset + x$277])));
						if (fabs(cvtDist - h.gs.singleWidth >> 0) < h.gs.singleWidthCutIn) {
							if (cvtDist >= 0) {
								cvtDist = h.gs.singleWidth;
							} else {
								cvtDist = -h.gs.singleWidth;
							}
						}
						if (h.gs.zp[1] === 0) {
							$s = -1; return errors.New("truetype: hinting: unimplemented twilight point adjustment");
						}
						ref$3 = h.point(0, 1, h.gs.rp[0]);
						p$17 = h.point(1, 1, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$3 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.dv, arrayType));
						ref$3 = h.point(0, 0, h.gs.rp[0]);
						p$17 = h.point(1, 0, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						curDist$2 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.pv, arrayType));
						if (h.gs.autoFlip && ((oldDist$3 ^ cvtDist) >> 0) < 0) {
							cvtDist = -cvtDist;
						}
						distance$4 = cvtDist;
						if (!((((opcode & 4) >>> 0) === 0))) {
							if (((h.gs.zp[0] === h.gs.zp[1])) && (fabs(cvtDist - oldDist$3 >> 0) > h.gs.controlValueCutIn)) {
								distance$4 = oldDist$3;
							}
							distance$4 = h.round(distance$4);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$3 >= 0) {
								if (distance$4 < h.gs.minDist) {
									distance$4 = h.gs.minDist;
								}
							} else {
								if (distance$4 > -h.gs.minDist) {
									distance$4 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$16;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$16;
						}
						h.move(p$17, distance$4 - curDist$2 >> 0, true);
					}
				/* } */ case 109:
			case 3:
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* ifelse: */ case 110:
			depth = 0;
			ifelseloop:
			while (true) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
				}
				_4 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
				if (_4 === (88)) {
					depth = depth + (1) >> 0;
				} else if (_4 === (27)) {
					if ((depth === 0) && (opcode === 0)) {
						break ifelseloop;
					}
				} else if (_4 === (89)) {
					depth = depth - (1) >> 0;
					if (depth < 0) {
						break ifelseloop;
					}
				} else {
					ok$5 = false;
					_tuple$5 = skipInstructionPayload(program, pc);
					pc = _tuple$5[0];
					ok$5 = _tuple$5[1];
					if (!ok$5) {
						$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
					}
				}
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* push: */ case 111:
			width = 1;
			if (!((((opcode & 128) >>> 0) === 0))) {
				opcode = (opcode & ~(128)) << 24 >>> 24;
				width = 2;
			}
			if (opcode === 0) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: insufficient data");
				}
				opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			}
			pc = pc + (1) >> 0;
			if ((top + ((opcode >> 0)) >> 0) > h.stack.$length) {
				$s = -1; return errors.New("truetype: hinting: stack overflow");
			}
			if ((pc + ($imul(width, ((opcode >> 0)))) >> 0) > program.$length) {
				$s = -1; return errors.New("truetype: hinting: insufficient data");
			}
			while (true) {
				if (!(opcode > 0)) { break; }
				if (width === 1) {
					(x$278 = h.stack, ((top < 0 || top >= x$278.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$278.$array[x$278.$offset + top] = ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))));
				} else {
					(x$280 = h.stack, ((top < 0 || top >= x$280.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$280.$array[x$280.$offset + top] = ((((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) << 24 >> 24)) >> 0)) << 8 >> 0) | (((x$279 = pc + 1 >> 0, ((x$279 < 0 || x$279 >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + x$279])) >> 0)))));
				}
				top = top + (1) >> 0;
				pc = pc + (width) >> 0;
				opcode = opcode - (1) << 24 >>> 24;
			}
			/* continue; */ $s = 1; continue;
			/* delta: */ case 114:
			if (opcode >= 115 && !h.scaledCVTInitialized) {
				h.initializeScaledCVT();
			}
			top = top - (1) >> 0;
			n = (x$281 = h.stack, ((top < 0 || top >= x$281.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$281.$array[x$281.$offset + top]));
			if (((top >> 0)) < ($imul(2, n))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
			while (true) {
				if (!(n > 0)) { break; }
				top = top - (2) >> 0;
				b = (x$282 = h.stack, ((top < 0 || top >= x$282.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$282.$array[x$282.$offset + top]));
				c$1 = ((b & 240)) >> 4 >> 0;
				_5 = opcode;
				if ((_5 === (113)) || (_5 === (116))) {
					c$1 = c$1 + (16) >> 0;
				} else if ((_5 === (114)) || (_5 === (117))) {
					c$1 = c$1 + (32) >> 0;
				}
				c$1 = c$1 + (h.gs.deltaBase) >> 0;
				ppem = ((((h.scale >> 0)) + 32 >> 0)) >> 6 >> 0;
				if (!((ppem === c$1))) {
					n = n - (1) >> 0;
					continue;
				}
				b = ((b & 15)) - 8 >> 0;
				if (b >= 0) {
					b = b + (1) >> 0;
				}
				b = (_q$6 = ($imul(b, 64)) / (((y = ((h.gs.deltaShift >>> 0)), y < 32 ? (1 << y) : 0) >> 0)), (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (opcode >= 115) {
					a = (x$283 = h.stack, x$284 = top + 1 >> 0, ((x$284 < 0 || x$284 >= x$283.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$283.$array[x$283.$offset + x$284]));
					if (a < 0 || h.scaledCVT.$length <= ((a >> 0))) {
						$s = -1; return errors.New("truetype: hinting: index out of range");
					}
					(x$286 = h.scaledCVT, ((a < 0 || a >= x$286.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$286.$array[x$286.$offset + a] = ((x$285 = h.scaledCVT, ((a < 0 || a >= x$285.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$285.$array[x$285.$offset + a])) + (((b >> 0))) >> 0)));
				} else {
					p$18 = h.point(0, 0, (x$287 = h.stack, x$288 = top + 1 >> 0, ((x$288 < 0 || x$288 >= x$287.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$287.$array[x$287.$offset + x$288])));
					if (p$18 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					h.move(p$18, ((b >> 0)), true);
				}
				n = n - (1) >> 0;
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; }
	};
	hinter.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) { return this.$val.run(program, pCurrent, pUnhinted, pInFontUnits, ends); };
	hinter.ptr.prototype.initializeScaledCVT = function() {
		var $ptr, _i, _q, _q$1, _ref, h, i, n, unscaled, x, x$1, x$2, x$3, x$4;
		h = this;
		h.scaledCVTInitialized = true;
		n = (_q = h.font.cvt.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (n <= h.scaledCVT.$capacity) {
			h.scaledCVT = $subslice(h.scaledCVT, 0, n);
		} else {
			if (n < 32) {
				n = 32;
			}
			h.scaledCVT = $makeSlice(sliceType$5, (_q$1 = h.font.cvt.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), n);
		}
		_ref = h.scaledCVT;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			unscaled = (((((x = h.font.cvt, x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$2 = h.font.cvt, x$3 = ($imul(2, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << 16 >>> 16))) >>> 0;
			(x$4 = h.scaledCVT, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i] = h.font.scale($imul(h.scale, ((((unscaled << 16 >> 16)) >> 0))))));
			_i++;
		}
	};
	hinter.prototype.initializeScaledCVT = function() { return this.$val.initializeScaledCVT(); };
	hinter.ptr.prototype.getScaledCVT = function(i) {
		var $ptr, h, i, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return 0;
		}
		return (x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	hinter.prototype.getScaledCVT = function(i) { return this.$val.getScaledCVT(i); };
	hinter.ptr.prototype.setScaledCVT = function(i, v) {
		var $ptr, h, i, v, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return;
		}
		(x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = v));
	};
	hinter.prototype.setScaledCVT = function(i, v) { return this.$val.setScaledCVT(i, v); };
	hinter.ptr.prototype.point = function(zonePointer, pt, i) {
		var $ptr, h, i, points, pt, x, x$1, x$2, x$3, zonePointer;
		h = this;
		points = (x = (x$1 = h.points, x$2 = (x$3 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[zonePointer])), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), ((pt < 0 || pt >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[pt]));
		if (i < 0 || points.$length <= ((i >> 0))) {
			return ptrType$3.nil;
		}
		return ((i < 0 || i >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i]);
	};
	hinter.prototype.point = function(zonePointer, pt, i) { return this.$val.point(zonePointer, pt, i); };
	hinter.ptr.prototype.move = function(p, distance, touch) {
		var $ptr, distance, fvDotPv, fvx, fvy, h, p, pvx, pvy, touch, x, x$1, x$2, x$3;
		h = this;
		fvx = (new $Int64(0, h.gs.fv[0]));
		pvx = (new $Int64(0, h.gs.pv[0]));
		if ((fvx.$high === 0 && fvx.$low === 16384) && (pvx.$high === 0 && pvx.$low === 16384)) {
			p.X = p.X + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
			return;
		}
		fvy = (new $Int64(0, h.gs.fv[1]));
		pvy = (new $Int64(0, h.gs.pv[1]));
		if ((fvy.$high === 0 && fvy.$low === 16384) && (pvy.$high === 0 && pvy.$low === 16384)) {
			p.Y = p.Y + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
			return;
		}
		fvDotPv = $shiftRightInt64(((x = $mul64(fvx, pvx), x$1 = $mul64(fvy, pvy), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low))), 14);
		if (!((fvx.$high === 0 && fvx.$low === 0))) {
			p.X = p.X + ((((x$2 = mulDiv(fvx, (new $Int64(0, distance)), fvDotPv), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
		}
		if (!((fvy.$high === 0 && fvy.$low === 0))) {
			p.Y = p.Y + ((((x$3 = mulDiv(fvy, (new $Int64(0, distance)), fvDotPv), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
		}
	};
	hinter.prototype.move = function(p, distance, touch) { return this.$val.move(p, distance, touch); };
	hinter.ptr.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, delta1, delta2, h, i, i$1, ifu1, ifu2, ifuXY, interpY, numer, p1, p2, ref1, ref2, scale, scaleOK, unh1, unh2, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xy;
		h = this;
		if (p1 > p2) {
			return;
		}
		if (ref1 >= h.points[1][0].$length || ref2 >= h.points[1][0].$length) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		ifu1 = _tmp;
		ifu2 = _tmp$1;
		if (interpY) {
			ifu1 = (x = h.points[1][2], ((ref1 < 0 || ref1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ref1])).Y;
			ifu2 = (x$1 = h.points[1][2], ((ref2 < 0 || ref2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ref2])).Y;
		} else {
			ifu1 = (x$2 = h.points[1][2], ((ref1 < 0 || ref1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ref1])).X;
			ifu2 = (x$3 = h.points[1][2], ((ref2 < 0 || ref2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ref2])).X;
		}
		if (ifu1 > ifu2) {
			_tmp$2 = ifu2;
			_tmp$3 = ifu1;
			ifu1 = _tmp$2;
			ifu2 = _tmp$3;
			_tmp$4 = ref2;
			_tmp$5 = ref1;
			ref1 = _tmp$4;
			ref2 = _tmp$5;
		}
		_tmp$6 = 0;
		_tmp$7 = 0;
		_tmp$8 = 0;
		_tmp$9 = 0;
		unh1 = _tmp$6;
		unh2 = _tmp$7;
		delta1 = _tmp$8;
		delta2 = _tmp$9;
		if (interpY) {
			unh1 = (x$4 = h.points[1][1], ((ref1 < 0 || ref1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + ref1])).Y;
			unh2 = (x$5 = h.points[1][1], ((ref2 < 0 || ref2 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + ref2])).Y;
			delta1 = (x$6 = h.points[1][0], ((ref1 < 0 || ref1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ref1])).Y - unh1 >> 0;
			delta2 = (x$7 = h.points[1][0], ((ref2 < 0 || ref2 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ref2])).Y - unh2 >> 0;
		} else {
			unh1 = (x$8 = h.points[1][1], ((ref1 < 0 || ref1 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + ref1])).X;
			unh2 = (x$9 = h.points[1][1], ((ref2 < 0 || ref2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + ref2])).X;
			delta1 = (x$10 = h.points[1][0], ((ref1 < 0 || ref1 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ref1])).X - unh1 >> 0;
			delta2 = (x$11 = h.points[1][0], ((ref2 < 0 || ref2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ref2])).X - unh2 >> 0;
		}
		_tmp$10 = 0;
		_tmp$11 = 0;
		xy = _tmp$10;
		ifuXY = _tmp$11;
		if (ifu1 === ifu2) {
			i = p1;
			while (true) {
				if (!(i <= p2)) { break; }
				if (interpY) {
					xy = (x$12 = h.points[1][1], ((i < 0 || i >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i])).Y;
				} else {
					xy = (x$13 = h.points[1][1], ((i < 0 || i >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + i])).X;
				}
				if (xy <= unh1) {
					xy = xy + (delta1) >> 0;
				} else {
					xy = xy + (delta2) >> 0;
				}
				if (interpY) {
					(x$14 = h.points[1][0], ((i < 0 || i >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + i])).Y = xy;
				} else {
					(x$15 = h.points[1][0], ((i < 0 || i >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i])).X = xy;
				}
				i = i + (1) >> 0;
			}
			return;
		}
		_tmp$12 = new $Int64(0, 0);
		_tmp$13 = false;
		scale = _tmp$12;
		scaleOK = _tmp$13;
		i$1 = p1;
		while (true) {
			if (!(i$1 <= p2)) { break; }
			if (interpY) {
				xy = (x$16 = h.points[1][1], ((i$1 < 0 || i$1 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$1])).Y;
				ifuXY = (x$17 = h.points[1][2], ((i$1 < 0 || i$1 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + i$1])).Y;
			} else {
				xy = (x$18 = h.points[1][1], ((i$1 < 0 || i$1 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$1])).X;
				ifuXY = (x$19 = h.points[1][2], ((i$1 < 0 || i$1 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + i$1])).X;
			}
			if (xy <= unh1) {
				xy = xy + (delta1) >> 0;
			} else if (xy >= unh2) {
				xy = xy + (delta2) >> 0;
			} else {
				if (!scaleOK) {
					scaleOK = true;
					scale = mulDiv((new $Int64(0, (((unh2 + delta2 >> 0) - unh1 >> 0) - delta1 >> 0))), new $Int64(0, 65536), (new $Int64(0, (ifu2 - ifu1 >> 0))));
				}
				numer = $mul64((new $Int64(0, (ifuXY - ifu1 >> 0))), scale);
				if ((numer.$high > 0 || (numer.$high === 0 && numer.$low >= 0))) {
					numer = (x$20 = new $Int64(0, 32768), new $Int64(numer.$high + x$20.$high, numer.$low + x$20.$low));
				} else {
					numer = (x$21 = new $Int64(0, 32768), new $Int64(numer.$high - x$21.$high, numer.$low - x$21.$low));
				}
				xy = (unh1 + delta1 >> 0) + (((x$22 = $div64(numer, new $Int64(0, 65536), false), x$22.$low + ((x$22.$high >> 31) * 4294967296)) >> 0)) >> 0;
			}
			if (interpY) {
				(x$23 = h.points[1][0], ((i$1 < 0 || i$1 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + i$1])).Y = xy;
			} else {
				(x$24 = h.points[1][0], ((i$1 < 0 || i$1 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + i$1])).X = xy;
			}
			i$1 = i$1 + (1) >> 0;
		}
	};
	hinter.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) { return this.$val.iupInterp(interpY, p1, p2, ref1, ref2); };
	hinter.ptr.prototype.iupShift = function(interpY, p1, p2, p) {
		var $ptr, delta, h, i, interpY, p, p1, p2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		h = this;
		delta = 0;
		if (interpY) {
			delta = (x = h.points[1][0], ((p < 0 || p >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + p])).Y - (x$1 = h.points[1][1], ((p < 0 || p >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + p])).Y >> 0;
		} else {
			delta = (x$2 = h.points[1][0], ((p < 0 || p >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + p])).X - (x$3 = h.points[1][1], ((p < 0 || p >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + p])).X >> 0;
		}
		if (delta === 0) {
			return;
		}
		i = p1;
		while (true) {
			if (!(i < p2)) { break; }
			if (i === p) {
				i = i + (1) >> 0;
				continue;
			}
			if (interpY) {
				(x$5 = h.points[1][0], ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])).Y = (x$4 = h.points[1][0], ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).Y + (delta) >> 0;
			} else {
				(x$7 = h.points[1][0], ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])).X = (x$6 = h.points[1][0], ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])).X + (delta) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	hinter.prototype.iupShift = function(interpY, p1, p2, p) { return this.$val.iupShift(interpY, p1, p2, p); };
	hinter.ptr.prototype.displacement = function(useZP1) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, h, i, ok, p, q, useZP1, zonePointer;
		zonePointer = 0;
		i = 0;
		d = 0;
		ok = false;
		h = this;
		_tmp = 0;
		_tmp$1 = h.gs.rp[1];
		zonePointer = _tmp;
		i = _tmp$1;
		if (useZP1) {
			_tmp$2 = 1;
			_tmp$3 = h.gs.rp[2];
			zonePointer = _tmp$2;
			i = _tmp$3;
		}
		p = h.point(zonePointer, 0, i);
		q = h.point(zonePointer, 1, i);
		if (p === ptrType$3.nil || q === ptrType$3.nil) {
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			_tmp$7 = false;
			zonePointer = _tmp$4;
			i = _tmp$5;
			d = _tmp$6;
			ok = _tmp$7;
			return [zonePointer, i, d, ok];
		}
		d = dotProduct(p.X - q.X >> 0, p.Y - q.Y >> 0, $clone(h.gs.pv, arrayType));
		_tmp$8 = zonePointer;
		_tmp$9 = i;
		_tmp$10 = d;
		_tmp$11 = true;
		zonePointer = _tmp$8;
		i = _tmp$9;
		d = _tmp$10;
		ok = _tmp$11;
		return [zonePointer, i, d, ok];
	};
	hinter.prototype.displacement = function(useZP1) { return this.$val.displacement(useZP1); };
	skipInstructionPayload = function(program, pc) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, newPC, ok, pc, program;
		newPC = 0;
		ok = false;
		_1 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
		if (_1 === (64)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp = 0;
				_tmp$1 = false;
				newPC = _tmp;
				ok = _tmp$1;
				return [newPC, ok];
			}
			pc = pc + (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))) >> 0;
		} else if (_1 === (65)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp$2 = 0;
				_tmp$3 = false;
				newPC = _tmp$2;
				ok = _tmp$3;
				return [newPC, ok];
			}
			pc = pc + (($imul(2, ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))))) >> 0;
		} else if ((_1 === (176)) || (_1 === (177)) || (_1 === (178)) || (_1 === (179)) || (_1 === (180)) || (_1 === (181)) || (_1 === (182)) || (_1 === (183))) {
			pc = pc + ((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 175 << 24 >>> 24) >> 0))) >> 0;
		} else if ((_1 === (184)) || (_1 === (185)) || (_1 === (186)) || (_1 === (187)) || (_1 === (188)) || (_1 === (189)) || (_1 === (190)) || (_1 === (191))) {
			pc = pc + (($imul(2, (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 183 << 24 >>> 24) >> 0))))) >> 0;
		}
		_tmp$4 = pc;
		_tmp$5 = true;
		newPC = _tmp$4;
		ok = _tmp$5;
		return [newPC, ok];
	};
	normalize = function(x, y) {
		var $ptr, _tmp, _tmp$1, fx, fy, l, x, y;
		_tmp = (x);
		_tmp$1 = (y);
		fx = _tmp;
		fy = _tmp$1;
		l = 16384 / math.Hypot(fx, fy);
		fx = fx * (l);
		if (fx >= 0) {
			fx = fx + (0.5);
		} else {
			fx = fx - (0.5);
		}
		fy = fy * (l);
		if (fy >= 0) {
			fy = fy + (0.5);
		} else {
			fy = fy - (0.5);
		}
		return $toNativeArray($kindInt16, [((fx >> 0)), ((fy >> 0))]);
	};
	fabs = function(x) {
		var $ptr, x;
		if (x < 0) {
			return -x;
		}
		return x;
	};
	fdiv = function(x, y) {
		var $ptr, x, x$1, y;
		return (((x$1 = $div64(($shiftLeft64((new $Int64(0, x)), 6)), (new $Int64(0, y)), false), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	fmul = function(x, y) {
		var $ptr, x, x$1, x$2, y;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	dotProduct = function(x, y, q) {
		var $ptr, hi, hi1, hi2, l, lo, lo1, lo2, m, q, s, x, y;
		l = ((($imul(((((x >> 0)) & 65535)), ((q[0] >> 0)))) >>> 0));
		m = $imul(((((x >> 0)) >> 16 >> 0)), ((q[0] >> 0)));
		lo1 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi1 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo1 < l) >> 0;
		l = ((($imul(((((y >> 0)) & 65535)), ((q[1] >> 0)))) >>> 0));
		m = $imul(((((y >> 0)) >> 16 >> 0)), ((q[1] >> 0)));
		lo2 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi2 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo2 < l) >> 0;
		lo = lo1 + lo2 >>> 0;
		hi = (hi1 + hi2 >> 0) + bool2int32(lo < lo1) >> 0;
		s = hi >> 31 >> 0;
		l = lo + ((s >>> 0)) >>> 0;
		hi = hi + ((s + bool2int32(l < lo) >> 0)) >> 0;
		lo = l;
		l = lo + 8192 >>> 0;
		hi = hi + (bool2int32(l < lo)) >> 0;
		return ((((((((hi >>> 0)) << 18 >>> 0)) | ((l >>> 14 >>> 0))) >>> 0) >> 0));
	};
	mulDiv = function(x, y, z) {
		var $ptr, _tmp, _tmp$1, x, x$1, x$2, xy, y, z;
		xy = $mul64(x, y);
		if ((z.$high < 0 || (z.$high === 0 && z.$low < 0))) {
			_tmp = new $Int64(-xy.$high, -xy.$low);
			_tmp$1 = new $Int64(-z.$high, -z.$low);
			xy = _tmp;
			z = _tmp$1;
		}
		if ((xy.$high > 0 || (xy.$high === 0 && xy.$low >= 0))) {
			xy = (x$1 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high + x$1.$high, xy.$low + x$1.$low));
		} else {
			xy = (x$2 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high - x$2.$high, xy.$low - x$2.$low));
		}
		return $div64(xy, z, false);
	};
	hinter.ptr.prototype.round = function(x) {
		var $ptr, _q, _q$1, h, ret, ret$1, x;
		h = this;
		if (h.gs.roundPeriod === 0) {
			return x;
		}
		if (x >= 0) {
			ret = (x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
			if (h.gs.roundSuper45) {
				ret = (_q = ret / (h.gs.roundPeriod), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				ret = $imul(ret, (h.gs.roundPeriod));
			} else {
				ret = ret & (-h.gs.roundPeriod);
			}
			if (!((x === 0)) && ret < 0) {
				ret = 0;
			}
			return ret + h.gs.roundPhase >> 0;
		}
		ret$1 = (-x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
		if (h.gs.roundSuper45) {
			ret$1 = (_q$1 = ret$1 / (h.gs.roundPeriod), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			ret$1 = $imul(ret$1, (h.gs.roundPeriod));
		} else {
			ret$1 = ret$1 & (-h.gs.roundPeriod);
		}
		if (ret$1 < 0) {
			ret$1 = 0;
		}
		return -ret$1 - h.gs.roundPhase >> 0;
	};
	hinter.prototype.round = function(x) { return this.$val.round(x); };
	bool2int32 = function(b) {
		var $ptr, b;
		if (b) {
			return 1;
		}
		return 0;
	};
	FormatError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "freetype: invalid TrueType format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "freetype: unsupported TrueType feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	u32 = function(b, i) {
		var $ptr, b, i, x, x$1, x$2;
		return ((((((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >>> 0)) << 24 >>> 0) | ((((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = i + 3 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$2])) >>> 0))) >>> 0;
	};
	u16 = function(b, i) {
		var $ptr, b, i, x;
		return ((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) << 16 >>> 16))) >>> 0;
	};
	readTable = function(ttf, offsetLength) {
		var $ptr, _r, _r$1, _r$2, end, length, offset, offsetLength, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; end = $f.end; length = $f.length; offset = $f.offset; offsetLength = $f.offsetLength; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = ((u32(offsetLength, 0) >> 0));
		/* */ if (offset < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset < 0) { */ case 1:
			_r = fmt.Sprintf("offset too large: %d", new sliceType$7([new $Uint32(((offset >>> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r))];
		/* } */ case 2:
		length = ((u32(offsetLength, 4) >> 0));
		/* */ if (length < 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (length < 0) { */ case 4:
			_r$1 = fmt.Sprintf("length too large: %d", new sliceType$7([new $Uint32(((length >>> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$1))];
		/* } */ case 5:
		end = offset + length >> 0;
		/* */ if (end < 0 || end > ttf.$length) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (end < 0 || end > ttf.$length) { */ case 7:
			_r$2 = fmt.Sprintf("offset + length too large: %d", new sliceType$7([new $Uint32((((offset >>> 0)) + ((length >>> 0)) >>> 0))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$2))];
		/* } */ case 8:
		$s = -1; return [$subslice(ttf, offset, end), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readTable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.end = end; $f.length = length; $f.offset = offset; $f.offsetLength = offsetLength; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseSubtables = function(table, name, offset, size, pred) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _v, bestOffset, bestPID, i, nSubtables, name, offset, ok, pidPsid, pred, retErr, size, table, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _v = $f._v; bestOffset = $f.bestOffset; bestPID = $f.bestPID; i = $f.i; nSubtables = $f.nSubtables; name = $f.name; offset = $f.offset; ok = $f.ok; pidPsid = $f.pidPsid; pred = $f.pred; retErr = $f.retErr; size = $f.size; table = $f.table; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bestOffset = 0;
		bestPID = 0;
		retErr = $ifaceNil;
		if (table.$length < 4) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = new FormatError((name + " too short"));
			bestOffset = _tmp;
			bestPID = _tmp$1;
			retErr = _tmp$2;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		nSubtables = ((u16(table, 2) >> 0));
		if (table.$length < (($imul(size, nSubtables)) + offset >> 0)) {
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = new FormatError((name + " too short"));
			bestOffset = _tmp$3;
			bestPID = _tmp$4;
			retErr = _tmp$5;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		ok = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < nSubtables)) { break; } */ if(!(i < nSubtables)) { $s = 2; continue; }
			if (!(!(pred === $throwNilPointerError))) { _v = false; $s = 5; continue s; }
			_r = pred($subslice(table, offset)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_tmp$6 = i + 1 >> 0;
				_tmp$7 = offset + size >> 0;
				i = _tmp$6;
				offset = _tmp$7;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			pidPsid = u32(table, offset);
			if ((pidPsid === 3) || (pidPsid === 4)) {
				_tmp$8 = offset;
				_tmp$9 = pidPsid >>> 16 >>> 0;
				_tmp$10 = true;
				bestOffset = _tmp$8;
				bestPID = _tmp$9;
				ok = _tmp$10;
				/* break; */ $s = 2; continue;
			} else if ((pidPsid === 196608) || (pidPsid === 196609) || (pidPsid === 196618)) {
				_tmp$11 = offset;
				_tmp$12 = pidPsid >>> 16 >>> 0;
				_tmp$13 = true;
				bestOffset = _tmp$11;
				bestPID = _tmp$12;
				ok = _tmp$13;
			}
			_tmp$14 = i + 1 >> 0;
			_tmp$15 = offset + size >> 0;
			i = _tmp$14;
			offset = _tmp$15;
		/* } */ $s = 1; continue; case 2:
		if (!ok) {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = new UnsupportedError((name + " encoding"));
			bestOffset = _tmp$16;
			bestPID = _tmp$17;
			retErr = _tmp$18;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		_tmp$19 = bestOffset;
		_tmp$20 = bestPID;
		_tmp$21 = $ifaceNil;
		bestOffset = _tmp$19;
		bestPID = _tmp$20;
		retErr = _tmp$21;
		$s = -1; return [bestOffset, bestPID, retErr];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseSubtables }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._v = _v; $f.bestOffset = bestOffset; $f.bestPID = bestPID; $f.i = i; $f.nSubtables = nSubtables; $f.name = name; $f.offset = offset; $f.ok = ok; $f.pidPsid = pidPsid; $f.pred = pred; $f.retErr = retErr; $f.size = size; $f.table = table; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.ptr.prototype.parseCmap = function() {
		var $ptr, _1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, cmapFormat, err, f, i, i$1, i$2, i$3, i$4, language, language$1, length, nGroups, offset, segCount, segCountX2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; cmapFormat = $f.cmapFormat; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; language = $f.language; language$1 = $f.language$1; length = $f.length; nGroups = $f.nGroups; offset = $f.offset; segCount = $f.segCount; segCountX2 = $f.segCountX2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = parseSubtables(f.cmap, "cmap", 4, 8, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		offset = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		offset = ((u32(f.cmap, offset + 4 >> 0) >> 0));
		if (offset <= 0 || offset > f.cmap.$length) {
			$s = -1; return new FormatError("bad cmap offset");
		}
		cmapFormat = u16(f.cmap, offset);
			_1 = cmapFormat;
			/* */ if (_1 === (4)) { $s = 3; continue; }
			/* */ if (_1 === (12)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (4)) { */ case 3:
				language = u16(f.cmap, offset + 4 >> 0);
				/* */ if (!((language === 0))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!((language === 0))) { */ case 6:
					_r$1 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint16(language)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$1));
				/* } */ case 7:
				segCountX2 = ((u16(f.cmap, offset + 6 >> 0) >> 0));
				/* */ if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { */ case 9:
					_r$3 = fmt.Sprintf("bad segCountX2: %d", new sliceType$7([new $Int(segCountX2)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$3));
				/* } */ case 10:
				segCount = (_q = segCountX2 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				offset = offset + (14) >> 0;
				f.cm = $makeSlice(sliceType$8, segCount);
				i = 0;
				while (true) {
					if (!(i < segCount)) { break; }
					(x = f.cm, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).end = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i = i + (1) >> 0;
				}
				offset = offset + (2) >> 0;
				i$1 = 0;
				while (true) {
					if (!(i$1 < segCount)) { break; }
					(x$1 = f.cm, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).start = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
				i$2 = 0;
				while (true) {
					if (!(i$2 < segCount)) { break; }
					(x$2 = f.cm, ((i$2 < 0 || i$2 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$2])).delta = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = 0;
				while (true) {
					if (!(i$3 < segCount)) { break; }
					(x$3 = f.cm, ((i$3 < 0 || i$3 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$3])).offset = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$3 = i$3 + (1) >> 0;
				}
				f.cmapIndexes = $subslice(f.cmap, offset);
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (12)) { */ case 4:
				/* */ if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { */ case 12:
					_r$4 = fmt.Sprintf("cmap format: % x", new sliceType$7([$subslice(f.cmap, offset, (offset + 4 >> 0))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$4));
				/* } */ case 13:
				length = u32(f.cmap, offset + 4 >> 0);
				language$1 = u32(f.cmap, offset + 8 >> 0);
				/* */ if (!((language$1 === 0))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!((language$1 === 0))) { */ case 15:
					_r$5 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint32(language$1)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$5));
				/* } */ case 16:
				nGroups = u32(f.cmap, offset + 12 >> 0);
				if (!((length === (($imul(12, nGroups) >>> 0) + 16 >>> 0)))) {
					$s = -1; return new FormatError("inconsistent cmap length");
				}
				offset = offset + (16) >> 0;
				f.cm = $makeSlice(sliceType$8, nGroups);
				i$4 = 0;
				while (true) {
					if (!(i$4 < nGroups)) { break; }
					(x$4 = f.cm, ((i$4 < 0 || i$4 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$4])).start = u32(f.cmap, offset + 0 >> 0);
					(x$5 = f.cm, ((i$4 < 0 || i$4 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$4])).end = u32(f.cmap, offset + 4 >> 0);
					(x$7 = f.cm, ((i$4 < 0 || i$4 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$4])).delta = u32(f.cmap, offset + 8 >> 0) - (x$6 = f.cm, ((i$4 < 0 || i$4 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$4])).start >>> 0;
					offset = offset + (12) >> 0;
					i$4 = i$4 + (1) >>> 0;
				}
				$s = -1; return $ifaceNil;
			/* } */ case 5:
		case 2:
		_r$6 = fmt.Sprintf("cmap format: %d", new sliceType$7([new $Uint16(cmapFormat)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return new UnsupportedError((_r$6));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseCmap }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.cmapFormat = cmapFormat; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.language = language; $f.language$1 = language$1; $f.length = length; $f.nGroups = nGroups; $f.offset = offset; $f.segCount = segCount; $f.segCountX2 = segCountX2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseCmap = function() { return this.$val.parseCmap(); };
	Font.ptr.prototype.parseHead = function() {
		var $ptr, _1, _r, _r$1, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.head.$length === 54))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.head.$length === 54))) { */ case 1:
			_r = fmt.Sprintf("bad head length: %d", new sliceType$7([new $Int(f.head.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.fUnitsPerEm = ((u16(f.head, 18) >> 0));
		f.bounds.Min.X = ((((u16(f.head, 36) << 16 >> 16)) >> 0));
		f.bounds.Min.Y = ((((u16(f.head, 38) << 16 >> 16)) >> 0));
		f.bounds.Max.X = ((((u16(f.head, 40) << 16 >> 16)) >> 0));
		f.bounds.Max.Y = ((((u16(f.head, 42) << 16 >> 16)) >> 0));
			i = u16(f.head, 50);
			_1 = i;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 5:
				f.locaOffsetFormat = 1;
				$s = 8; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.locaOffsetFormat = 2;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = fmt.Sprintf("bad indexToLocFormat: %d", new sliceType$7([new $Uint16(i)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new FormatError((_r$1));
			/* } */ case 8:
		case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHead }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHead = function() { return this.$val.parseHead(); };
	Font.ptr.prototype.parseHhea = function() {
		var $ptr, _r, _r$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.hhea.$length === 36))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.hhea.$length === 36))) { */ case 1:
			_r = fmt.Sprintf("bad hhea length: %d", new sliceType$7([new $Int(f.hhea.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.ascent = ((((u16(f.hhea, 4) << 16 >> 16)) >> 0));
		f.descent = ((((u16(f.hhea, 6) << 16 >> 16)) >> 0));
		f.nHMetric = ((u16(f.hhea, 34) >> 0));
		/* */ if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { */ case 4:
			_r$1 = fmt.Sprintf("bad hmtx length: %d", new sliceType$7([new $Int(f.hmtx.$length)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$1));
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHhea }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHhea = function() { return this.$val.parseHhea(); };
	Font.ptr.prototype.parseKern = function() {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, coverage, f, length, n, offset, version, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; coverage = $f.coverage; f = $f.f; length = $f.length; n = $f.n; offset = $f.offset; version = $f.version; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.kern.$length === 0) {
			if (!((f.nKern === 0))) {
				$s = -1; return new FormatError("bad kern table length");
			}
			$s = -1; return $ifaceNil;
		}
		if (f.kern.$length < 18) {
			$s = -1; return new FormatError("kern data too short");
		}
		_tmp = u16(f.kern, 0);
		_tmp$1 = 2;
		version = _tmp;
		offset = _tmp$1;
		/* */ if (!((version === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((version === 0))) { */ case 1:
			_r = fmt.Sprintf("kern version: %d", new sliceType$7([new $Uint16(version)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r));
		/* } */ case 2:
		_tmp$2 = u16(f.kern, offset);
		_tmp$3 = offset + 2 >> 0;
		n = _tmp$2;
		offset = _tmp$3;
		if (n === 0) {
			$s = -1; return new UnsupportedError("kern nTables: 0");
		}
		offset = offset + (2) >> 0;
		_tmp$4 = ((u16(f.kern, offset) >> 0));
		_tmp$5 = offset + 2 >> 0;
		length = _tmp$4;
		offset = _tmp$5;
		_tmp$6 = u16(f.kern, offset);
		_tmp$7 = offset + 2 >> 0;
		coverage = _tmp$6;
		offset = _tmp$7;
		/* */ if (!((coverage === 1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((coverage === 1))) { */ case 4:
			_r$1 = fmt.Sprintf("kern coverage: 0x%04x", new sliceType$7([new $Uint16(coverage)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$1));
		/* } */ case 5:
		_tmp$8 = ((u16(f.kern, offset) >> 0));
		_tmp$9 = offset + 2 >> 0;
		f.nKern = _tmp$8;
		offset = _tmp$9;
		if (!((($imul(6, f.nKern)) === (length - 14 >> 0)))) {
			$s = -1; return new FormatError("bad kern table length");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseKern }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.coverage = coverage; $f.f = f; $f.length = length; $f.n = n; $f.offset = offset; $f.version = version; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseKern = function() { return this.$val.parseKern(); };
	Font.ptr.prototype.parseMaxp = function() {
		var $ptr, _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.maxp.$length === 32))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.maxp.$length === 32))) { */ case 1:
			_r = fmt.Sprintf("bad maxp length: %d", new sliceType$7([new $Int(f.maxp.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.nGlyph = ((u16(f.maxp, 4) >> 0));
		f.maxTwilightPoints = u16(f.maxp, 16);
		f.maxStorage = u16(f.maxp, 18);
		f.maxFunctionDefs = u16(f.maxp, 20);
		f.maxStackElements = u16(f.maxp, 24);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseMaxp }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseMaxp = function() { return this.$val.parseMaxp(); };
	Font.ptr.prototype.scale = function(x) {
		var $ptr, _q, _q$1, _q$2, f, x;
		f = this;
		if (x >= 0) {
			x = x + ((_q = ((f.fUnitsPerEm >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		} else {
			x = x - ((_q$1 = ((f.fUnitsPerEm >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		}
		return (_q$2 = x / ((f.fUnitsPerEm >> 0)), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Font.prototype.scale = function(x) { return this.$val.scale(x); };
	Font.ptr.prototype.Bounds = function(scale) {
		var $ptr, b, f, scale;
		f = this;
		b = $clone(f.bounds, fixed.Rectangle26_6);
		b.Min.X = f.scale($imul(scale, b.Min.X));
		b.Min.Y = f.scale($imul(scale, b.Min.Y));
		b.Max.X = f.scale($imul(scale, b.Max.X));
		b.Max.Y = f.scale($imul(scale, b.Max.Y));
		return b;
	};
	Font.prototype.Bounds = function(scale) { return this.$val.Bounds(scale); };
	Font.ptr.prototype.FUnitsPerEm = function() {
		var $ptr, f;
		f = this;
		return f.fUnitsPerEm;
	};
	Font.prototype.FUnitsPerEm = function() { return this.$val.FUnitsPerEm(); };
	Font.ptr.prototype.Index = function(x) {
		var $ptr, _q, _tmp, _tmp$1, c, cm$1, f, h, i, j, offset, x, x$1;
		f = this;
		c = ((x >>> 0));
		_tmp = 0;
		_tmp$1 = f.cm.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cm$1 = (x$1 = f.cm, ((h < 0 || h >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + h]));
			if (c < cm$1.start) {
				j = h;
			} else if (cm$1.end < c) {
				i = h + 1 >> 0;
			} else if (cm$1.offset === 0) {
				return (((c + cm$1.delta >>> 0) << 16 >>> 16));
			} else {
				offset = ((cm$1.offset >> 0)) + ($imul(2, (((h - f.cm.$length >> 0) + (((c - cm$1.start >>> 0) >> 0)) >> 0)))) >> 0;
				return ((u16(f.cmapIndexes, offset) << 16 >>> 16));
			}
		}
		return 0;
	};
	Font.prototype.Index = function(x) { return this.$val.Index(x); };
	Font.ptr.prototype.Name = function(id) {
		var $ptr, _i, _i$1, _q, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, c, dst, err, f, i, i$1, id, length, offset, platformID, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; dst = $f.dst; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; id = $f.id; length = $f.length; offset = $f.offset; platformID = $f.platformID; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = [id];
		f = this;
		_r = parseSubtables(f.name, "name", 6, 12, (function(id) { return function(b) {
			var $ptr, b;
			return ((u16(b, 6) << 16 >>> 16)) === id[0];
		}; })(id)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		platformID = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return "";
		}
		_tmp = u16(f.name, 4) + u16(f.name, x + 10 >> 0) << 16 >>> 16;
		_tmp$1 = u16(f.name, x + 8 >> 0);
		offset = _tmp;
		length = _tmp$1;
		src = $subslice(f.name, offset, (offset + length << 16 >>> 16));
		dst = sliceType$6.nil;
		if (!((platformID === 1))) {
			if (!(((src.$length & 1) === 0))) {
				$s = -1; return "";
			}
			dst = $makeSlice(sliceType$6, (_q = src.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = dst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = printable(u16(src, $imul(2, i))));
				_i++;
			}
		} else {
			dst = $makeSlice(sliceType$6, src.$length);
			_ref$1 = src;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				((i$1 < 0 || i$1 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i$1] = printable(((c << 16 >>> 16))));
				_i$1++;
			}
		}
		$s = -1; return ($bytesToString(dst));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Name }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.dst = dst; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.id = id; $f.length = length; $f.offset = offset; $f.platformID = platformID; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Name = function(id) { return this.$val.Name(id); };
	printable = function(r) {
		var $ptr, r;
		if (32 <= r && r < 127) {
			return ((r << 24 >>> 24));
		}
		return 63;
	};
	Font.ptr.prototype.unscaledHMetric = function(i) {
		var $ptr, f, h, i, j, p;
		h = new HMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			HMetric.copy(h, new HMetric.ptr(0, 0));
			return h;
		}
		if (j >= f.nHMetric) {
			p = $imul(4, ((f.nHMetric - 1 >> 0)));
			HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, p) >> 0)), ((((u16(f.hmtx, (p + ($imul(2, ((j - f.nHMetric >> 0)))) >> 0) + 4 >> 0) << 16 >> 16)) >> 0))));
			return h;
		}
		HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, $imul(4, j)) >> 0)), ((((u16(f.hmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
		return h;
	};
	Font.prototype.unscaledHMetric = function(i) { return this.$val.unscaledHMetric(i); };
	Font.ptr.prototype.HMetric = function(scale, i) {
		var $ptr, f, h, i, scale;
		f = this;
		h = $clone(f.unscaledHMetric(i), HMetric);
		h.AdvanceWidth = f.scale($imul(scale, h.AdvanceWidth));
		h.LeftSideBearing = f.scale($imul(scale, h.LeftSideBearing));
		return h;
	};
	Font.prototype.HMetric = function(scale, i) { return this.$val.HMetric(scale, i); };
	Font.ptr.prototype.unscaledVMetric = function(i, yMax) {
		var $ptr, f, i, j, sTypoAscender, sTypoDescender, v, yMax;
		v = new VMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			VMetric.copy(v, new VMetric.ptr(0, 0));
			return v;
		}
		if ((($imul(4, j)) + 4 >> 0) <= f.vmtx.$length) {
			VMetric.copy(v, new VMetric.ptr(((u16(f.vmtx, $imul(4, j)) >> 0)), ((((u16(f.vmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
			return v;
		}
		if (f.os2.$length >= 72) {
			sTypoAscender = ((((u16(f.os2, 68) << 16 >> 16)) >> 0));
			sTypoDescender = ((((u16(f.os2, 70) << 16 >> 16)) >> 0));
			VMetric.copy(v, new VMetric.ptr(sTypoAscender - sTypoDescender >> 0, sTypoAscender - yMax >> 0));
			return v;
		}
		VMetric.copy(v, new VMetric.ptr(((f.fUnitsPerEm >> 0)), 0));
		return v;
	};
	Font.prototype.unscaledVMetric = function(i, yMax) { return this.$val.unscaledVMetric(i, yMax); };
	Font.ptr.prototype.VMetric = function(scale, i) {
		var $ptr, f, i, scale, v;
		f = this;
		v = $clone(f.unscaledVMetric(i, 0), VMetric);
		v.AdvanceHeight = f.scale($imul(scale, v.AdvanceHeight));
		v.TopSideBearing = f.scale($imul(scale, v.TopSideBearing));
		return v;
	};
	Font.prototype.VMetric = function(scale, i) { return this.$val.VMetric(scale, i); };
	Font.ptr.prototype.Kern = function(scale, i0, i1) {
		var $ptr, _q, _tmp, _tmp$1, f, g, hi, i, i0, i1, ig, lo, scale;
		f = this;
		if (f.nKern === 0) {
			return 0;
		}
		g = ((((i0 >>> 0)) << 16 >>> 0) | ((i1 >>> 0))) >>> 0;
		_tmp = 0;
		_tmp$1 = f.nKern;
		lo = _tmp;
		hi = _tmp$1;
		while (true) {
			if (!(lo < hi)) { break; }
			i = (_q = ((lo + hi >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			ig = u32(f.kern, 18 + ($imul(6, i)) >> 0);
			if (ig < g) {
				lo = i + 1 >> 0;
			} else if (ig > g) {
				hi = i;
			} else {
				return f.scale($imul(scale, ((((u16(f.kern, 22 + ($imul(6, i)) >> 0) << 16 >> 16)) >> 0))));
			}
		}
		return 0;
	};
	Font.prototype.Kern = function(scale, i0, i1) { return this.$val.Kern(scale, i0, i1); };
	Parse = function(ttf) {
		var $ptr, _r, _tuple, err, font$1, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; font$1 = $f.font$1; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		_r = parse(ttf, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		font$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.font$1 = font$1; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(ttf, offset) {
		var $ptr, _1, _2, _q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, err, f, font$1, i, magic, n, numFonts, offset, offset$1, originalOffset, ttcVersion, ttf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; err = $f.err; f = $f.f; font$1 = $f.font$1; i = $f.i; magic = $f.magic; n = $f.n; numFonts = $f.numFonts; offset = $f.offset; offset$1 = $f.offset$1; originalOffset = $f.originalOffset; ttcVersion = $f.ttcVersion; ttf = $f.ttf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		if ((ttf.$length - offset >> 0) < 12) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		originalOffset = offset;
		_tmp = u32(ttf, offset);
		_tmp$1 = offset + 4 >> 0;
		magic = _tmp;
		offset = _tmp$1;
			_1 = magic;
			/* */ if (_1 === (65536)) { $s = 2; continue; }
			/* */ if (_1 === (1953784678)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (65536)) { */ case 2:
				$s = 5; continue;
			/* } else if (_1 === (1953784678)) { */ case 3:
				if (!((originalOffset === 0))) {
					err = new FormatError("recursive TTC");
					$s = -1; return [font$1, err];
				}
				_tmp$2 = u32(ttf, offset);
				_tmp$3 = offset + 4 >> 0;
				ttcVersion = _tmp$2;
				offset$1 = _tmp$3;
				if (!((ttcVersion === 65536)) && !((ttcVersion === 131072))) {
					err = new FormatError("bad TTC version");
					$s = -1; return [font$1, err];
				}
				_tmp$4 = ((u32(ttf, offset$1) >> 0));
				_tmp$5 = offset$1 + 4 >> 0;
				numFonts = _tmp$4;
				offset$1 = _tmp$5;
				if (numFonts <= 0) {
					err = new FormatError("bad number of TTC fonts");
					$s = -1; return [font$1, err];
				}
				if ((_q = $subslice(ttf, offset$1).$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) < numFonts) {
					err = new FormatError("TTC offset table is too short");
					$s = -1; return [font$1, err];
				}
				offset$1 = ((u32(ttf, offset$1) >> 0));
				if (offset$1 <= 0 || offset$1 > ttf.$length) {
					err = new FormatError("bad TTC offset");
					$s = -1; return [font$1, err];
				}
				_r = parse(ttf, offset$1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				font$1 = _tuple[0];
				err = _tuple[1];
				$s = -1; return [font$1, err];
			/* } else { */ case 4:
				err = new FormatError("bad TTF version");
				$s = -1; return [font$1, err];
			/* } */ case 5:
		case 1:
		_tmp$6 = ((u16(ttf, offset) >> 0));
		_tmp$7 = offset + 2 >> 0;
		n = _tmp$6;
		offset = _tmp$7;
		offset = offset + (6) >> 0;
		if (ttf.$length < (($imul(16, n)) + offset >> 0)) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		f = new Font.ptr(sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$8.nil, 0, 0, 0, 0, 0, 0, 0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), 0, 0, 0, 0);
		i = 0;
		/* while (true) { */ case 7:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 8; continue; }
			x = ($imul(16, i)) + offset >> 0;
				_2 = ($bytesToString($subslice(ttf, x, (x + 4 >> 0))));
				/* */ if (_2 === ("cmap")) { $s = 10; continue; }
				/* */ if (_2 === ("cvt ")) { $s = 11; continue; }
				/* */ if (_2 === ("fpgm")) { $s = 12; continue; }
				/* */ if (_2 === ("glyf")) { $s = 13; continue; }
				/* */ if (_2 === ("hdmx")) { $s = 14; continue; }
				/* */ if (_2 === ("head")) { $s = 15; continue; }
				/* */ if (_2 === ("hhea")) { $s = 16; continue; }
				/* */ if (_2 === ("hmtx")) { $s = 17; continue; }
				/* */ if (_2 === ("kern")) { $s = 18; continue; }
				/* */ if (_2 === ("loca")) { $s = 19; continue; }
				/* */ if (_2 === ("maxp")) { $s = 20; continue; }
				/* */ if (_2 === ("name")) { $s = 21; continue; }
				/* */ if (_2 === ("OS/2")) { $s = 22; continue; }
				/* */ if (_2 === ("prep")) { $s = 23; continue; }
				/* */ if (_2 === ("vmtx")) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_2 === ("cmap")) { */ case 10:
					_r$1 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					f.cmap = _tuple$1[0];
					err = _tuple$1[1];
					$s = 25; continue;
				/* } else if (_2 === ("cvt ")) { */ case 11:
					_r$2 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 27; case 27: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					f.cvt = _tuple$2[0];
					err = _tuple$2[1];
					$s = 25; continue;
				/* } else if (_2 === ("fpgm")) { */ case 12:
					_r$3 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					f.fpgm = _tuple$3[0];
					err = _tuple$3[1];
					$s = 25; continue;
				/* } else if (_2 === ("glyf")) { */ case 13:
					_r$4 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$4 = _r$4;
					f.glyf = _tuple$4[0];
					err = _tuple$4[1];
					$s = 25; continue;
				/* } else if (_2 === ("hdmx")) { */ case 14:
					_r$5 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$5 = _r$5;
					f.hdmx = _tuple$5[0];
					err = _tuple$5[1];
					$s = 25; continue;
				/* } else if (_2 === ("head")) { */ case 15:
					_r$6 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$6 = _r$6;
					f.head = _tuple$6[0];
					err = _tuple$6[1];
					$s = 25; continue;
				/* } else if (_2 === ("hhea")) { */ case 16:
					_r$7 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$7 = _r$7;
					f.hhea = _tuple$7[0];
					err = _tuple$7[1];
					$s = 25; continue;
				/* } else if (_2 === ("hmtx")) { */ case 17:
					_r$8 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$8 = _r$8;
					f.hmtx = _tuple$8[0];
					err = _tuple$8[1];
					$s = 25; continue;
				/* } else if (_2 === ("kern")) { */ case 18:
					_r$9 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$9 = _r$9;
					f.kern = _tuple$9[0];
					err = _tuple$9[1];
					$s = 25; continue;
				/* } else if (_2 === ("loca")) { */ case 19:
					_r$10 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 35; case 35: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$10 = _r$10;
					f.loca = _tuple$10[0];
					err = _tuple$10[1];
					$s = 25; continue;
				/* } else if (_2 === ("maxp")) { */ case 20:
					_r$11 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 36; case 36: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$11 = _r$11;
					f.maxp = _tuple$11[0];
					err = _tuple$11[1];
					$s = 25; continue;
				/* } else if (_2 === ("name")) { */ case 21:
					_r$12 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$12 = _r$12;
					f.name = _tuple$12[0];
					err = _tuple$12[1];
					$s = 25; continue;
				/* } else if (_2 === ("OS/2")) { */ case 22:
					_r$13 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 38; case 38: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$13 = _r$13;
					f.os2 = _tuple$13[0];
					err = _tuple$13[1];
					$s = 25; continue;
				/* } else if (_2 === ("prep")) { */ case 23:
					_r$14 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$14 = _r$14;
					f.prep = _tuple$14[0];
					err = _tuple$14[1];
					$s = 25; continue;
				/* } else if (_2 === ("vmtx")) { */ case 24:
					_r$15 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_tuple$15 = _r$15;
					f.vmtx = _tuple$15[0];
					err = _tuple$15[1];
				/* } */ case 25:
			case 9:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [font$1, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		_r$16 = f.parseHead(); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		err = _r$16;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$17 = f.parseMaxp(); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		err = _r$17;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$18 = f.parseCmap(); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		err = _r$18;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$19 = f.parseKern(); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		err = _r$19;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$20 = f.parseHhea(); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		err = _r$20;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		font$1 = f;
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.err = err; $f.f = f; $f.font$1 = font$1; $f.i = i; $f.magic = magic; $f.n = n; $f.numFonts = numFonts; $f.offset = offset; $f.offset$1 = offset$1; $f.originalOffset = originalOffset; $f.ttcVersion = ttcVersion; $f.ttf = ttf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType.methods = [{prop: "size", name: "size", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "dpi", name: "dpi", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "hinting", name: "hinting", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [font.Hinting], false)}, {prop: "glyphCacheEntries", name: "glyphCacheEntries", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Int], false)}, {prop: "subPixelsX", name: "subPixelsX", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}, {prop: "subPixelsY", name: "subPixelsY", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}];
	ptrType$4.methods = [{prop: "index", name: "index", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [Index], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [font.Metrics], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "rasterize", name: "rasterize", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6, fixed.Int26_6], [glyphCacheVal, $Bool], false)}, {prop: "drawContour", name: "drawContour", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$3, fixed.Int26_6, fixed.Int26_6], [], false)}];
	facePainter.methods = [{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$9, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([ptrType$1, fixed.Int26_6, Index, font.Hinting], [$error], false)}, {prop: "load", name: "load", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, Index, $Bool], [$error], false)}, {prop: "loadSimple", name: "loadSimple", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, $Int], [sliceType$6], false)}, {prop: "loadCompound", name: "loadCompound", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, HMetric, Index, sliceType$6, $Bool], [$error], false)}, {prop: "addPhantomsAndScale", name: "addPhantomsAndScale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int, $Int, $Bool, $Bool], [], false)}];
	ptrType$6.methods = [{prop: "init", name: "init", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$1, fixed.Int26_6], [$error], false)}, {prop: "run", name: "run", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, sliceType$3, sliceType$3, sliceType$3, sliceType$2], [$error], false)}, {prop: "initializeScaledCVT", name: "initializeScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [], false)}, {prop: "getScaledCVT", name: "getScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [fixed.Int26_6], false)}, {prop: "setScaledCVT", name: "setScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32, fixed.Int26_6], [], false)}, {prop: "point", name: "point", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, pointType, $Int32], [ptrType$3], false)}, {prop: "move", name: "move", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$3, fixed.Int26_6, $Bool], [], false)}, {prop: "iupInterp", name: "iupInterp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int, $Int], [], false)}, {prop: "iupShift", name: "iupShift", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int], [], false)}, {prop: "displacement", name: "displacement", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool], [$Uint32, $Int32, fixed.Int26_6, $Bool], false)}, {prop: "round", name: "round", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "parseCmap", name: "parseCmap", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHead", name: "parseHead", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHhea", name: "parseHhea", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseKern", name: "parseKern", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseMaxp", name: "parseMaxp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "scale", name: "scale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([fixed.Int26_6], [fixed.Rectangle26_6], false)}, {prop: "FUnitsPerEm", name: "FUnitsPerEm", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int32], [Index], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([NameID], [$String], false)}, {prop: "unscaledHMetric", name: "unscaledHMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index], [HMetric], false)}, {prop: "HMetric", name: "HMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [HMetric], false)}, {prop: "unscaledVMetric", name: "unscaledVMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6], [VMetric], false)}, {prop: "VMetric", name: "VMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [VMetric], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([fixed.Int26_6, Index, Index], [fixed.Int26_6], false)}];
	Options.init("", [{prop: "Size", name: "Size", exported: true, typ: $Float64, tag: ""}, {prop: "DPI", name: "DPI", exported: true, typ: $Float64, tag: ""}, {prop: "Hinting", name: "Hinting", exported: true, typ: font.Hinting, tag: ""}, {prop: "GlyphCacheEntries", name: "GlyphCacheEntries", exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsX", name: "SubPixelsX", exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsY", name: "SubPixelsY", exported: true, typ: $Int, tag: ""}]);
	glyphCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "key", name: "key", exported: false, typ: glyphCacheKey, tag: ""}, {prop: "val", name: "val", exported: false, typ: glyphCacheVal, tag: ""}]);
	glyphCacheKey.init("github.com/golang/freetype/truetype", [{prop: "index", name: "index", exported: false, typ: Index, tag: ""}, {prop: "fx", name: "fx", exported: false, typ: $Uint8, tag: ""}, {prop: "fy", name: "fy", exported: false, typ: $Uint8, tag: ""}]);
	glyphCacheVal.init("github.com/golang/freetype/truetype", [{prop: "advanceWidth", name: "advanceWidth", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: image.Point, tag: ""}, {prop: "gw", name: "gw", exported: false, typ: $Int, tag: ""}, {prop: "gh", name: "gh", exported: false, typ: $Int, tag: ""}]);
	indexCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "rune", name: "rune", exported: false, typ: $Int32, tag: ""}, {prop: "index", name: "index", exported: false, typ: Index, tag: ""}]);
	face.init("github.com/golang/freetype/truetype", [{prop: "f", name: "f", exported: false, typ: ptrType$1, tag: ""}, {prop: "hinting", name: "hinting", exported: false, typ: font.Hinting, tag: ""}, {prop: "scale", name: "scale", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelX", name: "subPixelX", exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasX", name: "subPixelBiasX", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskX", name: "subPixelMaskX", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelY", name: "subPixelY", exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasY", name: "subPixelBiasY", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskY", name: "subPixelMaskY", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "masks", name: "masks", exported: false, typ: ptrType$2, tag: ""}, {prop: "glyphCache", name: "glyphCache", exported: false, typ: sliceType, tag: ""}, {prop: "r", name: "r", exported: false, typ: raster.Rasterizer, tag: ""}, {prop: "p", name: "p", exported: false, typ: raster.Painter, tag: ""}, {prop: "paintOffset", name: "paintOffset", exported: false, typ: $Int, tag: ""}, {prop: "maxw", name: "maxw", exported: false, typ: $Int, tag: ""}, {prop: "maxh", name: "maxh", exported: false, typ: $Int, tag: ""}, {prop: "glyphBuf", name: "glyphBuf", exported: false, typ: GlyphBuf, tag: ""}, {prop: "indexCache", name: "indexCache", exported: false, typ: arrayType$8, tag: ""}]);
	facePainter.init("github.com/golang/freetype/truetype", [{prop: "a", name: "a", exported: false, typ: ptrType$4, tag: ""}]);
	Point.init("", [{prop: "X", name: "X", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Y", name: "Y", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Flags", name: "Flags", exported: true, typ: $Uint32, tag: ""}]);
	GlyphBuf.init("github.com/golang/freetype/truetype", [{prop: "AdvanceWidth", name: "AdvanceWidth", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Bounds", name: "Bounds", exported: true, typ: fixed.Rectangle26_6, tag: ""}, {prop: "Points", name: "Points", exported: true, typ: sliceType$3, tag: ""}, {prop: "Unhinted", name: "Unhinted", exported: true, typ: sliceType$3, tag: ""}, {prop: "InFontUnits", name: "InFontUnits", exported: true, typ: sliceType$3, tag: ""}, {prop: "Ends", name: "Ends", exported: true, typ: sliceType$2, tag: ""}, {prop: "font", name: "font", exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "hinting", name: "hinting", exported: false, typ: font.Hinting, tag: ""}, {prop: "hinter", name: "hinter", exported: false, typ: hinter, tag: ""}, {prop: "phantomPoints", name: "phantomPoints", exported: false, typ: arrayType$7, tag: ""}, {prop: "pp1x", name: "pp1x", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "metricsSet", name: "metricsSet", exported: false, typ: $Bool, tag: ""}, {prop: "tmp", name: "tmp", exported: false, typ: sliceType$3, tag: ""}]);
	callStackEntry.init("github.com/golang/freetype/truetype", [{prop: "program", name: "program", exported: false, typ: sliceType$6, tag: ""}, {prop: "pc", name: "pc", exported: false, typ: $Int, tag: ""}, {prop: "loopCount", name: "loopCount", exported: false, typ: $Int32, tag: ""}]);
	hinter.init("github.com/golang/freetype/truetype", [{prop: "stack", name: "stack", exported: false, typ: sliceType$4, tag: ""}, {prop: "store", name: "store", exported: false, typ: sliceType$4, tag: ""}, {prop: "functions", name: "functions", exported: false, typ: mapType, tag: ""}, {prop: "font", name: "font", exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "gs", name: "gs", exported: false, typ: graphicsState, tag: ""}, {prop: "defaultGS", name: "defaultGS", exported: false, typ: graphicsState, tag: ""}, {prop: "points", name: "points", exported: false, typ: arrayType$6, tag: ""}, {prop: "ends", name: "ends", exported: false, typ: sliceType$2, tag: ""}, {prop: "scaledCVTInitialized", name: "scaledCVTInitialized", exported: false, typ: $Bool, tag: ""}, {prop: "scaledCVT", name: "scaledCVT", exported: false, typ: sliceType$5, tag: ""}]);
	graphicsState.init("github.com/golang/freetype/truetype", [{prop: "pv", name: "pv", exported: false, typ: arrayType, tag: ""}, {prop: "fv", name: "fv", exported: false, typ: arrayType, tag: ""}, {prop: "dv", name: "dv", exported: false, typ: arrayType, tag: ""}, {prop: "rp", name: "rp", exported: false, typ: arrayType$1, tag: ""}, {prop: "zp", name: "zp", exported: false, typ: arrayType$1, tag: ""}, {prop: "controlValueCutIn", name: "controlValueCutIn", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidthCutIn", name: "singleWidthCutIn", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidth", name: "singleWidth", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "deltaBase", name: "deltaBase", exported: false, typ: $Int32, tag: ""}, {prop: "deltaShift", name: "deltaShift", exported: false, typ: $Int32, tag: ""}, {prop: "minDist", name: "minDist", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "loop", name: "loop", exported: false, typ: $Int32, tag: ""}, {prop: "roundPeriod", name: "roundPeriod", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundPhase", name: "roundPhase", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundThreshold", name: "roundThreshold", exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundSuper45", name: "roundSuper45", exported: false, typ: $Bool, tag: ""}, {prop: "autoFlip", name: "autoFlip", exported: false, typ: $Bool, tag: ""}]);
	HMetric.init("", [{prop: "AdvanceWidth", name: "AdvanceWidth", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "LeftSideBearing", name: "LeftSideBearing", exported: true, typ: fixed.Int26_6, tag: ""}]);
	VMetric.init("", [{prop: "AdvanceHeight", name: "AdvanceHeight", exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "TopSideBearing", name: "TopSideBearing", exported: true, typ: fixed.Int26_6, tag: ""}]);
	cm.init("github.com/golang/freetype/truetype", [{prop: "start", name: "start", exported: false, typ: $Uint32, tag: ""}, {prop: "end", name: "end", exported: false, typ: $Uint32, tag: ""}, {prop: "delta", name: "delta", exported: false, typ: $Uint32, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Uint32, tag: ""}]);
	Font.init("github.com/golang/freetype/truetype", [{prop: "cmap", name: "cmap", exported: false, typ: sliceType$6, tag: ""}, {prop: "cvt", name: "cvt", exported: false, typ: sliceType$6, tag: ""}, {prop: "fpgm", name: "fpgm", exported: false, typ: sliceType$6, tag: ""}, {prop: "glyf", name: "glyf", exported: false, typ: sliceType$6, tag: ""}, {prop: "hdmx", name: "hdmx", exported: false, typ: sliceType$6, tag: ""}, {prop: "head", name: "head", exported: false, typ: sliceType$6, tag: ""}, {prop: "hhea", name: "hhea", exported: false, typ: sliceType$6, tag: ""}, {prop: "hmtx", name: "hmtx", exported: false, typ: sliceType$6, tag: ""}, {prop: "kern", name: "kern", exported: false, typ: sliceType$6, tag: ""}, {prop: "loca", name: "loca", exported: false, typ: sliceType$6, tag: ""}, {prop: "maxp", name: "maxp", exported: false, typ: sliceType$6, tag: ""}, {prop: "name", name: "name", exported: false, typ: sliceType$6, tag: ""}, {prop: "os2", name: "os2", exported: false, typ: sliceType$6, tag: ""}, {prop: "prep", name: "prep", exported: false, typ: sliceType$6, tag: ""}, {prop: "vmtx", name: "vmtx", exported: false, typ: sliceType$6, tag: ""}, {prop: "cmapIndexes", name: "cmapIndexes", exported: false, typ: sliceType$6, tag: ""}, {prop: "cm", name: "cm", exported: false, typ: sliceType$8, tag: ""}, {prop: "locaOffsetFormat", name: "locaOffsetFormat", exported: false, typ: $Int, tag: ""}, {prop: "nGlyph", name: "nGlyph", exported: false, typ: $Int, tag: ""}, {prop: "nHMetric", name: "nHMetric", exported: false, typ: $Int, tag: ""}, {prop: "nKern", name: "nKern", exported: false, typ: $Int, tag: ""}, {prop: "fUnitsPerEm", name: "fUnitsPerEm", exported: false, typ: $Int32, tag: ""}, {prop: "ascent", name: "ascent", exported: false, typ: $Int32, tag: ""}, {prop: "descent", name: "descent", exported: false, typ: $Int32, tag: ""}, {prop: "bounds", name: "bounds", exported: false, typ: fixed.Rectangle26_6, tag: ""}, {prop: "maxTwilightPoints", name: "maxTwilightPoints", exported: false, typ: $Uint16, tag: ""}, {prop: "maxStorage", name: "maxStorage", exported: false, typ: $Uint16, tag: ""}, {prop: "maxFunctionDefs", name: "maxFunctionDefs", exported: false, typ: $Uint16, tag: ""}, {prop: "maxStackElements", name: "maxStackElements", exported: false, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = raster.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		globalDefaultGS = new graphicsState.ptr($toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), arrayType$1.zero(), $toNativeArray($kindInt32, [1, 1, 1]), 68, 0, 0, 9, 3, 64, 1, 64, 0, 32, false, true);
		popCount = $toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 1, 1, 3, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/affine"] = (function() {
	var $pkg = {}, $init, fmt, color, math, ColorM, GeoM, sliceType, ptrType, ptrType$1, ptrType$2, sliceType$2, colorMIdentityBody, colorMIdentityTranslate, rgbToYCbCr, yCbCrToRgb, mulSquare, clamp;
	fmt = $packages["fmt"];
	color = $packages["image/color"];
	math = $packages["math"];
	ColorM = $pkg.ColorM = $newType(0, $kindStruct, "affine.ColorM", true, "github.com/hajimehoshi/ebiten/internal/affine", true, function(body_, translate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.body = sliceType.nil;
			this.translate = sliceType.nil;
			return;
		}
		this.body = body_;
		this.translate = translate_;
	});
	GeoM = $pkg.GeoM = $newType(0, $kindStruct, "affine.GeoM", true, "github.com/hajimehoshi/ebiten/internal/affine", true, function(a_1_, b_, c_, d_1_, tx_, ty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a_1 = 0;
			this.b = 0;
			this.c = 0;
			this.d_1 = 0;
			this.tx = 0;
			this.ty = 0;
			return;
		}
		this.a_1 = a_1_;
		this.b = b_;
		this.c = c_;
		this.d_1 = d_1_;
		this.tx = tx_;
		this.ty = ty_;
	});
	sliceType = $sliceType($Float32);
	ptrType = $ptrType(ColorM);
	ptrType$1 = $ptrType(sliceType);
	ptrType$2 = $ptrType(GeoM);
	sliceType$2 = $sliceType($emptyInterface);
	mulSquare = function(lhs, rhs, dim) {
		var $ptr, dim, e, i, j, k, lhs, result, rhs, x, x$1, x$2;
		result = $makeSlice(sliceType, lhs.$length);
		i = 0;
		while (true) {
			if (!(i < dim)) { break; }
			j = 0;
			while (true) {
				if (!(j < dim)) { break; }
				e = 0;
				k = 0;
				while (true) {
					if (!(k < dim)) { break; }
					e = $fround(e + ($fround((x = ($imul(i, dim)) + k >> 0, ((x < 0 || x >= lhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhs.$array[lhs.$offset + x])) * (x$1 = ($imul(k, dim)) + j >> 0, ((x$1 < 0 || x$1 >= rhs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhs.$array[rhs.$offset + x$1])))));
					k = k + (1) >> 0;
				}
				(x$2 = ($imul(i, dim)) + j >> 0, ((x$2 < 0 || x$2 >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + x$2] = e));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return result;
	};
	clamp = function(x) {
		var $ptr, x;
		if (x > 1) {
			return 1;
		}
		if (x < 0) {
			return 0;
		}
		return x;
	};
	ColorM.ptr.prototype.isInited = function() {
		var $ptr, c;
		c = this;
		return !(c === ptrType.nil) && !(c.body === sliceType.nil);
	};
	ColorM.prototype.isInited = function() { return this.$val.isInited(); };
	ColorM.ptr.prototype.Apply = function(clr) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, af, af2, b, bf, bf2, c, clr, eb, et, g, gf, gf2, r, rf, rf2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; af = $f.af; af2 = $f.af2; b = $f.b; bf = $f.bf; bf2 = $f.bf2; c = $f.c; clr = $f.clr; eb = $f.eb; et = $f.et; g = $f.g; gf = $f.gf; gf2 = $f.gf2; r = $f.r; rf = $f.rf; rf2 = $f.rf2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!c.isInited()) {
			$s = -1; return clr;
		}
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		rf = _tmp;
		gf = _tmp$1;
		bf = _tmp$2;
		af = _tmp$3;
		if (a > 0) {
			rf = $fround((r) / (a));
			gf = $fround((g) / (a));
			bf = $fround((b) / (a));
			af = $fround((a) / 65535);
		}
		eb = c.body;
		et = c.translate;
		rf2 = $fround($fround($fround($fround($fround((0 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 0]) * rf) + $fround((4 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 4]) * gf)) + $fround((8 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 8]) * bf)) + $fround((12 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 12]) * af)) + (0 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 0]));
		gf2 = $fround($fround($fround($fround($fround((1 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 1]) * rf) + $fround((5 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 5]) * gf)) + $fround((9 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 9]) * bf)) + $fround((13 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 13]) * af)) + (1 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 1]));
		bf2 = $fround($fround($fround($fround($fround((2 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 2]) * rf) + $fround((6 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 6]) * gf)) + $fround((10 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 10]) * bf)) + $fround((14 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 14]) * af)) + (2 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 2]));
		af2 = $fround($fround($fround($fround($fround((3 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 3]) * rf) + $fround((7 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 7]) * gf)) + $fround((11 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 11]) * bf)) + $fround((15 >= eb.$length ? ($throwRuntimeError("index out of range"), undefined) : eb.$array[eb.$offset + 15]) * af)) + (3 >= et.$length ? ($throwRuntimeError("index out of range"), undefined) : et.$array[et.$offset + 3]));
		rf2 = clamp(rf2);
		gf2 = clamp(gf2);
		bf2 = clamp(bf2);
		af2 = clamp(af2);
		$s = -1; return (x = new color.NRGBA64.ptr((($fround(rf2 * 65535) >> 0)), (($fround(gf2 * 65535) >> 0)), (($fround(bf2 * 65535) >> 0)), (($fround(af2 * 65535) >> 0))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorM.ptr.prototype.Apply }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.af = af; $f.af2 = af2; $f.b = b; $f.bf = bf; $f.bf2 = bf2; $f.c = c; $f.clr = clr; $f.eb = eb; $f.et = et; $f.g = g; $f.gf = gf; $f.gf2 = gf2; $f.r = r; $f.rf = rf; $f.rf2 = rf2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorM.prototype.Apply = function(clr) { return this.$val.Apply(clr); };
	ColorM.ptr.prototype.UnsafeElements = function() {
		var $ptr, c;
		c = this;
		if (!c.isInited()) {
			return [colorMIdentityBody, colorMIdentityTranslate];
		}
		return [c.body, c.translate];
	};
	ColorM.prototype.UnsafeElements = function() { return this.$val.UnsafeElements(); };
	ColorM.ptr.prototype.SetElement = function(i, j, element) {
		var $ptr, c, element, i, j, newC, x, x$1, x$2;
		c = this;
		newC = new ColorM.ptr($makeSlice(sliceType, 16), $makeSlice(sliceType, 4));
		if (!c.isInited()) {
			$copySlice(newC.body, colorMIdentityBody);
			$copySlice(newC.translate, colorMIdentityTranslate);
		} else {
			$copySlice(newC.body, c.body);
			$copySlice(newC.translate, c.translate);
		}
		if (j < 4) {
			(x = newC.body, x$1 = i + ($imul(j, 4)) >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = element));
		} else {
			(x$2 = newC.translate, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = element));
		}
		return newC;
	};
	ColorM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	ColorM.ptr.prototype.Equals = function(other) {
		var $ptr, _i, _i$1, _ref, _ref$1, c, i, i$1, lhsb, lhsb$24ptr, lhst, lhst$24ptr, other, rhsb, rhsb$24ptr, rhst, rhst$24ptr;
		c = this;
		if (!c.isInited() && !other.isInited()) {
			return true;
		}
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			lhsb = other.body;
			lhst = other.translate;
		}
		if (c.isInited()) {
			rhsb = c.body;
			rhst = c.translate;
		}
		if ((lhsb$24ptr || (lhsb$24ptr = new ptrType$1(function() { return lhsb; }, function($v) { lhsb = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) === (rhsb$24ptr || (rhsb$24ptr = new ptrType$1(function() { return rhsb; }, function($v) { rhsb = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) && (lhst$24ptr || (lhst$24ptr = new ptrType$1(function() { return lhst; }, function($v) { lhst = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); }))) === (rhst$24ptr || (rhst$24ptr = new ptrType$1(function() { return rhst; }, function($v) { rhst = $subslice(new sliceType($v.$array), $v.$offset, $v.$offset + $v.$length); })))) {
			return true;
		}
		_ref = lhsb;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (!((((i < 0 || i >= lhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + i]) === ((i < 0 || i >= rhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhsb.$array[rhsb.$offset + i])))) {
				return false;
			}
			_i++;
		}
		_ref$1 = lhst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			if (!((((i$1 < 0 || i$1 >= lhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + i$1]) === ((i$1 < 0 || i$1 >= rhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + i$1])))) {
				return false;
			}
			_i$1++;
		}
		return true;
	};
	ColorM.prototype.Equals = function(other) { return this.$val.Equals(other); };
	ColorM.ptr.prototype.Concat = function(other) {
		var $ptr, c, lhsb, lhst, other, rhsb, rhst;
		c = this;
		if (!c.isInited()) {
			return other;
		}
		if (!other.isInited()) {
			return c;
		}
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			lhsb = other.body;
			lhst = other.translate;
		}
		if (c.isInited()) {
			rhsb = c.body;
			rhst = c.translate;
		}
		return new ColorM.ptr(mulSquare(rhsb, lhsb, 4), new sliceType([$fround($fround($fround($fround($fround((0 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 0]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((4 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 4]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((8 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 8]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((12 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 12]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (0 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 0])), $fround($fround($fround($fround($fround((1 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 1]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((5 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 5]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((9 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 9]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((13 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 13]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (1 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 1])), $fround($fround($fround($fround($fround((2 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 2]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((6 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 6]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((10 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 10]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((14 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 14]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (2 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 2])), $fround($fround($fround($fround($fround((3 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 3]) * (0 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 0])) + $fround((7 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 7]) * (1 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 1]))) + $fround((11 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 11]) * (2 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 2]))) + $fround((15 >= lhsb.$length ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + 15]) * (3 >= rhst.$length ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + 3]))) + (3 >= lhst.$length ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + 3]))]));
	};
	ColorM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	ColorM.ptr.prototype.Add = function(other) {
		var $ptr, _i, _i$1, _ref, _ref$1, c, i, i$1, lhsb, lhst, newC, other, rhsb, rhst, x, x$1;
		c = this;
		lhsb = colorMIdentityBody;
		lhst = colorMIdentityTranslate;
		rhsb = colorMIdentityBody;
		rhst = colorMIdentityTranslate;
		if (other.isInited()) {
			lhsb = other.body;
			lhst = other.translate;
		}
		if (c.isInited()) {
			rhsb = c.body;
			rhst = c.translate;
		}
		newC = new ColorM.ptr($makeSlice(sliceType, 16), $makeSlice(sliceType, 4));
		_ref = lhsb;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = newC.body, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = $fround(((i < 0 || i >= lhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhsb.$array[lhsb.$offset + i]) + ((i < 0 || i >= rhsb.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhsb.$array[rhsb.$offset + i]))));
			_i++;
		}
		_ref$1 = lhst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = newC.translate, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1] = $fround(((i$1 < 0 || i$1 >= lhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : lhst.$array[lhst.$offset + i$1]) + ((i$1 < 0 || i$1 >= rhst.$length) ? ($throwRuntimeError("index out of range"), undefined) : rhst.$array[rhst.$offset + i$1]))));
			_i$1++;
		}
		return newC;
	};
	ColorM.prototype.Add = function(other) { return this.$val.Add(other); };
	ColorM.ptr.prototype.Scale = function(r, g, b, a) {
		var $ptr, _index, _index$1, _index$2, _index$3, a, b, c, es, g, i, r, x, x$1, x$2, x$3;
		c = this;
		if (!c.isInited()) {
			return new ColorM.ptr(new sliceType([r, 0, 0, 0, 0, g, 0, 0, 0, 0, b, 0, 0, 0, 0, a]), colorMIdentityTranslate);
		}
		es = $makeSlice(sliceType, c.body.$length);
		$copySlice(es, c.body);
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			_index = $imul(i, 4);
			((_index < 0 || _index >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index] = $fround(((_index < 0 || _index >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index]) * (r)));
			_index$1 = ($imul(i, 4)) + 1 >> 0;
			((_index$1 < 0 || _index$1 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$1] = $fround(((_index$1 < 0 || _index$1 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$1]) * (g)));
			_index$2 = ($imul(i, 4)) + 2 >> 0;
			((_index$2 < 0 || _index$2 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$2] = $fround(((_index$2 < 0 || _index$2 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$2]) * (b)));
			_index$3 = ($imul(i, 4)) + 3 >> 0;
			((_index$3 < 0 || _index$3 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$3] = $fround(((_index$3 < 0 || _index$3 >= es.$length) ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + _index$3]) * (a)));
			i = i + (1) >> 0;
		}
		return new ColorM.ptr(es, new sliceType([$fround((x = c.translate, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) * r), $fround((x$1 = c.translate, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) * g), $fround((x$2 = c.translate, (2 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 2])) * b), $fround((x$3 = c.translate, (3 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 3])) * a)]));
	};
	ColorM.prototype.Scale = function(r, g, b, a) { return this.$val.Scale(r, g, b, a); };
	ColorM.ptr.prototype.Translate = function(r, g, b, a) {
		var $ptr, a, b, c, es, g, r;
		c = this;
		if (!c.isInited()) {
			return new ColorM.ptr(colorMIdentityBody, new sliceType([r, g, b, a]));
		}
		es = $makeSlice(sliceType, c.translate.$length);
		$copySlice(es, c.translate);
		(0 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 0] = $fround((0 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 0]) + (r)));
		(1 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 1] = $fround((1 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 1]) + (g)));
		(2 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 2] = $fround((2 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 2]) + (b)));
		(3 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 3] = $fround((3 >= es.$length ? ($throwRuntimeError("index out of range"), undefined) : es.$array[es.$offset + 3]) + (a)));
		return new ColorM.ptr(c.body, es);
	};
	ColorM.prototype.Translate = function(r, g, b, a) { return this.$val.Translate(r, g, b, a); };
	ColorM.ptr.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) {
		var $ptr, _tmp, _tmp$1, _tuple, c, c32, cos, hueTheta, s, s32, saturationScale, sin, v, valueScale;
		c = this;
		_tuple = math.Sincos(hueTheta);
		sin = _tuple[0];
		cos = _tuple[1];
		_tmp = ($fround(sin));
		_tmp$1 = ($fround(cos));
		s32 = _tmp;
		c32 = _tmp$1;
		c = c.Concat(rgbToYCbCr);
		c = c.Concat(new ColorM.ptr(new sliceType([1, 0, 0, 0, 0, c32, s32, 0, 0, -s32, c32, 0, 0, 0, 0, 1]), new sliceType([0, 0, 0, 0])));
		s = saturationScale;
		v = valueScale;
		c = c.Scale(v, $fround(s * v), $fround(s * v), 1);
		c = c.Concat(yCbCrToRgb);
		return c;
	};
	ColorM.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) { return this.$val.ChangeHSV(hueTheta, saturationScale, valueScale); };
	GeoM.ptr.prototype.Apply = function(x, y) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, g, x, x2, y, y2;
		x2 = 0;
		y2 = 0;
		g = this;
		if (g === ptrType$2.nil) {
			_tmp = x;
			_tmp$1 = y;
			x2 = _tmp;
			y2 = _tmp$1;
			return [x2, y2];
		}
		_tmp$2 = (g.a_1 + 1) * x + g.b * y + g.tx;
		_tmp$3 = g.c * x + (g.d_1 + 1) * y + g.ty;
		x2 = _tmp$2;
		y2 = _tmp$3;
		return [x2, y2];
	};
	GeoM.prototype.Apply = function(x, y) { return this.$val.Apply(x, y); };
	GeoM.ptr.prototype.Apply32 = function(x, y) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, g, x, x2, y, y2;
		x2 = 0;
		y2 = 0;
		g = this;
		if (g === ptrType$2.nil) {
			_tmp = ($fround(x));
			_tmp$1 = ($fround(y));
			x2 = _tmp;
			y2 = _tmp$1;
			return [x2, y2];
		}
		_tmp$2 = ($fround((g.a_1 + 1) * x + g.b * y + g.tx));
		_tmp$3 = ($fround(g.c * x + (g.d_1 + 1) * y + g.ty));
		x2 = _tmp$2;
		y2 = _tmp$3;
		return [x2, y2];
	};
	GeoM.prototype.Apply32 = function(x, y) { return this.$val.Apply32(x, y); };
	GeoM.ptr.prototype.Elements = function() {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, g, tx, ty;
		a = 0;
		b = 0;
		c = 0;
		d = 0;
		tx = 0;
		ty = 0;
		g = this;
		if (g === ptrType$2.nil) {
			_tmp = 1;
			_tmp$1 = 0;
			_tmp$2 = 0;
			_tmp$3 = 1;
			_tmp$4 = 0;
			_tmp$5 = 0;
			a = _tmp;
			b = _tmp$1;
			c = _tmp$2;
			d = _tmp$3;
			tx = _tmp$4;
			ty = _tmp$5;
			return [a, b, c, d, tx, ty];
		}
		_tmp$6 = g.a_1 + 1;
		_tmp$7 = g.b;
		_tmp$8 = g.c;
		_tmp$9 = g.d_1 + 1;
		_tmp$10 = g.tx;
		_tmp$11 = g.ty;
		a = _tmp$6;
		b = _tmp$7;
		c = _tmp$8;
		d = _tmp$9;
		tx = _tmp$10;
		ty = _tmp$11;
		return [a, b, c, d, tx, ty];
	};
	GeoM.prototype.Elements = function() { return this.$val.Elements(); };
	GeoM.ptr.prototype.SetElement = function(i, j, element) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, element, g, i, j, tx, ty, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; a = $f.a; b = $f.b; c = $f.c; d = $f.d; element = $f.element; g = $f.g; i = $f.i; j = $f.j; tx = $f.tx; ty = $f.ty; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_tmp = 1;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 1;
		_tmp$4 = 0;
		_tmp$5 = 0;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		d = _tmp$3;
		tx = _tmp$4;
		ty = _tmp$5;
		if (!(g === ptrType$2.nil)) {
			_tmp$6 = g.a_1 + 1;
			_tmp$7 = g.b;
			_tmp$8 = g.c;
			_tmp$9 = g.d_1 + 1;
			_tmp$10 = g.tx;
			_tmp$11 = g.ty;
			a = _tmp$6;
			b = _tmp$7;
			c = _tmp$8;
			d = _tmp$9;
			tx = _tmp$10;
			ty = _tmp$11;
		}
			/* */ if ((i === 0) && (j === 0)) { $s = 2; continue; }
			/* */ if ((i === 0) && (j === 1)) { $s = 3; continue; }
			/* */ if ((i === 0) && (j === 2)) { $s = 4; continue; }
			/* */ if ((i === 1) && (j === 0)) { $s = 5; continue; }
			/* */ if ((i === 1) && (j === 1)) { $s = 6; continue; }
			/* */ if ((i === 1) && (j === 2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((i === 0) && (j === 0)) { */ case 2:
				a = element;
				$s = 9; continue;
			/* } else if ((i === 0) && (j === 1)) { */ case 3:
				b = element;
				$s = 9; continue;
			/* } else if ((i === 0) && (j === 2)) { */ case 4:
				tx = element;
				$s = 9; continue;
			/* } else if ((i === 1) && (j === 0)) { */ case 5:
				c = element;
				$s = 9; continue;
			/* } else if ((i === 1) && (j === 1)) { */ case 6:
				d = element;
				$s = 9; continue;
			/* } else if ((i === 1) && (j === 2)) { */ case 7:
				ty = element;
				$s = 9; continue;
			/* } else { */ case 8:
				_r = fmt.Sprintf("affine: i or j is out of index: (%d, %d)", new sliceType$2([new $Int(i), new $Int(j)])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(new $String(_r));
			/* } */ case 9:
		case 1:
		$s = -1; return new GeoM.ptr(a - 1, b, c, d - 1, tx, ty);
		/* */ } return; } if ($f === undefined) { $f = { $blk: GeoM.ptr.prototype.SetElement }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.a = a; $f.b = b; $f.c = c; $f.d = d; $f.element = element; $f.g = g; $f.i = i; $f.j = j; $f.tx = tx; $f.ty = ty; $f.$s = $s; $f.$r = $r; return $f;
	};
	GeoM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	GeoM.ptr.prototype.Concat = function(other) {
		var $ptr, g, other;
		g = this;
		if (g === ptrType$2.nil) {
			return other;
		}
		if (other === ptrType$2.nil) {
			return g;
		}
		return new GeoM.ptr((other.a_1 + 1) * (g.a_1 + 1) + other.b * g.c - 1, (other.a_1 + 1) * g.b + other.b * (g.d_1 + 1), other.c * (g.a_1 + 1) + (other.d_1 + 1) * g.c, other.c * g.b + (other.d_1 + 1) * (g.d_1 + 1) - 1, (other.a_1 + 1) * g.tx + other.b * g.ty + other.tx, other.c * g.tx + (other.d_1 + 1) * g.ty + other.ty);
	};
	GeoM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	GeoM.ptr.prototype.Add = function(other) {
		var $ptr, g, other;
		g = this;
		if (g === ptrType$2.nil) {
			g = new GeoM.ptr(0, 0, 0, 0, 0, 0);
		}
		if (other === ptrType$2.nil) {
			other = new GeoM.ptr(0, 0, 0, 0, 0, 0);
		}
		return new GeoM.ptr((g.a_1 + 1) + (other.a_1 + 1) - 1, g.b + other.b, g.c + other.c, (g.d_1 + 1) + (other.d_1 + 1) - 1, g.tx + other.tx, g.ty + other.ty);
	};
	GeoM.prototype.Add = function(other) { return this.$val.Add(other); };
	GeoM.ptr.prototype.Scale = function(x, y) {
		var $ptr, g, x, y;
		g = this;
		if (g === ptrType$2.nil) {
			return new GeoM.ptr(x - 1, 0, 0, y - 1, 0, 0);
		}
		return new GeoM.ptr((g.a_1 + 1) * x - 1, g.b * x, g.c * y, (g.d_1 + 1) * y - 1, g.tx * x, g.ty * y);
	};
	GeoM.prototype.Scale = function(x, y) { return this.$val.Scale(x, y); };
	GeoM.ptr.prototype.Translate = function(tx, ty) {
		var $ptr, g, tx, ty;
		g = this;
		if (g === ptrType$2.nil) {
			return new GeoM.ptr(0, 0, 0, 0, tx, ty);
		}
		return new GeoM.ptr(g.a_1, g.b, g.c, g.d_1, g.tx + tx, g.ty + ty);
	};
	GeoM.prototype.Translate = function(tx, ty) { return this.$val.Translate(tx, ty); };
	GeoM.ptr.prototype.Rotate = function(theta) {
		var $ptr, _tuple, cos, g, sin, theta;
		g = this;
		_tuple = math.Sincos(theta);
		sin = _tuple[0];
		cos = _tuple[1];
		if (g === ptrType$2.nil) {
			return new GeoM.ptr(cos - 1, -sin, sin, cos - 1, 0, 0);
		}
		return new GeoM.ptr(cos * (g.a_1 + 1) - sin * g.c - 1, cos * g.b - sin * (g.d_1 + 1), sin * (g.a_1 + 1) + cos * g.c, sin * g.b + cos * (g.d_1 + 1) - 1, cos * g.tx - sin * g.ty, sin * g.tx + cos * g.ty);
	};
	GeoM.prototype.Rotate = function(theta) { return this.$val.Rotate(theta); };
	ptrType.methods = [{prop: "isInited", name: "isInited", pkg: "github.com/hajimehoshi/ebiten/internal/affine", typ: $funcType([], [$Bool], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "UnsafeElements", name: "UnsafeElements", pkg: "", typ: $funcType([], [sliceType, sliceType], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float32], [ptrType], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([ptrType], [$Bool], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [ptrType], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [ptrType], false)}, {prop: "ChangeHSV", name: "ChangeHSV", pkg: "", typ: $funcType([$Float64, $Float32, $Float32], [ptrType], false)}];
	ptrType$2.methods = [{prop: "Apply", name: "Apply", pkg: "", typ: $funcType([$Float64, $Float64], [$Float64, $Float64], false)}, {prop: "Apply32", name: "Apply32", pkg: "", typ: $funcType([$Float64, $Float64], [$Float32, $Float32], false)}, {prop: "Elements", name: "Elements", pkg: "", typ: $funcType([], [$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float64], [ptrType$2], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64, $Float64], [ptrType$2], false)}, {prop: "Rotate", name: "Rotate", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}];
	ColorM.init("github.com/hajimehoshi/ebiten/internal/affine", [{prop: "body", name: "body", exported: false, typ: sliceType, tag: ""}, {prop: "translate", name: "translate", exported: false, typ: sliceType, tag: ""}]);
	GeoM.init("github.com/hajimehoshi/ebiten/internal/affine", [{prop: "a_1", name: "a_1", exported: false, typ: $Float64, tag: ""}, {prop: "b", name: "b", exported: false, typ: $Float64, tag: ""}, {prop: "c", name: "c", exported: false, typ: $Float64, tag: ""}, {prop: "d_1", name: "d_1", exported: false, typ: $Float64, tag: ""}, {prop: "tx", name: "tx", exported: false, typ: $Float64, tag: ""}, {prop: "ty", name: "ty", exported: false, typ: $Float64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		colorMIdentityBody = new sliceType([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
		colorMIdentityTranslate = new sliceType([0, 0, 0, 0]);
		rgbToYCbCr = new ColorM.ptr(new sliceType([0.29899999499320984, -0.16869999468326569, 0.5, 0, 0.5870000123977661, -0.3312999904155731, -0.4187000095844269, 0, 0.11400000005960464, 0.5, -0.08129999786615372, 0, 0, 0, 0, 1]), new sliceType([0, 0, 0, 0]));
		yCbCrToRgb = new ColorM.ptr(new sliceType([1, 1, 1, 0, 0, -0.3441399931907654, 1.7719999551773071, 0, 1.4019999504089355, -0.714139997959137, 0, 0, 0, 0, 0, 1]), new sliceType([0, 0, 0, 0]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/sync"] = (function() {
	var $pkg = {}, $init, nosync, Mutex, RWMutex;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "github.com/hajimehoshi/ebiten/internal/sync", true, function(Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new nosync.Mutex.ptr(false);
			return;
		}
		this.Mutex = Mutex_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "github.com/hajimehoshi/ebiten/internal/sync", true, function(RWMutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RWMutex = new nosync.RWMutex.ptr(false, 0);
			return;
		}
		this.RWMutex = RWMutex_;
	});
	Mutex.init("", [{prop: "Mutex", name: "", exported: true, typ: nosync.Mutex, tag: ""}]);
	RWMutex.init("", [{prop: "RWMutex", name: "", exported: true, typ: nosync.RWMutex, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/clock"] = (function() {
	var $pkg = {}, $init, js, sync, time, frames, audioTimeInFrames, lastAudioTimeInFrames, lastSystemTime, currentFPS, lastFPSUpdated, framesForFPS, ping, m, CurrentFPS, updateFPS, Update, now;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	time = $packages["time"];
	CurrentFPS = function() {
		var $ptr, v;
		m.Mutex.Lock();
		v = currentFPS;
		m.Mutex.Unlock();
		return v;
	};
	$pkg.CurrentFPS = CurrentFPS;
	updateFPS = function(now$1) {
		var $ptr, now$1, x, x$1, x$2;
		if ((lastFPSUpdated.$high === 0 && lastFPSUpdated.$low === 0)) {
			lastFPSUpdated = now$1;
		}
		framesForFPS = (x = new $Int64(0, 1), new $Int64(framesForFPS.$high + x.$high, framesForFPS.$low + x.$low));
		if ((x$1 = ((x$2 = new $Int64(now$1.$high - lastFPSUpdated.$high, now$1.$low - lastFPSUpdated.$low), new time.Duration(x$2.$high, x$2.$low))), (0 > x$1.$high || (0 === x$1.$high && 1000000000 > x$1.$low)))) {
			return;
		}
		currentFPS = ($flatten64(framesForFPS)) * 1e+09 / ($flatten64(new $Int64(now$1.$high - lastFPSUpdated.$high, now$1.$low - lastFPSUpdated.$low)));
		lastFPSUpdated = now$1;
		framesForFPS = new $Int64(0, 0);
	};
	Update = function() {
		var $ptr, count, diff, n, syncWithSystemClock, x, x$1, x$2, x$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; count = $f.count; diff = $f.diff; n = $f.n; syncWithSystemClock = $f.syncWithSystemClock; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		m.Mutex.Lock();
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		n = now();
		/* */ if (!(ping === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ping === $throwNilPointerError)) { */ case 1:
			$r = ping(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if ((lastSystemTime.$high === 0 && lastSystemTime.$low === 0)) {
			lastSystemTime = n;
		}
		diff = new $Int64(n.$high - lastSystemTime.$high, n.$low - lastSystemTime.$low);
		if ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {
			$s = -1; return 0;
		}
		count = 0;
		syncWithSystemClock = false;
		if ((audioTimeInFrames.$high > 0 || (audioTimeInFrames.$high === 0 && audioTimeInFrames.$low > 0)) && !((lastAudioTimeInFrames.$high === audioTimeInFrames.$high && lastAudioTimeInFrames.$low === audioTimeInFrames.$low))) {
			if ((frames.$high < audioTimeInFrames.$high || (frames.$high === audioTimeInFrames.$high && frames.$low < audioTimeInFrames.$low))) {
				count = (((x = new $Int64(audioTimeInFrames.$high - frames.$high, audioTimeInFrames.$low - frames.$low), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			}
			lastAudioTimeInFrames = audioTimeInFrames;
			syncWithSystemClock = true;
		} else {
			if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 83333333))) {
				syncWithSystemClock = true;
			} else {
				count = (((x$1 = $div64($mul64(diff, new $Int64(0, 60)), new $Int64(0, 1000000000), false), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
			}
		}
		if ((count === 0) && (0 < diff.$high || (0 === diff.$high && 8333333 < diff.$low))) {
			count = 1;
		}
		if ((count === 2) && (0 > diff.$high || (0 === diff.$high && 24999999 > diff.$low))) {
			count = 1;
		}
		frames = (x$2 = (new $Int64(0, count)), new $Int64(frames.$high + x$2.$high, frames.$low + x$2.$low));
		if (syncWithSystemClock) {
			lastSystemTime = n;
		} else {
			lastSystemTime = (x$3 = $div64($mul64((new $Int64(0, count)), new $Int64(0, 1000000000)), new $Int64(0, 60), false), new $Int64(lastSystemTime.$high + x$3.$high, lastSystemTime.$low + x$3.$low));
		}
		updateFPS(n);
		$s = -1; return count;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Update }; } $f.$ptr = $ptr; $f.count = count; $f.diff = diff; $f.n = n; $f.syncWithSystemClock = syncWithSystemClock; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Update = Update;
	now = function() {
		var $ptr;
		return (new $Int64(0, $parseFloat($global.performance.now()) * 1e+06));
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		frames = new $Int64(0, 0);
		audioTimeInFrames = new $Int64(0, 0);
		lastAudioTimeInFrames = new $Int64(0, 0);
		lastSystemTime = new $Int64(0, 0);
		currentFPS = 0;
		lastFPSUpdated = new $Int64(0, 0);
		framesForFPS = new $Int64(0, 0);
		ping = $throwNilPointerError;
		m = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/devicescale"] = (function() {
	var $pkg = {}, $init, js, sync, scale, m, DeviceScale, impl;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sync = $packages["sync"];
	DeviceScale = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = 0;
		$r = m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (scale === 0) {
			scale = impl();
		}
		s = scale;
		$r = m.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeviceScale }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DeviceScale = DeviceScale;
	impl = function() {
		var $ptr, ratio;
		ratio = $parseFloat($global.window.devicePixelRatio);
		if (ratio === 0) {
			ratio = 1;
		}
		return ratio;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		m = new sync.Mutex.ptr(0, 0);
		scale = 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/math"] = (function() {
	var $pkg = {}, $init, NextPowerOf2Int;
	NextPowerOf2Int = function(x) {
		var $ptr, r, x, y;
		if (x <= 0) {
			$panic(new $String("x must be positive"));
		}
		r = 1;
		while (true) {
			if (!(r < x)) { break; }
			r = (y = (1), y < 32 ? (r << y) : 0) >> 0;
		}
		return r;
	};
	$pkg.NextPowerOf2Int = NextPowerOf2Int;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/webgl"] = (function() {
	var $pkg = {}, $init, errors, js, ContextAttributes, Context, ptrType, ptrType$1, mapType, ptrType$2, sliceType, sliceType$1, sliceType$2, DefaultAttributes, NewContext;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	ContextAttributes = $pkg.ContextAttributes = $newType(0, $kindStruct, "webgl.ContextAttributes", true, "github.com/gopherjs/webgl", true, function(Alpha_, Depth_, Stencil_, Antialias_, PremultipliedAlpha_, PreserveDrawingBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Alpha = false;
			this.Depth = false;
			this.Stencil = false;
			this.Antialias = false;
			this.PremultipliedAlpha = false;
			this.PreserveDrawingBuffer = false;
			return;
		}
		this.Alpha = Alpha_;
		this.Depth = Depth_;
		this.Stencil = Stencil_;
		this.Antialias = Antialias_;
		this.PremultipliedAlpha = PremultipliedAlpha_;
		this.PreserveDrawingBuffer = PreserveDrawingBuffer_;
	});
	Context = $pkg.Context = $newType(0, $kindStruct, "webgl.Context", true, "github.com/gopherjs/webgl", true, function(Object_, ARRAY_BUFFER_, ARRAY_BUFFER_BINDING_, ATTACHED_SHADERS_, BACK_, BLEND_, BLEND_COLOR_, BLEND_DST_ALPHA_, BLEND_DST_RGB_, BLEND_EQUATION_, BLEND_EQUATION_ALPHA_, BLEND_EQUATION_RGB_, BLEND_SRC_ALPHA_, BLEND_SRC_RGB_, BLUE_BITS_, BOOL_, BOOL_VEC2_, BOOL_VEC3_, BOOL_VEC4_, BROWSER_DEFAULT_WEBGL_, BUFFER_SIZE_, BUFFER_USAGE_, BYTE_, CCW_, CLAMP_TO_EDGE_, COLOR_ATTACHMENT0_, COLOR_BUFFER_BIT_, COLOR_CLEAR_VALUE_, COLOR_WRITEMASK_, COMPILE_STATUS_, COMPRESSED_TEXTURE_FORMATS_, CONSTANT_ALPHA_, CONSTANT_COLOR_, CONTEXT_LOST_WEBGL_, CULL_FACE_, CULL_FACE_MODE_, CURRENT_PROGRAM_, CURRENT_VERTEX_ATTRIB_, CW_, DECR_, DECR_WRAP_, DELETE_STATUS_, DEPTH_ATTACHMENT_, DEPTH_BITS_, DEPTH_BUFFER_BIT_, DEPTH_CLEAR_VALUE_, DEPTH_COMPONENT_, DEPTH_COMPONENT16_, DEPTH_FUNC_, DEPTH_RANGE_, DEPTH_STENCIL_, DEPTH_STENCIL_ATTACHMENT_, DEPTH_TEST_, DEPTH_WRITEMASK_, DITHER_, DONT_CARE_, DST_ALPHA_, DST_COLOR_, DYNAMIC_DRAW_, ELEMENT_ARRAY_BUFFER_, ELEMENT_ARRAY_BUFFER_BINDING_, EQUAL_, FASTEST_, FLOAT_, FLOAT_MAT2_, FLOAT_MAT3_, FLOAT_MAT4_, FLOAT_VEC2_, FLOAT_VEC3_, FLOAT_VEC4_, FRAGMENT_SHADER_, FRAMEBUFFER_, FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_, FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_, FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_, FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_, FRAMEBUFFER_BINDING_, FRAMEBUFFER_COMPLETE_, FRAMEBUFFER_INCOMPLETE_ATTACHMENT_, FRAMEBUFFER_INCOMPLETE_DIMENSIONS_, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_, FRAMEBUFFER_UNSUPPORTED_, FRONT_, FRONT_AND_BACK_, FRONT_FACE_, FUNC_ADD_, FUNC_REVERSE_SUBTRACT_, FUNC_SUBTRACT_, GENERATE_MIPMAP_HINT_, GEQUAL_, GREATER_, GREEN_BITS_, HIGH_FLOAT_, HIGH_INT_, INCR_, INCR_WRAP_, INFO_LOG_LENGTH_, INT_, INT_VEC2_, INT_VEC3_, INT_VEC4_, INVALID_ENUM_, INVALID_FRAMEBUFFER_OPERATION_, INVALID_OPERATION_, INVALID_VALUE_, INVERT_, KEEP_, LEQUAL_, LESS_, LINEAR_, LINEAR_MIPMAP_LINEAR_, LINEAR_MIPMAP_NEAREST_, LINES_, LINE_LOOP_, LINE_STRIP_, LINE_WIDTH_, LINK_STATUS_, LOW_FLOAT_, LOW_INT_, LUMINANCE_, LUMINANCE_ALPHA_, MAX_COMBINED_TEXTURE_IMAGE_UNITS_, MAX_CUBE_MAP_TEXTURE_SIZE_, MAX_FRAGMENT_UNIFORM_VECTORS_, MAX_RENDERBUFFER_SIZE_, MAX_TEXTURE_IMAGE_UNITS_, MAX_TEXTURE_SIZE_, MAX_VARYING_VECTORS_, MAX_VERTEX_ATTRIBS_, MAX_VERTEX_TEXTURE_IMAGE_UNITS_, MAX_VERTEX_UNIFORM_VECTORS_, MAX_VIEWPORT_DIMS_, MEDIUM_FLOAT_, MEDIUM_INT_, MIRRORED_REPEAT_, NEAREST_, NEAREST_MIPMAP_LINEAR_, NEAREST_MIPMAP_NEAREST_, NEVER_, NICEST_, NONE_, NOTEQUAL_, NO_ERROR_, NUM_COMPRESSED_TEXTURE_FORMATS_, ONE_, ONE_MINUS_CONSTANT_ALPHA_, ONE_MINUS_CONSTANT_COLOR_, ONE_MINUS_DST_ALPHA_, ONE_MINUS_DST_COLOR_, ONE_MINUS_SRC_ALPHA_, ONE_MINUS_SRC_COLOR_, OUT_OF_MEMORY_, PACK_ALIGNMENT_, POINTS_, POLYGON_OFFSET_FACTOR_, POLYGON_OFFSET_FILL_, POLYGON_OFFSET_UNITS_, RED_BITS_, RENDERBUFFER_, RENDERBUFFER_ALPHA_SIZE_, RENDERBUFFER_BINDING_, RENDERBUFFER_BLUE_SIZE_, RENDERBUFFER_DEPTH_SIZE_, RENDERBUFFER_GREEN_SIZE_, RENDERBUFFER_HEIGHT_, RENDERBUFFER_INTERNAL_FORMAT_, RENDERBUFFER_RED_SIZE_, RENDERBUFFER_STENCIL_SIZE_, RENDERBUFFER_WIDTH_, RENDERER_, REPEAT_, REPLACE_, RGB_, RGB5_A1_, RGB565_, RGBA_, RGBA4_, SAMPLER_2D_, SAMPLER_CUBE_, SAMPLES_, SAMPLE_ALPHA_TO_COVERAGE_, SAMPLE_BUFFERS_, SAMPLE_COVERAGE_, SAMPLE_COVERAGE_INVERT_, SAMPLE_COVERAGE_VALUE_, SCISSOR_BOX_, SCISSOR_TEST_, SHADER_COMPILER_, SHADER_SOURCE_LENGTH_, SHADER_TYPE_, SHADING_LANGUAGE_VERSION_, SHORT_, SRC_ALPHA_, SRC_ALPHA_SATURATE_, SRC_COLOR_, STATIC_DRAW_, STENCIL_ATTACHMENT_, STENCIL_BACK_FAIL_, STENCIL_BACK_FUNC_, STENCIL_BACK_PASS_DEPTH_FAIL_, STENCIL_BACK_PASS_DEPTH_PASS_, STENCIL_BACK_REF_, STENCIL_BACK_VALUE_MASK_, STENCIL_BACK_WRITEMASK_, STENCIL_BITS_, STENCIL_BUFFER_BIT_, STENCIL_CLEAR_VALUE_, STENCIL_FAIL_, STENCIL_FUNC_, STENCIL_INDEX_, STENCIL_INDEX8_, STENCIL_PASS_DEPTH_FAIL_, STENCIL_PASS_DEPTH_PASS_, STENCIL_REF_, STENCIL_TEST_, STENCIL_VALUE_MASK_, STENCIL_WRITEMASK_, STREAM_DRAW_, SUBPIXEL_BITS_, TEXTURE_, TEXTURE0_, TEXTURE1_, TEXTURE2_, TEXTURE3_, TEXTURE4_, TEXTURE5_, TEXTURE6_, TEXTURE7_, TEXTURE8_, TEXTURE9_, TEXTURE10_, TEXTURE11_, TEXTURE12_, TEXTURE13_, TEXTURE14_, TEXTURE15_, TEXTURE16_, TEXTURE17_, TEXTURE18_, TEXTURE19_, TEXTURE20_, TEXTURE21_, TEXTURE22_, TEXTURE23_, TEXTURE24_, TEXTURE25_, TEXTURE26_, TEXTURE27_, TEXTURE28_, TEXTURE29_, TEXTURE30_, TEXTURE31_, TEXTURE_2D_, TEXTURE_BINDING_2D_, TEXTURE_BINDING_CUBE_MAP_, TEXTURE_CUBE_MAP_, TEXTURE_CUBE_MAP_NEGATIVE_X_, TEXTURE_CUBE_MAP_NEGATIVE_Y_, TEXTURE_CUBE_MAP_NEGATIVE_Z_, TEXTURE_CUBE_MAP_POSITIVE_X_, TEXTURE_CUBE_MAP_POSITIVE_Y_, TEXTURE_CUBE_MAP_POSITIVE_Z_, TEXTURE_MAG_FILTER_, TEXTURE_MIN_FILTER_, TEXTURE_WRAP_S_, TEXTURE_WRAP_T_, TRIANGLES_, TRIANGLE_FAN_, TRIANGLE_STRIP_, UNPACK_ALIGNMENT_, UNPACK_COLORSPACE_CONVERSION_WEBGL_, UNPACK_FLIP_Y_WEBGL_, UNPACK_PREMULTIPLY_ALPHA_WEBGL_, UNSIGNED_BYTE_, UNSIGNED_INT_, UNSIGNED_SHORT_, UNSIGNED_SHORT_4_4_4_4_, UNSIGNED_SHORT_5_5_5_1_, UNSIGNED_SHORT_5_6_5_, VALIDATE_STATUS_, VENDOR_, VERSION_, VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_, VERTEX_ATTRIB_ARRAY_ENABLED_, VERTEX_ATTRIB_ARRAY_NORMALIZED_, VERTEX_ATTRIB_ARRAY_POINTER_, VERTEX_ATTRIB_ARRAY_SIZE_, VERTEX_ATTRIB_ARRAY_STRIDE_, VERTEX_ATTRIB_ARRAY_TYPE_, VERTEX_SHADER_, VIEWPORT_, ZERO_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.ARRAY_BUFFER = 0;
			this.ARRAY_BUFFER_BINDING = 0;
			this.ATTACHED_SHADERS = 0;
			this.BACK = 0;
			this.BLEND = 0;
			this.BLEND_COLOR = 0;
			this.BLEND_DST_ALPHA = 0;
			this.BLEND_DST_RGB = 0;
			this.BLEND_EQUATION = 0;
			this.BLEND_EQUATION_ALPHA = 0;
			this.BLEND_EQUATION_RGB = 0;
			this.BLEND_SRC_ALPHA = 0;
			this.BLEND_SRC_RGB = 0;
			this.BLUE_BITS = 0;
			this.BOOL = 0;
			this.BOOL_VEC2 = 0;
			this.BOOL_VEC3 = 0;
			this.BOOL_VEC4 = 0;
			this.BROWSER_DEFAULT_WEBGL = 0;
			this.BUFFER_SIZE = 0;
			this.BUFFER_USAGE = 0;
			this.BYTE = 0;
			this.CCW = 0;
			this.CLAMP_TO_EDGE = 0;
			this.COLOR_ATTACHMENT0 = 0;
			this.COLOR_BUFFER_BIT = 0;
			this.COLOR_CLEAR_VALUE = 0;
			this.COLOR_WRITEMASK = 0;
			this.COMPILE_STATUS = 0;
			this.COMPRESSED_TEXTURE_FORMATS = 0;
			this.CONSTANT_ALPHA = 0;
			this.CONSTANT_COLOR = 0;
			this.CONTEXT_LOST_WEBGL = 0;
			this.CULL_FACE = 0;
			this.CULL_FACE_MODE = 0;
			this.CURRENT_PROGRAM = 0;
			this.CURRENT_VERTEX_ATTRIB = 0;
			this.CW = 0;
			this.DECR = 0;
			this.DECR_WRAP = 0;
			this.DELETE_STATUS = 0;
			this.DEPTH_ATTACHMENT = 0;
			this.DEPTH_BITS = 0;
			this.DEPTH_BUFFER_BIT = 0;
			this.DEPTH_CLEAR_VALUE = 0;
			this.DEPTH_COMPONENT = 0;
			this.DEPTH_COMPONENT16 = 0;
			this.DEPTH_FUNC = 0;
			this.DEPTH_RANGE = 0;
			this.DEPTH_STENCIL = 0;
			this.DEPTH_STENCIL_ATTACHMENT = 0;
			this.DEPTH_TEST = 0;
			this.DEPTH_WRITEMASK = 0;
			this.DITHER = 0;
			this.DONT_CARE = 0;
			this.DST_ALPHA = 0;
			this.DST_COLOR = 0;
			this.DYNAMIC_DRAW = 0;
			this.ELEMENT_ARRAY_BUFFER = 0;
			this.ELEMENT_ARRAY_BUFFER_BINDING = 0;
			this.EQUAL = 0;
			this.FASTEST = 0;
			this.FLOAT = 0;
			this.FLOAT_MAT2 = 0;
			this.FLOAT_MAT3 = 0;
			this.FLOAT_MAT4 = 0;
			this.FLOAT_VEC2 = 0;
			this.FLOAT_VEC3 = 0;
			this.FLOAT_VEC4 = 0;
			this.FRAGMENT_SHADER = 0;
			this.FRAMEBUFFER = 0;
			this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0;
			this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0;
			this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0;
			this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0;
			this.FRAMEBUFFER_BINDING = 0;
			this.FRAMEBUFFER_COMPLETE = 0;
			this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0;
			this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0;
			this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0;
			this.FRAMEBUFFER_UNSUPPORTED = 0;
			this.FRONT = 0;
			this.FRONT_AND_BACK = 0;
			this.FRONT_FACE = 0;
			this.FUNC_ADD = 0;
			this.FUNC_REVERSE_SUBTRACT = 0;
			this.FUNC_SUBTRACT = 0;
			this.GENERATE_MIPMAP_HINT = 0;
			this.GEQUAL = 0;
			this.GREATER = 0;
			this.GREEN_BITS = 0;
			this.HIGH_FLOAT = 0;
			this.HIGH_INT = 0;
			this.INCR = 0;
			this.INCR_WRAP = 0;
			this.INFO_LOG_LENGTH = 0;
			this.INT = 0;
			this.INT_VEC2 = 0;
			this.INT_VEC3 = 0;
			this.INT_VEC4 = 0;
			this.INVALID_ENUM = 0;
			this.INVALID_FRAMEBUFFER_OPERATION = 0;
			this.INVALID_OPERATION = 0;
			this.INVALID_VALUE = 0;
			this.INVERT = 0;
			this.KEEP = 0;
			this.LEQUAL = 0;
			this.LESS = 0;
			this.LINEAR = 0;
			this.LINEAR_MIPMAP_LINEAR = 0;
			this.LINEAR_MIPMAP_NEAREST = 0;
			this.LINES = 0;
			this.LINE_LOOP = 0;
			this.LINE_STRIP = 0;
			this.LINE_WIDTH = 0;
			this.LINK_STATUS = 0;
			this.LOW_FLOAT = 0;
			this.LOW_INT = 0;
			this.LUMINANCE = 0;
			this.LUMINANCE_ALPHA = 0;
			this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_CUBE_MAP_TEXTURE_SIZE = 0;
			this.MAX_FRAGMENT_UNIFORM_VECTORS = 0;
			this.MAX_RENDERBUFFER_SIZE = 0;
			this.MAX_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_TEXTURE_SIZE = 0;
			this.MAX_VARYING_VECTORS = 0;
			this.MAX_VERTEX_ATTRIBS = 0;
			this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_VERTEX_UNIFORM_VECTORS = 0;
			this.MAX_VIEWPORT_DIMS = 0;
			this.MEDIUM_FLOAT = 0;
			this.MEDIUM_INT = 0;
			this.MIRRORED_REPEAT = 0;
			this.NEAREST = 0;
			this.NEAREST_MIPMAP_LINEAR = 0;
			this.NEAREST_MIPMAP_NEAREST = 0;
			this.NEVER = 0;
			this.NICEST = 0;
			this.NONE = 0;
			this.NOTEQUAL = 0;
			this.NO_ERROR = 0;
			this.NUM_COMPRESSED_TEXTURE_FORMATS = 0;
			this.ONE = 0;
			this.ONE_MINUS_CONSTANT_ALPHA = 0;
			this.ONE_MINUS_CONSTANT_COLOR = 0;
			this.ONE_MINUS_DST_ALPHA = 0;
			this.ONE_MINUS_DST_COLOR = 0;
			this.ONE_MINUS_SRC_ALPHA = 0;
			this.ONE_MINUS_SRC_COLOR = 0;
			this.OUT_OF_MEMORY = 0;
			this.PACK_ALIGNMENT = 0;
			this.POINTS = 0;
			this.POLYGON_OFFSET_FACTOR = 0;
			this.POLYGON_OFFSET_FILL = 0;
			this.POLYGON_OFFSET_UNITS = 0;
			this.RED_BITS = 0;
			this.RENDERBUFFER = 0;
			this.RENDERBUFFER_ALPHA_SIZE = 0;
			this.RENDERBUFFER_BINDING = 0;
			this.RENDERBUFFER_BLUE_SIZE = 0;
			this.RENDERBUFFER_DEPTH_SIZE = 0;
			this.RENDERBUFFER_GREEN_SIZE = 0;
			this.RENDERBUFFER_HEIGHT = 0;
			this.RENDERBUFFER_INTERNAL_FORMAT = 0;
			this.RENDERBUFFER_RED_SIZE = 0;
			this.RENDERBUFFER_STENCIL_SIZE = 0;
			this.RENDERBUFFER_WIDTH = 0;
			this.RENDERER = 0;
			this.REPEAT = 0;
			this.REPLACE = 0;
			this.RGB = 0;
			this.RGB5_A1 = 0;
			this.RGB565 = 0;
			this.RGBA = 0;
			this.RGBA4 = 0;
			this.SAMPLER_2D = 0;
			this.SAMPLER_CUBE = 0;
			this.SAMPLES = 0;
			this.SAMPLE_ALPHA_TO_COVERAGE = 0;
			this.SAMPLE_BUFFERS = 0;
			this.SAMPLE_COVERAGE = 0;
			this.SAMPLE_COVERAGE_INVERT = 0;
			this.SAMPLE_COVERAGE_VALUE = 0;
			this.SCISSOR_BOX = 0;
			this.SCISSOR_TEST = 0;
			this.SHADER_COMPILER = 0;
			this.SHADER_SOURCE_LENGTH = 0;
			this.SHADER_TYPE = 0;
			this.SHADING_LANGUAGE_VERSION = 0;
			this.SHORT = 0;
			this.SRC_ALPHA = 0;
			this.SRC_ALPHA_SATURATE = 0;
			this.SRC_COLOR = 0;
			this.STATIC_DRAW = 0;
			this.STENCIL_ATTACHMENT = 0;
			this.STENCIL_BACK_FAIL = 0;
			this.STENCIL_BACK_FUNC = 0;
			this.STENCIL_BACK_PASS_DEPTH_FAIL = 0;
			this.STENCIL_BACK_PASS_DEPTH_PASS = 0;
			this.STENCIL_BACK_REF = 0;
			this.STENCIL_BACK_VALUE_MASK = 0;
			this.STENCIL_BACK_WRITEMASK = 0;
			this.STENCIL_BITS = 0;
			this.STENCIL_BUFFER_BIT = 0;
			this.STENCIL_CLEAR_VALUE = 0;
			this.STENCIL_FAIL = 0;
			this.STENCIL_FUNC = 0;
			this.STENCIL_INDEX = 0;
			this.STENCIL_INDEX8 = 0;
			this.STENCIL_PASS_DEPTH_FAIL = 0;
			this.STENCIL_PASS_DEPTH_PASS = 0;
			this.STENCIL_REF = 0;
			this.STENCIL_TEST = 0;
			this.STENCIL_VALUE_MASK = 0;
			this.STENCIL_WRITEMASK = 0;
			this.STREAM_DRAW = 0;
			this.SUBPIXEL_BITS = 0;
			this.TEXTURE = 0;
			this.TEXTURE0 = 0;
			this.TEXTURE1 = 0;
			this.TEXTURE2 = 0;
			this.TEXTURE3 = 0;
			this.TEXTURE4 = 0;
			this.TEXTURE5 = 0;
			this.TEXTURE6 = 0;
			this.TEXTURE7 = 0;
			this.TEXTURE8 = 0;
			this.TEXTURE9 = 0;
			this.TEXTURE10 = 0;
			this.TEXTURE11 = 0;
			this.TEXTURE12 = 0;
			this.TEXTURE13 = 0;
			this.TEXTURE14 = 0;
			this.TEXTURE15 = 0;
			this.TEXTURE16 = 0;
			this.TEXTURE17 = 0;
			this.TEXTURE18 = 0;
			this.TEXTURE19 = 0;
			this.TEXTURE20 = 0;
			this.TEXTURE21 = 0;
			this.TEXTURE22 = 0;
			this.TEXTURE23 = 0;
			this.TEXTURE24 = 0;
			this.TEXTURE25 = 0;
			this.TEXTURE26 = 0;
			this.TEXTURE27 = 0;
			this.TEXTURE28 = 0;
			this.TEXTURE29 = 0;
			this.TEXTURE30 = 0;
			this.TEXTURE31 = 0;
			this.TEXTURE_2D = 0;
			this.TEXTURE_BINDING_2D = 0;
			this.TEXTURE_BINDING_CUBE_MAP = 0;
			this.TEXTURE_CUBE_MAP = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_X = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_X = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_Y = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_Z = 0;
			this.TEXTURE_MAG_FILTER = 0;
			this.TEXTURE_MIN_FILTER = 0;
			this.TEXTURE_WRAP_S = 0;
			this.TEXTURE_WRAP_T = 0;
			this.TRIANGLES = 0;
			this.TRIANGLE_FAN = 0;
			this.TRIANGLE_STRIP = 0;
			this.UNPACK_ALIGNMENT = 0;
			this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 0;
			this.UNPACK_FLIP_Y_WEBGL = 0;
			this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0;
			this.UNSIGNED_BYTE = 0;
			this.UNSIGNED_INT = 0;
			this.UNSIGNED_SHORT = 0;
			this.UNSIGNED_SHORT_4_4_4_4 = 0;
			this.UNSIGNED_SHORT_5_5_5_1 = 0;
			this.UNSIGNED_SHORT_5_6_5 = 0;
			this.VALIDATE_STATUS = 0;
			this.VENDOR = 0;
			this.VERSION = 0;
			this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0;
			this.VERTEX_ATTRIB_ARRAY_ENABLED = 0;
			this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 0;
			this.VERTEX_ATTRIB_ARRAY_POINTER = 0;
			this.VERTEX_ATTRIB_ARRAY_SIZE = 0;
			this.VERTEX_ATTRIB_ARRAY_STRIDE = 0;
			this.VERTEX_ATTRIB_ARRAY_TYPE = 0;
			this.VERTEX_SHADER = 0;
			this.VIEWPORT = 0;
			this.ZERO = 0;
			return;
		}
		this.Object = Object_;
		this.ARRAY_BUFFER = ARRAY_BUFFER_;
		this.ARRAY_BUFFER_BINDING = ARRAY_BUFFER_BINDING_;
		this.ATTACHED_SHADERS = ATTACHED_SHADERS_;
		this.BACK = BACK_;
		this.BLEND = BLEND_;
		this.BLEND_COLOR = BLEND_COLOR_;
		this.BLEND_DST_ALPHA = BLEND_DST_ALPHA_;
		this.BLEND_DST_RGB = BLEND_DST_RGB_;
		this.BLEND_EQUATION = BLEND_EQUATION_;
		this.BLEND_EQUATION_ALPHA = BLEND_EQUATION_ALPHA_;
		this.BLEND_EQUATION_RGB = BLEND_EQUATION_RGB_;
		this.BLEND_SRC_ALPHA = BLEND_SRC_ALPHA_;
		this.BLEND_SRC_RGB = BLEND_SRC_RGB_;
		this.BLUE_BITS = BLUE_BITS_;
		this.BOOL = BOOL_;
		this.BOOL_VEC2 = BOOL_VEC2_;
		this.BOOL_VEC3 = BOOL_VEC3_;
		this.BOOL_VEC4 = BOOL_VEC4_;
		this.BROWSER_DEFAULT_WEBGL = BROWSER_DEFAULT_WEBGL_;
		this.BUFFER_SIZE = BUFFER_SIZE_;
		this.BUFFER_USAGE = BUFFER_USAGE_;
		this.BYTE = BYTE_;
		this.CCW = CCW_;
		this.CLAMP_TO_EDGE = CLAMP_TO_EDGE_;
		this.COLOR_ATTACHMENT0 = COLOR_ATTACHMENT0_;
		this.COLOR_BUFFER_BIT = COLOR_BUFFER_BIT_;
		this.COLOR_CLEAR_VALUE = COLOR_CLEAR_VALUE_;
		this.COLOR_WRITEMASK = COLOR_WRITEMASK_;
		this.COMPILE_STATUS = COMPILE_STATUS_;
		this.COMPRESSED_TEXTURE_FORMATS = COMPRESSED_TEXTURE_FORMATS_;
		this.CONSTANT_ALPHA = CONSTANT_ALPHA_;
		this.CONSTANT_COLOR = CONSTANT_COLOR_;
		this.CONTEXT_LOST_WEBGL = CONTEXT_LOST_WEBGL_;
		this.CULL_FACE = CULL_FACE_;
		this.CULL_FACE_MODE = CULL_FACE_MODE_;
		this.CURRENT_PROGRAM = CURRENT_PROGRAM_;
		this.CURRENT_VERTEX_ATTRIB = CURRENT_VERTEX_ATTRIB_;
		this.CW = CW_;
		this.DECR = DECR_;
		this.DECR_WRAP = DECR_WRAP_;
		this.DELETE_STATUS = DELETE_STATUS_;
		this.DEPTH_ATTACHMENT = DEPTH_ATTACHMENT_;
		this.DEPTH_BITS = DEPTH_BITS_;
		this.DEPTH_BUFFER_BIT = DEPTH_BUFFER_BIT_;
		this.DEPTH_CLEAR_VALUE = DEPTH_CLEAR_VALUE_;
		this.DEPTH_COMPONENT = DEPTH_COMPONENT_;
		this.DEPTH_COMPONENT16 = DEPTH_COMPONENT16_;
		this.DEPTH_FUNC = DEPTH_FUNC_;
		this.DEPTH_RANGE = DEPTH_RANGE_;
		this.DEPTH_STENCIL = DEPTH_STENCIL_;
		this.DEPTH_STENCIL_ATTACHMENT = DEPTH_STENCIL_ATTACHMENT_;
		this.DEPTH_TEST = DEPTH_TEST_;
		this.DEPTH_WRITEMASK = DEPTH_WRITEMASK_;
		this.DITHER = DITHER_;
		this.DONT_CARE = DONT_CARE_;
		this.DST_ALPHA = DST_ALPHA_;
		this.DST_COLOR = DST_COLOR_;
		this.DYNAMIC_DRAW = DYNAMIC_DRAW_;
		this.ELEMENT_ARRAY_BUFFER = ELEMENT_ARRAY_BUFFER_;
		this.ELEMENT_ARRAY_BUFFER_BINDING = ELEMENT_ARRAY_BUFFER_BINDING_;
		this.EQUAL = EQUAL_;
		this.FASTEST = FASTEST_;
		this.FLOAT = FLOAT_;
		this.FLOAT_MAT2 = FLOAT_MAT2_;
		this.FLOAT_MAT3 = FLOAT_MAT3_;
		this.FLOAT_MAT4 = FLOAT_MAT4_;
		this.FLOAT_VEC2 = FLOAT_VEC2_;
		this.FLOAT_VEC3 = FLOAT_VEC3_;
		this.FLOAT_VEC4 = FLOAT_VEC4_;
		this.FRAGMENT_SHADER = FRAGMENT_SHADER_;
		this.FRAMEBUFFER = FRAMEBUFFER_;
		this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_;
		this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_;
		this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_;
		this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_;
		this.FRAMEBUFFER_BINDING = FRAMEBUFFER_BINDING_;
		this.FRAMEBUFFER_COMPLETE = FRAMEBUFFER_COMPLETE_;
		this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = FRAMEBUFFER_INCOMPLETE_ATTACHMENT_;
		this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = FRAMEBUFFER_INCOMPLETE_DIMENSIONS_;
		this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_;
		this.FRAMEBUFFER_UNSUPPORTED = FRAMEBUFFER_UNSUPPORTED_;
		this.FRONT = FRONT_;
		this.FRONT_AND_BACK = FRONT_AND_BACK_;
		this.FRONT_FACE = FRONT_FACE_;
		this.FUNC_ADD = FUNC_ADD_;
		this.FUNC_REVERSE_SUBTRACT = FUNC_REVERSE_SUBTRACT_;
		this.FUNC_SUBTRACT = FUNC_SUBTRACT_;
		this.GENERATE_MIPMAP_HINT = GENERATE_MIPMAP_HINT_;
		this.GEQUAL = GEQUAL_;
		this.GREATER = GREATER_;
		this.GREEN_BITS = GREEN_BITS_;
		this.HIGH_FLOAT = HIGH_FLOAT_;
		this.HIGH_INT = HIGH_INT_;
		this.INCR = INCR_;
		this.INCR_WRAP = INCR_WRAP_;
		this.INFO_LOG_LENGTH = INFO_LOG_LENGTH_;
		this.INT = INT_;
		this.INT_VEC2 = INT_VEC2_;
		this.INT_VEC3 = INT_VEC3_;
		this.INT_VEC4 = INT_VEC4_;
		this.INVALID_ENUM = INVALID_ENUM_;
		this.INVALID_FRAMEBUFFER_OPERATION = INVALID_FRAMEBUFFER_OPERATION_;
		this.INVALID_OPERATION = INVALID_OPERATION_;
		this.INVALID_VALUE = INVALID_VALUE_;
		this.INVERT = INVERT_;
		this.KEEP = KEEP_;
		this.LEQUAL = LEQUAL_;
		this.LESS = LESS_;
		this.LINEAR = LINEAR_;
		this.LINEAR_MIPMAP_LINEAR = LINEAR_MIPMAP_LINEAR_;
		this.LINEAR_MIPMAP_NEAREST = LINEAR_MIPMAP_NEAREST_;
		this.LINES = LINES_;
		this.LINE_LOOP = LINE_LOOP_;
		this.LINE_STRIP = LINE_STRIP_;
		this.LINE_WIDTH = LINE_WIDTH_;
		this.LINK_STATUS = LINK_STATUS_;
		this.LOW_FLOAT = LOW_FLOAT_;
		this.LOW_INT = LOW_INT_;
		this.LUMINANCE = LUMINANCE_;
		this.LUMINANCE_ALPHA = LUMINANCE_ALPHA_;
		this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = MAX_COMBINED_TEXTURE_IMAGE_UNITS_;
		this.MAX_CUBE_MAP_TEXTURE_SIZE = MAX_CUBE_MAP_TEXTURE_SIZE_;
		this.MAX_FRAGMENT_UNIFORM_VECTORS = MAX_FRAGMENT_UNIFORM_VECTORS_;
		this.MAX_RENDERBUFFER_SIZE = MAX_RENDERBUFFER_SIZE_;
		this.MAX_TEXTURE_IMAGE_UNITS = MAX_TEXTURE_IMAGE_UNITS_;
		this.MAX_TEXTURE_SIZE = MAX_TEXTURE_SIZE_;
		this.MAX_VARYING_VECTORS = MAX_VARYING_VECTORS_;
		this.MAX_VERTEX_ATTRIBS = MAX_VERTEX_ATTRIBS_;
		this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = MAX_VERTEX_TEXTURE_IMAGE_UNITS_;
		this.MAX_VERTEX_UNIFORM_VECTORS = MAX_VERTEX_UNIFORM_VECTORS_;
		this.MAX_VIEWPORT_DIMS = MAX_VIEWPORT_DIMS_;
		this.MEDIUM_FLOAT = MEDIUM_FLOAT_;
		this.MEDIUM_INT = MEDIUM_INT_;
		this.MIRRORED_REPEAT = MIRRORED_REPEAT_;
		this.NEAREST = NEAREST_;
		this.NEAREST_MIPMAP_LINEAR = NEAREST_MIPMAP_LINEAR_;
		this.NEAREST_MIPMAP_NEAREST = NEAREST_MIPMAP_NEAREST_;
		this.NEVER = NEVER_;
		this.NICEST = NICEST_;
		this.NONE = NONE_;
		this.NOTEQUAL = NOTEQUAL_;
		this.NO_ERROR = NO_ERROR_;
		this.NUM_COMPRESSED_TEXTURE_FORMATS = NUM_COMPRESSED_TEXTURE_FORMATS_;
		this.ONE = ONE_;
		this.ONE_MINUS_CONSTANT_ALPHA = ONE_MINUS_CONSTANT_ALPHA_;
		this.ONE_MINUS_CONSTANT_COLOR = ONE_MINUS_CONSTANT_COLOR_;
		this.ONE_MINUS_DST_ALPHA = ONE_MINUS_DST_ALPHA_;
		this.ONE_MINUS_DST_COLOR = ONE_MINUS_DST_COLOR_;
		this.ONE_MINUS_SRC_ALPHA = ONE_MINUS_SRC_ALPHA_;
		this.ONE_MINUS_SRC_COLOR = ONE_MINUS_SRC_COLOR_;
		this.OUT_OF_MEMORY = OUT_OF_MEMORY_;
		this.PACK_ALIGNMENT = PACK_ALIGNMENT_;
		this.POINTS = POINTS_;
		this.POLYGON_OFFSET_FACTOR = POLYGON_OFFSET_FACTOR_;
		this.POLYGON_OFFSET_FILL = POLYGON_OFFSET_FILL_;
		this.POLYGON_OFFSET_UNITS = POLYGON_OFFSET_UNITS_;
		this.RED_BITS = RED_BITS_;
		this.RENDERBUFFER = RENDERBUFFER_;
		this.RENDERBUFFER_ALPHA_SIZE = RENDERBUFFER_ALPHA_SIZE_;
		this.RENDERBUFFER_BINDING = RENDERBUFFER_BINDING_;
		this.RENDERBUFFER_BLUE_SIZE = RENDERBUFFER_BLUE_SIZE_;
		this.RENDERBUFFER_DEPTH_SIZE = RENDERBUFFER_DEPTH_SIZE_;
		this.RENDERBUFFER_GREEN_SIZE = RENDERBUFFER_GREEN_SIZE_;
		this.RENDERBUFFER_HEIGHT = RENDERBUFFER_HEIGHT_;
		this.RENDERBUFFER_INTERNAL_FORMAT = RENDERBUFFER_INTERNAL_FORMAT_;
		this.RENDERBUFFER_RED_SIZE = RENDERBUFFER_RED_SIZE_;
		this.RENDERBUFFER_STENCIL_SIZE = RENDERBUFFER_STENCIL_SIZE_;
		this.RENDERBUFFER_WIDTH = RENDERBUFFER_WIDTH_;
		this.RENDERER = RENDERER_;
		this.REPEAT = REPEAT_;
		this.REPLACE = REPLACE_;
		this.RGB = RGB_;
		this.RGB5_A1 = RGB5_A1_;
		this.RGB565 = RGB565_;
		this.RGBA = RGBA_;
		this.RGBA4 = RGBA4_;
		this.SAMPLER_2D = SAMPLER_2D_;
		this.SAMPLER_CUBE = SAMPLER_CUBE_;
		this.SAMPLES = SAMPLES_;
		this.SAMPLE_ALPHA_TO_COVERAGE = SAMPLE_ALPHA_TO_COVERAGE_;
		this.SAMPLE_BUFFERS = SAMPLE_BUFFERS_;
		this.SAMPLE_COVERAGE = SAMPLE_COVERAGE_;
		this.SAMPLE_COVERAGE_INVERT = SAMPLE_COVERAGE_INVERT_;
		this.SAMPLE_COVERAGE_VALUE = SAMPLE_COVERAGE_VALUE_;
		this.SCISSOR_BOX = SCISSOR_BOX_;
		this.SCISSOR_TEST = SCISSOR_TEST_;
		this.SHADER_COMPILER = SHADER_COMPILER_;
		this.SHADER_SOURCE_LENGTH = SHADER_SOURCE_LENGTH_;
		this.SHADER_TYPE = SHADER_TYPE_;
		this.SHADING_LANGUAGE_VERSION = SHADING_LANGUAGE_VERSION_;
		this.SHORT = SHORT_;
		this.SRC_ALPHA = SRC_ALPHA_;
		this.SRC_ALPHA_SATURATE = SRC_ALPHA_SATURATE_;
		this.SRC_COLOR = SRC_COLOR_;
		this.STATIC_DRAW = STATIC_DRAW_;
		this.STENCIL_ATTACHMENT = STENCIL_ATTACHMENT_;
		this.STENCIL_BACK_FAIL = STENCIL_BACK_FAIL_;
		this.STENCIL_BACK_FUNC = STENCIL_BACK_FUNC_;
		this.STENCIL_BACK_PASS_DEPTH_FAIL = STENCIL_BACK_PASS_DEPTH_FAIL_;
		this.STENCIL_BACK_PASS_DEPTH_PASS = STENCIL_BACK_PASS_DEPTH_PASS_;
		this.STENCIL_BACK_REF = STENCIL_BACK_REF_;
		this.STENCIL_BACK_VALUE_MASK = STENCIL_BACK_VALUE_MASK_;
		this.STENCIL_BACK_WRITEMASK = STENCIL_BACK_WRITEMASK_;
		this.STENCIL_BITS = STENCIL_BITS_;
		this.STENCIL_BUFFER_BIT = STENCIL_BUFFER_BIT_;
		this.STENCIL_CLEAR_VALUE = STENCIL_CLEAR_VALUE_;
		this.STENCIL_FAIL = STENCIL_FAIL_;
		this.STENCIL_FUNC = STENCIL_FUNC_;
		this.STENCIL_INDEX = STENCIL_INDEX_;
		this.STENCIL_INDEX8 = STENCIL_INDEX8_;
		this.STENCIL_PASS_DEPTH_FAIL = STENCIL_PASS_DEPTH_FAIL_;
		this.STENCIL_PASS_DEPTH_PASS = STENCIL_PASS_DEPTH_PASS_;
		this.STENCIL_REF = STENCIL_REF_;
		this.STENCIL_TEST = STENCIL_TEST_;
		this.STENCIL_VALUE_MASK = STENCIL_VALUE_MASK_;
		this.STENCIL_WRITEMASK = STENCIL_WRITEMASK_;
		this.STREAM_DRAW = STREAM_DRAW_;
		this.SUBPIXEL_BITS = SUBPIXEL_BITS_;
		this.TEXTURE = TEXTURE_;
		this.TEXTURE0 = TEXTURE0_;
		this.TEXTURE1 = TEXTURE1_;
		this.TEXTURE2 = TEXTURE2_;
		this.TEXTURE3 = TEXTURE3_;
		this.TEXTURE4 = TEXTURE4_;
		this.TEXTURE5 = TEXTURE5_;
		this.TEXTURE6 = TEXTURE6_;
		this.TEXTURE7 = TEXTURE7_;
		this.TEXTURE8 = TEXTURE8_;
		this.TEXTURE9 = TEXTURE9_;
		this.TEXTURE10 = TEXTURE10_;
		this.TEXTURE11 = TEXTURE11_;
		this.TEXTURE12 = TEXTURE12_;
		this.TEXTURE13 = TEXTURE13_;
		this.TEXTURE14 = TEXTURE14_;
		this.TEXTURE15 = TEXTURE15_;
		this.TEXTURE16 = TEXTURE16_;
		this.TEXTURE17 = TEXTURE17_;
		this.TEXTURE18 = TEXTURE18_;
		this.TEXTURE19 = TEXTURE19_;
		this.TEXTURE20 = TEXTURE20_;
		this.TEXTURE21 = TEXTURE21_;
		this.TEXTURE22 = TEXTURE22_;
		this.TEXTURE23 = TEXTURE23_;
		this.TEXTURE24 = TEXTURE24_;
		this.TEXTURE25 = TEXTURE25_;
		this.TEXTURE26 = TEXTURE26_;
		this.TEXTURE27 = TEXTURE27_;
		this.TEXTURE28 = TEXTURE28_;
		this.TEXTURE29 = TEXTURE29_;
		this.TEXTURE30 = TEXTURE30_;
		this.TEXTURE31 = TEXTURE31_;
		this.TEXTURE_2D = TEXTURE_2D_;
		this.TEXTURE_BINDING_2D = TEXTURE_BINDING_2D_;
		this.TEXTURE_BINDING_CUBE_MAP = TEXTURE_BINDING_CUBE_MAP_;
		this.TEXTURE_CUBE_MAP = TEXTURE_CUBE_MAP_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_X = TEXTURE_CUBE_MAP_NEGATIVE_X_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_Y = TEXTURE_CUBE_MAP_NEGATIVE_Y_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_Z = TEXTURE_CUBE_MAP_NEGATIVE_Z_;
		this.TEXTURE_CUBE_MAP_POSITIVE_X = TEXTURE_CUBE_MAP_POSITIVE_X_;
		this.TEXTURE_CUBE_MAP_POSITIVE_Y = TEXTURE_CUBE_MAP_POSITIVE_Y_;
		this.TEXTURE_CUBE_MAP_POSITIVE_Z = TEXTURE_CUBE_MAP_POSITIVE_Z_;
		this.TEXTURE_MAG_FILTER = TEXTURE_MAG_FILTER_;
		this.TEXTURE_MIN_FILTER = TEXTURE_MIN_FILTER_;
		this.TEXTURE_WRAP_S = TEXTURE_WRAP_S_;
		this.TEXTURE_WRAP_T = TEXTURE_WRAP_T_;
		this.TRIANGLES = TRIANGLES_;
		this.TRIANGLE_FAN = TRIANGLE_FAN_;
		this.TRIANGLE_STRIP = TRIANGLE_STRIP_;
		this.UNPACK_ALIGNMENT = UNPACK_ALIGNMENT_;
		this.UNPACK_COLORSPACE_CONVERSION_WEBGL = UNPACK_COLORSPACE_CONVERSION_WEBGL_;
		this.UNPACK_FLIP_Y_WEBGL = UNPACK_FLIP_Y_WEBGL_;
		this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = UNPACK_PREMULTIPLY_ALPHA_WEBGL_;
		this.UNSIGNED_BYTE = UNSIGNED_BYTE_;
		this.UNSIGNED_INT = UNSIGNED_INT_;
		this.UNSIGNED_SHORT = UNSIGNED_SHORT_;
		this.UNSIGNED_SHORT_4_4_4_4 = UNSIGNED_SHORT_4_4_4_4_;
		this.UNSIGNED_SHORT_5_5_5_1 = UNSIGNED_SHORT_5_5_5_1_;
		this.UNSIGNED_SHORT_5_6_5 = UNSIGNED_SHORT_5_6_5_;
		this.VALIDATE_STATUS = VALIDATE_STATUS_;
		this.VENDOR = VENDOR_;
		this.VERSION = VERSION_;
		this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_;
		this.VERTEX_ATTRIB_ARRAY_ENABLED = VERTEX_ATTRIB_ARRAY_ENABLED_;
		this.VERTEX_ATTRIB_ARRAY_NORMALIZED = VERTEX_ATTRIB_ARRAY_NORMALIZED_;
		this.VERTEX_ATTRIB_ARRAY_POINTER = VERTEX_ATTRIB_ARRAY_POINTER_;
		this.VERTEX_ATTRIB_ARRAY_SIZE = VERTEX_ATTRIB_ARRAY_SIZE_;
		this.VERTEX_ATTRIB_ARRAY_STRIDE = VERTEX_ATTRIB_ARRAY_STRIDE_;
		this.VERTEX_ATTRIB_ARRAY_TYPE = VERTEX_ATTRIB_ARRAY_TYPE_;
		this.VERTEX_SHADER = VERTEX_SHADER_;
		this.VIEWPORT = VIEWPORT_;
		this.ZERO = ZERO_;
	});
	ptrType = $ptrType(Context);
	ptrType$1 = $ptrType(ContextAttributes);
	mapType = $mapType($String, $Bool);
	ptrType$2 = $ptrType(js.Object);
	sliceType = $sliceType(ptrType$2);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($Float32);
	DefaultAttributes = function() {
		var $ptr;
		return new ContextAttributes.ptr(true, true, false, true, true, false);
	};
	$pkg.DefaultAttributes = DefaultAttributes;
	NewContext = function(canvas, ca) {
		var $ptr, attrs, ca, canvas, ctx, gl;
		if ($global.WebGLRenderingContext === undefined) {
			return [ptrType.nil, errors.New("Your browser doesn't appear to support webgl.")];
		}
		if (ca === ptrType$1.nil) {
			ca = DefaultAttributes();
		}
		attrs = $makeMap($String.keyFor, [{ k: "alpha", v: ca.Alpha }, { k: "depth", v: ca.Depth }, { k: "stencil", v: ca.Stencil }, { k: "antialias", v: ca.Antialias }, { k: "premultipliedAlpha", v: ca.PremultipliedAlpha }, { k: "preserveDrawingBuffer", v: ca.PreserveDrawingBuffer }]);
		gl = canvas.getContext($externalize("webgl", $String), $externalize(attrs, mapType));
		if (gl === null) {
			gl = canvas.getContext($externalize("experimental-webgl", $String), $externalize(attrs, mapType));
			if (gl === null) {
				return [ptrType.nil, errors.New("Creating a webgl context has failed.")];
			}
		}
		ctx = new Context.ptr(null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		ctx.Object = gl;
		return [ctx, $ifaceNil];
	};
	$pkg.NewContext = NewContext;
	Context.ptr.prototype.GetContextAttributes = function() {
		var $ptr, c, ca;
		c = this;
		ca = c.Object.getContextAttributes();
		return new ContextAttributes.ptr(!!(ca.alpha), !!(ca.depth), !!(ca.stencil), !!(ca.antialias), !!(ca.premultipliedAlpha), !!(ca.preservedDrawingBuffer));
	};
	Context.prototype.GetContextAttributes = function() { return this.$val.GetContextAttributes(); };
	Context.ptr.prototype.ActiveTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		c.Object.activeTexture(texture);
	};
	Context.prototype.ActiveTexture = function(texture) { return this.$val.ActiveTexture(texture); };
	Context.ptr.prototype.AttachShader = function(program, shader) {
		var $ptr, c, program, shader;
		c = this;
		c.Object.attachShader(program, shader);
	};
	Context.prototype.AttachShader = function(program, shader) { return this.$val.AttachShader(program, shader); };
	Context.ptr.prototype.BindAttribLocation = function(program, index, name) {
		var $ptr, c, index, name, program;
		c = this;
		c.Object.bindAttribLocation(program, index, $externalize(name, $String));
	};
	Context.prototype.BindAttribLocation = function(program, index, name) { return this.$val.BindAttribLocation(program, index, name); };
	Context.ptr.prototype.BindBuffer = function(target, buffer) {
		var $ptr, buffer, c, target;
		c = this;
		c.Object.bindBuffer(target, buffer);
	};
	Context.prototype.BindBuffer = function(target, buffer) { return this.$val.BindBuffer(target, buffer); };
	Context.ptr.prototype.BindFramebuffer = function(target, framebuffer) {
		var $ptr, c, framebuffer, target;
		c = this;
		c.Object.bindFramebuffer(target, framebuffer);
	};
	Context.prototype.BindFramebuffer = function(target, framebuffer) { return this.$val.BindFramebuffer(target, framebuffer); };
	Context.ptr.prototype.BindRenderbuffer = function(target, renderbuffer) {
		var $ptr, c, renderbuffer, target;
		c = this;
		c.Object.bindRenderbuffer(target, renderbuffer);
	};
	Context.prototype.BindRenderbuffer = function(target, renderbuffer) { return this.$val.BindRenderbuffer(target, renderbuffer); };
	Context.ptr.prototype.BindTexture = function(target, texture) {
		var $ptr, c, target, texture;
		c = this;
		c.Object.bindTexture(target, texture);
	};
	Context.prototype.BindTexture = function(target, texture) { return this.$val.BindTexture(target, texture); };
	Context.ptr.prototype.BlendColor = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.blendColor(r, g, b, a);
	};
	Context.prototype.BlendColor = function(r, g, b, a) { return this.$val.BlendColor(r, g, b, a); };
	Context.ptr.prototype.BlendEquation = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.blendEquation(mode);
	};
	Context.prototype.BlendEquation = function(mode) { return this.$val.BlendEquation(mode); };
	Context.ptr.prototype.BlendEquationSeparate = function(modeRGB, modeAlpha) {
		var $ptr, c, modeAlpha, modeRGB;
		c = this;
		c.Object.blendEquationSeparate(modeRGB, modeAlpha);
	};
	Context.prototype.BlendEquationSeparate = function(modeRGB, modeAlpha) { return this.$val.BlendEquationSeparate(modeRGB, modeAlpha); };
	Context.ptr.prototype.BlendFunc = function(sfactor, dfactor) {
		var $ptr, c, dfactor, sfactor;
		c = this;
		c.Object.blendFunc(sfactor, dfactor);
	};
	Context.prototype.BlendFunc = function(sfactor, dfactor) { return this.$val.BlendFunc(sfactor, dfactor); };
	Context.ptr.prototype.BlendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
		var $ptr, c, dstAlpha, dstRGB, srcAlpha, srcRGB;
		c = this;
		c.Object.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
	};
	Context.prototype.BlendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) { return this.$val.BlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha); };
	Context.ptr.prototype.BufferData = function(target, data, usage) {
		var $ptr, c, data, target, usage;
		c = this;
		c.Object.bufferData(target, $externalize(data, $emptyInterface), usage);
	};
	Context.prototype.BufferData = function(target, data, usage) { return this.$val.BufferData(target, data, usage); };
	Context.ptr.prototype.BufferSubData = function(target, offset, data) {
		var $ptr, c, data, offset, target;
		c = this;
		c.Object.bufferSubData(target, offset, $externalize(data, $emptyInterface));
	};
	Context.prototype.BufferSubData = function(target, offset, data) { return this.$val.BufferSubData(target, offset, data); };
	Context.ptr.prototype.CheckFramebufferStatus = function(target) {
		var $ptr, c, target;
		c = this;
		return $parseInt(c.Object.checkFramebufferStatus(target)) >> 0;
	};
	Context.prototype.CheckFramebufferStatus = function(target) { return this.$val.CheckFramebufferStatus(target); };
	Context.ptr.prototype.Clear = function(flags) {
		var $ptr, c, flags;
		c = this;
		c.Object.clear(flags);
	};
	Context.prototype.Clear = function(flags) { return this.$val.Clear(flags); };
	Context.ptr.prototype.ClearColor = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.clearColor(r, g, b, a);
	};
	Context.prototype.ClearColor = function(r, g, b, a) { return this.$val.ClearColor(r, g, b, a); };
	Context.ptr.prototype.ClearDepth = function(depth) {
		var $ptr, c, depth;
		c = this;
		c.Object.clearDepth(depth);
	};
	Context.prototype.ClearDepth = function(depth) { return this.$val.ClearDepth(depth); };
	Context.ptr.prototype.ClearStencil = function(s) {
		var $ptr, c, s;
		c = this;
		c.Object.clearStencil(s);
	};
	Context.prototype.ClearStencil = function(s) { return this.$val.ClearStencil(s); };
	Context.ptr.prototype.ColorMask = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.colorMask($externalize(r, $Bool), $externalize(g, $Bool), $externalize(b, $Bool), $externalize(a, $Bool));
	};
	Context.prototype.ColorMask = function(r, g, b, a) { return this.$val.ColorMask(r, g, b, a); };
	Context.ptr.prototype.CompileShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		c.Object.compileShader(shader);
	};
	Context.prototype.CompileShader = function(shader) { return this.$val.CompileShader(shader); };
	Context.ptr.prototype.CopyTexImage2D = function(target, level, internal, x, y, w, h, border) {
		var $ptr, border, c, h, internal, level, target, w, x, y;
		c = this;
		c.Object.copyTexImage2D(target, level, internal, x, y, w, h, border);
	};
	Context.prototype.CopyTexImage2D = function(target, level, internal, x, y, w, h, border) { return this.$val.CopyTexImage2D(target, level, internal, x, y, w, h, border); };
	Context.ptr.prototype.CopyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, w, h) {
		var $ptr, c, h, level, target, w, x, xoffset, y, yoffset;
		c = this;
		c.Object.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, w, h);
	};
	Context.prototype.CopyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, w, h) { return this.$val.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, w, h); };
	Context.ptr.prototype.CreateBuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createBuffer();
	};
	Context.prototype.CreateBuffer = function() { return this.$val.CreateBuffer(); };
	Context.ptr.prototype.CreateFramebuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createFramebuffer();
	};
	Context.prototype.CreateFramebuffer = function() { return this.$val.CreateFramebuffer(); };
	Context.ptr.prototype.CreateProgram = function() {
		var $ptr, c;
		c = this;
		return c.Object.createProgram();
	};
	Context.prototype.CreateProgram = function() { return this.$val.CreateProgram(); };
	Context.ptr.prototype.CreateRenderbuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createRenderbuffer();
	};
	Context.prototype.CreateRenderbuffer = function() { return this.$val.CreateRenderbuffer(); };
	Context.ptr.prototype.CreateShader = function(typ) {
		var $ptr, c, typ;
		c = this;
		return c.Object.createShader(typ);
	};
	Context.prototype.CreateShader = function(typ) { return this.$val.CreateShader(typ); };
	Context.ptr.prototype.CreateTexture = function() {
		var $ptr, c;
		c = this;
		return c.Object.createTexture();
	};
	Context.prototype.CreateTexture = function() { return this.$val.CreateTexture(); };
	Context.ptr.prototype.CullFace = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.cullFace(mode);
	};
	Context.prototype.CullFace = function(mode) { return this.$val.CullFace(mode); };
	Context.ptr.prototype.DeleteBuffer = function(buffer) {
		var $ptr, buffer, c;
		c = this;
		c.Object.deleteBuffer(buffer);
	};
	Context.prototype.DeleteBuffer = function(buffer) { return this.$val.DeleteBuffer(buffer); };
	Context.ptr.prototype.DeleteFramebuffer = function(framebuffer) {
		var $ptr, c, framebuffer;
		c = this;
		c.Object.deleteFramebuffer(framebuffer);
	};
	Context.prototype.DeleteFramebuffer = function(framebuffer) { return this.$val.DeleteFramebuffer(framebuffer); };
	Context.ptr.prototype.DeleteProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.deleteProgram(program);
	};
	Context.prototype.DeleteProgram = function(program) { return this.$val.DeleteProgram(program); };
	Context.ptr.prototype.DeleteRenderbuffer = function(renderbuffer) {
		var $ptr, c, renderbuffer;
		c = this;
		c.Object.deleteRenderbuffer(renderbuffer);
	};
	Context.prototype.DeleteRenderbuffer = function(renderbuffer) { return this.$val.DeleteRenderbuffer(renderbuffer); };
	Context.ptr.prototype.DeleteShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		c.Object.deleteShader(shader);
	};
	Context.prototype.DeleteShader = function(shader) { return this.$val.DeleteShader(shader); };
	Context.ptr.prototype.DeleteTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		c.Object.deleteTexture(texture);
	};
	Context.prototype.DeleteTexture = function(texture) { return this.$val.DeleteTexture(texture); };
	Context.ptr.prototype.DepthFunc = function(fun) {
		var $ptr, c, fun;
		c = this;
		c.Object.depthFunc(fun);
	};
	Context.prototype.DepthFunc = function(fun) { return this.$val.DepthFunc(fun); };
	Context.ptr.prototype.DepthMask = function(flag) {
		var $ptr, c, flag;
		c = this;
		c.Object.depthMask($externalize(flag, $Bool));
	};
	Context.prototype.DepthMask = function(flag) { return this.$val.DepthMask(flag); };
	Context.ptr.prototype.DepthRange = function(zNear, zFar) {
		var $ptr, c, zFar, zNear;
		c = this;
		c.Object.depthRange(zNear, zFar);
	};
	Context.prototype.DepthRange = function(zNear, zFar) { return this.$val.DepthRange(zNear, zFar); };
	Context.ptr.prototype.DetachShader = function(program, shader) {
		var $ptr, c, program, shader;
		c = this;
		c.Object.detachShader(program, shader);
	};
	Context.prototype.DetachShader = function(program, shader) { return this.$val.DetachShader(program, shader); };
	Context.ptr.prototype.Disable = function(cap) {
		var $ptr, c, cap;
		c = this;
		c.Object.disable(cap);
	};
	Context.prototype.Disable = function(cap) { return this.$val.Disable(cap); };
	Context.ptr.prototype.DisableVertexAttribArray = function(index) {
		var $ptr, c, index;
		c = this;
		c.Object.disableVertexAttribArray(index);
	};
	Context.prototype.DisableVertexAttribArray = function(index) { return this.$val.DisableVertexAttribArray(index); };
	Context.ptr.prototype.DrawArrays = function(mode, first, count) {
		var $ptr, c, count, first, mode;
		c = this;
		c.Object.drawArrays(mode, first, count);
	};
	Context.prototype.DrawArrays = function(mode, first, count) { return this.$val.DrawArrays(mode, first, count); };
	Context.ptr.prototype.DrawElements = function(mode, count, typ, offset) {
		var $ptr, c, count, mode, offset, typ;
		c = this;
		c.Object.drawElements(mode, count, typ, offset);
	};
	Context.prototype.DrawElements = function(mode, count, typ, offset) { return this.$val.DrawElements(mode, count, typ, offset); };
	Context.ptr.prototype.Enable = function(cap) {
		var $ptr, c, cap;
		c = this;
		c.Object.enable(cap);
	};
	Context.prototype.Enable = function(cap) { return this.$val.Enable(cap); };
	Context.ptr.prototype.EnableVertexAttribArray = function(index) {
		var $ptr, c, index;
		c = this;
		c.Object.enableVertexAttribArray(index);
	};
	Context.prototype.EnableVertexAttribArray = function(index) { return this.$val.EnableVertexAttribArray(index); };
	Context.ptr.prototype.Finish = function() {
		var $ptr, c;
		c = this;
		c.Object.finish();
	};
	Context.prototype.Finish = function() { return this.$val.Finish(); };
	Context.ptr.prototype.Flush = function() {
		var $ptr, c;
		c = this;
		c.Object.flush();
	};
	Context.prototype.Flush = function() { return this.$val.Flush(); };
	Context.ptr.prototype.FrameBufferRenderBuffer = function(target, attachment, renderbufferTarget, renderbuffer) {
		var $ptr, attachment, c, renderbuffer, renderbufferTarget, target;
		c = this;
		c.Object.framebufferRenderBuffer(target, attachment, renderbufferTarget, renderbuffer);
	};
	Context.prototype.FrameBufferRenderBuffer = function(target, attachment, renderbufferTarget, renderbuffer) { return this.$val.FrameBufferRenderBuffer(target, attachment, renderbufferTarget, renderbuffer); };
	Context.ptr.prototype.FramebufferTexture2D = function(target, attachment, textarget, texture, level) {
		var $ptr, attachment, c, level, target, textarget, texture;
		c = this;
		c.Object.framebufferTexture2D(target, attachment, textarget, texture, level);
	};
	Context.prototype.FramebufferTexture2D = function(target, attachment, textarget, texture, level) { return this.$val.FramebufferTexture2D(target, attachment, textarget, texture, level); };
	Context.ptr.prototype.FrontFace = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.frontFace(mode);
	};
	Context.prototype.FrontFace = function(mode) { return this.$val.FrontFace(mode); };
	Context.ptr.prototype.GenerateMipmap = function(target) {
		var $ptr, c, target;
		c = this;
		c.Object.generateMipmap(target);
	};
	Context.prototype.GenerateMipmap = function(target) { return this.$val.GenerateMipmap(target); };
	Context.ptr.prototype.GetActiveAttrib = function(program, index) {
		var $ptr, c, index, program;
		c = this;
		return c.Object.getActiveAttrib(program, index);
	};
	Context.prototype.GetActiveAttrib = function(program, index) { return this.$val.GetActiveAttrib(program, index); };
	Context.ptr.prototype.GetActiveUniform = function(program, index) {
		var $ptr, c, index, program;
		c = this;
		return c.Object.getActiveUniform(program, index);
	};
	Context.prototype.GetActiveUniform = function(program, index) { return this.$val.GetActiveUniform(program, index); };
	Context.ptr.prototype.GetAttachedShaders = function(program) {
		var $ptr, c, i, objs, program, shaders;
		c = this;
		objs = c.Object.getAttachedShaders(program);
		shaders = $makeSlice(sliceType, $parseInt(objs.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(objs.length))) { break; }
			((i < 0 || i >= shaders.$length) ? ($throwRuntimeError("index out of range"), undefined) : shaders.$array[shaders.$offset + i] = objs[i]);
			i = i + (1) >> 0;
		}
		return shaders;
	};
	Context.prototype.GetAttachedShaders = function(program) { return this.$val.GetAttachedShaders(program); };
	Context.ptr.prototype.GetAttribLocation = function(program, name) {
		var $ptr, c, name, program;
		c = this;
		return $parseInt(c.Object.getAttribLocation(program, $externalize(name, $String))) >> 0;
	};
	Context.prototype.GetAttribLocation = function(program, name) { return this.$val.GetAttribLocation(program, name); };
	Context.ptr.prototype.GetBufferParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getBufferParameter(target, pname);
	};
	Context.prototype.GetBufferParameter = function(target, pname) { return this.$val.GetBufferParameter(target, pname); };
	Context.ptr.prototype.GetParameter = function(pname) {
		var $ptr, c, pname;
		c = this;
		return c.Object.getParameter(pname);
	};
	Context.prototype.GetParameter = function(pname) { return this.$val.GetParameter(pname); };
	Context.ptr.prototype.GetError = function() {
		var $ptr, c;
		c = this;
		return $parseInt(c.Object.getError()) >> 0;
	};
	Context.prototype.GetError = function() { return this.$val.GetError(); };
	Context.ptr.prototype.GetExtension = function(name) {
		var $ptr, c, name;
		c = this;
		return c.Object.getExtension($externalize(name, $String));
	};
	Context.prototype.GetExtension = function(name) { return this.$val.GetExtension(name); };
	Context.ptr.prototype.GetFramebufferAttachmentParameter = function(target, attachment, pname) {
		var $ptr, attachment, c, pname, target;
		c = this;
		return c.Object.getFramebufferAttachmentParameter(target, attachment, pname);
	};
	Context.prototype.GetFramebufferAttachmentParameter = function(target, attachment, pname) { return this.$val.GetFramebufferAttachmentParameter(target, attachment, pname); };
	Context.ptr.prototype.GetProgramParameteri = function(program, pname) {
		var $ptr, c, pname, program;
		c = this;
		return $parseInt(c.Object.getProgramParameter(program, pname)) >> 0;
	};
	Context.prototype.GetProgramParameteri = function(program, pname) { return this.$val.GetProgramParameteri(program, pname); };
	Context.ptr.prototype.GetProgramParameterb = function(program, pname) {
		var $ptr, c, pname, program;
		c = this;
		return !!(c.Object.getProgramParameter(program, pname));
	};
	Context.prototype.GetProgramParameterb = function(program, pname) { return this.$val.GetProgramParameterb(program, pname); };
	Context.ptr.prototype.GetProgramInfoLog = function(program) {
		var $ptr, c, program;
		c = this;
		return $internalize(c.Object.getProgramInfoLog(program), $String);
	};
	Context.prototype.GetProgramInfoLog = function(program) { return this.$val.GetProgramInfoLog(program); };
	Context.ptr.prototype.GetRenderbufferParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getRenderbufferParameter(target, pname);
	};
	Context.prototype.GetRenderbufferParameter = function(target, pname) { return this.$val.GetRenderbufferParameter(target, pname); };
	Context.ptr.prototype.GetShaderParameter = function(shader, pname) {
		var $ptr, c, pname, shader;
		c = this;
		return c.Object.getShaderParameter(shader, pname);
	};
	Context.prototype.GetShaderParameter = function(shader, pname) { return this.$val.GetShaderParameter(shader, pname); };
	Context.ptr.prototype.GetShaderParameterb = function(shader, pname) {
		var $ptr, c, pname, shader;
		c = this;
		return !!(c.Object.getShaderParameter(shader, pname));
	};
	Context.prototype.GetShaderParameterb = function(shader, pname) { return this.$val.GetShaderParameterb(shader, pname); };
	Context.ptr.prototype.GetShaderInfoLog = function(shader) {
		var $ptr, c, shader;
		c = this;
		return $internalize(c.Object.getShaderInfoLog(shader), $String);
	};
	Context.prototype.GetShaderInfoLog = function(shader) { return this.$val.GetShaderInfoLog(shader); };
	Context.ptr.prototype.GetShaderSource = function(shader) {
		var $ptr, c, shader;
		c = this;
		return $internalize(c.Object.getShaderSource(shader), $String);
	};
	Context.prototype.GetShaderSource = function(shader) { return this.$val.GetShaderSource(shader); };
	Context.ptr.prototype.GetSupportedExtensions = function() {
		var $ptr, c, ext, extensions, i;
		c = this;
		ext = c.Object.getSupportedExtensions();
		extensions = $makeSlice(sliceType$1, $parseInt(ext.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(ext.length))) { break; }
			((i < 0 || i >= extensions.$length) ? ($throwRuntimeError("index out of range"), undefined) : extensions.$array[extensions.$offset + i] = $internalize(ext[i], $String));
			i = i + (1) >> 0;
		}
		return extensions;
	};
	Context.prototype.GetSupportedExtensions = function() { return this.$val.GetSupportedExtensions(); };
	Context.ptr.prototype.GetTexParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getTexParameter(target, pname);
	};
	Context.prototype.GetTexParameter = function(target, pname) { return this.$val.GetTexParameter(target, pname); };
	Context.ptr.prototype.GetUniform = function(program, location) {
		var $ptr, c, location, program;
		c = this;
		return c.Object.getUniform(program, location);
	};
	Context.prototype.GetUniform = function(program, location) { return this.$val.GetUniform(program, location); };
	Context.ptr.prototype.GetUniformLocation = function(program, name) {
		var $ptr, c, name, program;
		c = this;
		return c.Object.getUniformLocation(program, $externalize(name, $String));
	};
	Context.prototype.GetUniformLocation = function(program, name) { return this.$val.GetUniformLocation(program, name); };
	Context.ptr.prototype.GetVertexAttrib = function(index, pname) {
		var $ptr, c, index, pname;
		c = this;
		return c.Object.getVertexAttrib(index, pname);
	};
	Context.prototype.GetVertexAttrib = function(index, pname) { return this.$val.GetVertexAttrib(index, pname); };
	Context.ptr.prototype.GetVertexAttribOffset = function(index, pname) {
		var $ptr, c, index, pname;
		c = this;
		return $parseInt(c.Object.getVertexAttribOffset(index, pname)) >> 0;
	};
	Context.prototype.GetVertexAttribOffset = function(index, pname) { return this.$val.GetVertexAttribOffset(index, pname); };
	Context.ptr.prototype.IsBuffer = function(buffer) {
		var $ptr, buffer, c;
		c = this;
		return !!(c.Object.isBuffer(buffer));
	};
	Context.prototype.IsBuffer = function(buffer) { return this.$val.IsBuffer(buffer); };
	Context.ptr.prototype.IsContextLost = function() {
		var $ptr, c;
		c = this;
		return !!(c.Object.isContextLost());
	};
	Context.prototype.IsContextLost = function() { return this.$val.IsContextLost(); };
	Context.ptr.prototype.IsFramebuffer = function(framebuffer) {
		var $ptr, c, framebuffer;
		c = this;
		return !!(c.Object.isFramebuffer(framebuffer));
	};
	Context.prototype.IsFramebuffer = function(framebuffer) { return this.$val.IsFramebuffer(framebuffer); };
	Context.ptr.prototype.IsProgram = function(program) {
		var $ptr, c, program;
		c = this;
		return !!(c.Object.isProgram(program));
	};
	Context.prototype.IsProgram = function(program) { return this.$val.IsProgram(program); };
	Context.ptr.prototype.IsRenderbuffer = function(renderbuffer) {
		var $ptr, c, renderbuffer;
		c = this;
		return !!(c.Object.isRenderbuffer(renderbuffer));
	};
	Context.prototype.IsRenderbuffer = function(renderbuffer) { return this.$val.IsRenderbuffer(renderbuffer); };
	Context.ptr.prototype.IsShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		return !!(c.Object.isShader(shader));
	};
	Context.prototype.IsShader = function(shader) { return this.$val.IsShader(shader); };
	Context.ptr.prototype.IsTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		return !!(c.Object.isTexture(texture));
	};
	Context.prototype.IsTexture = function(texture) { return this.$val.IsTexture(texture); };
	Context.ptr.prototype.IsEnabled = function(capability) {
		var $ptr, c, capability;
		c = this;
		return !!(c.Object.isEnabled(capability));
	};
	Context.prototype.IsEnabled = function(capability) { return this.$val.IsEnabled(capability); };
	Context.ptr.prototype.LineWidth = function(width) {
		var $ptr, c, width;
		c = this;
		c.Object.lineWidth(width);
	};
	Context.prototype.LineWidth = function(width) { return this.$val.LineWidth(width); };
	Context.ptr.prototype.LinkProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.linkProgram(program);
	};
	Context.prototype.LinkProgram = function(program) { return this.$val.LinkProgram(program); };
	Context.ptr.prototype.PixelStorei = function(pname, param) {
		var $ptr, c, param, pname;
		c = this;
		c.Object.pixelStorei(pname, param);
	};
	Context.prototype.PixelStorei = function(pname, param) { return this.$val.PixelStorei(pname, param); };
	Context.ptr.prototype.PolygonOffset = function(factor, units) {
		var $ptr, c, factor, units;
		c = this;
		c.Object.polygonOffset(factor, units);
	};
	Context.prototype.PolygonOffset = function(factor, units) { return this.$val.PolygonOffset(factor, units); };
	Context.ptr.prototype.ReadPixels = function(x, y, width, height, format, typ, pixels) {
		var $ptr, c, format, height, pixels, typ, width, x, y;
		c = this;
		c.Object.readPixels(x, y, width, height, format, typ, pixels);
	};
	Context.prototype.ReadPixels = function(x, y, width, height, format, typ, pixels) { return this.$val.ReadPixels(x, y, width, height, format, typ, pixels); };
	Context.ptr.prototype.RenderbufferStorage = function(target, internalFormat, width, height) {
		var $ptr, c, height, internalFormat, target, width;
		c = this;
		c.Object.renderbufferStorage(target, internalFormat, width, height);
	};
	Context.prototype.RenderbufferStorage = function(target, internalFormat, width, height) { return this.$val.RenderbufferStorage(target, internalFormat, width, height); };
	Context.ptr.prototype.Scissor = function(x, y, width, height) {
		var $ptr, c, height, width, x, y;
		c = this;
		c.Object.scissor(x, y, width, height);
	};
	Context.prototype.Scissor = function(x, y, width, height) { return this.$val.Scissor(x, y, width, height); };
	Context.ptr.prototype.ShaderSource = function(shader, source) {
		var $ptr, c, shader, source;
		c = this;
		c.Object.shaderSource(shader, $externalize(source, $String));
	};
	Context.prototype.ShaderSource = function(shader, source) { return this.$val.ShaderSource(shader, source); };
	Context.ptr.prototype.TexImage2D = function(target, level, internalFormat, format, kind, image) {
		var $ptr, c, format, image, internalFormat, kind, level, target;
		c = this;
		c.Object.texImage2D(target, level, internalFormat, format, kind, image);
	};
	Context.prototype.TexImage2D = function(target, level, internalFormat, format, kind, image) { return this.$val.TexImage2D(target, level, internalFormat, format, kind, image); };
	Context.ptr.prototype.TexParameteri = function(target, pname, param) {
		var $ptr, c, param, pname, target;
		c = this;
		c.Object.texParameteri(target, pname, param);
	};
	Context.prototype.TexParameteri = function(target, pname, param) { return this.$val.TexParameteri(target, pname, param); };
	Context.ptr.prototype.TexSubImage2D = function(target, level, xoffset, yoffset, format, typ, image) {
		var $ptr, c, format, image, level, target, typ, xoffset, yoffset;
		c = this;
		c.Object.texSubImage2D(target, level, xoffset, yoffset, format, typ, image);
	};
	Context.prototype.TexSubImage2D = function(target, level, xoffset, yoffset, format, typ, image) { return this.$val.TexSubImage2D(target, level, xoffset, yoffset, format, typ, image); };
	Context.ptr.prototype.Uniform1f = function(location, x) {
		var $ptr, c, location, x;
		c = this;
		c.Object.uniform1f(location, x);
	};
	Context.prototype.Uniform1f = function(location, x) { return this.$val.Uniform1f(location, x); };
	Context.ptr.prototype.Uniform1i = function(location, x) {
		var $ptr, c, location, x;
		c = this;
		c.Object.uniform1i(location, x);
	};
	Context.prototype.Uniform1i = function(location, x) { return this.$val.Uniform1i(location, x); };
	Context.ptr.prototype.Uniform2f = function(location, x, y) {
		var $ptr, c, location, x, y;
		c = this;
		c.Object.uniform2f(location, x, y);
	};
	Context.prototype.Uniform2f = function(location, x, y) { return this.$val.Uniform2f(location, x, y); };
	Context.ptr.prototype.Uniform2i = function(location, x, y) {
		var $ptr, c, location, x, y;
		c = this;
		c.Object.uniform2i(location, x, y);
	};
	Context.prototype.Uniform2i = function(location, x, y) { return this.$val.Uniform2i(location, x, y); };
	Context.ptr.prototype.Uniform3f = function(location, x, y, z) {
		var $ptr, c, location, x, y, z;
		c = this;
		c.Object.uniform3f(location, x, y, z);
	};
	Context.prototype.Uniform3f = function(location, x, y, z) { return this.$val.Uniform3f(location, x, y, z); };
	Context.ptr.prototype.Uniform3i = function(location, x, y, z) {
		var $ptr, c, location, x, y, z;
		c = this;
		c.Object.uniform3i(location, x, y, z);
	};
	Context.prototype.Uniform3i = function(location, x, y, z) { return this.$val.Uniform3i(location, x, y, z); };
	Context.ptr.prototype.Uniform4f = function(location, x, y, z, w) {
		var $ptr, c, location, w, x, y, z;
		c = this;
		c.Object.uniform4f(location, x, y, z, w);
	};
	Context.prototype.Uniform4f = function(location, x, y, z, w) { return this.$val.Uniform4f(location, x, y, z, w); };
	Context.ptr.prototype.Uniform4i = function(location, x, y, z, w) {
		var $ptr, c, location, w, x, y, z;
		c = this;
		c.Object.uniform4i(location, x, y, z, w);
	};
	Context.prototype.Uniform4i = function(location, x, y, z, w) { return this.$val.Uniform4i(location, x, y, z, w); };
	Context.ptr.prototype.UniformMatrix2fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix2fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix2fv = function(location, transpose, value) { return this.$val.UniformMatrix2fv(location, transpose, value); };
	Context.ptr.prototype.UniformMatrix3fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix3fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix3fv = function(location, transpose, value) { return this.$val.UniformMatrix3fv(location, transpose, value); };
	Context.ptr.prototype.UniformMatrix4fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix4fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix4fv = function(location, transpose, value) { return this.$val.UniformMatrix4fv(location, transpose, value); };
	Context.ptr.prototype.UseProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.useProgram(program);
	};
	Context.prototype.UseProgram = function(program) { return this.$val.UseProgram(program); };
	Context.ptr.prototype.ValidateProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.validateProgram(program);
	};
	Context.prototype.ValidateProgram = function(program) { return this.$val.ValidateProgram(program); };
	Context.ptr.prototype.VertexAttribPointer = function(index, size, typ, normal, stride, offset) {
		var $ptr, c, index, normal, offset, size, stride, typ;
		c = this;
		c.Object.vertexAttribPointer(index, size, typ, $externalize(normal, $Bool), stride, offset);
	};
	Context.prototype.VertexAttribPointer = function(index, size, typ, normal, stride, offset) { return this.$val.VertexAttribPointer(index, size, typ, normal, stride, offset); };
	Context.ptr.prototype.Viewport = function(x, y, width, height) {
		var $ptr, c, height, width, x, y;
		c = this;
		c.Object.viewport(x, y, width, height);
	};
	Context.prototype.Viewport = function(x, y, width, height) { return this.$val.Viewport(x, y, width, height); };
	ptrType.methods = [{prop: "GetContextAttributes", name: "GetContextAttributes", pkg: "", typ: $funcType([], [ContextAttributes], false)}, {prop: "ActiveTexture", name: "ActiveTexture", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AttachShader", name: "AttachShader", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [], false)}, {prop: "BindAttribLocation", name: "BindAttribLocation", pkg: "", typ: $funcType([ptrType$2, $Int, $String], [], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindFramebuffer", name: "BindFramebuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindRenderbuffer", name: "BindRenderbuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BlendColor", name: "BlendColor", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "BlendEquation", name: "BlendEquation", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "BlendEquationSeparate", name: "BlendEquationSeparate", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "BlendFuncSeparate", name: "BlendFuncSeparate", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "BufferData", name: "BufferData", pkg: "", typ: $funcType([$Int, $emptyInterface, $Int], [], false)}, {prop: "BufferSubData", name: "BufferSubData", pkg: "", typ: $funcType([$Int, $Int, $emptyInterface], [], false)}, {prop: "CheckFramebufferStatus", name: "CheckFramebufferStatus", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "ClearDepth", name: "ClearDepth", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ClearStencil", name: "ClearStencil", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ColorMask", name: "ColorMask", pkg: "", typ: $funcType([$Bool, $Bool, $Bool, $Bool], [], false)}, {prop: "CompileShader", name: "CompileShader", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "CopyTexImage2D", name: "CopyTexImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "CopyTexSubImage2D", name: "CopyTexSubImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "CreateBuffer", name: "CreateBuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateFramebuffer", name: "CreateFramebuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateProgram", name: "CreateProgram", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateRenderbuffer", name: "CreateRenderbuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateShader", name: "CreateShader", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}, {prop: "CreateTexture", name: "CreateTexture", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CullFace", name: "CullFace", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DeleteBuffer", name: "DeleteBuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteFramebuffer", name: "DeleteFramebuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteRenderbuffer", name: "DeleteRenderbuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteTexture", name: "DeleteTexture", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DepthFunc", name: "DepthFunc", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DepthMask", name: "DepthMask", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "DepthRange", name: "DepthRange", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "DetachShader", name: "DetachShader", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [], false)}, {prop: "Disable", name: "Disable", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DisableVertexAttribArray", name: "DisableVertexAttribArray", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DrawArrays", name: "DrawArrays", pkg: "", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "DrawElements", name: "DrawElements", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Finish", name: "Finish", pkg: "", typ: $funcType([], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}, {prop: "FrameBufferRenderBuffer", name: "FrameBufferRenderBuffer", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$2], [], false)}, {prop: "FramebufferTexture2D", name: "FramebufferTexture2D", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$2, $Int], [], false)}, {prop: "FrontFace", name: "FrontFace", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GenerateMipmap", name: "GenerateMipmap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetActiveAttrib", name: "GetActiveAttrib", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetActiveUniform", name: "GetActiveUniform", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetAttachedShaders", name: "GetAttachedShaders", pkg: "", typ: $funcType([ptrType$2], [sliceType], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([ptrType$2, $String], [$Int], false)}, {prop: "GetBufferParameter", name: "GetBufferParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetParameter", name: "GetParameter", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}, {prop: "GetError", name: "GetError", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetExtension", name: "GetExtension", pkg: "", typ: $funcType([$String], [ptrType$2], false)}, {prop: "GetFramebufferAttachmentParameter", name: "GetFramebufferAttachmentParameter", pkg: "", typ: $funcType([$Int, $Int, $Int], [ptrType$2], false)}, {prop: "GetProgramParameteri", name: "GetProgramParameteri", pkg: "", typ: $funcType([ptrType$2, $Int], [$Int], false)}, {prop: "GetProgramParameterb", name: "GetProgramParameterb", pkg: "", typ: $funcType([ptrType$2, $Int], [$Bool], false)}, {prop: "GetProgramInfoLog", name: "GetProgramInfoLog", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetRenderbufferParameter", name: "GetRenderbufferParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetShaderParameter", name: "GetShaderParameter", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetShaderParameterb", name: "GetShaderParameterb", pkg: "", typ: $funcType([ptrType$2, $Int], [$Bool], false)}, {prop: "GetShaderInfoLog", name: "GetShaderInfoLog", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetShaderSource", name: "GetShaderSource", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetSupportedExtensions", name: "GetSupportedExtensions", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "GetTexParameter", name: "GetTexParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetUniform", name: "GetUniform", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([ptrType$2, $String], [ptrType$2], false)}, {prop: "GetVertexAttrib", name: "GetVertexAttrib", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetVertexAttribOffset", name: "GetVertexAttribOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "IsBuffer", name: "IsBuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsContextLost", name: "IsContextLost", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsFramebuffer", name: "IsFramebuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsProgram", name: "IsProgram", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsRenderbuffer", name: "IsRenderbuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsShader", name: "IsShader", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsTexture", name: "IsTexture", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsEnabled", name: "IsEnabled", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "LineWidth", name: "LineWidth", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "LinkProgram", name: "LinkProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "PixelStorei", name: "PixelStorei", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "PolygonOffset", name: "PolygonOffset", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "ReadPixels", name: "ReadPixels", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "RenderbufferStorage", name: "RenderbufferStorage", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Scissor", name: "Scissor", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "ShaderSource", name: "ShaderSource", pkg: "", typ: $funcType([ptrType$2, $String], [], false)}, {prop: "TexImage2D", name: "TexImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "TexParameteri", name: "TexParameteri", pkg: "", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "TexSubImage2D", name: "TexSubImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "Uniform1f", name: "Uniform1f", pkg: "", typ: $funcType([ptrType$2, $Float32], [], false)}, {prop: "Uniform1i", name: "Uniform1i", pkg: "", typ: $funcType([ptrType$2, $Int], [], false)}, {prop: "Uniform2f", name: "Uniform2f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32], [], false)}, {prop: "Uniform2i", name: "Uniform2i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int], [], false)}, {prop: "Uniform3f", name: "Uniform3f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32, $Float32], [], false)}, {prop: "Uniform3i", name: "Uniform3i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int, $Int], [], false)}, {prop: "Uniform4f", name: "Uniform4f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "Uniform4i", name: "Uniform4i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int, $Int, $Int], [], false)}, {prop: "UniformMatrix2fv", name: "UniformMatrix2fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UniformMatrix3fv", name: "UniformMatrix3fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UniformMatrix4fv", name: "UniformMatrix4fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "ValidateProgram", name: "ValidateProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "VertexAttribPointer", name: "VertexAttribPointer", pkg: "", typ: $funcType([$Int, $Int, $Int, $Bool, $Int, $Int], [], false)}, {prop: "Viewport", name: "Viewport", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}];
	ContextAttributes.init("", [{prop: "Alpha", name: "Alpha", exported: true, typ: $Bool, tag: ""}, {prop: "Depth", name: "Depth", exported: true, typ: $Bool, tag: ""}, {prop: "Stencil", name: "Stencil", exported: true, typ: $Bool, tag: ""}, {prop: "Antialias", name: "Antialias", exported: true, typ: $Bool, tag: ""}, {prop: "PremultipliedAlpha", name: "PremultipliedAlpha", exported: true, typ: $Bool, tag: ""}, {prop: "PreserveDrawingBuffer", name: "PreserveDrawingBuffer", exported: true, typ: $Bool, tag: ""}]);
	Context.init("", [{prop: "Object", name: "", exported: true, typ: ptrType$2, tag: ""}, {prop: "ARRAY_BUFFER", name: "ARRAY_BUFFER", exported: true, typ: $Int, tag: "js:\"ARRAY_BUFFER\""}, {prop: "ARRAY_BUFFER_BINDING", name: "ARRAY_BUFFER_BINDING", exported: true, typ: $Int, tag: "js:\"ARRAY_BUFFER_BINDING\""}, {prop: "ATTACHED_SHADERS", name: "ATTACHED_SHADERS", exported: true, typ: $Int, tag: "js:\"ATTACHED_SHADERS\""}, {prop: "BACK", name: "BACK", exported: true, typ: $Int, tag: "js:\"BACK\""}, {prop: "BLEND", name: "BLEND", exported: true, typ: $Int, tag: "js:\"BLEND\""}, {prop: "BLEND_COLOR", name: "BLEND_COLOR", exported: true, typ: $Int, tag: "js:\"BLEND_COLOR\""}, {prop: "BLEND_DST_ALPHA", name: "BLEND_DST_ALPHA", exported: true, typ: $Int, tag: "js:\"BLEND_DST_ALPHA\""}, {prop: "BLEND_DST_RGB", name: "BLEND_DST_RGB", exported: true, typ: $Int, tag: "js:\"BLEND_DST_RGB\""}, {prop: "BLEND_EQUATION", name: "BLEND_EQUATION", exported: true, typ: $Int, tag: "js:\"BLEND_EQUATION\""}, {prop: "BLEND_EQUATION_ALPHA", name: "BLEND_EQUATION_ALPHA", exported: true, typ: $Int, tag: "js:\"BLEND_EQUATION_ALPHA\""}, {prop: "BLEND_EQUATION_RGB", name: "BLEND_EQUATION_RGB", exported: true, typ: $Int, tag: "js:\"BLEND_EQUATION_RGB\""}, {prop: "BLEND_SRC_ALPHA", name: "BLEND_SRC_ALPHA", exported: true, typ: $Int, tag: "js:\"BLEND_SRC_ALPHA\""}, {prop: "BLEND_SRC_RGB", name: "BLEND_SRC_RGB", exported: true, typ: $Int, tag: "js:\"BLEND_SRC_RGB\""}, {prop: "BLUE_BITS", name: "BLUE_BITS", exported: true, typ: $Int, tag: "js:\"BLUE_BITS\""}, {prop: "BOOL", name: "BOOL", exported: true, typ: $Int, tag: "js:\"BOOL\""}, {prop: "BOOL_VEC2", name: "BOOL_VEC2", exported: true, typ: $Int, tag: "js:\"BOOL_VEC2\""}, {prop: "BOOL_VEC3", name: "BOOL_VEC3", exported: true, typ: $Int, tag: "js:\"BOOL_VEC3\""}, {prop: "BOOL_VEC4", name: "BOOL_VEC4", exported: true, typ: $Int, tag: "js:\"BOOL_VEC4\""}, {prop: "BROWSER_DEFAULT_WEBGL", name: "BROWSER_DEFAULT_WEBGL", exported: true, typ: $Int, tag: "js:\"BROWSER_DEFAULT_WEBGL\""}, {prop: "BUFFER_SIZE", name: "BUFFER_SIZE", exported: true, typ: $Int, tag: "js:\"BUFFER_SIZE\""}, {prop: "BUFFER_USAGE", name: "BUFFER_USAGE", exported: true, typ: $Int, tag: "js:\"BUFFER_USAGE\""}, {prop: "BYTE", name: "BYTE", exported: true, typ: $Int, tag: "js:\"BYTE\""}, {prop: "CCW", name: "CCW", exported: true, typ: $Int, tag: "js:\"CCW\""}, {prop: "CLAMP_TO_EDGE", name: "CLAMP_TO_EDGE", exported: true, typ: $Int, tag: "js:\"CLAMP_TO_EDGE\""}, {prop: "COLOR_ATTACHMENT0", name: "COLOR_ATTACHMENT0", exported: true, typ: $Int, tag: "js:\"COLOR_ATTACHMENT0\""}, {prop: "COLOR_BUFFER_BIT", name: "COLOR_BUFFER_BIT", exported: true, typ: $Int, tag: "js:\"COLOR_BUFFER_BIT\""}, {prop: "COLOR_CLEAR_VALUE", name: "COLOR_CLEAR_VALUE", exported: true, typ: $Int, tag: "js:\"COLOR_CLEAR_VALUE\""}, {prop: "COLOR_WRITEMASK", name: "COLOR_WRITEMASK", exported: true, typ: $Int, tag: "js:\"COLOR_WRITEMASK\""}, {prop: "COMPILE_STATUS", name: "COMPILE_STATUS", exported: true, typ: $Int, tag: "js:\"COMPILE_STATUS\""}, {prop: "COMPRESSED_TEXTURE_FORMATS", name: "COMPRESSED_TEXTURE_FORMATS", exported: true, typ: $Int, tag: "js:\"COMPRESSED_TEXTURE_FORMATS\""}, {prop: "CONSTANT_ALPHA", name: "CONSTANT_ALPHA", exported: true, typ: $Int, tag: "js:\"CONSTANT_ALPHA\""}, {prop: "CONSTANT_COLOR", name: "CONSTANT_COLOR", exported: true, typ: $Int, tag: "js:\"CONSTANT_COLOR\""}, {prop: "CONTEXT_LOST_WEBGL", name: "CONTEXT_LOST_WEBGL", exported: true, typ: $Int, tag: "js:\"CONTEXT_LOST_WEBGL\""}, {prop: "CULL_FACE", name: "CULL_FACE", exported: true, typ: $Int, tag: "js:\"CULL_FACE\""}, {prop: "CULL_FACE_MODE", name: "CULL_FACE_MODE", exported: true, typ: $Int, tag: "js:\"CULL_FACE_MODE\""}, {prop: "CURRENT_PROGRAM", name: "CURRENT_PROGRAM", exported: true, typ: $Int, tag: "js:\"CURRENT_PROGRAM\""}, {prop: "CURRENT_VERTEX_ATTRIB", name: "CURRENT_VERTEX_ATTRIB", exported: true, typ: $Int, tag: "js:\"CURRENT_VERTEX_ATTRIB\""}, {prop: "CW", name: "CW", exported: true, typ: $Int, tag: "js:\"CW\""}, {prop: "DECR", name: "DECR", exported: true, typ: $Int, tag: "js:\"DECR\""}, {prop: "DECR_WRAP", name: "DECR_WRAP", exported: true, typ: $Int, tag: "js:\"DECR_WRAP\""}, {prop: "DELETE_STATUS", name: "DELETE_STATUS", exported: true, typ: $Int, tag: "js:\"DELETE_STATUS\""}, {prop: "DEPTH_ATTACHMENT", name: "DEPTH_ATTACHMENT", exported: true, typ: $Int, tag: "js:\"DEPTH_ATTACHMENT\""}, {prop: "DEPTH_BITS", name: "DEPTH_BITS", exported: true, typ: $Int, tag: "js:\"DEPTH_BITS\""}, {prop: "DEPTH_BUFFER_BIT", name: "DEPTH_BUFFER_BIT", exported: true, typ: $Int, tag: "js:\"DEPTH_BUFFER_BIT\""}, {prop: "DEPTH_CLEAR_VALUE", name: "DEPTH_CLEAR_VALUE", exported: true, typ: $Int, tag: "js:\"DEPTH_CLEAR_VALUE\""}, {prop: "DEPTH_COMPONENT", name: "DEPTH_COMPONENT", exported: true, typ: $Int, tag: "js:\"DEPTH_COMPONENT\""}, {prop: "DEPTH_COMPONENT16", name: "DEPTH_COMPONENT16", exported: true, typ: $Int, tag: "js:\"DEPTH_COMPONENT16\""}, {prop: "DEPTH_FUNC", name: "DEPTH_FUNC", exported: true, typ: $Int, tag: "js:\"DEPTH_FUNC\""}, {prop: "DEPTH_RANGE", name: "DEPTH_RANGE", exported: true, typ: $Int, tag: "js:\"DEPTH_RANGE\""}, {prop: "DEPTH_STENCIL", name: "DEPTH_STENCIL", exported: true, typ: $Int, tag: "js:\"DEPTH_STENCIL\""}, {prop: "DEPTH_STENCIL_ATTACHMENT", name: "DEPTH_STENCIL_ATTACHMENT", exported: true, typ: $Int, tag: "js:\"DEPTH_STENCIL_ATTACHMENT\""}, {prop: "DEPTH_TEST", name: "DEPTH_TEST", exported: true, typ: $Int, tag: "js:\"DEPTH_TEST\""}, {prop: "DEPTH_WRITEMASK", name: "DEPTH_WRITEMASK", exported: true, typ: $Int, tag: "js:\"DEPTH_WRITEMASK\""}, {prop: "DITHER", name: "DITHER", exported: true, typ: $Int, tag: "js:\"DITHER\""}, {prop: "DONT_CARE", name: "DONT_CARE", exported: true, typ: $Int, tag: "js:\"DONT_CARE\""}, {prop: "DST_ALPHA", name: "DST_ALPHA", exported: true, typ: $Int, tag: "js:\"DST_ALPHA\""}, {prop: "DST_COLOR", name: "DST_COLOR", exported: true, typ: $Int, tag: "js:\"DST_COLOR\""}, {prop: "DYNAMIC_DRAW", name: "DYNAMIC_DRAW", exported: true, typ: $Int, tag: "js:\"DYNAMIC_DRAW\""}, {prop: "ELEMENT_ARRAY_BUFFER", name: "ELEMENT_ARRAY_BUFFER", exported: true, typ: $Int, tag: "js:\"ELEMENT_ARRAY_BUFFER\""}, {prop: "ELEMENT_ARRAY_BUFFER_BINDING", name: "ELEMENT_ARRAY_BUFFER_BINDING", exported: true, typ: $Int, tag: "js:\"ELEMENT_ARRAY_BUFFER_BINDING\""}, {prop: "EQUAL", name: "EQUAL", exported: true, typ: $Int, tag: "js:\"EQUAL\""}, {prop: "FASTEST", name: "FASTEST", exported: true, typ: $Int, tag: "js:\"FASTEST\""}, {prop: "FLOAT", name: "FLOAT", exported: true, typ: $Int, tag: "js:\"FLOAT\""}, {prop: "FLOAT_MAT2", name: "FLOAT_MAT2", exported: true, typ: $Int, tag: "js:\"FLOAT_MAT2\""}, {prop: "FLOAT_MAT3", name: "FLOAT_MAT3", exported: true, typ: $Int, tag: "js:\"FLOAT_MAT3\""}, {prop: "FLOAT_MAT4", name: "FLOAT_MAT4", exported: true, typ: $Int, tag: "js:\"FLOAT_MAT4\""}, {prop: "FLOAT_VEC2", name: "FLOAT_VEC2", exported: true, typ: $Int, tag: "js:\"FLOAT_VEC2\""}, {prop: "FLOAT_VEC3", name: "FLOAT_VEC3", exported: true, typ: $Int, tag: "js:\"FLOAT_VEC3\""}, {prop: "FLOAT_VEC4", name: "FLOAT_VEC4", exported: true, typ: $Int, tag: "js:\"FLOAT_VEC4\""}, {prop: "FRAGMENT_SHADER", name: "FRAGMENT_SHADER", exported: true, typ: $Int, tag: "js:\"FRAGMENT_SHADER\""}, {prop: "FRAMEBUFFER", name: "FRAMEBUFFER", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER\""}, {prop: "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", name: "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\""}, {prop: "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", name: "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\""}, {prop: "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", name: "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\""}, {prop: "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", name: "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\""}, {prop: "FRAMEBUFFER_BINDING", name: "FRAMEBUFFER_BINDING", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_BINDING\""}, {prop: "FRAMEBUFFER_COMPLETE", name: "FRAMEBUFFER_COMPLETE", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_COMPLETE\""}, {prop: "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", name: "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\""}, {prop: "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", name: "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\""}, {prop: "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", name: "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\""}, {prop: "FRAMEBUFFER_UNSUPPORTED", name: "FRAMEBUFFER_UNSUPPORTED", exported: true, typ: $Int, tag: "js:\"FRAMEBUFFER_UNSUPPORTED\""}, {prop: "FRONT", name: "FRONT", exported: true, typ: $Int, tag: "js:\"FRONT\""}, {prop: "FRONT_AND_BACK", name: "FRONT_AND_BACK", exported: true, typ: $Int, tag: "js:\"FRONT_AND_BACK\""}, {prop: "FRONT_FACE", name: "FRONT_FACE", exported: true, typ: $Int, tag: "js:\"FRONT_FACE\""}, {prop: "FUNC_ADD", name: "FUNC_ADD", exported: true, typ: $Int, tag: "js:\"FUNC_ADD\""}, {prop: "FUNC_REVERSE_SUBTRACT", name: "FUNC_REVERSE_SUBTRACT", exported: true, typ: $Int, tag: "js:\"FUNC_REVERSE_SUBTRACT\""}, {prop: "FUNC_SUBTRACT", name: "FUNC_SUBTRACT", exported: true, typ: $Int, tag: "js:\"FUNC_SUBTRACT\""}, {prop: "GENERATE_MIPMAP_HINT", name: "GENERATE_MIPMAP_HINT", exported: true, typ: $Int, tag: "js:\"GENERATE_MIPMAP_HINT\""}, {prop: "GEQUAL", name: "GEQUAL", exported: true, typ: $Int, tag: "js:\"GEQUAL\""}, {prop: "GREATER", name: "GREATER", exported: true, typ: $Int, tag: "js:\"GREATER\""}, {prop: "GREEN_BITS", name: "GREEN_BITS", exported: true, typ: $Int, tag: "js:\"GREEN_BITS\""}, {prop: "HIGH_FLOAT", name: "HIGH_FLOAT", exported: true, typ: $Int, tag: "js:\"HIGH_FLOAT\""}, {prop: "HIGH_INT", name: "HIGH_INT", exported: true, typ: $Int, tag: "js:\"HIGH_INT\""}, {prop: "INCR", name: "INCR", exported: true, typ: $Int, tag: "js:\"INCR\""}, {prop: "INCR_WRAP", name: "INCR_WRAP", exported: true, typ: $Int, tag: "js:\"INCR_WRAP\""}, {prop: "INFO_LOG_LENGTH", name: "INFO_LOG_LENGTH", exported: true, typ: $Int, tag: "js:\"INFO_LOG_LENGTH\""}, {prop: "INT", name: "INT", exported: true, typ: $Int, tag: "js:\"INT\""}, {prop: "INT_VEC2", name: "INT_VEC2", exported: true, typ: $Int, tag: "js:\"INT_VEC2\""}, {prop: "INT_VEC3", name: "INT_VEC3", exported: true, typ: $Int, tag: "js:\"INT_VEC3\""}, {prop: "INT_VEC4", name: "INT_VEC4", exported: true, typ: $Int, tag: "js:\"INT_VEC4\""}, {prop: "INVALID_ENUM", name: "INVALID_ENUM", exported: true, typ: $Int, tag: "js:\"INVALID_ENUM\""}, {prop: "INVALID_FRAMEBUFFER_OPERATION", name: "INVALID_FRAMEBUFFER_OPERATION", exported: true, typ: $Int, tag: "js:\"INVALID_FRAMEBUFFER_OPERATION\""}, {prop: "INVALID_OPERATION", name: "INVALID_OPERATION", exported: true, typ: $Int, tag: "js:\"INVALID_OPERATION\""}, {prop: "INVALID_VALUE", name: "INVALID_VALUE", exported: true, typ: $Int, tag: "js:\"INVALID_VALUE\""}, {prop: "INVERT", name: "INVERT", exported: true, typ: $Int, tag: "js:\"INVERT\""}, {prop: "KEEP", name: "KEEP", exported: true, typ: $Int, tag: "js:\"KEEP\""}, {prop: "LEQUAL", name: "LEQUAL", exported: true, typ: $Int, tag: "js:\"LEQUAL\""}, {prop: "LESS", name: "LESS", exported: true, typ: $Int, tag: "js:\"LESS\""}, {prop: "LINEAR", name: "LINEAR", exported: true, typ: $Int, tag: "js:\"LINEAR\""}, {prop: "LINEAR_MIPMAP_LINEAR", name: "LINEAR_MIPMAP_LINEAR", exported: true, typ: $Int, tag: "js:\"LINEAR_MIPMAP_LINEAR\""}, {prop: "LINEAR_MIPMAP_NEAREST", name: "LINEAR_MIPMAP_NEAREST", exported: true, typ: $Int, tag: "js:\"LINEAR_MIPMAP_NEAREST\""}, {prop: "LINES", name: "LINES", exported: true, typ: $Int, tag: "js:\"LINES\""}, {prop: "LINE_LOOP", name: "LINE_LOOP", exported: true, typ: $Int, tag: "js:\"LINE_LOOP\""}, {prop: "LINE_STRIP", name: "LINE_STRIP", exported: true, typ: $Int, tag: "js:\"LINE_STRIP\""}, {prop: "LINE_WIDTH", name: "LINE_WIDTH", exported: true, typ: $Int, tag: "js:\"LINE_WIDTH\""}, {prop: "LINK_STATUS", name: "LINK_STATUS", exported: true, typ: $Int, tag: "js:\"LINK_STATUS\""}, {prop: "LOW_FLOAT", name: "LOW_FLOAT", exported: true, typ: $Int, tag: "js:\"LOW_FLOAT\""}, {prop: "LOW_INT", name: "LOW_INT", exported: true, typ: $Int, tag: "js:\"LOW_INT\""}, {prop: "LUMINANCE", name: "LUMINANCE", exported: true, typ: $Int, tag: "js:\"LUMINANCE\""}, {prop: "LUMINANCE_ALPHA", name: "LUMINANCE_ALPHA", exported: true, typ: $Int, tag: "js:\"LUMINANCE_ALPHA\""}, {prop: "MAX_COMBINED_TEXTURE_IMAGE_UNITS", name: "MAX_COMBINED_TEXTURE_IMAGE_UNITS", exported: true, typ: $Int, tag: "js:\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_CUBE_MAP_TEXTURE_SIZE", name: "MAX_CUBE_MAP_TEXTURE_SIZE", exported: true, typ: $Int, tag: "js:\"MAX_CUBE_MAP_TEXTURE_SIZE\""}, {prop: "MAX_FRAGMENT_UNIFORM_VECTORS", name: "MAX_FRAGMENT_UNIFORM_VECTORS", exported: true, typ: $Int, tag: "js:\"MAX_FRAGMENT_UNIFORM_VECTORS\""}, {prop: "MAX_RENDERBUFFER_SIZE", name: "MAX_RENDERBUFFER_SIZE", exported: true, typ: $Int, tag: "js:\"MAX_RENDERBUFFER_SIZE\""}, {prop: "MAX_TEXTURE_IMAGE_UNITS", name: "MAX_TEXTURE_IMAGE_UNITS", exported: true, typ: $Int, tag: "js:\"MAX_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_TEXTURE_SIZE", name: "MAX_TEXTURE_SIZE", exported: true, typ: $Int, tag: "js:\"MAX_TEXTURE_SIZE\""}, {prop: "MAX_VARYING_VECTORS", name: "MAX_VARYING_VECTORS", exported: true, typ: $Int, tag: "js:\"MAX_VARYING_VECTORS\""}, {prop: "MAX_VERTEX_ATTRIBS", name: "MAX_VERTEX_ATTRIBS", exported: true, typ: $Int, tag: "js:\"MAX_VERTEX_ATTRIBS\""}, {prop: "MAX_VERTEX_TEXTURE_IMAGE_UNITS", name: "MAX_VERTEX_TEXTURE_IMAGE_UNITS", exported: true, typ: $Int, tag: "js:\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_VERTEX_UNIFORM_VECTORS", name: "MAX_VERTEX_UNIFORM_VECTORS", exported: true, typ: $Int, tag: "js:\"MAX_VERTEX_UNIFORM_VECTORS\""}, {prop: "MAX_VIEWPORT_DIMS", name: "MAX_VIEWPORT_DIMS", exported: true, typ: $Int, tag: "js:\"MAX_VIEWPORT_DIMS\""}, {prop: "MEDIUM_FLOAT", name: "MEDIUM_FLOAT", exported: true, typ: $Int, tag: "js:\"MEDIUM_FLOAT\""}, {prop: "MEDIUM_INT", name: "MEDIUM_INT", exported: true, typ: $Int, tag: "js:\"MEDIUM_INT\""}, {prop: "MIRRORED_REPEAT", name: "MIRRORED_REPEAT", exported: true, typ: $Int, tag: "js:\"MIRRORED_REPEAT\""}, {prop: "NEAREST", name: "NEAREST", exported: true, typ: $Int, tag: "js:\"NEAREST\""}, {prop: "NEAREST_MIPMAP_LINEAR", name: "NEAREST_MIPMAP_LINEAR", exported: true, typ: $Int, tag: "js:\"NEAREST_MIPMAP_LINEAR\""}, {prop: "NEAREST_MIPMAP_NEAREST", name: "NEAREST_MIPMAP_NEAREST", exported: true, typ: $Int, tag: "js:\"NEAREST_MIPMAP_NEAREST\""}, {prop: "NEVER", name: "NEVER", exported: true, typ: $Int, tag: "js:\"NEVER\""}, {prop: "NICEST", name: "NICEST", exported: true, typ: $Int, tag: "js:\"NICEST\""}, {prop: "NONE", name: "NONE", exported: true, typ: $Int, tag: "js:\"NONE\""}, {prop: "NOTEQUAL", name: "NOTEQUAL", exported: true, typ: $Int, tag: "js:\"NOTEQUAL\""}, {prop: "NO_ERROR", name: "NO_ERROR", exported: true, typ: $Int, tag: "js:\"NO_ERROR\""}, {prop: "NUM_COMPRESSED_TEXTURE_FORMATS", name: "NUM_COMPRESSED_TEXTURE_FORMATS", exported: true, typ: $Int, tag: "js:\"NUM_COMPRESSED_TEXTURE_FORMATS\""}, {prop: "ONE", name: "ONE", exported: true, typ: $Int, tag: "js:\"ONE\""}, {prop: "ONE_MINUS_CONSTANT_ALPHA", name: "ONE_MINUS_CONSTANT_ALPHA", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_CONSTANT_ALPHA\""}, {prop: "ONE_MINUS_CONSTANT_COLOR", name: "ONE_MINUS_CONSTANT_COLOR", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_CONSTANT_COLOR\""}, {prop: "ONE_MINUS_DST_ALPHA", name: "ONE_MINUS_DST_ALPHA", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_DST_ALPHA\""}, {prop: "ONE_MINUS_DST_COLOR", name: "ONE_MINUS_DST_COLOR", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_DST_COLOR\""}, {prop: "ONE_MINUS_SRC_ALPHA", name: "ONE_MINUS_SRC_ALPHA", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_SRC_ALPHA\""}, {prop: "ONE_MINUS_SRC_COLOR", name: "ONE_MINUS_SRC_COLOR", exported: true, typ: $Int, tag: "js:\"ONE_MINUS_SRC_COLOR\""}, {prop: "OUT_OF_MEMORY", name: "OUT_OF_MEMORY", exported: true, typ: $Int, tag: "js:\"OUT_OF_MEMORY\""}, {prop: "PACK_ALIGNMENT", name: "PACK_ALIGNMENT", exported: true, typ: $Int, tag: "js:\"PACK_ALIGNMENT\""}, {prop: "POINTS", name: "POINTS", exported: true, typ: $Int, tag: "js:\"POINTS\""}, {prop: "POLYGON_OFFSET_FACTOR", name: "POLYGON_OFFSET_FACTOR", exported: true, typ: $Int, tag: "js:\"POLYGON_OFFSET_FACTOR\""}, {prop: "POLYGON_OFFSET_FILL", name: "POLYGON_OFFSET_FILL", exported: true, typ: $Int, tag: "js:\"POLYGON_OFFSET_FILL\""}, {prop: "POLYGON_OFFSET_UNITS", name: "POLYGON_OFFSET_UNITS", exported: true, typ: $Int, tag: "js:\"POLYGON_OFFSET_UNITS\""}, {prop: "RED_BITS", name: "RED_BITS", exported: true, typ: $Int, tag: "js:\"RED_BITS\""}, {prop: "RENDERBUFFER", name: "RENDERBUFFER", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER\""}, {prop: "RENDERBUFFER_ALPHA_SIZE", name: "RENDERBUFFER_ALPHA_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_ALPHA_SIZE\""}, {prop: "RENDERBUFFER_BINDING", name: "RENDERBUFFER_BINDING", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_BINDING\""}, {prop: "RENDERBUFFER_BLUE_SIZE", name: "RENDERBUFFER_BLUE_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_BLUE_SIZE\""}, {prop: "RENDERBUFFER_DEPTH_SIZE", name: "RENDERBUFFER_DEPTH_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_DEPTH_SIZE\""}, {prop: "RENDERBUFFER_GREEN_SIZE", name: "RENDERBUFFER_GREEN_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_GREEN_SIZE\""}, {prop: "RENDERBUFFER_HEIGHT", name: "RENDERBUFFER_HEIGHT", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_HEIGHT\""}, {prop: "RENDERBUFFER_INTERNAL_FORMAT", name: "RENDERBUFFER_INTERNAL_FORMAT", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_INTERNAL_FORMAT\""}, {prop: "RENDERBUFFER_RED_SIZE", name: "RENDERBUFFER_RED_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_RED_SIZE\""}, {prop: "RENDERBUFFER_STENCIL_SIZE", name: "RENDERBUFFER_STENCIL_SIZE", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_STENCIL_SIZE\""}, {prop: "RENDERBUFFER_WIDTH", name: "RENDERBUFFER_WIDTH", exported: true, typ: $Int, tag: "js:\"RENDERBUFFER_WIDTH\""}, {prop: "RENDERER", name: "RENDERER", exported: true, typ: $Int, tag: "js:\"RENDERER\""}, {prop: "REPEAT", name: "REPEAT", exported: true, typ: $Int, tag: "js:\"REPEAT\""}, {prop: "REPLACE", name: "REPLACE", exported: true, typ: $Int, tag: "js:\"REPLACE\""}, {prop: "RGB", name: "RGB", exported: true, typ: $Int, tag: "js:\"RGB\""}, {prop: "RGB5_A1", name: "RGB5_A1", exported: true, typ: $Int, tag: "js:\"RGB5_A1\""}, {prop: "RGB565", name: "RGB565", exported: true, typ: $Int, tag: "js:\"RGB565\""}, {prop: "RGBA", name: "RGBA", exported: true, typ: $Int, tag: "js:\"RGBA\""}, {prop: "RGBA4", name: "RGBA4", exported: true, typ: $Int, tag: "js:\"RGBA4\""}, {prop: "SAMPLER_2D", name: "SAMPLER_2D", exported: true, typ: $Int, tag: "js:\"SAMPLER_2D\""}, {prop: "SAMPLER_CUBE", name: "SAMPLER_CUBE", exported: true, typ: $Int, tag: "js:\"SAMPLER_CUBE\""}, {prop: "SAMPLES", name: "SAMPLES", exported: true, typ: $Int, tag: "js:\"SAMPLES\""}, {prop: "SAMPLE_ALPHA_TO_COVERAGE", name: "SAMPLE_ALPHA_TO_COVERAGE", exported: true, typ: $Int, tag: "js:\"SAMPLE_ALPHA_TO_COVERAGE\""}, {prop: "SAMPLE_BUFFERS", name: "SAMPLE_BUFFERS", exported: true, typ: $Int, tag: "js:\"SAMPLE_BUFFERS\""}, {prop: "SAMPLE_COVERAGE", name: "SAMPLE_COVERAGE", exported: true, typ: $Int, tag: "js:\"SAMPLE_COVERAGE\""}, {prop: "SAMPLE_COVERAGE_INVERT", name: "SAMPLE_COVERAGE_INVERT", exported: true, typ: $Int, tag: "js:\"SAMPLE_COVERAGE_INVERT\""}, {prop: "SAMPLE_COVERAGE_VALUE", name: "SAMPLE_COVERAGE_VALUE", exported: true, typ: $Int, tag: "js:\"SAMPLE_COVERAGE_VALUE\""}, {prop: "SCISSOR_BOX", name: "SCISSOR_BOX", exported: true, typ: $Int, tag: "js:\"SCISSOR_BOX\""}, {prop: "SCISSOR_TEST", name: "SCISSOR_TEST", exported: true, typ: $Int, tag: "js:\"SCISSOR_TEST\""}, {prop: "SHADER_COMPILER", name: "SHADER_COMPILER", exported: true, typ: $Int, tag: "js:\"SHADER_COMPILER\""}, {prop: "SHADER_SOURCE_LENGTH", name: "SHADER_SOURCE_LENGTH", exported: true, typ: $Int, tag: "js:\"SHADER_SOURCE_LENGTH\""}, {prop: "SHADER_TYPE", name: "SHADER_TYPE", exported: true, typ: $Int, tag: "js:\"SHADER_TYPE\""}, {prop: "SHADING_LANGUAGE_VERSION", name: "SHADING_LANGUAGE_VERSION", exported: true, typ: $Int, tag: "js:\"SHADING_LANGUAGE_VERSION\""}, {prop: "SHORT", name: "SHORT", exported: true, typ: $Int, tag: "js:\"SHORT\""}, {prop: "SRC_ALPHA", name: "SRC_ALPHA", exported: true, typ: $Int, tag: "js:\"SRC_ALPHA\""}, {prop: "SRC_ALPHA_SATURATE", name: "SRC_ALPHA_SATURATE", exported: true, typ: $Int, tag: "js:\"SRC_ALPHA_SATURATE\""}, {prop: "SRC_COLOR", name: "SRC_COLOR", exported: true, typ: $Int, tag: "js:\"SRC_COLOR\""}, {prop: "STATIC_DRAW", name: "STATIC_DRAW", exported: true, typ: $Int, tag: "js:\"STATIC_DRAW\""}, {prop: "STENCIL_ATTACHMENT", name: "STENCIL_ATTACHMENT", exported: true, typ: $Int, tag: "js:\"STENCIL_ATTACHMENT\""}, {prop: "STENCIL_BACK_FAIL", name: "STENCIL_BACK_FAIL", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_FAIL\""}, {prop: "STENCIL_BACK_FUNC", name: "STENCIL_BACK_FUNC", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_FUNC\""}, {prop: "STENCIL_BACK_PASS_DEPTH_FAIL", name: "STENCIL_BACK_PASS_DEPTH_FAIL", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_PASS_DEPTH_FAIL\""}, {prop: "STENCIL_BACK_PASS_DEPTH_PASS", name: "STENCIL_BACK_PASS_DEPTH_PASS", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_PASS_DEPTH_PASS\""}, {prop: "STENCIL_BACK_REF", name: "STENCIL_BACK_REF", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_REF\""}, {prop: "STENCIL_BACK_VALUE_MASK", name: "STENCIL_BACK_VALUE_MASK", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_VALUE_MASK\""}, {prop: "STENCIL_BACK_WRITEMASK", name: "STENCIL_BACK_WRITEMASK", exported: true, typ: $Int, tag: "js:\"STENCIL_BACK_WRITEMASK\""}, {prop: "STENCIL_BITS", name: "STENCIL_BITS", exported: true, typ: $Int, tag: "js:\"STENCIL_BITS\""}, {prop: "STENCIL_BUFFER_BIT", name: "STENCIL_BUFFER_BIT", exported: true, typ: $Int, tag: "js:\"STENCIL_BUFFER_BIT\""}, {prop: "STENCIL_CLEAR_VALUE", name: "STENCIL_CLEAR_VALUE", exported: true, typ: $Int, tag: "js:\"STENCIL_CLEAR_VALUE\""}, {prop: "STENCIL_FAIL", name: "STENCIL_FAIL", exported: true, typ: $Int, tag: "js:\"STENCIL_FAIL\""}, {prop: "STENCIL_FUNC", name: "STENCIL_FUNC", exported: true, typ: $Int, tag: "js:\"STENCIL_FUNC\""}, {prop: "STENCIL_INDEX", name: "STENCIL_INDEX", exported: true, typ: $Int, tag: "js:\"STENCIL_INDEX\""}, {prop: "STENCIL_INDEX8", name: "STENCIL_INDEX8", exported: true, typ: $Int, tag: "js:\"STENCIL_INDEX8\""}, {prop: "STENCIL_PASS_DEPTH_FAIL", name: "STENCIL_PASS_DEPTH_FAIL", exported: true, typ: $Int, tag: "js:\"STENCIL_PASS_DEPTH_FAIL\""}, {prop: "STENCIL_PASS_DEPTH_PASS", name: "STENCIL_PASS_DEPTH_PASS", exported: true, typ: $Int, tag: "js:\"STENCIL_PASS_DEPTH_PASS\""}, {prop: "STENCIL_REF", name: "STENCIL_REF", exported: true, typ: $Int, tag: "js:\"STENCIL_REF\""}, {prop: "STENCIL_TEST", name: "STENCIL_TEST", exported: true, typ: $Int, tag: "js:\"STENCIL_TEST\""}, {prop: "STENCIL_VALUE_MASK", name: "STENCIL_VALUE_MASK", exported: true, typ: $Int, tag: "js:\"STENCIL_VALUE_MASK\""}, {prop: "STENCIL_WRITEMASK", name: "STENCIL_WRITEMASK", exported: true, typ: $Int, tag: "js:\"STENCIL_WRITEMASK\""}, {prop: "STREAM_DRAW", name: "STREAM_DRAW", exported: true, typ: $Int, tag: "js:\"STREAM_DRAW\""}, {prop: "SUBPIXEL_BITS", name: "SUBPIXEL_BITS", exported: true, typ: $Int, tag: "js:\"SUBPIXEL_BITS\""}, {prop: "TEXTURE", name: "TEXTURE", exported: true, typ: $Int, tag: "js:\"TEXTURE\""}, {prop: "TEXTURE0", name: "TEXTURE0", exported: true, typ: $Int, tag: "js:\"TEXTURE0\""}, {prop: "TEXTURE1", name: "TEXTURE1", exported: true, typ: $Int, tag: "js:\"TEXTURE1\""}, {prop: "TEXTURE2", name: "TEXTURE2", exported: true, typ: $Int, tag: "js:\"TEXTURE2\""}, {prop: "TEXTURE3", name: "TEXTURE3", exported: true, typ: $Int, tag: "js:\"TEXTURE3\""}, {prop: "TEXTURE4", name: "TEXTURE4", exported: true, typ: $Int, tag: "js:\"TEXTURE4\""}, {prop: "TEXTURE5", name: "TEXTURE5", exported: true, typ: $Int, tag: "js:\"TEXTURE5\""}, {prop: "TEXTURE6", name: "TEXTURE6", exported: true, typ: $Int, tag: "js:\"TEXTURE6\""}, {prop: "TEXTURE7", name: "TEXTURE7", exported: true, typ: $Int, tag: "js:\"TEXTURE7\""}, {prop: "TEXTURE8", name: "TEXTURE8", exported: true, typ: $Int, tag: "js:\"TEXTURE8\""}, {prop: "TEXTURE9", name: "TEXTURE9", exported: true, typ: $Int, tag: "js:\"TEXTURE9\""}, {prop: "TEXTURE10", name: "TEXTURE10", exported: true, typ: $Int, tag: "js:\"TEXTURE10\""}, {prop: "TEXTURE11", name: "TEXTURE11", exported: true, typ: $Int, tag: "js:\"TEXTURE11\""}, {prop: "TEXTURE12", name: "TEXTURE12", exported: true, typ: $Int, tag: "js:\"TEXTURE12\""}, {prop: "TEXTURE13", name: "TEXTURE13", exported: true, typ: $Int, tag: "js:\"TEXTURE13\""}, {prop: "TEXTURE14", name: "TEXTURE14", exported: true, typ: $Int, tag: "js:\"TEXTURE14\""}, {prop: "TEXTURE15", name: "TEXTURE15", exported: true, typ: $Int, tag: "js:\"TEXTURE15\""}, {prop: "TEXTURE16", name: "TEXTURE16", exported: true, typ: $Int, tag: "js:\"TEXTURE16\""}, {prop: "TEXTURE17", name: "TEXTURE17", exported: true, typ: $Int, tag: "js:\"TEXTURE17\""}, {prop: "TEXTURE18", name: "TEXTURE18", exported: true, typ: $Int, tag: "js:\"TEXTURE18\""}, {prop: "TEXTURE19", name: "TEXTURE19", exported: true, typ: $Int, tag: "js:\"TEXTURE19\""}, {prop: "TEXTURE20", name: "TEXTURE20", exported: true, typ: $Int, tag: "js:\"TEXTURE20\""}, {prop: "TEXTURE21", name: "TEXTURE21", exported: true, typ: $Int, tag: "js:\"TEXTURE21\""}, {prop: "TEXTURE22", name: "TEXTURE22", exported: true, typ: $Int, tag: "js:\"TEXTURE22\""}, {prop: "TEXTURE23", name: "TEXTURE23", exported: true, typ: $Int, tag: "js:\"TEXTURE23\""}, {prop: "TEXTURE24", name: "TEXTURE24", exported: true, typ: $Int, tag: "js:\"TEXTURE24\""}, {prop: "TEXTURE25", name: "TEXTURE25", exported: true, typ: $Int, tag: "js:\"TEXTURE25\""}, {prop: "TEXTURE26", name: "TEXTURE26", exported: true, typ: $Int, tag: "js:\"TEXTURE26\""}, {prop: "TEXTURE27", name: "TEXTURE27", exported: true, typ: $Int, tag: "js:\"TEXTURE27\""}, {prop: "TEXTURE28", name: "TEXTURE28", exported: true, typ: $Int, tag: "js:\"TEXTURE28\""}, {prop: "TEXTURE29", name: "TEXTURE29", exported: true, typ: $Int, tag: "js:\"TEXTURE29\""}, {prop: "TEXTURE30", name: "TEXTURE30", exported: true, typ: $Int, tag: "js:\"TEXTURE30\""}, {prop: "TEXTURE31", name: "TEXTURE31", exported: true, typ: $Int, tag: "js:\"TEXTURE31\""}, {prop: "TEXTURE_2D", name: "TEXTURE_2D", exported: true, typ: $Int, tag: "js:\"TEXTURE_2D\""}, {prop: "TEXTURE_BINDING_2D", name: "TEXTURE_BINDING_2D", exported: true, typ: $Int, tag: "js:\"TEXTURE_BINDING_2D\""}, {prop: "TEXTURE_BINDING_CUBE_MAP", name: "TEXTURE_BINDING_CUBE_MAP", exported: true, typ: $Int, tag: "js:\"TEXTURE_BINDING_CUBE_MAP\""}, {prop: "TEXTURE_CUBE_MAP", name: "TEXTURE_CUBE_MAP", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_X", name: "TEXTURE_CUBE_MAP_NEGATIVE_X", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_X\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_Y", name: "TEXTURE_CUBE_MAP_NEGATIVE_Y", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_Y\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_Z", name: "TEXTURE_CUBE_MAP_NEGATIVE_Z", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_Z\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_X", name: "TEXTURE_CUBE_MAP_POSITIVE_X", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_X\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_Y", name: "TEXTURE_CUBE_MAP_POSITIVE_Y", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_Y\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_Z", name: "TEXTURE_CUBE_MAP_POSITIVE_Z", exported: true, typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_Z\""}, {prop: "TEXTURE_MAG_FILTER", name: "TEXTURE_MAG_FILTER", exported: true, typ: $Int, tag: "js:\"TEXTURE_MAG_FILTER\""}, {prop: "TEXTURE_MIN_FILTER", name: "TEXTURE_MIN_FILTER", exported: true, typ: $Int, tag: "js:\"TEXTURE_MIN_FILTER\""}, {prop: "TEXTURE_WRAP_S", name: "TEXTURE_WRAP_S", exported: true, typ: $Int, tag: "js:\"TEXTURE_WRAP_S\""}, {prop: "TEXTURE_WRAP_T", name: "TEXTURE_WRAP_T", exported: true, typ: $Int, tag: "js:\"TEXTURE_WRAP_T\""}, {prop: "TRIANGLES", name: "TRIANGLES", exported: true, typ: $Int, tag: "js:\"TRIANGLES\""}, {prop: "TRIANGLE_FAN", name: "TRIANGLE_FAN", exported: true, typ: $Int, tag: "js:\"TRIANGLE_FAN\""}, {prop: "TRIANGLE_STRIP", name: "TRIANGLE_STRIP", exported: true, typ: $Int, tag: "js:\"TRIANGLE_STRIP\""}, {prop: "UNPACK_ALIGNMENT", name: "UNPACK_ALIGNMENT", exported: true, typ: $Int, tag: "js:\"UNPACK_ALIGNMENT\""}, {prop: "UNPACK_COLORSPACE_CONVERSION_WEBGL", name: "UNPACK_COLORSPACE_CONVERSION_WEBGL", exported: true, typ: $Int, tag: "js:\"UNPACK_COLORSPACE_CONVERSION_WEBGL\""}, {prop: "UNPACK_FLIP_Y_WEBGL", name: "UNPACK_FLIP_Y_WEBGL", exported: true, typ: $Int, tag: "js:\"UNPACK_FLIP_Y_WEBGL\""}, {prop: "UNPACK_PREMULTIPLY_ALPHA_WEBGL", name: "UNPACK_PREMULTIPLY_ALPHA_WEBGL", exported: true, typ: $Int, tag: "js:\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\""}, {prop: "UNSIGNED_BYTE", name: "UNSIGNED_BYTE", exported: true, typ: $Int, tag: "js:\"UNSIGNED_BYTE\""}, {prop: "UNSIGNED_INT", name: "UNSIGNED_INT", exported: true, typ: $Int, tag: "js:\"UNSIGNED_INT\""}, {prop: "UNSIGNED_SHORT", name: "UNSIGNED_SHORT", exported: true, typ: $Int, tag: "js:\"UNSIGNED_SHORT\""}, {prop: "UNSIGNED_SHORT_4_4_4_4", name: "UNSIGNED_SHORT_4_4_4_4", exported: true, typ: $Int, tag: "js:\"UNSIGNED_SHORT_4_4_4_4\""}, {prop: "UNSIGNED_SHORT_5_5_5_1", name: "UNSIGNED_SHORT_5_5_5_1", exported: true, typ: $Int, tag: "js:\"UNSIGNED_SHORT_5_5_5_1\""}, {prop: "UNSIGNED_SHORT_5_6_5", name: "UNSIGNED_SHORT_5_6_5", exported: true, typ: $Int, tag: "js:\"UNSIGNED_SHORT_5_6_5\""}, {prop: "VALIDATE_STATUS", name: "VALIDATE_STATUS", exported: true, typ: $Int, tag: "js:\"VALIDATE_STATUS\""}, {prop: "VENDOR", name: "VENDOR", exported: true, typ: $Int, tag: "js:\"VENDOR\""}, {prop: "VERSION", name: "VERSION", exported: true, typ: $Int, tag: "js:\"VERSION\""}, {prop: "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", name: "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\""}, {prop: "VERTEX_ATTRIB_ARRAY_ENABLED", name: "VERTEX_ATTRIB_ARRAY_ENABLED", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_ENABLED\""}, {prop: "VERTEX_ATTRIB_ARRAY_NORMALIZED", name: "VERTEX_ATTRIB_ARRAY_NORMALIZED", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_NORMALIZED\""}, {prop: "VERTEX_ATTRIB_ARRAY_POINTER", name: "VERTEX_ATTRIB_ARRAY_POINTER", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_POINTER\""}, {prop: "VERTEX_ATTRIB_ARRAY_SIZE", name: "VERTEX_ATTRIB_ARRAY_SIZE", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_SIZE\""}, {prop: "VERTEX_ATTRIB_ARRAY_STRIDE", name: "VERTEX_ATTRIB_ARRAY_STRIDE", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_STRIDE\""}, {prop: "VERTEX_ATTRIB_ARRAY_TYPE", name: "VERTEX_ATTRIB_ARRAY_TYPE", exported: true, typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_TYPE\""}, {prop: "VERTEX_SHADER", name: "VERTEX_SHADER", exported: true, typ: $Int, tag: "js:\"VERTEX_SHADER\""}, {prop: "VIEWPORT", name: "VIEWPORT", exported: true, typ: $Int, tag: "js:\"VIEWPORT\""}, {prop: "ZERO", name: "ZERO", exported: true, typ: $Int, tag: "js:\"ZERO\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, Index, Count, Contains, Join, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($Uint8);
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	Join = function(a, sep) {
		var $ptr, _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/web"] = (function() {
	var $pkg = {}, $init, js, strings, IsNodeJS, IsBrowser, IsIOSSafari, IsAndroidChrome, IsMobileBrowser;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	strings = $packages["strings"];
	IsNodeJS = function() {
		var $ptr;
		return !($global.require === undefined);
	};
	$pkg.IsNodeJS = IsNodeJS;
	IsBrowser = function() {
		var $ptr;
		return !IsNodeJS();
	};
	$pkg.IsBrowser = IsBrowser;
	IsIOSSafari = function() {
		var $ptr, ua;
		ua = $internalize($global.navigator.userAgent, $String);
		if (!strings.Contains(ua, "iPhone")) {
			return false;
		}
		return true;
	};
	$pkg.IsIOSSafari = IsIOSSafari;
	IsAndroidChrome = function() {
		var $ptr, ua;
		ua = $internalize($global.navigator.userAgent, $String);
		if (!strings.Contains(ua, "Android")) {
			return false;
		}
		if (!strings.Contains(ua, "Chrome")) {
			return false;
		}
		return true;
	};
	$pkg.IsAndroidChrome = IsAndroidChrome;
	IsMobileBrowser = function() {
		var $ptr;
		return IsIOSSafari() || IsAndroidChrome();
	};
	$pkg.IsMobileBrowser = IsMobileBrowser;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/opengl"] = (function() {
	var $pkg = {}, $init, errors, fmt, js, webgl, web, math, Context, Texture, Framebuffer, Shader, Program, Buffer, uniformLocation, attribLocation, programID, context, locationCache, ShaderType, BufferType, Mode, CompositeMode, DataType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, funcType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, mapType, mapType$1, mapType$2, mapType$3, zeroPlus, oneMinus, zero, one, srcAlpha, dstAlpha, oneMinusSrcAlpha, oneMinusDstAlpha, theContext, adjustForClearColor, GetContext, getProgramID, init, Init, newLocationCache, operations;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	webgl = $packages["github.com/gopherjs/webgl"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	math = $packages["math"];
	Context = $pkg.Context = $newType(0, $kindStruct, "opengl.Context", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, function(locationCache_, screenFramebuffer_, lastFramebuffer_, lastTexture_, lastViewportWidth_, lastViewportHeight_, lastCompositeMode_, context_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locationCache = ptrType$2.nil;
			this.screenFramebuffer = $ifaceNil;
			this.lastFramebuffer = $ifaceNil;
			this.lastTexture = $ifaceNil;
			this.lastViewportWidth = 0;
			this.lastViewportHeight = 0;
			this.lastCompositeMode = 0;
			this.context = new context.ptr(ptrType$3.nil, null, 0);
			return;
		}
		this.locationCache = locationCache_;
		this.screenFramebuffer = screenFramebuffer_;
		this.lastFramebuffer = lastFramebuffer_;
		this.lastTexture = lastTexture_;
		this.lastViewportWidth = lastViewportWidth_;
		this.lastViewportHeight = lastViewportHeight_;
		this.lastCompositeMode = lastCompositeMode_;
		this.context = context_;
	});
	Texture = $pkg.Texture = $newType(8, $kindInterface, "opengl.Texture", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Framebuffer = $pkg.Framebuffer = $newType(8, $kindInterface, "opengl.Framebuffer", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Shader = $pkg.Shader = $newType(8, $kindInterface, "opengl.Shader", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Program = $pkg.Program = $newType(8, $kindInterface, "opengl.Program", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Buffer = $pkg.Buffer = $newType(8, $kindInterface, "opengl.Buffer", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	uniformLocation = $pkg.uniformLocation = $newType(8, $kindInterface, "opengl.uniformLocation", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, null);
	attribLocation = $pkg.attribLocation = $newType(4, $kindInt, "opengl.attribLocation", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, null);
	programID = $pkg.programID = $newType(4, $kindInt, "opengl.programID", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, null);
	context = $pkg.context = $newType(0, $kindStruct, "opengl.context", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, function(gl_, loseContext_, lastProgramID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = ptrType$3.nil;
			this.loseContext = null;
			this.lastProgramID = 0;
			return;
		}
		this.gl = gl_;
		this.loseContext = loseContext_;
		this.lastProgramID = lastProgramID_;
	});
	locationCache = $pkg.locationCache = $newType(0, $kindStruct, "opengl.locationCache", true, "github.com/hajimehoshi/ebiten/internal/opengl", false, function(uniformLocationCache_, attribLocationCache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.uniformLocationCache = false;
			this.attribLocationCache = false;
			return;
		}
		this.uniformLocationCache = uniformLocationCache_;
		this.attribLocationCache = attribLocationCache_;
	});
	ShaderType = $pkg.ShaderType = $newType(4, $kindInt, "opengl.ShaderType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	BufferType = $pkg.BufferType = $newType(4, $kindInt, "opengl.BufferType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	Mode = $pkg.Mode = $newType(4, $kindInt, "opengl.Mode", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	CompositeMode = $pkg.CompositeMode = $newType(4, $kindInt, "opengl.CompositeMode", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	DataType = $pkg.DataType = $newType(4, $kindInt, "opengl.DataType", true, "github.com/hajimehoshi/ebiten/internal/opengl", true, null);
	ptrType = $ptrType(Context);
	ptrType$1 = $ptrType(js.Object);
	sliceType = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(locationCache);
	ptrType$3 = $ptrType(webgl.Context);
	funcType = $funcType([], [], false);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(Shader);
	sliceType$4 = $sliceType($Uint16);
	mapType = $mapType($String, uniformLocation);
	mapType$1 = $mapType(programID, mapType);
	mapType$2 = $mapType($String, attribLocation);
	mapType$3 = $mapType(programID, mapType$2);
	adjustForClearColor = function(x) {
		var $ptr, x;
		if (x <= 0) {
			return zeroPlus;
		}
		if (x >= 1) {
			return oneMinus;
		}
		return x;
	};
	GetContext = function() {
		var $ptr;
		return theContext;
	};
	$pkg.GetContext = GetContext;
	Context.ptr.prototype.BindTexture = function(t) {
		var $ptr, c, t;
		c = this;
		if ($interfaceIsEqual(c.lastTexture, t)) {
			return;
		}
		c.bindTextureImpl(t);
		c.lastTexture = t;
	};
	Context.prototype.BindTexture = function(t) { return this.$val.BindTexture(t); };
	Context.ptr.prototype.bindFramebuffer = function(f) {
		var $ptr, c, f;
		c = this;
		if ($interfaceIsEqual(c.lastFramebuffer, f)) {
			return;
		}
		c.bindFramebufferImpl(f);
		c.lastFramebuffer = f;
	};
	Context.prototype.bindFramebuffer = function(f) { return this.$val.bindFramebuffer(f); };
	Context.ptr.prototype.SetViewport = function(f, width, height) {
		var $ptr, c, f, height, width;
		c = this;
		c.bindFramebuffer(f);
		if (!((c.lastViewportWidth === width)) || !((c.lastViewportHeight === height))) {
			c.setViewportImpl(width, height);
			c.lastViewportWidth = width;
			c.lastViewportHeight = height;
		}
	};
	Context.prototype.SetViewport = function(f, width, height) { return this.$val.SetViewport(f, width, height); };
	Context.ptr.prototype.ScreenFramebuffer = function() {
		var $ptr, c;
		c = this;
		return c.screenFramebuffer;
	};
	Context.prototype.ScreenFramebuffer = function() { return this.$val.ScreenFramebuffer(); };
	Context.ptr.prototype.ResetViewportSize = function() {
		var $ptr, c;
		c = this;
		c.lastViewportWidth = 0;
		c.lastViewportHeight = 0;
	};
	Context.prototype.ResetViewportSize = function() { return this.$val.ResetViewportSize(); };
	getProgramID = function(p) {
		var $ptr, p;
		return ((($parseInt($assertType(p, ptrType$1).__ebiten_programId) >> 0) >> 0));
	};
	init = function() {
		var $ptr, c;
		c = $global.WebGLRenderingContext.prototype;
		$pkg.VertexShader = ((($parseInt(c.VERTEX_SHADER) >> 0) >> 0));
		$pkg.FragmentShader = ((($parseInt(c.FRAGMENT_SHADER) >> 0) >> 0));
		$pkg.ArrayBuffer = ((($parseInt(c.ARRAY_BUFFER) >> 0) >> 0));
		$pkg.ElementArrayBuffer = ((($parseInt(c.ELEMENT_ARRAY_BUFFER) >> 0) >> 0));
		$pkg.DynamicDraw = ((($parseInt(c.DYNAMIC_DRAW) >> 0) >> 0));
		$pkg.StaticDraw = ((($parseInt(c.STATIC_DRAW) >> 0) >> 0));
		$pkg.Triangles = ((($parseInt(c.TRIANGLES) >> 0) >> 0));
		$pkg.Lines = ((($parseInt(c.LINES) >> 0) >> 0));
		$pkg.Short = ((($parseInt(c.SHORT) >> 0) >> 0));
		$pkg.Float = ((($parseInt(c.FLOAT) >> 0) >> 0));
		zero = ((($parseInt(c.ZERO) >> 0) >> 0));
		one = ((($parseInt(c.ONE) >> 0) >> 0));
		srcAlpha = ((($parseInt(c.SRC_ALPHA) >> 0) >> 0));
		dstAlpha = ((($parseInt(c.DST_ALPHA) >> 0) >> 0));
		oneMinusSrcAlpha = ((($parseInt(c.ONE_MINUS_SRC_ALPHA) >> 0) >> 0));
		oneMinusDstAlpha = ((($parseInt(c.ONE_MINUS_DST_ALPHA) >> 0) >> 0));
	};
	Init = function() {
		var $ptr, _r, _tuple, c, canvas, err, gl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; canvas = $f.canvas; err = $f.err; gl = $f.gl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		/* */ if (web.IsNodeJS()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (web.IsNodeJS()) { */ case 1:
			_r = fmt.Errorf("opengl: Node.js is not supported", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		canvas = $global.document.querySelector($externalize("canvas", $String));
		_tuple = webgl.NewContext(canvas, new webgl.ContextAttributes.ptr(true, false, false, false, true, false));
		gl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		c[0] = new Context.ptr(ptrType$2.nil, $ifaceNil, $ifaceNil, $ifaceNil, 0, 0, 0, new context.ptr(ptrType$3.nil, null, 0));
		c[0].context.gl = gl;
		c[0].context.loseContext = gl.GetExtension("WEBGL_lose_context");
		if (!(c[0].context.loseContext === null)) {
			$global._ebiten_loseContextForTesting = $externalize((function(c) { return function() {
				var $ptr;
				c[0].context.loseContext.loseContext();
			}; })(c), funcType);
		}
		theContext = c[0];
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Init }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.canvas = canvas; $f.err = err; $f.gl = gl; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Init = Init;
	Context.ptr.prototype.Reset = function() {
		var $ptr, c, f, gl;
		c = this;
		c.locationCache = newLocationCache();
		c.lastTexture = $ifaceNil;
		c.lastFramebuffer = $ifaceNil;
		c.lastViewportWidth = 0;
		c.lastViewportHeight = 0;
		c.lastCompositeMode = 13;
		gl = c.context.gl;
		gl.Enable($parseInt(gl.Object.BLEND) >> 0);
		c.BlendFunc(0);
		f = gl.GetParameter($parseInt(gl.Object.FRAMEBUFFER_BINDING) >> 0);
		c.screenFramebuffer = new $jsObjectPtr(f);
		return $ifaceNil;
	};
	Context.prototype.Reset = function() { return this.$val.Reset(); };
	Context.ptr.prototype.BlendFunc = function(mode) {
		var $ptr, _tuple, c, d, gl, mode, s;
		c = this;
		if (c.lastCompositeMode === mode) {
			return;
		}
		c.lastCompositeMode = mode;
		_tuple = operations(mode);
		s = _tuple[0];
		d = _tuple[1];
		gl = c.context.gl;
		gl.BlendFunc(((s >> 0)), ((d >> 0)));
	};
	Context.prototype.BlendFunc = function(mode) { return this.$val.BlendFunc(mode); };
	Context.ptr.prototype.NewTexture = function(width, height) {
		var $ptr, c, gl, height, t, width;
		c = this;
		gl = c.context.gl;
		t = gl.CreateTexture();
		if (t === null) {
			return [$ifaceNil, errors.New("opengl: glGenTexture failed")];
		}
		gl.PixelStorei($parseInt(gl.Object.UNPACK_ALIGNMENT) >> 0, 4);
		c.BindTexture(new $jsObjectPtr(t));
		gl.TexParameteri($parseInt(gl.Object.TEXTURE_2D) >> 0, $parseInt(gl.Object.TEXTURE_MAG_FILTER) >> 0, $parseInt(gl.Object.NEAREST) >> 0);
		gl.TexParameteri($parseInt(gl.Object.TEXTURE_2D) >> 0, $parseInt(gl.Object.TEXTURE_MIN_FILTER) >> 0, $parseInt(gl.Object.NEAREST) >> 0);
		gl.Object.texImage2D($parseInt(gl.Object.TEXTURE_2D) >> 0, 0, $parseInt(gl.Object.RGBA) >> 0, width, height, 0, $parseInt(gl.Object.RGBA) >> 0, $parseInt(gl.Object.UNSIGNED_BYTE) >> 0, null);
		return [new $jsObjectPtr(t), $ifaceNil];
	};
	Context.prototype.NewTexture = function(width, height) { return this.$val.NewTexture(width, height); };
	Context.ptr.prototype.bindFramebufferImpl = function(f) {
		var $ptr, c, f, gl;
		c = this;
		gl = c.context.gl;
		gl.BindFramebuffer($parseInt(gl.Object.FRAMEBUFFER) >> 0, $assertType(f, ptrType$1));
	};
	Context.prototype.bindFramebufferImpl = function(f) { return this.$val.bindFramebufferImpl(f); };
	Context.ptr.prototype.FramebufferPixels = function(f, width, height) {
		var $ptr, _r, _r$1, c, e, f, gl, height, pixels, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; e = $f.e; f = $f.f; gl = $f.gl; height = $f.height; pixels = $f.pixels; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = c.context.gl;
		c.bindFramebuffer(f);
		pixels = new ($global.Uint8Array)($imul(($imul(4, width)), height));
		gl.ReadPixels(0, 0, width, height, $parseInt(gl.Object.RGBA) >> 0, $parseInt(gl.Object.UNSIGNED_BYTE) >> 0, pixels);
		e = gl.GetError();
		/* */ if (!((e === ($parseInt(gl.Object.NO_ERROR) >> 0)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((e === ($parseInt(gl.Object.NO_ERROR) >> 0)))) { */ case 1:
			_r = fmt.Sprintf("opengl: error: %d", new sliceType([new $Int(e)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$1.nil, _r$1];
		/* } */ case 2:
		$s = -1; return [$assertType($internalize(pixels, $emptyInterface), sliceType$1), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.FramebufferPixels }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.e = e; $f.f = f; $f.gl = gl; $f.height = height; $f.pixels = pixels; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.FramebufferPixels = function(f, width, height) { return this.$val.FramebufferPixels(f, width, height); };
	Context.ptr.prototype.bindTextureImpl = function(t) {
		var $ptr, c, gl, t;
		c = this;
		gl = c.context.gl;
		gl.BindTexture($parseInt(gl.Object.TEXTURE_2D) >> 0, $assertType(t, ptrType$1));
	};
	Context.prototype.bindTextureImpl = function(t) { return this.$val.bindTextureImpl(t); };
	Context.ptr.prototype.DeleteTexture = function(t) {
		var $ptr, c, gl, t;
		c = this;
		gl = c.context.gl;
		if (!gl.IsTexture($assertType(t, ptrType$1))) {
			return;
		}
		if ($interfaceIsEqual(c.lastTexture, t)) {
			c.lastTexture = $ifaceNil;
		}
		gl.DeleteTexture($assertType(t, ptrType$1));
	};
	Context.prototype.DeleteTexture = function(t) { return this.$val.DeleteTexture(t); };
	Context.ptr.prototype.IsTexture = function(t) {
		var $ptr, b, c, gl, t;
		c = this;
		gl = c.context.gl;
		b = gl.IsTexture($assertType(t, ptrType$1));
		return b;
	};
	Context.prototype.IsTexture = function(t) { return this.$val.IsTexture(t); };
	Context.ptr.prototype.TexSubImage2D = function(p, x, y, width, height) {
		var $ptr, c, gl, height, p, width, x, y;
		c = this;
		gl = c.context.gl;
		gl.Object.texSubImage2D($parseInt(gl.Object.TEXTURE_2D) >> 0, 0, x, y, width, height, $parseInt(gl.Object.RGBA) >> 0, $parseInt(gl.Object.UNSIGNED_BYTE) >> 0, $externalize(p, sliceType$1));
	};
	Context.prototype.TexSubImage2D = function(p, x, y, width, height) { return this.$val.TexSubImage2D(p, x, y, width, height); };
	Context.ptr.prototype.NewFramebuffer = function(t) {
		var $ptr, _r, _r$1, c, f, gl, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; f = $f.f; gl = $f.gl; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = c.context.gl;
		f = gl.CreateFramebuffer();
		c.bindFramebuffer(new $jsObjectPtr(f));
		gl.FramebufferTexture2D($parseInt(gl.Object.FRAMEBUFFER) >> 0, $parseInt(gl.Object.COLOR_ATTACHMENT0) >> 0, $parseInt(gl.Object.TEXTURE_2D) >> 0, $assertType(t, ptrType$1), 0);
		s = gl.CheckFramebufferStatus($parseInt(gl.Object.FRAMEBUFFER) >> 0);
		/* */ if (!((s === ($parseInt(gl.Object.FRAMEBUFFER_COMPLETE) >> 0)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((s === ($parseInt(gl.Object.FRAMEBUFFER_COMPLETE) >> 0)))) { */ case 1:
			_r = fmt.Sprintf("opengl: creating framebuffer failed: %d", new sliceType([new $Int(s)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$1];
		/* } */ case 2:
		$s = -1; return [new $jsObjectPtr(f), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewFramebuffer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.f = f; $f.gl = gl; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewFramebuffer = function(t) { return this.$val.NewFramebuffer(t); };
	Context.ptr.prototype.setViewportImpl = function(width, height) {
		var $ptr, c, gl, height, width;
		c = this;
		gl = c.context.gl;
		gl.Viewport(0, 0, width, height);
	};
	Context.prototype.setViewportImpl = function(width, height) { return this.$val.setViewportImpl(width, height); };
	Context.ptr.prototype.FillFramebuffer = function(r, g, b, a) {
		var $ptr, a, b, c, g, gl, r;
		c = this;
		gl = c.context.gl;
		gl.ClearColor(adjustForClearColor(r), adjustForClearColor(g), adjustForClearColor(b), adjustForClearColor(a));
		gl.Clear($parseInt(gl.Object.COLOR_BUFFER_BIT) >> 0);
		return $ifaceNil;
	};
	Context.prototype.FillFramebuffer = function(r, g, b, a) { return this.$val.FillFramebuffer(r, g, b, a); };
	Context.ptr.prototype.DeleteFramebuffer = function(f) {
		var $ptr, c, f, gl;
		c = this;
		gl = c.context.gl;
		if (!gl.IsFramebuffer($assertType(f, ptrType$1))) {
			return;
		}
		if ($interfaceIsEqual(c.lastFramebuffer, f)) {
			c.lastFramebuffer = $ifaceNil;
			c.lastViewportWidth = 0;
			c.lastViewportHeight = 0;
		}
		gl.DeleteFramebuffer($assertType(f, ptrType$1));
	};
	Context.prototype.DeleteFramebuffer = function(f) { return this.$val.DeleteFramebuffer(f); };
	Context.ptr.prototype.NewShader = function(shaderType, source) {
		var $ptr, _r, _r$1, c, gl, log, s, shaderType, source, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; gl = $f.gl; log = $f.log; s = $f.s; shaderType = $f.shaderType; source = $f.source; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		gl = c.context.gl;
		s = gl.CreateShader(((shaderType >> 0)));
		/* */ if (s === null) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s === null) { */ case 1:
			_r = fmt.Errorf("opengl: glCreateShader failed: shader type: %d", new sliceType([new ShaderType(shaderType)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r];
		/* } */ case 2:
		gl.ShaderSource(s, source);
		gl.CompileShader(s);
		/* */ if (!gl.GetShaderParameterb(s, $parseInt(gl.Object.COMPILE_STATUS) >> 0)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!gl.GetShaderParameterb(s, $parseInt(gl.Object.COMPILE_STATUS) >> 0)) { */ case 4:
			log = gl.GetShaderInfoLog(s);
			_r$1 = fmt.Errorf("opengl: shader compile failed: %s", new sliceType([new $String(log)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, _r$1];
		/* } */ case 5:
		$s = -1; return [new $jsObjectPtr(s), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Context.ptr.prototype.NewShader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.gl = gl; $f.log = log; $f.s = s; $f.shaderType = shaderType; $f.source = source; $f.$s = $s; $f.$r = $r; return $f;
	};
	Context.prototype.NewShader = function(shaderType, source) { return this.$val.NewShader(shaderType, source); };
	Context.ptr.prototype.DeleteShader = function(s) {
		var $ptr, c, gl, s;
		c = this;
		gl = c.context.gl;
		gl.DeleteShader($assertType(s, ptrType$1));
	};
	Context.prototype.DeleteShader = function(s) { return this.$val.DeleteShader(s); };
	Context.ptr.prototype.NewProgram = function(shaders) {
		var $ptr, _i, _ref, c, gl, p, shader, shaders;
		c = this;
		gl = c.context.gl;
		p = gl.CreateProgram();
		if (p === null) {
			return [$ifaceNil, errors.New("opengl: glCreateProgram failed")];
		}
		p.__ebiten_programId = c.context.lastProgramID;
		c.context.lastProgramID = c.context.lastProgramID + (1) >> 0;
		_ref = shaders;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			shader = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			gl.AttachShader(p, $assertType(shader, ptrType$1));
			_i++;
		}
		gl.LinkProgram(p);
		if (!gl.GetProgramParameterb(p, $parseInt(gl.Object.LINK_STATUS) >> 0)) {
			return [$ifaceNil, errors.New("opengl: program error")];
		}
		return [new $jsObjectPtr(p), $ifaceNil];
	};
	Context.prototype.NewProgram = function(shaders) { return this.$val.NewProgram(shaders); };
	Context.ptr.prototype.UseProgram = function(p) {
		var $ptr, c, gl, p;
		c = this;
		gl = c.context.gl;
		gl.UseProgram($assertType(p, ptrType$1));
	};
	Context.prototype.UseProgram = function(p) { return this.$val.UseProgram(p); };
	Context.ptr.prototype.DeleteProgram = function(p) {
		var $ptr, c, gl, p;
		c = this;
		gl = c.context.gl;
		if (!gl.IsProgram($assertType(p, ptrType$1))) {
			return;
		}
		gl.DeleteProgram($assertType(p, ptrType$1));
	};
	Context.prototype.DeleteProgram = function(p) { return this.$val.DeleteProgram(p); };
	Context.ptr.prototype.getUniformLocationImpl = function(p, location) {
		var $ptr, c, gl, location, p;
		c = this;
		gl = c.context.gl;
		return new $jsObjectPtr(gl.GetUniformLocation($assertType(p, ptrType$1), location));
	};
	Context.prototype.getUniformLocationImpl = function(p, location) { return this.$val.getUniformLocationImpl(p, location); };
	Context.ptr.prototype.UniformInt = function(p, location, v) {
		var $ptr, c, gl, l, location, p, v;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetUniformLocation(c, p, location);
		gl.Uniform1i($assertType(l, ptrType$1), v);
	};
	Context.prototype.UniformInt = function(p, location, v) { return this.$val.UniformInt(p, location, v); };
	Context.ptr.prototype.UniformFloat = function(p, location, v) {
		var $ptr, c, gl, l, location, p, v;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetUniformLocation(c, p, location);
		gl.Uniform1f($assertType(l, ptrType$1), v);
	};
	Context.prototype.UniformFloat = function(p, location, v) { return this.$val.UniformFloat(p, location, v); };
	Context.ptr.prototype.UniformFloats = function(p, location, v) {
		var $ptr, _1, c, gl, l, location, p, v;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetUniformLocation(c, p, location);
		_1 = v.$length;
		if (_1 === (2)) {
			gl.Object.uniform2fv($assertType(l, ptrType$1), $externalize(v, sliceType$2));
		} else if (_1 === (4)) {
			gl.Object.uniform4fv($assertType(l, ptrType$1), $externalize(v, sliceType$2));
		} else if (_1 === (16)) {
			gl.UniformMatrix4fv($assertType(l, ptrType$1), false, v);
		} else {
			$panic(new $String("not reached"));
		}
	};
	Context.prototype.UniformFloats = function(p, location, v) { return this.$val.UniformFloats(p, location, v); };
	Context.ptr.prototype.getAttribLocationImpl = function(p, location) {
		var $ptr, c, gl, location, p;
		c = this;
		gl = c.context.gl;
		return ((gl.GetAttribLocation($assertType(p, ptrType$1), location) >> 0));
	};
	Context.prototype.getAttribLocationImpl = function(p, location) { return this.$val.getAttribLocationImpl(p, location); };
	Context.ptr.prototype.VertexAttribPointer = function(p, location, size, dataType, stride, offset) {
		var $ptr, c, dataType, gl, l, location, offset, p, size, stride;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetAttribLocation(c, p, location);
		gl.VertexAttribPointer(((l >> 0)), size, ((dataType >> 0)), false, stride, offset);
	};
	Context.prototype.VertexAttribPointer = function(p, location, size, dataType, stride, offset) { return this.$val.VertexAttribPointer(p, location, size, dataType, stride, offset); };
	Context.ptr.prototype.EnableVertexAttribArray = function(p, location) {
		var $ptr, c, gl, l, location, p;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetAttribLocation(c, p, location);
		gl.EnableVertexAttribArray(((l >> 0)));
	};
	Context.prototype.EnableVertexAttribArray = function(p, location) { return this.$val.EnableVertexAttribArray(p, location); };
	Context.ptr.prototype.DisableVertexAttribArray = function(p, location) {
		var $ptr, c, gl, l, location, p;
		c = this;
		gl = c.context.gl;
		l = c.locationCache.GetAttribLocation(c, p, location);
		gl.DisableVertexAttribArray(((l >> 0)));
	};
	Context.prototype.DisableVertexAttribArray = function(p, location) { return this.$val.DisableVertexAttribArray(p, location); };
	Context.ptr.prototype.NewArrayBuffer = function(size) {
		var $ptr, b, c, gl, size;
		c = this;
		gl = c.context.gl;
		b = gl.CreateBuffer();
		gl.BindBuffer((($pkg.ArrayBuffer >> 0)), b);
		gl.BufferData((($pkg.ArrayBuffer >> 0)), new $Int(size), (($pkg.DynamicDraw >> 0)));
		return new $jsObjectPtr(b);
	};
	Context.prototype.NewArrayBuffer = function(size) { return this.$val.NewArrayBuffer(size); };
	Context.ptr.prototype.NewElementArrayBuffer = function(indices) {
		var $ptr, b, c, gl, indices;
		c = this;
		gl = c.context.gl;
		b = gl.CreateBuffer();
		gl.BindBuffer((($pkg.ElementArrayBuffer >> 0)), b);
		gl.BufferData((($pkg.ElementArrayBuffer >> 0)), indices, (($pkg.StaticDraw >> 0)));
		return new $jsObjectPtr(b);
	};
	Context.prototype.NewElementArrayBuffer = function(indices) { return this.$val.NewElementArrayBuffer(indices); };
	Context.ptr.prototype.BindElementArrayBuffer = function(b) {
		var $ptr, b, c, gl;
		c = this;
		gl = c.context.gl;
		gl.BindBuffer($parseInt(gl.Object.ELEMENT_ARRAY_BUFFER) >> 0, $assertType(b, ptrType$1));
	};
	Context.prototype.BindElementArrayBuffer = function(b) { return this.$val.BindElementArrayBuffer(b); };
	Context.ptr.prototype.BufferSubData = function(bufferType, data) {
		var $ptr, bufferType, c, data, gl;
		c = this;
		gl = c.context.gl;
		gl.BufferSubData(((bufferType >> 0)), 0, data);
	};
	Context.prototype.BufferSubData = function(bufferType, data) { return this.$val.BufferSubData(bufferType, data); };
	Context.ptr.prototype.DeleteBuffer = function(b) {
		var $ptr, b, c, gl;
		c = this;
		gl = c.context.gl;
		gl.DeleteBuffer($assertType(b, ptrType$1));
	};
	Context.prototype.DeleteBuffer = function(b) { return this.$val.DeleteBuffer(b); };
	Context.ptr.prototype.DrawElements = function(mode, len, offsetInBytes) {
		var $ptr, c, gl, len, mode, offsetInBytes;
		c = this;
		gl = c.context.gl;
		gl.DrawElements(((mode >> 0)), len, $parseInt(gl.Object.UNSIGNED_SHORT) >> 0, offsetInBytes);
	};
	Context.prototype.DrawElements = function(mode, len, offsetInBytes) { return this.$val.DrawElements(mode, len, offsetInBytes); };
	Context.ptr.prototype.Flush = function() {
		var $ptr, c, gl;
		c = this;
		gl = c.context.gl;
		gl.Flush();
	};
	Context.prototype.Flush = function() { return this.$val.Flush(); };
	Context.ptr.prototype.IsContextLost = function() {
		var $ptr, c, gl;
		c = this;
		gl = c.context.gl;
		return gl.IsContextLost();
	};
	Context.prototype.IsContextLost = function() { return this.$val.IsContextLost(); };
	Context.ptr.prototype.RestoreContext = function() {
		var $ptr, c;
		c = this;
		if (!(c.context.loseContext === null)) {
			c.context.loseContext.restoreContext();
		}
	};
	Context.prototype.RestoreContext = function() { return this.$val.RestoreContext(); };
	newLocationCache = function() {
		var $ptr;
		return new locationCache.ptr($makeMap(programID.keyFor, []), $makeMap(programID.keyFor, []));
	};
	locationCache.ptr.prototype.GetUniformLocation = function(context$1, p, location) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _tuple, _tuple$1, c, context$1, id, l, location, ok, ok$1, p;
		c = this;
		id = getProgramID(p);
		_tuple = (_entry = c.uniformLocationCache[programID.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = id; (c.uniformLocationCache || $throwRuntimeError("assignment to entry in nil map"))[programID.keyFor(_key)] = { k: _key, v: $makeMap($String.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = c.uniformLocationCache[programID.keyFor(id)], _entry$2 !== undefined ? _entry$2.v : false)[$String.keyFor(location)], _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]);
		l = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (!ok$1) {
			l = context$1.getUniformLocationImpl(p, location);
			_key$1 = location; ((_entry$3 = c.uniformLocationCache[programID.keyFor(id)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: l };
		}
		return l;
	};
	locationCache.prototype.GetUniformLocation = function(context$1, p, location) { return this.$val.GetUniformLocation(context$1, p, location); };
	locationCache.ptr.prototype.GetAttribLocation = function(context$1, p, location) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _tuple, _tuple$1, c, context$1, id, l, location, ok, ok$1, p;
		c = this;
		id = getProgramID(p);
		_tuple = (_entry = c.attribLocationCache[programID.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = id; (c.attribLocationCache || $throwRuntimeError("assignment to entry in nil map"))[programID.keyFor(_key)] = { k: _key, v: $makeMap($String.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = c.attribLocationCache[programID.keyFor(id)], _entry$2 !== undefined ? _entry$2.v : false)[$String.keyFor(location)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
		l = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (!ok$1) {
			l = context$1.getAttribLocationImpl(p, location);
			_key$1 = location; ((_entry$3 = c.attribLocationCache[programID.keyFor(id)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: l };
		}
		return l;
	};
	locationCache.prototype.GetAttribLocation = function(context$1, p, location) { return this.$val.GetAttribLocation(context$1, p, location); };
	operations = function(mode) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dst, mode, src;
		src = 0;
		dst = 0;
		_1 = mode;
		if (_1 === (0)) {
			_tmp = one;
			_tmp$1 = oneMinusSrcAlpha;
			src = _tmp;
			dst = _tmp$1;
			return [src, dst];
		} else if (_1 === (1)) {
			_tmp$2 = zero;
			_tmp$3 = zero;
			src = _tmp$2;
			dst = _tmp$3;
			return [src, dst];
		} else if (_1 === (2)) {
			_tmp$4 = one;
			_tmp$5 = zero;
			src = _tmp$4;
			dst = _tmp$5;
			return [src, dst];
		} else if (_1 === (3)) {
			_tmp$6 = zero;
			_tmp$7 = one;
			src = _tmp$6;
			dst = _tmp$7;
			return [src, dst];
		} else if (_1 === (4)) {
			_tmp$8 = oneMinusDstAlpha;
			_tmp$9 = one;
			src = _tmp$8;
			dst = _tmp$9;
			return [src, dst];
		} else if (_1 === (5)) {
			_tmp$10 = dstAlpha;
			_tmp$11 = zero;
			src = _tmp$10;
			dst = _tmp$11;
			return [src, dst];
		} else if (_1 === (6)) {
			_tmp$12 = zero;
			_tmp$13 = srcAlpha;
			src = _tmp$12;
			dst = _tmp$13;
			return [src, dst];
		} else if (_1 === (7)) {
			_tmp$14 = oneMinusDstAlpha;
			_tmp$15 = zero;
			src = _tmp$14;
			dst = _tmp$15;
			return [src, dst];
		} else if (_1 === (8)) {
			_tmp$16 = zero;
			_tmp$17 = oneMinusSrcAlpha;
			src = _tmp$16;
			dst = _tmp$17;
			return [src, dst];
		} else if (_1 === (9)) {
			_tmp$18 = dstAlpha;
			_tmp$19 = oneMinusSrcAlpha;
			src = _tmp$18;
			dst = _tmp$19;
			return [src, dst];
		} else if (_1 === (10)) {
			_tmp$20 = oneMinusDstAlpha;
			_tmp$21 = srcAlpha;
			src = _tmp$20;
			dst = _tmp$21;
			return [src, dst];
		} else if (_1 === (11)) {
			_tmp$22 = oneMinusDstAlpha;
			_tmp$23 = oneMinusSrcAlpha;
			src = _tmp$22;
			dst = _tmp$23;
			return [src, dst];
		} else if (_1 === (12)) {
			_tmp$24 = one;
			_tmp$25 = one;
			src = _tmp$24;
			dst = _tmp$25;
			return [src, dst];
		} else {
			$panic(new $String("not reached"));
		}
	};
	DataType.prototype.SizeInBytes = function() {
		var $ptr, _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === ($pkg.Short)) {
			return 2;
		} else if (_1 === ($pkg.Float)) {
			return 4;
		} else {
			$panic(new $String("not reached"));
		}
	};
	$ptrType(DataType).prototype.SizeInBytes = function() { return new DataType(this.$get()).SizeInBytes(); };
	ptrType.methods = [{prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([Texture], [], false)}, {prop: "bindFramebuffer", name: "bindFramebuffer", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Framebuffer], [], false)}, {prop: "SetViewport", name: "SetViewport", pkg: "", typ: $funcType([Framebuffer, $Int, $Int], [], false)}, {prop: "ScreenFramebuffer", name: "ScreenFramebuffer", pkg: "", typ: $funcType([], [Framebuffer], false)}, {prop: "ResetViewportSize", name: "ResetViewportSize", pkg: "", typ: $funcType([], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [$error], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([CompositeMode], [], false)}, {prop: "NewTexture", name: "NewTexture", pkg: "", typ: $funcType([$Int, $Int], [Texture, $error], false)}, {prop: "bindFramebufferImpl", name: "bindFramebufferImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Framebuffer], [], false)}, {prop: "FramebufferPixels", name: "FramebufferPixels", pkg: "", typ: $funcType([Framebuffer, $Int, $Int], [sliceType$1, $error], false)}, {prop: "bindTextureImpl", name: "bindTextureImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Texture], [], false)}, {prop: "DeleteTexture", name: "DeleteTexture", pkg: "", typ: $funcType([Texture], [], false)}, {prop: "IsTexture", name: "IsTexture", pkg: "", typ: $funcType([Texture], [$Bool], false)}, {prop: "TexSubImage2D", name: "TexSubImage2D", pkg: "", typ: $funcType([sliceType$1, $Int, $Int, $Int, $Int], [], false)}, {prop: "NewFramebuffer", name: "NewFramebuffer", pkg: "", typ: $funcType([Texture], [Framebuffer, $error], false)}, {prop: "setViewportImpl", name: "setViewportImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([$Int, $Int], [], false)}, {prop: "FillFramebuffer", name: "FillFramebuffer", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [$error], false)}, {prop: "DeleteFramebuffer", name: "DeleteFramebuffer", pkg: "", typ: $funcType([Framebuffer], [], false)}, {prop: "NewShader", name: "NewShader", pkg: "", typ: $funcType([ShaderType, $String], [Shader, $error], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([Shader], [], false)}, {prop: "NewProgram", name: "NewProgram", pkg: "", typ: $funcType([sliceType$3], [Program, $error], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([Program], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([Program], [], false)}, {prop: "getUniformLocationImpl", name: "getUniformLocationImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Program, $String], [uniformLocation], false)}, {prop: "UniformInt", name: "UniformInt", pkg: "", typ: $funcType([Program, $String, $Int], [], false)}, {prop: "UniformFloat", name: "UniformFloat", pkg: "", typ: $funcType([Program, $String, $Float32], [], false)}, {prop: "UniformFloats", name: "UniformFloats", pkg: "", typ: $funcType([Program, $String, sliceType$2], [], false)}, {prop: "getAttribLocationImpl", name: "getAttribLocationImpl", pkg: "github.com/hajimehoshi/ebiten/internal/opengl", typ: $funcType([Program, $String], [attribLocation], false)}, {prop: "VertexAttribPointer", name: "VertexAttribPointer", pkg: "", typ: $funcType([Program, $String, $Int, DataType, $Int, $Int], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([Program, $String], [], false)}, {prop: "DisableVertexAttribArray", name: "DisableVertexAttribArray", pkg: "", typ: $funcType([Program, $String], [], false)}, {prop: "NewArrayBuffer", name: "NewArrayBuffer", pkg: "", typ: $funcType([$Int], [Buffer], false)}, {prop: "NewElementArrayBuffer", name: "NewElementArrayBuffer", pkg: "", typ: $funcType([sliceType$4], [Buffer], false)}, {prop: "BindElementArrayBuffer", name: "BindElementArrayBuffer", pkg: "", typ: $funcType([Buffer], [], false)}, {prop: "BufferSubData", name: "BufferSubData", pkg: "", typ: $funcType([BufferType, sliceType$2], [], false)}, {prop: "DeleteBuffer", name: "DeleteBuffer", pkg: "", typ: $funcType([Buffer], [], false)}, {prop: "DrawElements", name: "DrawElements", pkg: "", typ: $funcType([Mode, $Int, $Int], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}, {prop: "IsContextLost", name: "IsContextLost", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RestoreContext", name: "RestoreContext", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([ptrType, Program, $String], [uniformLocation], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([ptrType, Program, $String], [attribLocation], false)}];
	DataType.methods = [{prop: "SizeInBytes", name: "SizeInBytes", pkg: "", typ: $funcType([], [$Int], false)}];
	Context.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "locationCache", name: "locationCache", exported: false, typ: ptrType$2, tag: ""}, {prop: "screenFramebuffer", name: "screenFramebuffer", exported: false, typ: Framebuffer, tag: ""}, {prop: "lastFramebuffer", name: "lastFramebuffer", exported: false, typ: Framebuffer, tag: ""}, {prop: "lastTexture", name: "lastTexture", exported: false, typ: Texture, tag: ""}, {prop: "lastViewportWidth", name: "lastViewportWidth", exported: false, typ: $Int, tag: ""}, {prop: "lastViewportHeight", name: "lastViewportHeight", exported: false, typ: $Int, tag: ""}, {prop: "lastCompositeMode", name: "lastCompositeMode", exported: false, typ: CompositeMode, tag: ""}, {prop: "context", name: "", exported: false, typ: context, tag: ""}]);
	Texture.init([]);
	Framebuffer.init([]);
	Shader.init([]);
	Program.init([]);
	Buffer.init([]);
	uniformLocation.init([]);
	context.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "gl", name: "gl", exported: false, typ: ptrType$3, tag: ""}, {prop: "loseContext", name: "loseContext", exported: false, typ: ptrType$1, tag: ""}, {prop: "lastProgramID", name: "lastProgramID", exported: false, typ: programID, tag: ""}]);
	locationCache.init("github.com/hajimehoshi/ebiten/internal/opengl", [{prop: "uniformLocationCache", name: "uniformLocationCache", exported: false, typ: mapType$1, tag: ""}, {prop: "attribLocationCache", name: "attribLocationCache", exported: false, typ: mapType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = webgl.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.VertexShader = 0;
		$pkg.FragmentShader = 0;
		$pkg.ArrayBuffer = 0;
		$pkg.ElementArrayBuffer = 0;
		$pkg.DynamicDraw = 0;
		$pkg.StaticDraw = 0;
		$pkg.Triangles = 0;
		$pkg.Lines = 0;
		$pkg.Short = 0;
		$pkg.Float = 0;
		zero = 0;
		one = 0;
		srcAlpha = 0;
		dstAlpha = 0;
		oneMinusSrcAlpha = 0;
		oneMinusDstAlpha = 0;
		theContext = ptrType.nil;
		zeroPlus = math.Nextafter32(0, 1);
		oneMinus = math.Nextafter32(1, 0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/graphics"] = (function() {
	var $pkg = {}, $init, errors, fmt, affine, math, opengl, sync, web, strings, command, commandQueue, drawImageCommand, replacePixelsCommand, disposeCommand, newImageCommand, newScreenFramebufferImageCommand, framebuffer, Image, arrayBufferLayoutPart, arrayBufferLayout, openGLState, Filter, texture, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, ptrType$1, ptrType$2, sliceType$4, arrayType, sliceType$5, ptrType$3, ptrType$4, sliceType$6, sliceType$7, sliceType$8, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, theCommandQueue, theArrayBufferLayout, theOpenGLState, zeroBuffer, zeroProgram, FlushCommands, QuadVertexSizeInBytes, orthoProjectionMatrix, newFramebufferFromTexture, newScreenFramebuffer, NewImage, NewScreenFramebufferImage, ResetGLState, areSameFloat32Array, shader;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	math = $packages["github.com/hajimehoshi/ebiten/internal/math"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	strings = $packages["strings"];
	command = $pkg.command = $newType(8, $kindInterface, "graphics.command", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, null);
	commandQueue = $pkg.commandQueue = $newType(0, $kindStruct, "graphics.commandQueue", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(commands_, vertices_, nvertices_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.commands = sliceType$2.nil;
			this.vertices = sliceType.nil;
			this.nvertices = 0;
			this.m = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
			return;
		}
		this.commands = commands_;
		this.vertices = vertices_;
		this.nvertices = nvertices_;
		this.m = m_;
	});
	drawImageCommand = $pkg.drawImageCommand = $newType(0, $kindStruct, "graphics.drawImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(dst_, src_, nvertices_, color_, mode_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dst = ptrType$1.nil;
			this.src = ptrType$1.nil;
			this.nvertices = 0;
			this.color = ptrType$2.nil;
			this.mode = 0;
			this.filter = 0;
			return;
		}
		this.dst = dst_;
		this.src = src_;
		this.nvertices = nvertices_;
		this.color = color_;
		this.mode = mode_;
		this.filter = filter_;
	});
	replacePixelsCommand = $pkg.replacePixelsCommand = $newType(0, $kindStruct, "graphics.replacePixelsCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(dst_, pixels_, x_, y_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dst = ptrType$1.nil;
			this.pixels = sliceType$6.nil;
			this.x = 0;
			this.y = 0;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.dst = dst_;
		this.pixels = pixels_;
		this.x = x_;
		this.y = y_;
		this.width = width_;
		this.height = height_;
	});
	disposeCommand = $pkg.disposeCommand = $newType(0, $kindStruct, "graphics.disposeCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.target = ptrType$1.nil;
			return;
		}
		this.target = target_;
	});
	newImageCommand = $pkg.newImageCommand = $newType(0, $kindStruct, "graphics.newImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(result_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = ptrType$1.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.result = result_;
		this.width = width_;
		this.height = height_;
	});
	newScreenFramebufferImageCommand = $pkg.newScreenFramebufferImageCommand = $newType(0, $kindStruct, "graphics.newScreenFramebufferImageCommand", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(result_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = ptrType$1.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.result = result_;
		this.width = width_;
		this.height = height_;
	});
	framebuffer = $pkg.framebuffer = $newType(0, $kindStruct, "graphics.framebuffer", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(native$0_, flipY_, proMatrix_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.native$0 = $ifaceNil;
			this.flipY = false;
			this.proMatrix = sliceType.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.native$0 = native$0_;
		this.flipY = flipY_;
		this.proMatrix = proMatrix_;
		this.width = width_;
		this.height = height_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "graphics.Image", true, "github.com/hajimehoshi/ebiten/internal/graphics", true, function(texture_, framebuffer_, width_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.texture = ptrType$4.nil;
			this.framebuffer = ptrType$3.nil;
			this.width = 0;
			this.height = 0;
			return;
		}
		this.texture = texture_;
		this.framebuffer = framebuffer_;
		this.width = width_;
		this.height = height_;
	});
	arrayBufferLayoutPart = $pkg.arrayBufferLayoutPart = $newType(0, $kindStruct, "graphics.arrayBufferLayoutPart", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(name_, dataType_, num_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.dataType = 0;
			this.num = 0;
			return;
		}
		this.name = name_;
		this.dataType = dataType_;
		this.num = num_;
	});
	arrayBufferLayout = $pkg.arrayBufferLayout = $newType(0, $kindStruct, "graphics.arrayBufferLayout", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(parts_, total_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parts = sliceType$3.nil;
			this.total = 0;
			return;
		}
		this.parts = parts_;
		this.total = total_;
	});
	openGLState = $pkg.openGLState = $newType(0, $kindStruct, "graphics.openGLState", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(arrayBuffer_, elementArrayBuffer_, programNearest_, programLinear_, programScreen_, lastProgram_, lastProjectionMatrix_, lastColorMatrix_, lastColorMatrixTranslation_, lastSourceWidth_, lastSourceHeight_, indices_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arrayBuffer = $ifaceNil;
			this.elementArrayBuffer = $ifaceNil;
			this.programNearest = $ifaceNil;
			this.programLinear = $ifaceNil;
			this.programScreen = $ifaceNil;
			this.lastProgram = $ifaceNil;
			this.lastProjectionMatrix = sliceType.nil;
			this.lastColorMatrix = sliceType.nil;
			this.lastColorMatrixTranslation = sliceType.nil;
			this.lastSourceWidth = 0;
			this.lastSourceHeight = 0;
			this.indices = sliceType$1.nil;
			return;
		}
		this.arrayBuffer = arrayBuffer_;
		this.elementArrayBuffer = elementArrayBuffer_;
		this.programNearest = programNearest_;
		this.programLinear = programLinear_;
		this.programScreen = programScreen_;
		this.lastProgram = lastProgram_;
		this.lastProjectionMatrix = lastProjectionMatrix_;
		this.lastColorMatrix = lastColorMatrix_;
		this.lastColorMatrixTranslation = lastColorMatrixTranslation_;
		this.lastSourceWidth = lastSourceWidth_;
		this.lastSourceHeight = lastSourceHeight_;
		this.indices = indices_;
	});
	Filter = $pkg.Filter = $newType(4, $kindInt, "graphics.Filter", true, "github.com/hajimehoshi/ebiten/internal/graphics", true, null);
	texture = $pkg.texture = $newType(0, $kindStruct, "graphics.texture", true, "github.com/hajimehoshi/ebiten/internal/graphics", false, function(native$0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.native$0 = $ifaceNil;
			return;
		}
		this.native$0 = native$0_;
	});
	sliceType = $sliceType($Float32);
	sliceType$1 = $sliceType($Uint16);
	sliceType$2 = $sliceType(command);
	sliceType$3 = $sliceType(arrayBufferLayoutPart);
	ptrType = $ptrType(drawImageCommand);
	ptrType$1 = $ptrType(Image);
	ptrType$2 = $ptrType(affine.ColorM);
	sliceType$4 = $sliceType(sliceType$2);
	arrayType = $arrayType(ptrType, 2);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(framebuffer);
	ptrType$4 = $ptrType(texture);
	sliceType$6 = $sliceType($Uint8);
	sliceType$7 = $sliceType(opengl.Shader);
	sliceType$8 = $sliceType($String);
	ptrType$5 = $ptrType(commandQueue);
	ptrType$6 = $ptrType(replacePixelsCommand);
	ptrType$7 = $ptrType(disposeCommand);
	ptrType$8 = $ptrType(newImageCommand);
	ptrType$9 = $ptrType(newScreenFramebufferImageCommand);
	ptrType$10 = $ptrType(arrayBufferLayout);
	ptrType$11 = $ptrType(openGLState);
	commandQueue.ptr.prototype.appendVertices = function(vertices) {
		var $ptr, i, n, q, vertices, x, x$1;
		q = this;
		if (q.vertices.$length < (q.nvertices + vertices.$length >> 0)) {
			n = (q.nvertices + vertices.$length >> 0) - q.vertices.$length >> 0;
			q.vertices = $appendSlice(q.vertices, $makeSlice(sliceType, n));
		}
		i = 0;
		while (true) {
			if (!(i < vertices.$length)) { break; }
			(x = q.vertices, x$1 = q.nvertices + i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((i < 0 || i >= vertices.$length) ? ($throwRuntimeError("index out of range"), undefined) : vertices.$array[vertices.$offset + i])));
			i = i + (1) >> 0;
		}
		q.nvertices = q.nvertices + (vertices.$length) >> 0;
	};
	commandQueue.prototype.appendVertices = function(vertices) { return this.$val.appendVertices(vertices); };
	commandQueue.ptr.prototype.EnqueueDrawImageCommand = function(dst, src, vertices, clr, mode, filter) {
		var $ptr, _tuple, c, c$1, clr, dst, filter, mode, ok, q, src, vertices, x, x$1;
		q = this;
		q.m.Mutex.Lock();
		q.appendVertices(vertices);
		if (0 < q.commands.$length) {
			_tuple = $assertType((x = q.commands, x$1 = q.commands.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), ptrType, true);
			c = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				if (c.canMerge(dst, src, clr, mode, filter)) {
					c.nvertices = c.nvertices + (vertices.$length) >> 0;
					q.m.Mutex.Unlock();
					return;
				}
			}
		}
		c$1 = new drawImageCommand.ptr(dst, src, vertices.$length, clr, mode, filter);
		q.commands = $append(q.commands, c$1);
		q.m.Mutex.Unlock();
	};
	commandQueue.prototype.EnqueueDrawImageCommand = function(dst, src, vertices, clr, mode, filter) { return this.$val.EnqueueDrawImageCommand(dst, src, vertices, clr, mode, filter); };
	commandQueue.ptr.prototype.Enqueue = function(command$1) {
		var $ptr, command$1, q;
		q = this;
		q.m.Mutex.Lock();
		q.commands = $append(q.commands, command$1);
		q.m.Mutex.Unlock();
	};
	commandQueue.prototype.Enqueue = function(command$1) { return this.$val.Enqueue(command$1); };
	commandQueue.ptr.prototype.commandGroups = function() {
		var $ptr, _ref, c, c$1, cc, cs, gs, q, quads, x, x$1, x$2, x$3;
		q = this;
		cs = q.commands;
		gs = sliceType$4.nil;
		quads = 0;
		while (true) {
			if (!(0 < cs.$length)) { break; }
			if (gs.$length === 0) {
				gs = $append(gs, new sliceType$2([]));
			}
			c = (0 >= cs.$length ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + 0]);
			_ref = c;
			switch (0) { default: if ($assertType(_ref, ptrType, true)[1]) {
				c$1 = _ref.$val;
				if (10922 >= (quads + c$1.quadsNum() >> 0)) {
					quads = quads + (c$1.quadsNum()) >> 0;
					break;
				}
				cc = $clone(c$1.split(10922 - quads >> 0), arrayType);
				(x$1 = gs.$length - 1 >> 0, ((x$1 < 0 || x$1 >= gs.$length) ? ($throwRuntimeError("index out of range"), undefined) : gs.$array[gs.$offset + x$1] = $append((x = gs.$length - 1 >> 0, ((x < 0 || x >= gs.$length) ? ($throwRuntimeError("index out of range"), undefined) : gs.$array[gs.$offset + x])), cc[0])));
				(0 >= cs.$length ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + 0] = cc[1]);
				quads = 0;
				gs = $append(gs, new sliceType$2([]));
				continue;
			} }
			(x$3 = gs.$length - 1 >> 0, ((x$3 < 0 || x$3 >= gs.$length) ? ($throwRuntimeError("index out of range"), undefined) : gs.$array[gs.$offset + x$3] = $append((x$2 = gs.$length - 1 >> 0, ((x$2 < 0 || x$2 >= gs.$length) ? ($throwRuntimeError("index out of range"), undefined) : gs.$array[gs.$offset + x$2])), c)));
			cs = $subslice(cs, 1);
		}
		return gs;
	};
	commandQueue.prototype.commandGroups = function() { return this.$val.commandGroups(); };
	commandQueue.ptr.prototype.Flush = function() {
		var $ptr, _i, _i$1, _i$2, _q, _q$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, c, c$1, err, g, indexOffsetInBytes, lastN, n, n$1, numc, q, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; c = $f.c; c$1 = $f.c$1; err = $f.err; g = $f.g; indexOffsetInBytes = $f.indexOffsetInBytes; lastN = $f.lastN; n = $f.n; n$1 = $f.n$1; numc = $f.numc; q = $f.q; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		q = this;
		q.m.Mutex.Lock();
		$deferred.push([$methodVal(q.m.Mutex, "Unlock"), []]);
		opengl.GetContext().ResetViewportSize();
		n = 0;
		lastN = 0;
		_ref = q.commandGroups();
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			g = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = g;
			_i$1 = 0;
			/* while (true) { */ case 3:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 4; continue; }
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r = c.NumVertices(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				n = n + (_r) >> 0;
				_i$1++;
			/* } */ $s = 3; continue; case 4:
			if (0 < (n - lastN >> 0)) {
				opengl.GetContext().BufferSubData(opengl.ArrayBuffer, $subslice(q.vertices, lastN, n));
			}
			/* */ if (10922 < (_q = ($imul(((n - lastN >> 0)), new opengl.DataType(opengl.Float).SizeInBytes())) / QuadVertexSizeInBytes(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (10922 < (_q = ($imul(((n - lastN >> 0)), new opengl.DataType(opengl.Float).SizeInBytes())) / QuadVertexSizeInBytes(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 6:
				_r$1 = fmt.Errorf("len(quads) must be equal to or less than %d", new sliceType$5([new $Int(10922)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } */ case 7:
			numc = g.$length;
			indexOffsetInBytes = 0;
			_ref$2 = g;
			_i$2 = 0;
			/* while (true) { */ case 9:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 10; continue; }
				c$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$2 = c$1.Exec(indexOffsetInBytes); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				_r$3 = c$1.NumVertices(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				n$1 = (_q$1 = ($imul(_r$3, new opengl.DataType(opengl.Float).SizeInBytes())) / QuadVertexSizeInBytes(), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				indexOffsetInBytes = indexOffsetInBytes + (($imul(($imul(6, n$1)), 2))) >> 0;
				_i$2++;
			/* } */ $s = 9; continue; case 10:
			if (0 < numc) {
				opengl.GetContext().Flush();
			}
			lastN = n;
			_i++;
		/* } */ $s = 1; continue; case 2:
		q.commands = sliceType$2.nil;
		q.nvertices = 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: commandQueue.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.c = c; $f.c$1 = c$1; $f.err = err; $f.g = g; $f.indexOffsetInBytes = indexOffsetInBytes; $f.lastN = lastN; $f.n = n; $f.n$1 = n$1; $f.numc = numc; $f.q = q; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	commandQueue.prototype.Flush = function() { return this.$val.Flush(); };
	FlushCommands = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = theCommandQueue.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlushCommands }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FlushCommands = FlushCommands;
	QuadVertexSizeInBytes = function() {
		var $ptr;
		return $imul(4, theArrayBufferLayout.totalBytes());
	};
	$pkg.QuadVertexSizeInBytes = QuadVertexSizeInBytes;
	drawImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var $ptr, _r, _tuple, c, err, f, indexOffsetInBytes, n, proj, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; indexOffsetInBytes = $f.indexOffsetInBytes; n = $f.n; proj = $f.proj; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.dst.createFramebufferIfNeeded(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		f.setAsViewport();
		opengl.GetContext().BlendFunc(c.mode);
		n = c.quadsNum();
		if (n === 0) {
			$s = -1; return $ifaceNil;
		}
		proj = f.projectionMatrix();
		theOpenGLState.useProgram(proj, c.src.texture.native$0, c.dst, c.src, c.color, c.filter);
		opengl.GetContext().DrawElements(opengl.Triangles, $imul(6, n), indexOffsetInBytes);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawImageCommand.ptr.prototype.Exec }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.indexOffsetInBytes = indexOffsetInBytes; $f.n = n; $f.proj = proj; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	drawImageCommand.ptr.prototype.NumVertices = function() {
		var $ptr, c;
		c = this;
		return c.nvertices;
	};
	drawImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	drawImageCommand.ptr.prototype.split = function(quadsNum) {
		var $ptr, _q, c, c1, c2, n, quadsNum, s;
		c = this;
		c1 = $clone(c, drawImageCommand);
		c2 = $clone(c, drawImageCommand);
		s = new opengl.DataType(opengl.Float).SizeInBytes();
		n = (_q = ($imul(quadsNum, QuadVertexSizeInBytes())) / s, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		c1.nvertices = n;
		c2.nvertices = c2.nvertices - (n) >> 0;
		return $toNativeArray($kindPtr, [c1, c2]);
	};
	drawImageCommand.prototype.split = function(quadsNum) { return this.$val.split(quadsNum); };
	drawImageCommand.ptr.prototype.canMerge = function(dst, src, clr, mode, filter) {
		var $ptr, c, clr, dst, filter, mode, src;
		c = this;
		if (!(c.dst === dst)) {
			return false;
		}
		if (!(c.src === src)) {
			return false;
		}
		if (!c.color.Equals(clr)) {
			return false;
		}
		if (!((c.mode === mode))) {
			return false;
		}
		if (!((c.filter === filter))) {
			return false;
		}
		return true;
	};
	drawImageCommand.prototype.canMerge = function(dst, src, clr, mode, filter) { return this.$val.canMerge(dst, src, clr, mode, filter); };
	drawImageCommand.ptr.prototype.quadsNum = function() {
		var $ptr, _q, c;
		c = this;
		return (_q = ($imul(c.nvertices, new opengl.DataType(opengl.Float).SizeInBytes())) / QuadVertexSizeInBytes(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	drawImageCommand.prototype.quadsNum = function() { return this.$val.quadsNum(); };
	replacePixelsCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var $ptr, _r, _tuple, c, err, f, indexOffsetInBytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; indexOffsetInBytes = $f.indexOffsetInBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.dst.createFramebufferIfNeeded(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		f.setAsViewport();
		opengl.GetContext().Flush();
		opengl.GetContext().BindTexture(c.dst.texture.native$0);
		opengl.GetContext().TexSubImage2D(c.pixels, c.x, c.y, c.width, c.height);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: replacePixelsCommand.ptr.prototype.Exec }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.indexOffsetInBytes = indexOffsetInBytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	replacePixelsCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	replacePixelsCommand.ptr.prototype.NumVertices = function() {
		var $ptr, c;
		c = this;
		return 0;
	};
	replacePixelsCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	disposeCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var $ptr, c, indexOffsetInBytes;
		c = this;
		if (!(c.target.framebuffer === ptrType$3.nil) && !($interfaceIsEqual(c.target.framebuffer.native$0, opengl.GetContext().ScreenFramebuffer()))) {
			opengl.GetContext().DeleteFramebuffer(c.target.framebuffer.native$0);
		}
		if (!(c.target.texture === ptrType$4.nil)) {
			opengl.GetContext().DeleteTexture(c.target.texture.native$0);
		}
		return $ifaceNil;
	};
	disposeCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	disposeCommand.ptr.prototype.NumVertices = function() {
		var $ptr, c;
		c = this;
		return 0;
	};
	disposeCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	newImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var $ptr, _tuple, c, err, h, indexOffsetInBytes, native$1, w;
		c = this;
		w = math.NextPowerOf2Int(c.width);
		h = math.NextPowerOf2Int(c.height);
		if (w < 1) {
			return errors.New("graphics: width must be equal or more than 1.");
		}
		if (h < 1) {
			return errors.New("graphics: height must be equal or more than 1.");
		}
		_tuple = opengl.GetContext().NewTexture(w, h);
		native$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		c.result.texture = new texture.ptr(native$1);
		return $ifaceNil;
	};
	newImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	newImageCommand.ptr.prototype.NumVertices = function() {
		var $ptr, c;
		c = this;
		return 0;
	};
	newImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	newScreenFramebufferImageCommand.ptr.prototype.Exec = function(indexOffsetInBytes) {
		var $ptr, c, indexOffsetInBytes;
		c = this;
		if (c.width < 1) {
			return errors.New("graphics: width must be equal or more than 1.");
		}
		if (c.height < 1) {
			return errors.New("graphics: height must be equal or more than 1.");
		}
		c.result.framebuffer = newScreenFramebuffer(c.width, c.height);
		return $ifaceNil;
	};
	newScreenFramebufferImageCommand.prototype.Exec = function(indexOffsetInBytes) { return this.$val.Exec(indexOffsetInBytes); };
	newScreenFramebufferImageCommand.ptr.prototype.NumVertices = function() {
		var $ptr, c;
		c = this;
		return 0;
	};
	newScreenFramebufferImageCommand.prototype.NumVertices = function() { return this.$val.NumVertices(); };
	orthoProjectionMatrix = function(left, right, bottom, top) {
		var $ptr, bottom, e11, e14, e22, e24, left, right, top;
		e11 = $fround(2 / ((right - left >> 0)));
		e22 = $fround(2 / ((top - bottom >> 0)));
		e14 = $fround($fround(-1 * ((right + left >> 0))) / ((right - left >> 0)));
		e24 = $fround($fround(-1 * ((top + bottom >> 0))) / ((top - bottom >> 0)));
		return new sliceType([e11, 0, 0, 0, 0, e22, 0, 0, 0, 0, 1, 0, e14, e24, 0, 1]);
	};
	newFramebufferFromTexture = function(texture$1, width, height) {
		var $ptr, _r, _tuple, err, height, native$1, texture$1, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; height = $f.height; native$1 = $f.native$1; texture$1 = $f.texture$1; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = opengl.GetContext().NewFramebuffer((texture$1.native$0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		native$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		$s = -1; return [new framebuffer.ptr(native$1, false, sliceType.nil, width, height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newFramebufferFromTexture }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.height = height; $f.native$1 = native$1; $f.texture$1 = texture$1; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	newScreenFramebuffer = function(width, height) {
		var $ptr, height, width;
		return new framebuffer.ptr(opengl.GetContext().ScreenFramebuffer(), true, sliceType.nil, width, height);
	};
	framebuffer.ptr.prototype.viewportSize = function() {
		var $ptr, f;
		f = this;
		if (web.IsBrowser()) {
			return [f.width, f.height];
		}
		return [4096, 4096];
	};
	framebuffer.prototype.viewportSize = function() { return this.$val.viewportSize(); };
	framebuffer.ptr.prototype.setAsViewport = function() {
		var $ptr, _tuple, f, h, w;
		f = this;
		_tuple = f.viewportSize();
		w = _tuple[0];
		h = _tuple[1];
		opengl.GetContext().SetViewport(f.native$0, w, h);
	};
	framebuffer.prototype.setAsViewport = function() { return this.$val.setAsViewport(); };
	framebuffer.ptr.prototype.projectionMatrix = function() {
		var $ptr, _tuple, f, h, m, w;
		f = this;
		if (!(f.proMatrix === sliceType.nil)) {
			return f.proMatrix;
		}
		_tuple = f.viewportSize();
		w = _tuple[0];
		h = _tuple[1];
		m = orthoProjectionMatrix(0, w, 0, h);
		f.proMatrix = m;
		return f.proMatrix;
	};
	framebuffer.prototype.projectionMatrix = function() { return this.$val.projectionMatrix(); };
	NewImage = function(width, height) {
		var $ptr, c, height, i, width;
		i = new Image.ptr(ptrType$4.nil, ptrType$3.nil, width, height);
		c = new newImageCommand.ptr(i, width, height);
		theCommandQueue.Enqueue(c);
		return i;
	};
	$pkg.NewImage = NewImage;
	NewScreenFramebufferImage = function(width, height) {
		var $ptr, c, height, i, width;
		i = new Image.ptr(ptrType$4.nil, ptrType$3.nil, width, height);
		c = new newScreenFramebufferImageCommand.ptr(i, width, height);
		theCommandQueue.Enqueue(c);
		return i;
	};
	$pkg.NewScreenFramebufferImage = NewScreenFramebufferImage;
	Image.ptr.prototype.Dispose = function() {
		var $ptr, c, i;
		i = this;
		c = new disposeCommand.ptr(i);
		theCommandQueue.Enqueue(c);
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.Size = function() {
		var $ptr, i;
		i = this;
		return [i.width, i.height];
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.DrawImage = function(src, vertices, clr, mode, filter) {
		var $ptr, clr, filter, i, mode, src, vertices;
		i = this;
		theCommandQueue.EnqueueDrawImageCommand(i, src, vertices, clr, mode, filter);
	};
	Image.prototype.DrawImage = function(src, vertices, clr, mode, filter) { return this.$val.DrawImage(src, vertices, clr, mode, filter); };
	Image.ptr.prototype.Pixels = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, err, err$1, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = theCommandQueue.Flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$6.nil, err];
		}
		_r$1 = i.createFramebufferIfNeeded(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [sliceType$6.nil, err$1];
		}
		_r$2 = opengl.GetContext().FramebufferPixels(f.native$0, i.width, i.height); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Pixels }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Pixels = function() { return this.$val.Pixels(); };
	Image.ptr.prototype.ReplacePixels = function(p, x, y, width, height) {
		var $ptr, c, height, i, p, pixels, width, x, y;
		i = this;
		pixels = $makeSlice(sliceType$6, p.$length);
		$copySlice(pixels, p);
		c = new replacePixelsCommand.ptr(i, pixels, x, y, width, height);
		theCommandQueue.Enqueue(c);
	};
	Image.prototype.ReplacePixels = function(p, x, y, width, height) { return this.$val.ReplacePixels(p, x, y, width, height); };
	Image.ptr.prototype.IsInvalidated = function() {
		var $ptr, i;
		i = this;
		return !opengl.GetContext().IsTexture(i.texture.native$0);
	};
	Image.prototype.IsInvalidated = function() { return this.$val.IsInvalidated(); };
	Image.ptr.prototype.createFramebufferIfNeeded = function() {
		var $ptr, _r, _tuple, err, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!(i.framebuffer === ptrType$3.nil)) {
			$s = -1; return [i.framebuffer, $ifaceNil];
		}
		_r = newFramebufferFromTexture(i.texture, math.NextPowerOf2Int(i.width), math.NextPowerOf2Int(i.height)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		i.framebuffer = f;
		$s = -1; return [i.framebuffer, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.createFramebufferIfNeeded }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.createFramebufferIfNeeded = function() { return this.$val.createFramebufferIfNeeded(); };
	arrayBufferLayout.ptr.prototype.totalBytes = function() {
		var $ptr, _i, _ref, a, p, t;
		a = this;
		if (!((a.total === 0))) {
			return a.total;
		}
		t = 0;
		_ref = a.parts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			t = t + (($imul(new opengl.DataType(p.dataType).SizeInBytes(), p.num))) >> 0;
			_i++;
		}
		a.total = t;
		return a.total;
	};
	arrayBufferLayout.prototype.totalBytes = function() { return this.$val.totalBytes(); };
	arrayBufferLayout.ptr.prototype.newArrayBuffer = function() {
		var $ptr, a;
		a = this;
		return opengl.GetContext().NewArrayBuffer($imul(($imul(a.totalBytes(), 4)), 10922));
	};
	arrayBufferLayout.prototype.newArrayBuffer = function() { return this.$val.newArrayBuffer(); };
	arrayBufferLayout.ptr.prototype.enable = function(program) {
		var $ptr, _i, _i$1, _ref, _ref$1, a, offset, p, p$1, program, total;
		a = this;
		_ref = a.parts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			opengl.GetContext().EnableVertexAttribArray(program, p.name);
			_i++;
		}
		total = a.totalBytes();
		offset = 0;
		_ref$1 = a.parts;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), arrayBufferLayoutPart);
			opengl.GetContext().VertexAttribPointer(program, p$1.name, p$1.num, p$1.dataType, total, offset);
			offset = offset + (($imul(new opengl.DataType(p$1.dataType).SizeInBytes(), p$1.num))) >> 0;
			_i$1++;
		}
	};
	arrayBufferLayout.prototype.enable = function(program) { return this.$val.enable(program); };
	arrayBufferLayout.ptr.prototype.disable = function(program) {
		var $ptr, _i, _ref, a, p, program;
		a = this;
		_ref = a.parts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayBufferLayoutPart);
			opengl.GetContext().DisableVertexAttribArray(program, p.name);
			_i++;
		}
	};
	arrayBufferLayout.prototype.disable = function(program) { return this.$val.disable(program); };
	ResetGLState = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = theOpenGLState.reset(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResetGLState }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResetGLState = ResetGLState;
	openGLState.ptr.prototype.reset = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, err, err$1, i, s, shaderFragmentLinearNative, shaderFragmentNearestNative, shaderFragmentScreenNative, shaderVertexModelviewNative, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; err = $f.err; err$1 = $f.err$1; i = $f.i; s = $f.s; shaderFragmentLinearNative = $f.shaderFragmentLinearNative; shaderFragmentNearestNative = $f.shaderFragmentNearestNative; shaderFragmentScreenNative = $f.shaderFragmentScreenNative; shaderVertexModelviewNative = $f.shaderVertexModelviewNative; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = this;
		err = opengl.GetContext().Reset();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		s.lastProgram = zeroProgram;
		s.lastProjectionMatrix = sliceType.nil;
		s.lastColorMatrix = sliceType.nil;
		s.lastColorMatrixTranslation = sliceType.nil;
		s.lastSourceWidth = 0;
		s.lastSourceHeight = 0;
		if (!($interfaceIsEqual(s.programNearest, zeroProgram))) {
			opengl.GetContext().DeleteProgram(s.programNearest);
		}
		if (!($interfaceIsEqual(s.programLinear, zeroProgram))) {
			opengl.GetContext().DeleteProgram(s.programLinear);
		}
		if (!($interfaceIsEqual(s.programScreen, zeroProgram))) {
			opengl.GetContext().DeleteProgram(s.programScreen);
		}
		if (!web.IsBrowser()) {
			if (!($interfaceIsEqual(s.arrayBuffer, zeroBuffer))) {
				opengl.GetContext().DeleteBuffer(s.arrayBuffer);
			}
			if (!($interfaceIsEqual(s.elementArrayBuffer, zeroBuffer))) {
				opengl.GetContext().DeleteBuffer(s.elementArrayBuffer);
			}
		}
		_r = opengl.GetContext().NewShader(opengl.VertexShader, shader(0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		shaderVertexModelviewNative = _tuple[0];
		err$1 = _tuple[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$5([err$1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 3:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [shaderVertexModelviewNative]]);
		_r$2 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(1)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		shaderFragmentNearestNative = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 6:
			_r$3 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$5([err$1])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 7:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [shaderFragmentNearestNative]]);
		_r$4 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(2)); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		shaderFragmentLinearNative = _tuple$2[0];
		err$1 = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:
			_r$5 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$5([err$1])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$panic(new $String(_r$5));
		/* } */ case 11:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [shaderFragmentLinearNative]]);
		_r$6 = opengl.GetContext().NewShader(opengl.FragmentShader, shader(3)); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$3 = _r$6;
		shaderFragmentScreenNative = _tuple$3[0];
		err$1 = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:
			_r$7 = fmt.Sprintf("graphics: shader compiling error:\n%s", new sliceType$5([err$1])); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$panic(new $String(_r$7));
		/* } */ case 15:
		$deferred.push([$methodVal(opengl.GetContext(), "DeleteShader"), [shaderFragmentScreenNative]]);
		_tuple$4 = opengl.GetContext().NewProgram(new sliceType$7([shaderVertexModelviewNative, shaderFragmentNearestNative]));
		s.programNearest = _tuple$4[0];
		err$1 = _tuple$4[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_tuple$5 = opengl.GetContext().NewProgram(new sliceType$7([shaderVertexModelviewNative, shaderFragmentLinearNative]));
		s.programLinear = _tuple$5[0];
		err$1 = _tuple$5[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		_tuple$6 = opengl.GetContext().NewProgram(new sliceType$7([shaderVertexModelviewNative, shaderFragmentScreenNative]));
		s.programScreen = _tuple$6[0];
		err$1 = _tuple$6[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		s.arrayBuffer = theArrayBufferLayout.newArrayBuffer();
		s.indices = $makeSlice(sliceType$1, 65532);
		i = 0;
		while (true) {
			if (!(i < 10922)) { break; }
			(x = s.indices, x$1 = (6 * i << 16 >>> 16) + 0 << 16 >>> 16, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((4 * i << 16 >>> 16) + 0 << 16 >>> 16)));
			(x$2 = s.indices, x$3 = (6 * i << 16 >>> 16) + 1 << 16 >>> 16, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = ((4 * i << 16 >>> 16) + 1 << 16 >>> 16)));
			(x$4 = s.indices, x$5 = (6 * i << 16 >>> 16) + 2 << 16 >>> 16, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = ((4 * i << 16 >>> 16) + 2 << 16 >>> 16)));
			(x$6 = s.indices, x$7 = (6 * i << 16 >>> 16) + 3 << 16 >>> 16, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = ((4 * i << 16 >>> 16) + 1 << 16 >>> 16)));
			(x$8 = s.indices, x$9 = (6 * i << 16 >>> 16) + 4 << 16 >>> 16, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9] = ((4 * i << 16 >>> 16) + 2 << 16 >>> 16)));
			(x$10 = s.indices, x$11 = (6 * i << 16 >>> 16) + 5 << 16 >>> 16, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = ((4 * i << 16 >>> 16) + 3 << 16 >>> 16)));
			i = i + (1) << 16 >>> 16;
		}
		s.elementArrayBuffer = opengl.GetContext().NewElementArrayBuffer(s.indices);
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: openGLState.ptr.prototype.reset }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.s = s; $f.shaderFragmentLinearNative = shaderFragmentLinearNative; $f.shaderFragmentNearestNative = shaderFragmentNearestNative; $f.shaderFragmentScreenNative = shaderFragmentScreenNative; $f.shaderVertexModelviewNative = shaderVertexModelviewNative; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	openGLState.prototype.reset = function() { return this.$val.reset(); };
	areSameFloat32Array = function(a, b) {
		var $ptr, a, b, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			if (!((((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]) === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	openGLState.ptr.prototype.useProgram = function(proj, texture$1, dst, src, colorM, filter) {
		var $ptr, _1, _tuple, _tuple$1, _tuple$2, _tuple$3, c, colorM, dst, dw, esBody, esTranslate, filter, program, proj, s, scale, sh, src, sw, sw$1, texture$1;
		s = this;
		c = opengl.GetContext();
		program = $ifaceNil;
		_1 = filter;
		if (_1 === (1)) {
			program = s.programNearest;
		} else if (_1 === (2)) {
			program = s.programLinear;
		} else if (_1 === (3)) {
			program = s.programScreen;
		} else {
			$panic(new $String("not reached"));
		}
		if (!($interfaceIsEqual(s.lastProgram, program))) {
			c.UseProgram(program);
			if (!($interfaceIsEqual(s.lastProgram, zeroProgram))) {
				theArrayBufferLayout.disable(s.lastProgram);
			}
			theArrayBufferLayout.enable(program);
			s.lastProgram = program;
			s.lastProjectionMatrix = sliceType.nil;
			s.lastColorMatrix = sliceType.nil;
			s.lastColorMatrixTranslation = sliceType.nil;
			s.lastSourceWidth = 0;
			s.lastSourceHeight = 0;
			c.BindElementArrayBuffer(s.elementArrayBuffer);
			c.UniformInt(program, "texture", 0);
		}
		if (!areSameFloat32Array(s.lastProjectionMatrix, proj)) {
			c.UniformFloats(program, "projection_matrix", proj);
			if (s.lastProjectionMatrix === sliceType.nil) {
				s.lastProjectionMatrix = $makeSlice(sliceType, 16);
			}
			s.lastProjectionMatrix = proj;
		}
		_tuple = colorM.UnsafeElements();
		esBody = _tuple[0];
		esTranslate = _tuple[1];
		if (!areSameFloat32Array(s.lastColorMatrix, esBody)) {
			c.UniformFloats(program, "color_matrix", esBody);
			if (s.lastColorMatrix === sliceType.nil) {
				s.lastColorMatrix = $makeSlice(sliceType, 16);
			}
			s.lastColorMatrix = esBody;
		}
		if (!areSameFloat32Array(s.lastColorMatrixTranslation, esTranslate)) {
			c.UniformFloats(program, "color_matrix_translation", esTranslate);
			if (s.lastColorMatrixTranslation === sliceType.nil) {
				s.lastColorMatrixTranslation = $makeSlice(sliceType, 4);
			}
			s.lastColorMatrixTranslation = esTranslate;
		}
		if ($interfaceIsEqual(program, s.programLinear) || $interfaceIsEqual(program, s.programScreen)) {
			_tuple$1 = src.Size();
			sw = _tuple$1[0];
			sh = _tuple$1[1];
			sw = math.NextPowerOf2Int(sw);
			sh = math.NextPowerOf2Int(sh);
			if (!((s.lastSourceWidth === sw)) || !((s.lastSourceHeight === sh))) {
				c.UniformFloats(program, "source_size", new sliceType([(sw), (sh)]));
				s.lastSourceWidth = sw;
				s.lastSourceHeight = sh;
			}
		}
		if ($interfaceIsEqual(program, s.programScreen)) {
			_tuple$2 = src.Size();
			sw$1 = _tuple$2[0];
			_tuple$3 = dst.Size();
			dw = _tuple$3[0];
			scale = $fround((dw) / (sw$1));
			c.UniformFloat(program, "scale", scale);
		}
		c.BindTexture(texture$1);
	};
	openGLState.prototype.useProgram = function(proj, texture$1, dst, src, colorM, filter) { return this.$val.useProgram(proj, texture$1, dst, src, colorM, filter); };
	shader = function(id) {
		var $ptr, _1, defs, id;
		if (id === 0) {
			return "\nuniform mat4 projection_matrix;\nattribute vec2 vertex;\nattribute vec4 tex_coord;\nvarying vec2 varying_tex_coord;\nvarying vec2 varying_tex_coord_min;\nvarying vec2 varying_tex_coord_max;\n\nvoid main(void) {\n  varying_tex_coord = vec2(tex_coord[0], tex_coord[1]);\n  varying_tex_coord_min = vec2(min(tex_coord[0], tex_coord[2]), min(tex_coord[1], tex_coord[3]));\n  varying_tex_coord_max = vec2(max(tex_coord[0], tex_coord[2]), max(tex_coord[1], tex_coord[3]));\n  gl_Position = projection_matrix * vec4(vertex, 0, 1);\n}\n";
		}
		defs = new sliceType$8([]);
		_1 = id;
		if (_1 === (1)) {
			defs = $append(defs, "#define FILTER_NEAREST");
		} else if (_1 === (2)) {
			defs = $append(defs, "#define FILTER_LINEAR");
		} else if (_1 === (3)) {
			defs = $append(defs, "#define FILTER_SCREEN");
		} else {
			$panic(new $String("not reached"));
		}
		return strings.Replace("\n#if defined(GL_ES)\nprecision mediump float;\n#else\n#define lowp\n#define mediump\n#define highp\n#endif\n\n{{Definitions}}\n\nuniform sampler2D texture;\nuniform mat4 color_matrix;\nuniform vec4 color_matrix_translation;\n\n#if defined(FILTER_LINEAR) || defined(FILTER_SCREEN)\nuniform highp vec2 source_size;\n#endif\n\n#if defined(FILTER_SCREEN)\nuniform highp float scale;\n#endif\n\nvarying highp vec2 varying_tex_coord;\nvarying highp vec2 varying_tex_coord_min;\nvarying highp vec2 varying_tex_coord_max;\n\nhighp vec2 roundTexel(highp vec2 p) {\n  // highp (relative) precision is 2^(-16) in the spec.\n  // The minimum value for a denominator is half of 65536.\n  highp float factor = 1.0 / 32768.0;\n  p.x -= mod(p.x + factor * 0.5, factor) - factor * 0.5;\n  p.y -= mod(p.y + factor * 0.5, factor) - factor * 0.5;\n  return p;\n}\n\nvoid main(void) {\n  highp vec2 pos = varying_tex_coord;\n\n#if defined(FILTER_NEAREST)\n  vec4 color = texture2D(texture, pos);\n  if (pos.x < varying_tex_coord_min.x ||\n    pos.y < varying_tex_coord_min.y ||\n    varying_tex_coord_max.x <= pos.x ||\n    varying_tex_coord_max.y <= pos.y) {\n    color = vec4(0, 0, 0, 0);\n  }\n#endif\n\n#if defined(FILTER_LINEAR)\n  pos = roundTexel(pos);\n  highp vec2 texel_size = 1.0 / source_size;\n\n  highp vec2 p0 = pos;\n  highp vec2 p1 = pos + texel_size;\n  vec4 c0 = texture2D(texture, p0);\n  vec4 c1 = texture2D(texture, vec2(p1.x, p0.y));\n  vec4 c2 = texture2D(texture, vec2(p0.x, p1.y));\n  vec4 c3 = texture2D(texture, p1);\n  if (p0.x < varying_tex_coord_min.x) {\n    c0 = vec4(0, 0, 0, 0);\n    c2 = vec4(0, 0, 0, 0);\n  }\n  if (p0.y < varying_tex_coord_min.y) {\n    c0 = vec4(0, 0, 0, 0);\n    c1 = vec4(0, 0, 0, 0);\n  }\n  if (varying_tex_coord_max.x <= p1.x) {\n    c1 = vec4(0, 0, 0, 0);\n    c3 = vec4(0, 0, 0, 0);\n  }\n  if (varying_tex_coord_max.y <= p1.y) {\n    c2 = vec4(0, 0, 0, 0);\n    c3 = vec4(0, 0, 0, 0);\n  }\n\n  vec2 rate = fract(pos * source_size);\n  vec4 color = mix(mix(c0, c1, rate.x), mix(c2, c3, rate.x), rate.y);\n#endif\n\n#if defined(FILTER_SCREEN)\n  pos = roundTexel(pos);\n  highp vec2 texel_size = 1.0 / source_size;\n  pos -= texel_size / 2.0 / scale;\n\n  highp vec2 p0 = pos;\n  highp vec2 p1 = pos + texel_size / scale;\n  vec4 c0 = texture2D(texture, p0);\n  vec4 c1 = texture2D(texture, vec2(p1.x, p0.y));\n  vec4 c2 = texture2D(texture, vec2(p0.x, p1.y));\n  vec4 c3 = texture2D(texture, p1);\n  // Texels must be in the source rect, so it is not necessary to check that like linear filter.\n\n  vec2 rateCenter = vec2(1.0, 1.0) - texel_size / 2.0 / scale;\n  vec2 rate = clamp(((fract(pos * source_size) - rateCenter) * scale) + rateCenter, 0.0, 1.0);\n  vec4 color = mix(mix(c0, c1, rate.x), mix(c2, c3, rate.x), rate.y);\n#endif\n\n  // Un-premultiply alpha\n  if (0.0 < color.a) {\n    color.rgb /= color.a;\n  }\n  // Apply the color matrix\n  color = (color_matrix * color) + color_matrix_translation;\n  color = clamp(color, 0.0, 1.0);\n  // Premultiply alpha\n  color.rgb *= color.a;\n\n  gl_FragColor = color;\n}\n", "{{Definitions}}", strings.Join(defs, "\n"), -1);
	};
	ptrType$5.methods = [{prop: "appendVertices", name: "appendVertices", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([sliceType], [], false)}, {prop: "EnqueueDrawImageCommand", name: "EnqueueDrawImageCommand", pkg: "", typ: $funcType([ptrType$1, ptrType$1, sliceType, ptrType$2, opengl.CompositeMode, Filter], [], false)}, {prop: "Enqueue", name: "Enqueue", pkg: "", typ: $funcType([command], [], false)}, {prop: "commandGroups", name: "commandGroups", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [sliceType$4], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "split", name: "split", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([$Int], [arrayType], false)}, {prop: "canMerge", name: "canMerge", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([ptrType$1, ptrType$1, ptrType$2, opengl.CompositeMode, Filter], [$Bool], false)}, {prop: "quadsNum", name: "quadsNum", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$Int], false)}];
	ptrType$6.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$7.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$8.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$9.methods = [{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$3.methods = [{prop: "viewportSize", name: "viewportSize", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$Int, $Int], false)}, {prop: "setAsViewport", name: "setAsViewport", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [], false)}, {prop: "projectionMatrix", name: "projectionMatrix", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [sliceType], false)}];
	ptrType$1.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType$1, sliceType, ptrType$2, opengl.CompositeMode, Filter], [], false)}, {prop: "Pixels", name: "Pixels", pkg: "", typ: $funcType([], [sliceType$6, $error], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$6, $Int, $Int, $Int, $Int], [], false)}, {prop: "IsInvalidated", name: "IsInvalidated", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "createFramebufferIfNeeded", name: "createFramebufferIfNeeded", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [ptrType$3, $error], false)}];
	ptrType$10.methods = [{prop: "totalBytes", name: "totalBytes", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$Int], false)}, {prop: "newArrayBuffer", name: "newArrayBuffer", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [opengl.Buffer], false)}, {prop: "enable", name: "enable", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([opengl.Program], [], false)}, {prop: "disable", name: "disable", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([opengl.Program], [], false)}];
	ptrType$11.methods = [{prop: "reset", name: "reset", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([], [$error], false)}, {prop: "useProgram", name: "useProgram", pkg: "github.com/hajimehoshi/ebiten/internal/graphics", typ: $funcType([sliceType, opengl.Texture, ptrType$1, ptrType$1, ptrType$2, Filter], [], false)}];
	command.init([{prop: "Exec", name: "Exec", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}]);
	commandQueue.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "commands", name: "commands", exported: false, typ: sliceType$2, tag: ""}, {prop: "vertices", name: "vertices", exported: false, typ: sliceType, tag: ""}, {prop: "nvertices", name: "nvertices", exported: false, typ: $Int, tag: ""}, {prop: "m", name: "m", exported: false, typ: sync.Mutex, tag: ""}]);
	drawImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "dst", name: "dst", exported: false, typ: ptrType$1, tag: ""}, {prop: "src", name: "src", exported: false, typ: ptrType$1, tag: ""}, {prop: "nvertices", name: "nvertices", exported: false, typ: $Int, tag: ""}, {prop: "color", name: "color", exported: false, typ: ptrType$2, tag: ""}, {prop: "mode", name: "mode", exported: false, typ: opengl.CompositeMode, tag: ""}, {prop: "filter", name: "filter", exported: false, typ: Filter, tag: ""}]);
	replacePixelsCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "dst", name: "dst", exported: false, typ: ptrType$1, tag: ""}, {prop: "pixels", name: "pixels", exported: false, typ: sliceType$6, tag: ""}, {prop: "x", name: "x", exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}]);
	disposeCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "target", name: "target", exported: false, typ: ptrType$1, tag: ""}]);
	newImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "result", name: "result", exported: false, typ: ptrType$1, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}]);
	newScreenFramebufferImageCommand.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "result", name: "result", exported: false, typ: ptrType$1, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}]);
	framebuffer.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "native$0", name: "native", exported: false, typ: opengl.Framebuffer, tag: ""}, {prop: "flipY", name: "flipY", exported: false, typ: $Bool, tag: ""}, {prop: "proMatrix", name: "proMatrix", exported: false, typ: sliceType, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "texture", name: "texture", exported: false, typ: ptrType$4, tag: ""}, {prop: "framebuffer", name: "framebuffer", exported: false, typ: ptrType$3, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}]);
	arrayBufferLayoutPart.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "dataType", name: "dataType", exported: false, typ: opengl.DataType, tag: ""}, {prop: "num", name: "num", exported: false, typ: $Int, tag: ""}]);
	arrayBufferLayout.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "parts", name: "parts", exported: false, typ: sliceType$3, tag: ""}, {prop: "total", name: "total", exported: false, typ: $Int, tag: ""}]);
	openGLState.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "arrayBuffer", name: "arrayBuffer", exported: false, typ: opengl.Buffer, tag: ""}, {prop: "elementArrayBuffer", name: "elementArrayBuffer", exported: false, typ: opengl.Buffer, tag: ""}, {prop: "programNearest", name: "programNearest", exported: false, typ: opengl.Program, tag: ""}, {prop: "programLinear", name: "programLinear", exported: false, typ: opengl.Program, tag: ""}, {prop: "programScreen", name: "programScreen", exported: false, typ: opengl.Program, tag: ""}, {prop: "lastProgram", name: "lastProgram", exported: false, typ: opengl.Program, tag: ""}, {prop: "lastProjectionMatrix", name: "lastProjectionMatrix", exported: false, typ: sliceType, tag: ""}, {prop: "lastColorMatrix", name: "lastColorMatrix", exported: false, typ: sliceType, tag: ""}, {prop: "lastColorMatrixTranslation", name: "lastColorMatrixTranslation", exported: false, typ: sliceType, tag: ""}, {prop: "lastSourceWidth", name: "lastSourceWidth", exported: false, typ: $Int, tag: ""}, {prop: "lastSourceHeight", name: "lastSourceHeight", exported: false, typ: $Int, tag: ""}, {prop: "indices", name: "indices", exported: false, typ: sliceType$1, tag: ""}]);
	texture.init("github.com/hajimehoshi/ebiten/internal/graphics", [{prop: "native$0", name: "native", exported: false, typ: opengl.Texture, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theOpenGLState = new openGLState.ptr($ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, sliceType.nil, sliceType.nil, sliceType.nil, 0, 0, sliceType$1.nil);
		zeroBuffer = $ifaceNil;
		zeroProgram = $ifaceNil;
		theCommandQueue = new commandQueue.ptr(sliceType$2.nil, sliceType.nil, 0, new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false)));
		theArrayBufferLayout = new arrayBufferLayout.ptr(new sliceType$3([new arrayBufferLayoutPart.ptr("vertex", opengl.Float, 2), new arrayBufferLayoutPart.ptr("tex_coord", opengl.Float, 4)]), 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"] = (function() {
	var $pkg = {}, $init, image, color, draw, ptrType, sliceType, CopyImage;
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	ptrType = $ptrType(image.Paletted);
	sliceType = $sliceType($Uint8);
	CopyImage = function(origImg) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, b, c, d0, d1, h, i, i$1, index0, index1, j, newImg, origImg, origImg$1, origImg$2, p, palette, pix0, pix1, rgba, size, w, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; c = $f.c; d0 = $f.d0; d1 = $f.d1; h = $f.h; i = $f.i; i$1 = $f.i$1; index0 = $f.index0; index1 = $f.index1; j = $f.j; newImg = $f.newImg; origImg = $f.origImg; origImg$1 = $f.origImg$1; origImg$2 = $f.origImg$2; p = $f.p; palette = $f.palette; pix0 = $f.pix0; pix1 = $f.pix1; rgba = $f.rgba; size = $f.size; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x0 = $f.x0; x1 = $f.x1; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = origImg.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, image.Rectangle).Size(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		size = $clone(_r$1, image.Point);
		_tmp = size.X;
		_tmp$1 = size.Y;
		w = _tmp;
		h = _tmp$1;
		newImg = image.NewRGBA($clone(image.Rect(0, 0, w, h), image.Rectangle));
		_ref = origImg;
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
			origImg$1 = _ref.$val;
			b = $clone(origImg$1.Bounds(), image.Rectangle);
			x0 = b.Min.X;
			y0 = b.Min.Y;
			x1 = b.Max.X;
			y1 = b.Max.Y;
			palette = $makeSlice(sliceType, ($imul(origImg$1.Palette.$length, 4)));
			_ref$1 = origImg$1.Palette;
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 7; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
				_r$2 = color.RGBAModel.Convert(c); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				rgba = $clone($assertType(_r$2, color.RGBA), color.RGBA);
				(x = $imul(4, i), ((x < 0 || x >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x] = rgba.R));
				(x$1 = ($imul(4, i)) + 1 >> 0, ((x$1 < 0 || x$1 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$1] = rgba.G));
				(x$2 = ($imul(4, i)) + 2 >> 0, ((x$2 < 0 || x$2 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$2] = rgba.B));
				(x$3 = ($imul(4, i)) + 3 >> 0, ((x$3 < 0 || x$3 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$3] = rgba.A));
				_i++;
			/* } */ $s = 6; continue; case 7:
			index0 = 0;
			index1 = 0;
			d0 = origImg$1.Stride - ((x1 - x0 >> 0)) >> 0;
			d1 = newImg.Stride - ($imul(((x1 - x0 >> 0)), 4)) >> 0;
			pix0 = origImg$1.Pix;
			pix1 = newImg.Pix;
			j = 0;
			while (true) {
				if (!(j < (y1 - y0 >> 0))) { break; }
				i$1 = 0;
				while (true) {
					if (!(i$1 < (x1 - x0 >> 0))) { break; }
					p = ((((index0 < 0 || index0 >= pix0.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix0.$array[pix0.$offset + index0]) >> 0));
					((index1 < 0 || index1 >= pix1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix1.$array[pix1.$offset + index1] = (x$4 = $imul(4, p), ((x$4 < 0 || x$4 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$4])));
					(x$6 = index1 + 1 >> 0, ((x$6 < 0 || x$6 >= pix1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix1.$array[pix1.$offset + x$6] = (x$5 = ($imul(4, p)) + 1 >> 0, ((x$5 < 0 || x$5 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$5]))));
					(x$8 = index1 + 2 >> 0, ((x$8 < 0 || x$8 >= pix1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix1.$array[pix1.$offset + x$8] = (x$7 = ($imul(4, p)) + 2 >> 0, ((x$7 < 0 || x$7 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$7]))));
					(x$10 = index1 + 3 >> 0, ((x$10 < 0 || x$10 >= pix1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix1.$array[pix1.$offset + x$10] = (x$9 = ($imul(4, p)) + 3 >> 0, ((x$9 < 0 || x$9 >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + x$9]))));
					index0 = index0 + (1) >> 0;
					index1 = index1 + (4) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
				index0 = index0 + (d0) >> 0;
				index1 = index1 + (d1) >> 0;
				j = j + (1) >> 0;
			}
			$s = 5; continue;
		/* } else { */ case 4:
			origImg$2 = _ref;
			_arg = newImg;
			_arg$1 = $clone(image.Rect(0, 0, w, h), image.Rectangle);
			_arg$2 = origImg$2;
			_r$3 = origImg$2.Bounds(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$3 = $clone(_r$3.Min, image.Point);
			$r = draw.Draw(_arg, _arg$1, _arg$2, _arg$3, 1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return newImg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CopyImage }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.c = c; $f.d0 = d0; $f.d1 = d1; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.index0 = index0; $f.index1 = index1; $f.j = j; $f.newImg = newImg; $f.origImg = origImg; $f.origImg$1 = origImg$1; $f.origImg$2 = origImg$2; $f.p = p; $f.palette = palette; $f.pix0 = pix0; $f.pix1 = pix1; $f.rgba = rgba; $f.size = size; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x0 = x0; $f.x1 = x1; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CopyImage = CopyImage;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/hooks"] = (function() {
	var $pkg = {}, $init, funcType, sliceType, onUpdateHooks, AppendHookOnUpdate, Run;
	funcType = $funcType([], [$error], false);
	sliceType = $sliceType(funcType);
	AppendHookOnUpdate = function(f) {
		var $ptr, f;
		onUpdateHooks = $append(onUpdateHooks, f);
	};
	$pkg.AppendHookOnUpdate = AppendHookOnUpdate;
	Run = function() {
		var $ptr, _i, _r, _ref, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = onUpdateHooks;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = f(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Run }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		onUpdateHooks = new sliceType([]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/packing"] = (function() {
	var $pkg = {}, $init, sync, Page, Node, ptrType, ptrType$1, square;
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	Page = $pkg.Page = $newType(0, $kindStruct, "packing.Page", true, "github.com/hajimehoshi/ebiten/internal/packing", true, function(root_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType.nil;
			this.m = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
			return;
		}
		this.root = root_;
		this.m = m_;
	});
	Node = $pkg.Node = $newType(0, $kindStruct, "packing.Node", true, "github.com/hajimehoshi/ebiten/internal/packing", true, function(x_, y_, width_, height_, used_, parent_, child0_, child1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = 0;
			this.y = 0;
			this.width = 0;
			this.height = 0;
			this.used = false;
			this.parent = ptrType.nil;
			this.child0 = ptrType.nil;
			this.child1 = ptrType.nil;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.width = width_;
		this.height = height_;
		this.used = used_;
		this.parent = parent_;
		this.child0 = child0_;
		this.child1 = child1_;
	});
	ptrType = $ptrType(Node);
	ptrType$1 = $ptrType(Page);
	Page.ptr.prototype.IsEmpty = function() {
		var $ptr, p, r;
		p = this;
		p.m.Mutex.Lock();
		if (p.root === ptrType.nil) {
			p.m.Mutex.Unlock();
			return true;
		}
		r = !p.root.used && p.root.child0 === ptrType.nil && p.root.child1 === ptrType.nil;
		p.m.Mutex.Unlock();
		return r;
	};
	Page.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	Node.ptr.prototype.canFree = function() {
		var $ptr, n;
		n = this;
		if (n.used) {
			return false;
		}
		if (n.child0 === ptrType.nil && n.child1 === ptrType.nil) {
			return true;
		}
		return n.child0.canFree() && n.child1.canFree();
	};
	Node.prototype.canFree = function() { return this.$val.canFree(); };
	Node.ptr.prototype.Region = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, height, n, width, x, y;
		x = 0;
		y = 0;
		width = 0;
		height = 0;
		n = this;
		_tmp = n.x;
		_tmp$1 = n.y;
		_tmp$2 = n.width;
		_tmp$3 = n.height;
		x = _tmp;
		y = _tmp$1;
		width = _tmp$2;
		height = _tmp$3;
		return [x, y, width, height];
	};
	Node.prototype.Region = function() { return this.$val.Region(); };
	square = function(width, height) {
		var $ptr, height, width;
		if ((width === 0) && (height === 0)) {
			return 0;
		}
		if (width <= height) {
			return (width) / (height);
		}
		return (height) / (width);
	};
	Page.ptr.prototype.alloc = function(n, width, height) {
		var $ptr, height, n, node, node$1, p, width;
		p = this;
		if (n.width < width || n.height < height) {
			return ptrType.nil;
		}
		if (n.used) {
			return ptrType.nil;
		}
		if (n.child0 === ptrType.nil && n.child1 === ptrType.nil) {
			if ((n.width === width) && (n.height === height)) {
				n.used = true;
				return n;
			}
			if (square(n.width - width >> 0, n.height) >= square(n.width, n.height - height >> 0)) {
				n.child0 = new Node.ptr(n.x, n.y, width, n.height, false, n, ptrType.nil, ptrType.nil);
				n.child1 = new Node.ptr(n.x + width >> 0, n.y, n.width - width >> 0, n.height, false, n, ptrType.nil, ptrType.nil);
			} else {
				n.child0 = new Node.ptr(n.x, n.y, n.width, height, false, n, ptrType.nil, ptrType.nil);
				n.child1 = new Node.ptr(n.x, n.y + height >> 0, n.width, n.height - height >> 0, false, n, ptrType.nil, ptrType.nil);
			}
			return p.alloc(n.child0, width, height);
		}
		if (n.child0 === ptrType.nil || n.child1 === ptrType.nil) {
			$panic(new $String("not reached"));
		}
		node = p.alloc(n.child0, width, height);
		if (!(node === ptrType.nil)) {
			return node;
		}
		node$1 = p.alloc(n.child1, width, height);
		if (!(node$1 === ptrType.nil)) {
			return node$1;
		}
		return ptrType.nil;
	};
	Page.prototype.alloc = function(n, width, height) { return this.$val.alloc(n, width, height); };
	Page.ptr.prototype.Alloc = function(width, height) {
		var $ptr, height, n, p, width;
		p = this;
		p.m.Mutex.Lock();
		if (width <= 0 || height <= 0) {
			$panic(new $String("bsp: width and height must > 0"));
		}
		if (p.root === ptrType.nil) {
			p.root = new Node.ptr(0, 0, 2048, 2048, false, ptrType.nil, ptrType.nil, ptrType.nil);
		}
		if (width < 1) {
			width = 1;
		}
		if (height < 1) {
			height = 1;
		}
		n = p.alloc(p.root, width, height);
		p.m.Mutex.Unlock();
		return n;
	};
	Page.prototype.Alloc = function(width, height) { return this.$val.Alloc(width, height); };
	Page.ptr.prototype.Free = function(node) {
		var $ptr, node, p;
		p = this;
		p.m.Mutex.Lock();
		p.free(node);
		p.m.Mutex.Unlock();
	};
	Page.prototype.Free = function(node) { return this.$val.Free(node); };
	Page.ptr.prototype.free = function(node) {
		var $ptr, node, p;
		p = this;
		if (!(node.child0 === ptrType.nil) || !(node.child1 === ptrType.nil)) {
			$panic(new $String("bsp: can't free the node including children"));
		}
		node.used = false;
		if (node.parent === ptrType.nil) {
			return;
		}
		if (node.parent.child0 === ptrType.nil || node.parent.child1 === ptrType.nil) {
			$panic(new $String("not reached"));
		}
		if (node.parent.child0.canFree() && node.parent.child1.canFree()) {
			node.parent.child0 = ptrType.nil;
			node.parent.child1 = ptrType.nil;
			p.free(node.parent);
		}
	};
	Page.prototype.free = function(node) { return this.$val.free(node); };
	ptrType$1.methods = [{prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "alloc", name: "alloc", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([ptrType, $Int, $Int], [ptrType], false)}, {prop: "Alloc", name: "Alloc", pkg: "", typ: $funcType([$Int, $Int], [ptrType], false)}, {prop: "Free", name: "Free", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "free", name: "free", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([ptrType], [], false)}];
	ptrType.methods = [{prop: "canFree", name: "canFree", pkg: "github.com/hajimehoshi/ebiten/internal/packing", typ: $funcType([], [$Bool], false)}, {prop: "Region", name: "Region", pkg: "", typ: $funcType([], [$Int, $Int, $Int, $Int], false)}];
	Page.init("github.com/hajimehoshi/ebiten/internal/packing", [{prop: "root", name: "root", exported: false, typ: ptrType, tag: ""}, {prop: "m", name: "m", exported: false, typ: sync.Mutex, tag: ""}]);
	Node.init("github.com/hajimehoshi/ebiten/internal/packing", [{prop: "x", name: "x", exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", exported: false, typ: $Int, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}, {prop: "used", name: "used", exported: false, typ: $Bool, tag: ""}, {prop: "parent", name: "parent", exported: false, typ: ptrType, tag: ""}, {prop: "child0", name: "child0", exported: false, typ: ptrType, tag: ""}, {prop: "child1", name: "child1", exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/restorable"] = (function() {
	var $pkg = {}, $init, errors, fmt, affine, graphics, opengl, sync, web, color, runtime, drawImageHistoryItem, Image, images, verticesBackend, edge, ptrType, sliceType, ptrType$1, sliceType$1, ptrType$2, sliceType$2, funcType, sliceType$3, ptrType$3, structType, sliceType$4, sliceType$5, ptrType$4, mapType, ptrType$5, ptrType$6, restoringEnabled, theImages, quadFloat32Num, theVerticesBackend, _q, init, NewImage, NewScreenFramebufferImage, IsRestoringEnabled, ResolveStaleImages, Restore, InitializeGLState;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	color = $packages["image/color"];
	runtime = $packages["runtime"];
	drawImageHistoryItem = $pkg.drawImageHistoryItem = $newType(0, $kindStruct, "restorable.drawImageHistoryItem", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(image_, vertices_, colorm_, mode_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType.nil;
			this.vertices = sliceType.nil;
			this.colorm = ptrType$3.nil;
			this.mode = 0;
			this.filter = 0;
			return;
		}
		this.image = image_;
		this.vertices = vertices_;
		this.colorm = colorm_;
		this.mode = mode_;
		this.filter = filter_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "restorable.Image", true, "github.com/hajimehoshi/ebiten/internal/restorable", true, function(image_, basePixels_, drawImageHistory_, stale_, volatile$4_, screen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType$1.nil;
			this.basePixels = sliceType$1.nil;
			this.drawImageHistory = sliceType$2.nil;
			this.stale = false;
			this.volatile$4 = false;
			this.screen = false;
			return;
		}
		this.image = image_;
		this.basePixels = basePixels_;
		this.drawImageHistory = drawImageHistory_;
		this.stale = stale_;
		this.volatile$4 = volatile$4_;
		this.screen = screen_;
	});
	images = $pkg.images = $newType(0, $kindStruct, "restorable.images", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(images_, lastTarget_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.images = false;
			this.lastTarget = ptrType.nil;
			this.m = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
			return;
		}
		this.images = images_;
		this.lastTarget = lastTarget_;
		this.m = m_;
	});
	verticesBackend = $pkg.verticesBackend = $newType(0, $kindStruct, "restorable.verticesBackend", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(backend_, head_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.backend = sliceType.nil;
			this.head = 0;
			return;
		}
		this.backend = backend_;
		this.head = head_;
	});
	edge = $newType(0, $kindStruct, "restorable.edge", true, "github.com/hajimehoshi/ebiten/internal/restorable", false, function(source_, target_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.source = ptrType.nil;
			this.target = ptrType.nil;
			return;
		}
		this.source = source_;
		this.target = target_;
	});
	ptrType = $ptrType(Image);
	sliceType = $sliceType($Float32);
	ptrType$1 = $ptrType(graphics.Image);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(drawImageHistoryItem);
	sliceType$2 = $sliceType(ptrType$2);
	funcType = $funcType([ptrType], [], false);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(affine.ColorM);
	structType = $structType("", []);
	sliceType$4 = $sliceType(ptrType);
	sliceType$5 = $sliceType(edge);
	ptrType$4 = $ptrType(affine.GeoM);
	mapType = $mapType(ptrType, structType);
	ptrType$5 = $ptrType(images);
	ptrType$6 = $ptrType(verticesBackend);
	init = function() {
		var $ptr;
		if (web.IsMobileBrowser()) {
			restoringEnabled = false;
		}
	};
	drawImageHistoryItem.ptr.prototype.canMerge = function(image, colorm, mode, filter) {
		var $ptr, colorm, d, filter, image, mode;
		d = this;
		if (!(d.image === image)) {
			return false;
		}
		if (!d.colorm.Equals(colorm)) {
			return false;
		}
		if (!((d.mode === mode))) {
			return false;
		}
		if (!((d.filter === filter))) {
			return false;
		}
		return true;
	};
	drawImageHistoryItem.prototype.canMerge = function(image, colorm, mode, filter) { return this.$val.canMerge(image, colorm, mode, filter); };
	NewImage = function(width, height, volatile$1) {
		var $ptr, height, i, volatile$1, width;
		i = new Image.ptr(graphics.NewImage(width, height), sliceType$1.nil, sliceType$2.nil, false, volatile$1, false);
		theImages.add(i);
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		return i;
	};
	$pkg.NewImage = NewImage;
	NewScreenFramebufferImage = function(width, height) {
		var $ptr, height, i, width;
		i = new Image.ptr(graphics.NewScreenFramebufferImage(width, height), sliceType$1.nil, sliceType$2.nil, false, false, true);
		theImages.add(i);
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		return i;
	};
	$pkg.NewScreenFramebufferImage = NewScreenFramebufferImage;
	Image.ptr.prototype.BasePixelsForTesting = function() {
		var $ptr, i;
		i = this;
		return i.basePixels;
	};
	Image.prototype.BasePixelsForTesting = function() { return this.$val.BasePixelsForTesting(); };
	Image.ptr.prototype.Size = function() {
		var $ptr, i;
		i = this;
		return i.image.Size();
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.makeStale = function() {
		var $ptr, i;
		i = this;
		i.basePixels = sliceType$1.nil;
		i.drawImageHistory = sliceType$2.nil;
		i.stale = true;
	};
	Image.prototype.makeStale = function() { return this.$val.makeStale(); };
	Image.ptr.prototype.ReplacePixels = function(pixels, x, y, width, height) {
		var $ptr, _r, _tuple, _tuple$1, h, h$1, height, i, idx, j, pixels, w, w$1, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; h = $f.h; h$1 = $f.h$1; height = $f.height; i = $f.i; idx = $f.idx; j = $f.j; pixels = $f.pixels; w = $f.w; w$1 = $f.w$1; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (width <= 0 || height <= 0) {
			$panic(new $String("restorable: width/height must be positive"));
		}
		/* */ if (x < 0 || y < 0 || w <= x || h <= y || (x + width >> 0) <= 0 || (y + height >> 0) <= 0 || w < (x + width >> 0) || h < (y + height >> 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x < 0 || y < 0 || w <= x || h <= y || (x + width >> 0) <= 0 || (y + height >> 0) <= 0 || w < (x + width >> 0) || h < (y + height >> 0)) { */ case 1:
			_r = fmt.Sprintf("restorable: out of range x: %d, y: %d, width: %d, height: %d", new sliceType$3([new $Int(x), new $Int(y), new $Int(width), new $Int(height)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		theImages.makeStaleIfDependingOn(i);
		i.image.ReplacePixels(pixels, x, y, width, height);
		if (i.basePixels === sliceType$1.nil) {
			_tuple$1 = i.image.Size();
			w$1 = _tuple$1[0];
			h$1 = _tuple$1[1];
			i.basePixels = $makeSlice(sliceType$1, ($imul(($imul(4, w$1)), h$1)));
		}
		idx = $imul(4, ((($imul(y, w)) + x >> 0)));
		j = 0;
		while (true) {
			if (!(j < height)) { break; }
			$copySlice($subslice(i.basePixels, idx, (idx + ($imul(4, width)) >> 0)), $subslice(pixels, ($imul(($imul(4, j)), width)), ($imul(($imul(4, ((j + 1 >> 0)))), width))));
			idx = idx + (($imul(4, w))) >> 0;
			j = j + (1) >> 0;
		}
		i.drawImageHistory = sliceType$2.nil;
		i.stale = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ReplacePixels }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.h = h; $f.h$1 = h$1; $f.height = height; $f.i = i; $f.idx = idx; $f.j = j; $f.pixels = pixels; $f.w = w; $f.w$1 = w$1; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.ReplacePixels = function(pixels, x, y, width, height) { return this.$val.ReplacePixels(pixels, x, y, width, height); };
	Image.ptr.prototype.DrawImage = function(img, sx0, sy0, sx1, sy1, geom, colorm, mode, filter) {
		var $ptr, colorm, filter, geom, i, img, mode, sx0, sx1, sy0, sy1, vs;
		i = this;
		vs = img.vertices(sx0, sy0, sx1, sy1, geom);
		if (vs === sliceType.nil) {
			return;
		}
		theImages.makeStaleIfDependingOn(i);
		if (img.stale || img.volatile$4 || i.screen || !IsRestoringEnabled()) {
			i.makeStale();
		} else {
			i.appendDrawImageHistory(img, vs, colorm, mode, filter);
		}
		i.image.DrawImage(img.image, vs, colorm, mode, filter);
	};
	Image.prototype.DrawImage = function(img, sx0, sy0, sx1, sy1, geom, colorm, mode, filter) { return this.$val.DrawImage(img, sx0, sy0, sx1, sy1, geom, colorm, mode, filter); };
	Image.ptr.prototype.appendDrawImageHistory = function(image, vertices, colorm, mode, filter) {
		var $ptr, colorm, filter, i, image, item, last, mode, vertices, x, x$1;
		i = this;
		if (i.stale || i.volatile$4 || i.screen) {
			return;
		}
		if (i.drawImageHistory.$length > 0) {
			last = (x = i.drawImageHistory, x$1 = i.drawImageHistory.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			if (last.canMerge(image, colorm, mode, filter)) {
				last.vertices = $appendSlice(last.vertices, vertices);
				return;
			}
		}
		if ((i.drawImageHistory.$length + 1 >> 0) > 100) {
			i.makeStale();
			return;
		}
		item = new drawImageHistoryItem.ptr(image, vertices, colorm, mode, filter);
		i.drawImageHistory = $append(i.drawImageHistory, item);
	};
	Image.prototype.appendDrawImageHistory = function(image, vertices, colorm, mode, filter) { return this.$val.appendDrawImageHistory(image, vertices, colorm, mode, filter); };
	Image.ptr.prototype.At = function(x, y) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, b, err, g, h, i, idx, r, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; b = $f.b; err = $f.err; g = $f.g; h = $f.h; i = $f.i; idx = $f.idx; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (x < 0 || y < 0 || w <= x || h <= y) {
			$s = -1; return [new color.RGBA.ptr(0, 0, 0, 0), $ifaceNil];
		}
		/* */ if (i.basePixels === sliceType$1.nil || !(i.drawImageHistory === sliceType$2.nil) || i.stale) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i.basePixels === sliceType$1.nil || !(i.drawImageHistory === sliceType$2.nil) || i.stale) { */ case 1:
			_r = i.readPixelsFromGPU(i.image); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new color.RGBA.ptr(0, 0, 0, 0), err];
			}
		/* } */ case 2:
		idx = ($imul(4, x)) + ($imul(($imul(4, y)), w)) >> 0;
		_tmp = (x$1 = i.basePixels, ((idx < 0 || idx >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + idx]));
		_tmp$1 = (x$2 = i.basePixels, x$3 = idx + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		_tmp$2 = (x$4 = i.basePixels, x$5 = idx + 2 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
		_tmp$3 = (x$6 = i.basePixels, x$7 = idx + 3 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		$s = -1; return [new color.RGBA.ptr(r, g, b, a), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.At }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.err = err; $f.g = g; $f.h = h; $f.i = i; $f.idx = idx; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.At = function(x, y) { return this.$val.At(x, y); };
	Image.ptr.prototype.makeStaleIfDependingOn = function(target) {
		var $ptr, i, target;
		i = this;
		if (i.stale) {
			return;
		}
		if (i.dependsOn(target)) {
			i.makeStale();
		}
	};
	Image.prototype.makeStaleIfDependingOn = function(target) { return this.$val.makeStaleIfDependingOn(target); };
	Image.ptr.prototype.readPixelsFromGPU = function(image) {
		var $ptr, _r, _tuple, err, i, image, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; image = $f.image; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		err = $ifaceNil;
		_r = image.Pixels(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		i.basePixels = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		i.drawImageHistory = sliceType$2.nil;
		i.stale = false;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.readPixelsFromGPU }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.image = image; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.readPixelsFromGPU = function(image) { return this.$val.readPixelsFromGPU(image); };
	Image.ptr.prototype.resolveStale = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!IsRestoringEnabled()) {
			$s = -1; return $ifaceNil;
		}
		if (i.volatile$4) {
			$s = -1; return $ifaceNil;
		}
		if (i.screen) {
			$s = -1; return $ifaceNil;
		}
		if (!i.stale) {
			$s = -1; return $ifaceNil;
		}
		_r = i.readPixelsFromGPU(i.image); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.resolveStale }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.resolveStale = function() { return this.$val.resolveStale(); };
	Image.ptr.prototype.dependsOn = function(target) {
		var $ptr, _i, _ref, c, i, target;
		i = this;
		_ref = i.drawImageHistory;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (c.image === target) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Image.prototype.dependsOn = function(target) { return this.$val.dependsOn(target); };
	Image.ptr.prototype.dependingImages = function() {
		var $ptr, _i, _key, _ref, c, i, r;
		i = this;
		r = $makeMap(ptrType.keyFor, []);
		_ref = i.drawImageHistory;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key = c.image; (r || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
			_i++;
		}
		return r;
	};
	Image.prototype.dependingImages = function() { return this.$val.dependingImages(); };
	Image.ptr.prototype.hasDependency = function() {
		var $ptr, i;
		i = this;
		if (i.stale) {
			return false;
		}
		return i.drawImageHistory.$length > 0;
	};
	Image.prototype.hasDependency = function() { return this.$val.hasDependency(); };
	Image.ptr.prototype.restore = function() {
		var $ptr, _i, _r, _ref, _tuple, _tuple$1, c, err, gimg, h, i, pix, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; err = $f.err; gimg = $f.gimg; h = $f.h; i = $f.i; pix = $f.pix; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.image.Size();
		w = _tuple[0];
		h = _tuple[1];
		if (i.screen) {
			i.image = graphics.NewScreenFramebufferImage(w, h);
			i.basePixels = sliceType$1.nil;
			i.drawImageHistory = sliceType$2.nil;
			i.stale = false;
			$s = -1; return $ifaceNil;
		}
		if (i.volatile$4) {
			i.image = graphics.NewImage(w, h);
			i.basePixels = sliceType$1.nil;
			i.drawImageHistory = sliceType$2.nil;
			i.stale = false;
			$s = -1; return $ifaceNil;
		}
		if (i.stale) {
			$s = -1; return errors.New("restorable: pixels must not be stale when restoring");
		}
		gimg = graphics.NewImage(w, h);
		if (!(i.basePixels === sliceType$1.nil)) {
			gimg.ReplacePixels(i.basePixels, 0, 0, w, h);
		} else {
			pix = $makeSlice(sliceType$1, ($imul(($imul(w, h)), 4)));
			gimg.ReplacePixels(pix, 0, 0, w, h);
		}
		_ref = i.drawImageHistory;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (c.image.hasDependency()) {
				$panic(new $String("not reached"));
			}
			gimg.DrawImage(c.image.image, c.vertices, c.colorm, c.mode, c.filter);
			_i++;
		}
		i.image = gimg;
		err = $ifaceNil;
		_r = gimg.Pixels(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		i.basePixels = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		i.drawImageHistory = sliceType$2.nil;
		i.stale = false;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.restore }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.err = err; $f.gimg = gimg; $f.h = h; $f.i = i; $f.pix = pix; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.restore = function() { return this.$val.restore(); };
	Image.ptr.prototype.Dispose = function() {
		var $ptr, i;
		i = this;
		theImages.makeStaleIfDependingOn(i);
		i.image.Dispose();
		i.image = ptrType$1.nil;
		i.basePixels = sliceType$1.nil;
		i.drawImageHistory = sliceType$2.nil;
		i.stale = false;
		theImages.remove(i);
		runtime.SetFinalizer(i, $ifaceNil);
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.IsInvalidated = function() {
		var $ptr, _r, err, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = graphics.FlushCommands(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		if (!IsRestoringEnabled()) {
			$s = -1; return [false, $ifaceNil];
		}
		$s = -1; return [i.image.IsInvalidated(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.IsInvalidated }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.IsInvalidated = function() { return this.$val.IsInvalidated(); };
	IsRestoringEnabled = function() {
		var $ptr;
		return restoringEnabled;
	};
	$pkg.IsRestoringEnabled = IsRestoringEnabled;
	ResolveStaleImages = function() {
		var $ptr, _r, _r$1, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = graphics.FlushCommands(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!restoringEnabled) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = theImages.resolveStaleImages(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResolveStaleImages }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResolveStaleImages = ResolveStaleImages;
	Restore = function() {
		var $ptr, _r, _r$1, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = graphics.ResetGLState(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = theImages.restore(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Restore }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Restore = Restore;
	images.ptr.prototype.add = function(img) {
		var $ptr, _key, i, img, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		i.m.Mutex.Lock();
		$deferred.push([$methodVal(i.m.Mutex, "Unlock"), []]);
		_key = img; (i.images || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	images.prototype.add = function(img) { return this.$val.add(img); };
	images.ptr.prototype.remove = function(img) {
		var $ptr, i, img, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		i.m.Mutex.Lock();
		$deferred.push([$methodVal(i.m.Mutex, "Unlock"), []]);
		delete i.images[ptrType.keyFor(img)];
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	images.prototype.remove = function(img) { return this.$val.remove(img); };
	images.ptr.prototype.resolveStaleImages = function() {
		var $ptr, _entry, _i, _keys, _r, _ref, err, i, img, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; err = $f.err; i = $f.i; img = $f.img; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		i.m.Mutex.Lock();
		$deferred.push([$methodVal(i.m.Mutex, "Unlock"), []]);
		i.lastTarget = ptrType.nil;
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			img = _entry.k;
			_r = img.resolveStale(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: images.ptr.prototype.resolveStaleImages }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f.err = err; $f.i = i; $f.img = img; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	images.prototype.resolveStaleImages = function() { return this.$val.resolveStaleImages(); };
	images.ptr.prototype.makeStaleIfDependingOn = function(target) {
		var $ptr, _entry, _i, _keys, _ref, i, img, target;
		i = this;
		i.m.Mutex.Lock();
		if (target === ptrType.nil) {
			i.m.Mutex.Unlock();
			return;
		}
		if (i.lastTarget === target) {
			i.m.Mutex.Unlock();
			return;
		}
		i.lastTarget = target;
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			img = _entry.k;
			img.makeStaleIfDependingOn(target);
			_i++;
		}
		i.m.Mutex.Unlock();
	};
	images.prototype.makeStaleIfDependingOn = function(target) { return this.$val.makeStaleIfDependingOn(target); };
	images.ptr.prototype.restore = function() {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _key, _key$1, _key$2, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _keys$6, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _tuple, _tuple$1, current, e, e$1, e$2, edges, err, i, i$1, i$2, i$3, images$1, img, ok, ok$1, removed, s, sorted, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _i$8 = $f._i$8; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _keys$5 = $f._keys$5; _keys$6 = $f._keys$6; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; current = $f.current; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; edges = $f.edges; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; images$1 = $f.images$1; img = $f.img; ok = $f.ok; ok$1 = $f.ok$1; removed = $f.removed; s = $f.s; sorted = $f.sorted; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		i.m.Mutex.Lock();
		$deferred.push([$methodVal(i.m.Mutex, "Unlock"), []]);
		if (!IsRestoringEnabled()) {
			$panic(new $String("not reached"));
		}
		images$1 = $makeMap(ptrType.keyFor, []);
		_ref = i.images;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			i$1 = _entry.k;
			_key = i$1; (images$1 || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: new structType.ptr() };
			_i++;
		}
		edges = $makeMap(edge.keyFor, []);
		_ref$1 = images$1;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			t = _entry$1.k;
			_ref$2 = t.dependingImages();
			_i$2 = 0;
			_keys$2 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$2.length)) { break; }
				_entry$2 = _ref$2[_keys$2[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				s = _entry$2.k;
				_key$1 = new edge.ptr(s, t); (edges || $throwRuntimeError("assignment to entry in nil map"))[edge.keyFor(_key$1)] = { k: _key$1, v: new structType.ptr() };
				_i$2++;
			}
			_i$1++;
		}
		sorted = new sliceType$4([]);
		while (true) {
			if (!($keys(images$1).length > 0)) { break; }
			current = $makeMap(ptrType.keyFor, []);
			_ref$3 = images$1;
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			while (true) {
				if (!(_i$3 < _keys$3.length)) { break; }
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					continue;
				}
				i$2 = _entry$3.k;
				_key$2 = i$2; (current || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
				_i$3++;
			}
			_ref$4 = edges;
			_i$4 = 0;
			_keys$4 = $keys(_ref$4);
			while (true) {
				if (!(_i$4 < _keys$4.length)) { break; }
				_entry$4 = _ref$4[_keys$4[_i$4]];
				if (_entry$4 === undefined) {
					_i$4++;
					continue;
				}
				e = $clone(_entry$4.k, edge);
				_tuple = (_entry$5 = current[ptrType.keyFor(e.target)], _entry$5 !== undefined ? [_entry$5.v, true] : [new structType.ptr(), false]);
				ok = _tuple[1];
				if (ok) {
					delete current[ptrType.keyFor(e.target)];
				}
				_i$4++;
			}
			_ref$5 = current;
			_i$5 = 0;
			_keys$5 = $keys(_ref$5);
			while (true) {
				if (!(_i$5 < _keys$5.length)) { break; }
				_entry$6 = _ref$5[_keys$5[_i$5]];
				if (_entry$6 === undefined) {
					_i$5++;
					continue;
				}
				i$3 = _entry$6.k;
				delete images$1[ptrType.keyFor(i$3)];
				sorted = $append(sorted, i$3);
				_i$5++;
			}
			removed = new sliceType$5([]);
			_ref$6 = edges;
			_i$6 = 0;
			_keys$6 = $keys(_ref$6);
			while (true) {
				if (!(_i$6 < _keys$6.length)) { break; }
				_entry$7 = _ref$6[_keys$6[_i$6]];
				if (_entry$7 === undefined) {
					_i$6++;
					continue;
				}
				e$1 = $clone(_entry$7.k, edge);
				_tuple$1 = (_entry$8 = current[ptrType.keyFor(e$1.source)], _entry$8 !== undefined ? [_entry$8.v, true] : [new structType.ptr(), false]);
				ok$1 = _tuple$1[1];
				if (ok$1) {
					removed = $append(removed, e$1);
				}
				_i$6++;
			}
			_ref$7 = removed;
			_i$7 = 0;
			while (true) {
				if (!(_i$7 < _ref$7.$length)) { break; }
				e$2 = $clone(((_i$7 < 0 || _i$7 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$7]), edge);
				delete edges[edge.keyFor(e$2)];
				_i$7++;
			}
		}
		_ref$8 = sorted;
		_i$8 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$8 < _ref$8.$length)) { break; } */ if(!(_i$8 < _ref$8.$length)) { $s = 2; continue; }
			img = ((_i$8 < 0 || _i$8 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$8]);
			_r = img.restore(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_i$8++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: images.ptr.prototype.restore }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._i$8 = _i$8; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._keys$5 = _keys$5; $f._keys$6 = _keys$6; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.current = current; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.edges = edges; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.images$1 = images$1; $f.img = img; $f.ok = ok; $f.ok$1 = ok$1; $f.removed = removed; $f.s = s; $f.sorted = sorted; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	images.prototype.restore = function() { return this.$val.restore(); };
	InitializeGLState = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = graphics.ResetGLState(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InitializeGLState }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.InitializeGLState = InitializeGLState;
	verticesBackend.ptr.prototype.get = function() {
		var $ptr, s, v;
		v = this;
		if (v.backend === sliceType.nil) {
			v.backend = $makeSlice(sliceType, ($imul(quadFloat32Num, 256)));
		}
		s = $subslice(v.backend, v.head, (v.head + quadFloat32Num >> 0));
		v.head = v.head + (quadFloat32Num) >> 0;
		if ((v.head + quadFloat32Num >> 0) > v.backend.$length) {
			v.backend = sliceType.nil;
			v.head = 0;
		}
		return s;
	};
	verticesBackend.prototype.get = function() { return this.$val.get(); };
	Image.ptr.prototype.vertices = function(sx0, sy0, sx1, sy1, geo) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, geo, h, height, hf, i, sx0, sx1, sy0, sy1, u0, u1, v0, v1, vs, w, wf, width, x, x0, x1, y, y0, y1;
		i = this;
		if (sx0 >= sx1 || sy0 >= sy1) {
			return sliceType.nil;
		}
		if (sx1 <= 0 || sy1 <= 0) {
			return sliceType.nil;
		}
		vs = theVerticesBackend.get();
		_tmp = 0;
		_tmp$1 = 0;
		x0 = _tmp;
		y0 = _tmp$1;
		_tmp$2 = ((sx1 - sx0 >> 0));
		_tmp$3 = ((sy1 - sy0 >> 0));
		x1 = _tmp$2;
		y1 = _tmp$3;
		_tuple = i.Size();
		width = _tuple[0];
		height = _tuple[1];
		w = 1;
		h = 1;
		while (true) {
			if (!(w < width)) { break; }
			w = $imul(w, (2));
		}
		while (true) {
			if (!(h < height)) { break; }
			h = $imul(h, (2));
		}
		wf = (w);
		hf = (h);
		_tmp$4 = $fround((sx0) / wf);
		_tmp$5 = $fround((sy0) / hf);
		_tmp$6 = $fround((sx1) / wf);
		_tmp$7 = $fround((sy1) / hf);
		u0 = _tmp$4;
		v0 = _tmp$5;
		u1 = _tmp$6;
		v1 = _tmp$7;
		_tuple$1 = geo.Apply32(x0, y0);
		x = _tuple$1[0];
		y = _tuple$1[1];
		(0 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 0] = x);
		(1 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 1] = y);
		(2 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 2] = u0);
		(3 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 3] = v0);
		(4 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 4] = u1);
		(5 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 5] = v1);
		_tuple$2 = geo.Apply32(x1, y0);
		x = _tuple$2[0];
		y = _tuple$2[1];
		(6 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 6] = x);
		(7 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 7] = y);
		(8 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 8] = u1);
		(9 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 9] = v0);
		(10 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 10] = u0);
		(11 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 11] = v1);
		_tuple$3 = geo.Apply32(x0, y1);
		x = _tuple$3[0];
		y = _tuple$3[1];
		(12 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 12] = x);
		(13 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 13] = y);
		(14 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 14] = u0);
		(15 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 15] = v1);
		(16 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 16] = u1);
		(17 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 17] = v0);
		_tuple$4 = geo.Apply32(x1, y1);
		x = _tuple$4[0];
		y = _tuple$4[1];
		(18 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 18] = x);
		(19 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 19] = y);
		(20 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 20] = u1);
		(21 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 21] = v1);
		(22 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 22] = u0);
		(23 >= vs.$length ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + 23] = v0);
		return vs;
	};
	Image.prototype.vertices = function(sx0, sy0, sx1, sy1, geo) { return this.$val.vertices(sx0, sy0, sx1, sy1, geo); };
	ptrType$2.methods = [{prop: "canMerge", name: "canMerge", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType, ptrType$3, opengl.CompositeMode, graphics.Filter], [$Bool], false)}];
	ptrType.methods = [{prop: "BasePixelsForTesting", name: "BasePixelsForTesting", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "makeStale", name: "makeStale", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$1, $Int, $Int, $Int, $Int], [], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType, $Int, $Int, $Int, $Int, ptrType$4, ptrType$3, opengl.CompositeMode, graphics.Filter], [], false)}, {prop: "appendDrawImageHistory", name: "appendDrawImageHistory", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType, sliceType, ptrType$3, opengl.CompositeMode, graphics.Filter], [], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA, $error], false)}, {prop: "makeStaleIfDependingOn", name: "makeStaleIfDependingOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "readPixelsFromGPU", name: "readPixelsFromGPU", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType$1], [$error], false)}, {prop: "resolveStale", name: "resolveStale", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}, {prop: "dependsOn", name: "dependsOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [$Bool], false)}, {prop: "dependingImages", name: "dependingImages", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [mapType], false)}, {prop: "hasDependency", name: "hasDependency", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$Bool], false)}, {prop: "restore", name: "restore", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "IsInvalidated", name: "IsInvalidated", pkg: "", typ: $funcType([], [$Bool, $error], false)}, {prop: "vertices", name: "vertices", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([$Int, $Int, $Int, $Int, ptrType$4], [sliceType], false)}];
	ptrType$5.methods = [{prop: "add", name: "add", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "remove", name: "remove", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "resolveStaleImages", name: "resolveStaleImages", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}, {prop: "makeStaleIfDependingOn", name: "makeStaleIfDependingOn", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([ptrType], [], false)}, {prop: "restore", name: "restore", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [$error], false)}];
	ptrType$6.methods = [{prop: "get", name: "get", pkg: "github.com/hajimehoshi/ebiten/internal/restorable", typ: $funcType([], [sliceType], false)}];
	drawImageHistoryItem.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "image", name: "image", exported: false, typ: ptrType, tag: ""}, {prop: "vertices", name: "vertices", exported: false, typ: sliceType, tag: ""}, {prop: "colorm", name: "colorm", exported: false, typ: ptrType$3, tag: ""}, {prop: "mode", name: "mode", exported: false, typ: opengl.CompositeMode, tag: ""}, {prop: "filter", name: "filter", exported: false, typ: graphics.Filter, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "image", name: "image", exported: false, typ: ptrType$1, tag: ""}, {prop: "basePixels", name: "basePixels", exported: false, typ: sliceType$1, tag: ""}, {prop: "drawImageHistory", name: "drawImageHistory", exported: false, typ: sliceType$2, tag: ""}, {prop: "stale", name: "stale", exported: false, typ: $Bool, tag: ""}, {prop: "volatile$4", name: "volatile", exported: false, typ: $Bool, tag: ""}, {prop: "screen", name: "screen", exported: false, typ: $Bool, tag: ""}]);
	images.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "images", name: "images", exported: false, typ: mapType, tag: ""}, {prop: "lastTarget", name: "lastTarget", exported: false, typ: ptrType, tag: ""}, {prop: "m", name: "m", exported: false, typ: sync.Mutex, tag: ""}]);
	verticesBackend.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "backend", name: "backend", exported: false, typ: sliceType, tag: ""}, {prop: "head", name: "head", exported: false, typ: $Int, tag: ""}]);
	edge.init("github.com/hajimehoshi/ebiten/internal/restorable", [{prop: "source", name: "source", exported: false, typ: ptrType, tag: ""}, {prop: "target", name: "target", exported: false, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		restoringEnabled = true;
		theImages = new images.ptr($makeMap(ptrType.keyFor, []), ptrType.nil, new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false)));
		quadFloat32Num = (_q = graphics.QuadVertexSizeInBytes() / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		theVerticesBackend = new verticesBackend.ptr(sliceType.nil, 0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/internal/ui"] = (function() {
	var $pkg = {}, $init, errors, js, devicescale, opengl, image, strconv, unicode, GamepadButton, Touch, gamePad, touch, mockRWLock, Input, Key, MouseButton, GraphicsContext, userInterface, arrayType, arrayType$1, arrayType$2, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, funcType, structType, ptrType, funcType$1, ptrType$1, ptrType$2, mapType, mapType$1, ptrType$3, currentInput, emptyIDs, emptyTouches, codeToMouseButton, keyToCodes, keyCodeToKeyEdge, canvas, currentUI, CurrentInput, SetScreenScale, ScreenPadding, adjustCursorPosition, touchEventToTouches, init, initialize, setMouseCursorFromEvent, RunMainThreadLoop, Run;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	devicescale = $packages["github.com/hajimehoshi/ebiten/internal/devicescale"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	image = $packages["image"];
	strconv = $packages["strconv"];
	unicode = $packages["unicode"];
	GamepadButton = $pkg.GamepadButton = $newType(4, $kindInt, "ui.GamepadButton", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	Touch = $pkg.Touch = $newType(8, $kindInterface, "ui.Touch", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	gamePad = $pkg.gamePad = $newType(0, $kindStruct, "ui.gamePad", true, "github.com/hajimehoshi/ebiten/internal/ui", false, function(valid_, axisNum_, axes_, buttonNum_, buttonPressed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.valid = false;
			this.axisNum = 0;
			this.axes = arrayType.zero();
			this.buttonNum = 0;
			this.buttonPressed = arrayType$1.zero();
			return;
		}
		this.valid = valid_;
		this.axisNum = axisNum_;
		this.axes = axes_;
		this.buttonNum = buttonNum_;
		this.buttonPressed = buttonPressed_;
	});
	touch = $pkg.touch = $newType(0, $kindStruct, "ui.touch", true, "github.com/hajimehoshi/ebiten/internal/ui", false, function(id_, x_, y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.x = 0;
			this.y = 0;
			return;
		}
		this.id = id_;
		this.x = x_;
		this.y = y_;
	});
	mockRWLock = $pkg.mockRWLock = $newType(0, $kindStruct, "ui.mockRWLock", true, "github.com/hajimehoshi/ebiten/internal/ui", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Input = $pkg.Input = $newType(0, $kindStruct, "ui.Input", true, "github.com/hajimehoshi/ebiten/internal/ui", true, function(keyPressed_, keyPressedEdge_, mouseButtonPressed_, cursorX_, cursorY_, gamepads_, touches_, runeBuffer_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.keyPressed = false;
			this.keyPressedEdge = false;
			this.mouseButtonPressed = false;
			this.cursorX = 0;
			this.cursorY = 0;
			this.gamepads = arrayType$2.zero();
			this.touches = sliceType.nil;
			this.runeBuffer = sliceType$1.nil;
			this.m = new mockRWLock.ptr();
			return;
		}
		this.keyPressed = keyPressed_;
		this.keyPressedEdge = keyPressedEdge_;
		this.mouseButtonPressed = mouseButtonPressed_;
		this.cursorX = cursorX_;
		this.cursorY = cursorY_;
		this.gamepads = gamepads_;
		this.touches = touches_;
		this.runeBuffer = runeBuffer_;
		this.m = m_;
	});
	Key = $pkg.Key = $newType(4, $kindInt, "ui.Key", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	MouseButton = $pkg.MouseButton = $newType(4, $kindInt, "ui.MouseButton", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	GraphicsContext = $pkg.GraphicsContext = $newType(8, $kindInterface, "ui.GraphicsContext", true, "github.com/hajimehoshi/ebiten/internal/ui", true, null);
	userInterface = $pkg.userInterface = $newType(0, $kindStruct, "ui.userInterface", true, "github.com/hajimehoshi/ebiten/internal/ui", false, function(width_, height_, scale_, fullscreen_, runnableInBackground_, sizeChanged_, windowFocus_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.width = 0;
			this.height = 0;
			this.scale = 0;
			this.fullscreen = false;
			this.runnableInBackground = false;
			this.sizeChanged = false;
			this.windowFocus = false;
			return;
		}
		this.width = width_;
		this.height = height_;
		this.scale = scale_;
		this.fullscreen = fullscreen_;
		this.runnableInBackground = runnableInBackground_;
		this.sizeChanged = sizeChanged_;
		this.windowFocus = windowFocus_;
	});
	arrayType = $arrayType($Float64, 16);
	arrayType$1 = $arrayType($Bool, 256);
	arrayType$2 = $arrayType(gamePad, 16);
	sliceType = $sliceType(touch);
	sliceType$1 = $sliceType($Int32);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType(Touch);
	sliceType$4 = $sliceType($String);
	funcType = $funcType([], [], false);
	structType = $structType("", []);
	ptrType = $ptrType(js.Object);
	funcType$1 = $funcType([ptrType], [], false);
	ptrType$1 = $ptrType(touch);
	ptrType$2 = $ptrType(Input);
	mapType = $mapType($String, $Bool);
	mapType$1 = $mapType($Int, $Bool);
	ptrType$3 = $ptrType(userInterface);
	CurrentInput = function() {
		var $ptr;
		return currentInput;
	};
	$pkg.CurrentInput = CurrentInput;
	Input.ptr.prototype.CursorPosition = function() {
		var $ptr, _tuple, i, x, y, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		x = 0;
		y = 0;
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		_tuple = adjustCursorPosition(i.cursorX, i.cursorY);
		x = _tuple[0];
		y = _tuple[1];
		return [x, y];
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [x, y]; } }
	};
	Input.prototype.CursorPosition = function() { return this.$val.CursorPosition(); };
	Input.ptr.prototype.GamepadIDs = function() {
		var $ptr, _i, _ref, g, i, id, r, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (false) {
			return emptyIDs;
		}
		r = new sliceType$2([]);
		_ref = i.gamepads;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			id = _i;
			g = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), gamePad);
			if (g.valid) {
				r = $append(r, id);
			}
			_i++;
		}
		return r;
		/* */ } catch(err) { $err = err; return sliceType$2.nil; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadIDs = function() { return this.$val.GamepadIDs(); };
	Input.ptr.prototype.GamepadAxisNum = function(id) {
		var $ptr, i, id, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).axisNum;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadAxisNum = function(id) { return this.$val.GamepadAxisNum(id); };
	Input.ptr.prototype.GamepadAxis = function(id, axis) {
		var $ptr, axis, i, id, x, x$1, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = (x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).axes, ((axis < 0 || axis >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[axis]));
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadAxis = function(id, axis) { return this.$val.GamepadAxis(id, axis); };
	Input.ptr.prototype.GamepadButtonNum = function(id) {
		var $ptr, i, id, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return 0;
		}
		return (x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).buttonNum;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.GamepadButtonNum = function(id) { return this.$val.GamepadButtonNum(id); };
	Input.ptr.prototype.IsGamepadButtonPressed = function(id, button) {
		var $ptr, button, i, id, x, x$1, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		$clone(i.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(i.m, mockRWLock), "RUnlock"), []]);
		if (16 <= id) {
			return false;
		}
		return (x = (x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).buttonPressed, ((button < 0 || button >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[button]));
		/* */ } catch(err) { $err = err; return false; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.IsGamepadButtonPressed = function(id, button) { return this.$val.IsGamepadButtonPressed(id, button); };
	Input.ptr.prototype.Touches = function() {
		var $ptr, i, in$1, t, x, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		in$1 = this;
		$clone(in$1.m, mockRWLock).RLock();
		$deferred.push([$methodVal($clone(in$1.m, mockRWLock), "RUnlock"), []]);
		if (in$1.touches.$length === 0) {
			return emptyTouches;
		}
		t = $makeSlice(sliceType$3, in$1.touches.$length);
		i = 0;
		while (true) {
			if (!(i < t.$length)) { break; }
			((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i] = (x = in$1.touches, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
			i = i + (1) >> 0;
		}
		return t;
		/* */ } catch(err) { $err = err; return sliceType$3.nil; } finally { $callDeferred($deferred, $err); }
	};
	Input.prototype.Touches = function() { return this.$val.Touches(); };
	touch.ptr.prototype.ID = function() {
		var $ptr, t;
		t = this;
		return t.id;
	};
	touch.prototype.ID = function() { return this.$val.ID(); };
	touch.ptr.prototype.Position = function() {
		var $ptr, _tmp, _tmp$1, t, x, y;
		x = 0;
		y = 0;
		t = this;
		_tmp = t.x;
		_tmp$1 = t.y;
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	touch.prototype.Position = function() { return this.$val.Position(); };
	mockRWLock.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
	};
	mockRWLock.prototype.Lock = function() { return this.$val.Lock(); };
	mockRWLock.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
	};
	mockRWLock.prototype.Unlock = function() { return this.$val.Unlock(); };
	mockRWLock.ptr.prototype.RLock = function() {
		var $ptr, m;
		m = this;
	};
	mockRWLock.prototype.RLock = function() { return this.$val.RLock(); };
	mockRWLock.ptr.prototype.RUnlock = function() {
		var $ptr, m;
		m = this;
	};
	mockRWLock.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	Input.ptr.prototype.RuneBuffer = function() {
		var $ptr, i;
		i = this;
		return i.runeBuffer;
	};
	Input.prototype.RuneBuffer = function() { return this.$val.RuneBuffer(); };
	Input.ptr.prototype.IsKeyPressed = function(key) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _keys, _ref, _ref$1, c, c$1, i, k, key;
		i = this;
		if (!(i.keyPressed === false)) {
			_ref = (_entry = keyToCodes[Key.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$4.nil);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ((_entry$1 = i.keyPressed[$String.keyFor(c)], _entry$1 !== undefined ? _entry$1.v : false)) {
					return true;
				}
				_i++;
			}
		}
		if (!(i.keyPressedEdge === false)) {
			_ref$1 = keyCodeToKeyEdge;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry$2 = _ref$1[_keys[_i$1]];
				if (_entry$2 === undefined) {
					_i$1++;
					continue;
				}
				c$1 = _entry$2.k;
				k = _entry$2.v;
				if (!((k === key))) {
					_i$1++;
					continue;
				}
				if ((_entry$3 = i.keyPressedEdge[$Int.keyFor(c$1)], _entry$3 !== undefined ? _entry$3.v : false)) {
					return true;
				}
				_i$1++;
			}
		}
		return false;
	};
	Input.prototype.IsKeyPressed = function(key) { return this.$val.IsKeyPressed(key); };
	Input.ptr.prototype.IsMouseButtonPressed = function(button) {
		var $ptr, _entry, _entry$1, _i, _keys, _ref, b, button, c, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_ref = codeToMouseButton;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			c = _entry.k;
			b = _entry.v;
			if (!((b === button))) {
				_i++;
				continue;
			}
			if ((_entry$1 = i.mouseButtonPressed[$Int.keyFor(c)], _entry$1 !== undefined ? _entry$1.v : false)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Input.prototype.IsMouseButtonPressed = function(button) { return this.$val.IsMouseButtonPressed(button); };
	Input.ptr.prototype.keyDown = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.keyPressed === false) {
			i.keyPressed = $makeMap($String.keyFor, []);
		}
		_key = code; (i.keyPressed || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.keyDown = function(code) { return this.$val.keyDown(code); };
	Input.ptr.prototype.keyUp = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.keyPressed === false) {
			i.keyPressed = $makeMap($String.keyFor, []);
		}
		_key = code; (i.keyPressed || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.keyUp = function(code) { return this.$val.keyUp(code); };
	Input.ptr.prototype.keyDownEdge = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.keyPressedEdge === false) {
			i.keyPressedEdge = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.keyPressedEdge || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.keyDownEdge = function(code) { return this.$val.keyDownEdge(code); };
	Input.ptr.prototype.keyUpEdge = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.keyPressedEdge === false) {
			i.keyPressedEdge = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.keyPressedEdge || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.keyUpEdge = function(code) { return this.$val.keyUpEdge(code); };
	Input.ptr.prototype.mouseDown = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.mouseButtonPressed || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: true };
	};
	Input.prototype.mouseDown = function(code) { return this.$val.mouseDown(code); };
	Input.ptr.prototype.mouseUp = function(code) {
		var $ptr, _key, code, i;
		i = this;
		if (i.mouseButtonPressed === false) {
			i.mouseButtonPressed = $makeMap($Int.keyFor, []);
		}
		_key = code; (i.mouseButtonPressed || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: false };
	};
	Input.prototype.mouseUp = function(code) { return this.$val.mouseUp(code); };
	Input.ptr.prototype.setMouseCursor = function(x, y) {
		var $ptr, _tmp, _tmp$1, i, x, y;
		i = this;
		_tmp = x;
		_tmp$1 = y;
		i.cursorX = _tmp;
		i.cursorY = _tmp$1;
	};
	Input.prototype.setMouseCursor = function(x, y) { return this.$val.setMouseCursor(x, y); };
	Input.ptr.prototype.updateGamepads = function() {
		var $ptr, a, axes, axesNum, b, buttons, buttonsNum, gamepad, gamepads, i, id, l, nav, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		i = this;
		nav = $global.navigator;
		if (nav.getGamepads === undefined) {
			return;
		}
		gamepads = nav.getGamepads();
		l = $parseInt(gamepads.length) >> 0;
		id = 0;
		while (true) {
			if (!(id < l)) { break; }
			(x = i.gamepads, ((id < 0 || id >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[id])).valid = false;
			gamepad = gamepads[id];
			if (gamepad === undefined || gamepad === null) {
				id = id + (1) >> 0;
				continue;
			}
			(x$1 = i.gamepads, ((id < 0 || id >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[id])).valid = true;
			axes = gamepad.axes;
			axesNum = $parseInt(axes.length) >> 0;
			(x$2 = i.gamepads, ((id < 0 || id >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[id])).axisNum = axesNum;
			a = 0;
			while (true) {
				if (!(a < 16)) { break; }
				if (axesNum <= a) {
					(x$3 = (x$4 = i.gamepads, ((id < 0 || id >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[id])).axes, ((a < 0 || a >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[a] = 0));
					a = a + (1) >> 0;
					continue;
				}
				(x$5 = (x$6 = i.gamepads, ((id < 0 || id >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[id])).axes, ((a < 0 || a >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[a] = $parseFloat(axes[a])));
				a = a + (1) >> 0;
			}
			buttons = gamepad.buttons;
			buttonsNum = $parseInt(buttons.length) >> 0;
			(x$7 = i.gamepads, ((id < 0 || id >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[id])).buttonNum = buttonsNum;
			b = 0;
			while (true) {
				if (!(b < 256)) { break; }
				if (buttonsNum <= b) {
					(x$8 = (x$9 = i.gamepads, ((id < 0 || id >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[id])).buttonPressed, ((b < 0 || b >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[b] = false));
					b = b + (1) >> 0;
					continue;
				}
				(x$10 = (x$11 = i.gamepads, ((id < 0 || id >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[id])).buttonPressed, ((b < 0 || b >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[b] = !!(buttons[b].pressed)));
				b = b + (1) >> 0;
			}
			id = id + (1) >> 0;
		}
	};
	Input.prototype.updateGamepads = function() { return this.$val.updateGamepads(); };
	Input.ptr.prototype.updateTouches = function(t) {
		var $ptr, i, t;
		i = this;
		i.touches = $makeSlice(sliceType, t.$length);
		$copySlice(i.touches, t);
	};
	Input.prototype.updateTouches = function(t) { return this.$val.updateTouches(t); };
	SetScreenScale = function(scale) {
		var $ptr, _r, scale, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; scale = $f.scale; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = currentUI.setScreenSize(currentUI.width, currentUI.height, scale, currentUI.fullscreen); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetScreenScale }; } $f.$ptr = $ptr; $f._r = _r; $f.scale = scale; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetScreenScale = SetScreenScale;
	ScreenPadding = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$pkg.ScreenPadding = ScreenPadding;
	adjustCursorPosition = function(x, y) {
		var $ptr, x, y;
		return [x, y];
	};
	userInterface.ptr.prototype.getScale = function() {
		var $ptr, bh, body, bw, doc, sh, sw, u;
		u = this;
		if (!u.fullscreen) {
			return u.scale;
		}
		doc = $global.document;
		body = doc.body;
		bw = $parseFloat(body.clientWidth);
		bh = $parseFloat(body.clientHeight);
		sw = bw / (u.width);
		sh = bh / (u.height);
		if (sw > sh) {
			return sh;
		}
		return sw;
	};
	userInterface.prototype.getScale = function() { return this.$val.getScale(); };
	userInterface.ptr.prototype.actualScreenScale = function() {
		var $ptr, _r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = devicescale.DeviceScale(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return u.getScale() * _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.actualScreenScale }; } $f.$ptr = $ptr; $f._r = _r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.actualScreenScale = function() { return this.$val.actualScreenScale(); };
	userInterface.ptr.prototype.updateGraphicsContext = function(g) {
		var $ptr, _arg, _arg$1, _arg$2, _r, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		/* */ if (u.sizeChanged) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (u.sizeChanged) { */ case 1:
			u.sizeChanged = false;
			_arg = u.width;
			_arg$1 = u.height;
			_r = u.actualScreenScale(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$2 = _r;
			$r = g.SetSize(_arg, _arg$1, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.updateGraphicsContext }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.updateGraphicsContext = function(g) { return this.$val.updateGraphicsContext(g); };
	userInterface.ptr.prototype.update = function(g) {
		var $ptr, _r, err, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = [g];
		u = [u];
		u[0] = this;
		if (!u[0].runnableInBackground && !u[0].windowFocus) {
			$s = -1; return $ifaceNil;
		}
		/* */ if (opengl.GetContext().IsContextLost()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (opengl.GetContext().IsContextLost()) { */ case 1:
			opengl.GetContext().RestoreContext();
			$r = g[0].Invalidate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		currentInput.updateGamepads();
		$r = u[0].updateGraphicsContext(g[0]); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = g[0].Update((function(g, u) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			currentInput.runeBuffer = sliceType$1.nil;
			$r = u[0].updateGraphicsContext(g[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(g, u)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.update }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.update = function(g) { return this.$val.update(g); };
	userInterface.ptr.prototype.loop = function(g) {
		var $ptr, _r, ch, f, g, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; f = $f.f; g = $f.g; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		f = [f];
		g = [g];
		u = [u];
		u[0] = this;
		ch[0] = new $Chan($error, 0);
		f[0] = $throwNilPointerError;
		f[0] = (function(ch, f, g, u) { return function() {
			var $ptr;
			$go((function(ch, f, g, u) { return function $b() {
				var $ptr, _r, err, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = u[0].update(g[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
					$r = $send(ch[0], err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$close(ch[0]);
					$s = -1; return;
				/* } */ case 3:
				$global.window.requestAnimationFrame($externalize(f[0], funcType));
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
			}; })(ch, f, g, u), []);
		}; })(ch, f, g, u);
		$r = f[0](); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = $recv(ch[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.loop }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.f = f; $f.g = g; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.loop = function(g) { return this.$val.loop(g); };
	touchEventToTouches = function(e) {
		var $ptr, _tmp, _tmp$1, e, i, j, jj, left, rect, scale, t, top;
		scale = currentUI.getScale();
		j = e.targetTouches;
		rect = canvas.getBoundingClientRect();
		_tmp = $parseInt(rect.left) >> 0;
		_tmp$1 = $parseInt(rect.top) >> 0;
		left = _tmp;
		top = _tmp$1;
		t = $makeSlice(sliceType, ($parseInt(j.length) >> 0));
		i = 0;
		while (true) {
			if (!(i < t.$length)) { break; }
			jj = j.item(i);
			((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]).id = $parseInt(jj.identifier) >> 0;
			((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]).x = ((((($parseInt(jj.clientX) >> 0) - left >> 0)) / scale >> 0));
			((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]).y = ((((($parseInt(jj.clientY) >> 0) - top >> 0)) / scale >> 0));
			i = i + (1) >> 0;
		}
		return t;
	};
	init = function() {
		var $ptr, _r, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = initialize(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	initialize = function() {
		var $ptr, _r, bodyStyle, canvasStyle, ch, doc, htmlStyle, meta, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; bodyStyle = $f.bodyStyle; canvasStyle = $f.canvasStyle; ch = $f.ch; doc = $f.doc; htmlStyle = $f.htmlStyle; meta = $f.meta; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		if (!($global.require === undefined)) {
			$s = -1; return $ifaceNil;
		}
		doc = $global.document;
		window = $global.window;
		/* */ if (doc.body === null) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (doc.body === null) { */ case 1:
			ch[0] = new $Chan(structType, 0);
			window.addEventListener($externalize("load", $String), $externalize((function(ch) { return function() {
				var $ptr;
				$close(ch[0]);
			}; })(ch), funcType));
			_r = $recv(ch[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		window.addEventListener($externalize("focus", $String), $externalize((function(ch) { return function() {
			var $ptr;
			currentUI.windowFocus = true;
		}; })(ch), funcType));
		window.addEventListener($externalize("blur", $String), $externalize((function(ch) { return function() {
			var $ptr;
			currentUI.windowFocus = false;
		}; })(ch), funcType));
		window.addEventListener($externalize("resize", $String), $externalize((function(ch) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = currentUI.updateScreenSize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(ch), funcType));
		meta = doc.createElement($externalize("meta", $String));
		meta.name = $externalize("viewport", $String);
		meta.content = $externalize("width=device-width, initial-scale=1", $String);
		doc.head.appendChild(meta);
		canvas = doc.createElement($externalize("canvas", $String));
		canvas.width = 16;
		canvas.height = 16;
		doc.body.appendChild(canvas);
		htmlStyle = doc.documentElement.style;
		htmlStyle.height = $externalize("100%", $String);
		htmlStyle.margin = $externalize("0", $String);
		htmlStyle.padding = $externalize("0", $String);
		bodyStyle = doc.body.style;
		bodyStyle.backgroundColor = $externalize("#000", $String);
		bodyStyle.position = $externalize("relative", $String);
		bodyStyle.height = $externalize("100%", $String);
		bodyStyle.margin = $externalize("0", $String);
		bodyStyle.padding = $externalize("0", $String);
		doc.body.addEventListener($externalize("click", $String), $externalize((function(ch) { return function() {
			var $ptr;
			canvas.focus();
		}; })(ch), funcType));
		canvasStyle = canvas.style;
		canvasStyle.position = $externalize("absolute", $String);
		canvas.setAttribute($externalize("tabindex", $String), 1);
		canvas.style.outline = $externalize("none", $String);
		canvas.addEventListener($externalize("keydown", $String), $externalize((function(ch) { return function(e) {
			var $ptr, _entry, _entry$1, _entry$10, _entry$11, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, c, code, cs, e, x, x$1, x$2, x$3, x$4, x$5;
			c = e.code;
			if (c === undefined) {
				code = $parseInt(e.keyCode) >> 0;
				if (((_entry = keyCodeToKeyEdge[$Int.keyFor(code)], _entry !== undefined ? _entry.v : 0) === 77) || ((_entry$1 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$1 !== undefined ? _entry$1.v : 0) === 44) || ((_entry$2 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$2 !== undefined ? _entry$2.v : 0) === 64) || ((_entry$3 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$3 !== undefined ? _entry$3.v : 0) === 70) || ((_entry$4 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$4 !== undefined ? _entry$4.v : 0) === 39) || ((_entry$5 = keyCodeToKeyEdge[$Int.keyFor(code)], _entry$5 !== undefined ? _entry$5.v : 0) === 76)) {
					e.preventDefault();
				}
				currentInput.keyDownEdge(code);
				return;
			}
			cs = $internalize(c, $String);
			if (cs === (x = (_entry$6 = keyToCodes[Key.keyFor(77)], _entry$6 !== undefined ? _entry$6.v : sliceType$4.nil), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) || cs === (x$1 = (_entry$7 = keyToCodes[Key.keyFor(44)], _entry$7 !== undefined ? _entry$7.v : sliceType$4.nil), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) || cs === (x$2 = (_entry$8 = keyToCodes[Key.keyFor(64)], _entry$8 !== undefined ? _entry$8.v : sliceType$4.nil), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) || cs === (x$3 = (_entry$9 = keyToCodes[Key.keyFor(70)], _entry$9 !== undefined ? _entry$9.v : sliceType$4.nil), (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) || cs === (x$4 = (_entry$10 = keyToCodes[Key.keyFor(39)], _entry$10 !== undefined ? _entry$10.v : sliceType$4.nil), (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) || cs === (x$5 = (_entry$11 = keyToCodes[Key.keyFor(76)], _entry$11 !== undefined ? _entry$11.v : sliceType$4.nil), (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))) {
				e.preventDefault();
			}
			currentInput.keyDown(cs);
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("keypress", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e, r;
			e.preventDefault();
			r = ((($parseInt(e.charCode) >> 0) >> 0));
			if (unicode.IsPrint(r)) {
				currentInput.runeBuffer = $append(currentInput.runeBuffer, r);
			}
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("keyup", $String), $externalize((function(ch) { return function(e) {
			var $ptr, code, code$1, e;
			e.preventDefault();
			if (e.code === undefined) {
				code = $parseInt(e.keyCode) >> 0;
				currentInput.keyUpEdge(code);
				return;
			}
			code$1 = $internalize(e.code, $String);
			currentInput.keyUp(code$1);
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("mousedown", $String), $externalize((function(ch) { return function(e) {
			var $ptr, button, e;
			e.preventDefault();
			button = $parseInt(e.button) >> 0;
			currentInput.mouseDown(button);
			setMouseCursorFromEvent(e);
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("mouseup", $String), $externalize((function(ch) { return function(e) {
			var $ptr, button, e;
			e.preventDefault();
			button = $parseInt(e.button) >> 0;
			currentInput.mouseUp(button);
			setMouseCursorFromEvent(e);
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("mousemove", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
			setMouseCursorFromEvent(e);
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("contextmenu", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("touchstart", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
			currentInput.updateTouches(touchEventToTouches(e));
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("touchend", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
			currentInput.updateTouches(touchEventToTouches(e));
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("touchmove", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
			currentInput.updateTouches(touchEventToTouches(e));
		}; })(ch), funcType$1));
		window.addEventListener($externalize("gamepadconnected", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("webglcontextlost", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
			e.preventDefault();
		}; })(ch), funcType$1));
		canvas.addEventListener($externalize("webglcontextrestored", $String), $externalize((function(ch) { return function(e) {
			var $ptr, e;
		}; })(ch), funcType$1));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: initialize }; } $f.$ptr = $ptr; $f._r = _r; $f.bodyStyle = bodyStyle; $f.canvasStyle = canvasStyle; $f.ch = ch; $f.doc = doc; $f.htmlStyle = htmlStyle; $f.meta = meta; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	setMouseCursorFromEvent = function(e) {
		var $ptr, _tmp, _tmp$1, e, rect, scale, x, y;
		scale = currentUI.getScale();
		rect = canvas.getBoundingClientRect();
		_tmp = $parseInt(e.clientX) >> 0;
		_tmp$1 = $parseInt(e.clientY) >> 0;
		x = _tmp;
		y = _tmp$1;
		x = x - (($parseInt(rect.left) >> 0)) >> 0;
		y = y - (($parseInt(rect.top) >> 0)) >> 0;
		currentInput.setMouseCursor((((x) / scale >> 0)), (((y) / scale >> 0)));
	};
	RunMainThreadLoop = function(ch) {
		var $ptr, _r, ch, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $recv(ch); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: RunMainThreadLoop }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RunMainThreadLoop = RunMainThreadLoop;
	Run = function(width, height, scale, title, g) {
		var $ptr, _r, _r$1, _r$2, doc, err, g, height, scale, title, u, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; doc = $f.doc; err = $f.err; g = $f.g; height = $f.height; scale = $f.scale; title = $f.title; u = $f.u; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = currentUI;
		doc = $global.document;
		doc.title = $externalize(title, $String);
		_r = u.setScreenSize(width, height, scale, u.fullscreen); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		canvas.focus();
		_r$1 = opengl.Init(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = u.loop(g); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Run }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.doc = doc; $f.err = err; $f.g = g; $f.height = height; $f.scale = scale; $f.title = title; $f.u = u; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	userInterface.ptr.prototype.setScreenSize = function(width, height, scale, fullscreen) {
		var $ptr, fullscreen, height, scale, u, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; fullscreen = $f.fullscreen; height = $f.height; scale = $f.scale; u = $f.u; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		if ((u.width === width) && (u.height === height) && (u.scale === scale) && fullscreen === u.fullscreen) {
			$s = -1; return false;
		}
		u.width = width;
		u.height = height;
		u.scale = scale;
		u.fullscreen = fullscreen;
		$r = u.updateScreenSize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.setScreenSize }; } $f.$ptr = $ptr; $f.fullscreen = fullscreen; $f.height = height; $f.scale = scale; $f.u = u; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.setScreenSize = function(width, height, scale, fullscreen) { return this.$val.setScreenSize(width, height, scale, fullscreen); };
	userInterface.ptr.prototype.updateScreenSize = function() {
		var $ptr, _r, _r$1, canvasStyle, cssHeight, cssWidth, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; canvasStyle = $f.canvasStyle; cssHeight = $f.cssHeight; cssWidth = $f.cssWidth; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = u.actualScreenScale(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		canvas.width = (((u.width) * _r >> 0));
		_r$1 = u.actualScreenScale(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		canvas.height = (((u.height) * _r$1 >> 0));
		canvasStyle = canvas.style;
		s = u.getScale();
		cssWidth = (((u.width) * s >> 0));
		cssHeight = (((u.height) * s >> 0));
		canvasStyle.width = $externalize(strconv.Itoa(cssWidth) + "px", $String);
		canvasStyle.height = $externalize(strconv.Itoa(cssHeight) + "px", $String);
		canvasStyle.left = $externalize("calc((100% - " + strconv.Itoa(cssWidth) + "px) / 2)", $String);
		canvasStyle.top = $externalize("calc((100% - " + strconv.Itoa(cssHeight) + "px) / 2)", $String);
		u.sizeChanged = true;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userInterface.ptr.prototype.updateScreenSize }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.canvasStyle = canvasStyle; $f.cssHeight = cssHeight; $f.cssWidth = cssWidth; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	userInterface.prototype.updateScreenSize = function() { return this.$val.updateScreenSize(); };
	ptrType$1.methods = [{prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [$Int, $Int], false)}];
	mockRWLock.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "CursorPosition", name: "CursorPosition", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "GamepadIDs", name: "GamepadIDs", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "GamepadAxisNum", name: "GamepadAxisNum", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "GamepadAxis", name: "GamepadAxis", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "GamepadButtonNum", name: "GamepadButtonNum", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "IsGamepadButtonPressed", name: "IsGamepadButtonPressed", pkg: "", typ: $funcType([$Int, GamepadButton], [$Bool], false)}, {prop: "Touches", name: "Touches", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "RuneBuffer", name: "RuneBuffer", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "IsKeyPressed", name: "IsKeyPressed", pkg: "", typ: $funcType([Key], [$Bool], false)}, {prop: "IsMouseButtonPressed", name: "IsMouseButtonPressed", pkg: "", typ: $funcType([MouseButton], [$Bool], false)}, {prop: "keyDown", name: "keyDown", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$String], [], false)}, {prop: "keyUp", name: "keyUp", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$String], [], false)}, {prop: "keyDownEdge", name: "keyDownEdge", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int], [], false)}, {prop: "keyUpEdge", name: "keyUpEdge", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int], [], false)}, {prop: "mouseDown", name: "mouseDown", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int], [], false)}, {prop: "mouseUp", name: "mouseUp", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int], [], false)}, {prop: "setMouseCursor", name: "setMouseCursor", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int, $Int], [], false)}, {prop: "updateGamepads", name: "updateGamepads", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [], false)}, {prop: "updateTouches", name: "updateTouches", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([sliceType], [], false)}];
	ptrType$3.methods = [{prop: "getScale", name: "getScale", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [$Float64], false)}, {prop: "actualScreenScale", name: "actualScreenScale", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [$Float64], false)}, {prop: "updateGraphicsContext", name: "updateGraphicsContext", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [], false)}, {prop: "update", name: "update", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [$error], false)}, {prop: "loop", name: "loop", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([GraphicsContext], [$error], false)}, {prop: "setScreenSize", name: "setScreenSize", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([$Int, $Int, $Float64, $Bool], [$Bool], false)}, {prop: "updateScreenSize", name: "updateScreenSize", pkg: "github.com/hajimehoshi/ebiten/internal/ui", typ: $funcType([], [], false)}];
	Touch.init([{prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [$Int, $Int], false)}]);
	gamePad.init("github.com/hajimehoshi/ebiten/internal/ui", [{prop: "valid", name: "valid", exported: false, typ: $Bool, tag: ""}, {prop: "axisNum", name: "axisNum", exported: false, typ: $Int, tag: ""}, {prop: "axes", name: "axes", exported: false, typ: arrayType, tag: ""}, {prop: "buttonNum", name: "buttonNum", exported: false, typ: $Int, tag: ""}, {prop: "buttonPressed", name: "buttonPressed", exported: false, typ: arrayType$1, tag: ""}]);
	touch.init("github.com/hajimehoshi/ebiten/internal/ui", [{prop: "id", name: "id", exported: false, typ: $Int, tag: ""}, {prop: "x", name: "x", exported: false, typ: $Int, tag: ""}, {prop: "y", name: "y", exported: false, typ: $Int, tag: ""}]);
	mockRWLock.init("", []);
	Input.init("github.com/hajimehoshi/ebiten/internal/ui", [{prop: "keyPressed", name: "keyPressed", exported: false, typ: mapType, tag: ""}, {prop: "keyPressedEdge", name: "keyPressedEdge", exported: false, typ: mapType$1, tag: ""}, {prop: "mouseButtonPressed", name: "mouseButtonPressed", exported: false, typ: mapType$1, tag: ""}, {prop: "cursorX", name: "cursorX", exported: false, typ: $Int, tag: ""}, {prop: "cursorY", name: "cursorY", exported: false, typ: $Int, tag: ""}, {prop: "gamepads", name: "gamepads", exported: false, typ: arrayType$2, tag: ""}, {prop: "touches", name: "touches", exported: false, typ: sliceType, tag: ""}, {prop: "runeBuffer", name: "runeBuffer", exported: false, typ: sliceType$1, tag: ""}, {prop: "m", name: "m", exported: false, typ: mockRWLock, tag: ""}]);
	GraphicsContext.init([{prop: "Invalidate", name: "Invalidate", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([funcType], [$error], false)}]);
	userInterface.init("github.com/hajimehoshi/ebiten/internal/ui", [{prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}, {prop: "scale", name: "scale", exported: false, typ: $Float64, tag: ""}, {prop: "fullscreen", name: "fullscreen", exported: false, typ: $Bool, tag: ""}, {prop: "runnableInBackground", name: "runnableInBackground", exported: false, typ: $Bool, tag: ""}, {prop: "sizeChanged", name: "sizeChanged", exported: false, typ: $Bool, tag: ""}, {prop: "windowFocus", name: "windowFocus", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = devicescale.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		canvas = null;
		currentInput = new Input.ptr(false, false, false, 0, 0, arrayType$2.zero(), sliceType.nil, sliceType$1.nil, new mockRWLock.ptr());
		emptyIDs = new sliceType$2([]);
		emptyTouches = new sliceType$3([]);
		keyToCodes = $makeMap(Key.keyFor, [{ k: 0, v: new sliceType$4(["Digit0"]) }, { k: 1, v: new sliceType$4(["Digit1"]) }, { k: 2, v: new sliceType$4(["Digit2"]) }, { k: 3, v: new sliceType$4(["Digit3"]) }, { k: 4, v: new sliceType$4(["Digit4"]) }, { k: 5, v: new sliceType$4(["Digit5"]) }, { k: 6, v: new sliceType$4(["Digit6"]) }, { k: 7, v: new sliceType$4(["Digit7"]) }, { k: 8, v: new sliceType$4(["Digit8"]) }, { k: 9, v: new sliceType$4(["Digit9"]) }, { k: 10, v: new sliceType$4(["KeyA"]) }, { k: 36, v: new sliceType$4(["AltLeft", "AltRight"]) }, { k: 37, v: new sliceType$4(["Quote"]) }, { k: 11, v: new sliceType$4(["KeyB"]) }, { k: 38, v: new sliceType$4(["Backslash"]) }, { k: 39, v: new sliceType$4(["Backspace"]) }, { k: 12, v: new sliceType$4(["KeyC"]) }, { k: 40, v: new sliceType$4(["CapsLock"]) }, { k: 41, v: new sliceType$4(["Comma"]) }, { k: 42, v: new sliceType$4(["ControlLeft", "ControlRight"]) }, { k: 13, v: new sliceType$4(["KeyD"]) }, { k: 43, v: new sliceType$4(["Delete"]) }, { k: 44, v: new sliceType$4(["ArrowDown"]) }, { k: 14, v: new sliceType$4(["KeyE"]) }, { k: 45, v: new sliceType$4(["End"]) }, { k: 46, v: new sliceType$4(["Enter"]) }, { k: 47, v: new sliceType$4(["Equal"]) }, { k: 48, v: new sliceType$4(["Escape"]) }, { k: 15, v: new sliceType$4(["KeyF"]) }, { k: 49, v: new sliceType$4(["F1"]) }, { k: 58, v: new sliceType$4(["F10"]) }, { k: 59, v: new sliceType$4(["F11"]) }, { k: 60, v: new sliceType$4(["F12"]) }, { k: 50, v: new sliceType$4(["F2"]) }, { k: 51, v: new sliceType$4(["F3"]) }, { k: 52, v: new sliceType$4(["F4"]) }, { k: 53, v: new sliceType$4(["F5"]) }, { k: 54, v: new sliceType$4(["F6"]) }, { k: 55, v: new sliceType$4(["F7"]) }, { k: 56, v: new sliceType$4(["F8"]) }, { k: 57, v: new sliceType$4(["F9"]) }, { k: 16, v: new sliceType$4(["KeyG"]) }, { k: 61, v: new sliceType$4(["Backquote"]) }, { k: 17, v: new sliceType$4(["KeyH"]) }, { k: 62, v: new sliceType$4(["Home"]) }, { k: 18, v: new sliceType$4(["KeyI"]) }, { k: 63, v: new sliceType$4(["Insert"]) }, { k: 19, v: new sliceType$4(["KeyJ"]) }, { k: 20, v: new sliceType$4(["KeyK"]) }, { k: 21, v: new sliceType$4(["KeyL"]) }, { k: 64, v: new sliceType$4(["ArrowLeft"]) }, { k: 65, v: new sliceType$4(["BracketLeft"]) }, { k: 22, v: new sliceType$4(["KeyM"]) }, { k: 66, v: new sliceType$4(["Minus"]) }, { k: 23, v: new sliceType$4(["KeyN"]) }, { k: 24, v: new sliceType$4(["KeyO"]) }, { k: 25, v: new sliceType$4(["KeyP"]) }, { k: 67, v: new sliceType$4(["PageDown"]) }, { k: 68, v: new sliceType$4(["PageUp"]) }, { k: 69, v: new sliceType$4(["Period"]) }, { k: 26, v: new sliceType$4(["KeyQ"]) }, { k: 27, v: new sliceType$4(["KeyR"]) }, { k: 70, v: new sliceType$4(["ArrowRight"]) }, { k: 71, v: new sliceType$4(["BracketRight"]) }, { k: 28, v: new sliceType$4(["KeyS"]) }, { k: 72, v: new sliceType$4(["Semicolon"]) }, { k: 73, v: new sliceType$4(["ShiftLeft", "ShiftRight"]) }, { k: 74, v: new sliceType$4(["Slash"]) }, { k: 75, v: new sliceType$4(["Space"]) }, { k: 29, v: new sliceType$4(["KeyT"]) }, { k: 76, v: new sliceType$4(["Tab"]) }, { k: 30, v: new sliceType$4(["KeyU"]) }, { k: 77, v: new sliceType$4(["ArrowUp"]) }, { k: 31, v: new sliceType$4(["KeyV"]) }, { k: 32, v: new sliceType$4(["KeyW"]) }, { k: 33, v: new sliceType$4(["KeyX"]) }, { k: 34, v: new sliceType$4(["KeyY"]) }, { k: 35, v: new sliceType$4(["KeyZ"]) }]);
		keyCodeToKeyEdge = $makeMap($Int.keyFor, [{ k: 8, v: 39 }, { k: 9, v: 76 }, { k: 13, v: 46 }, { k: 16, v: 73 }, { k: 17, v: 42 }, { k: 18, v: 36 }, { k: 20, v: 40 }, { k: 27, v: 48 }, { k: 32, v: 75 }, { k: 33, v: 68 }, { k: 34, v: 67 }, { k: 35, v: 45 }, { k: 36, v: 62 }, { k: 37, v: 64 }, { k: 38, v: 77 }, { k: 39, v: 70 }, { k: 40, v: 44 }, { k: 45, v: 63 }, { k: 46, v: 43 }, { k: 48, v: 0 }, { k: 49, v: 1 }, { k: 50, v: 2 }, { k: 51, v: 3 }, { k: 52, v: 4 }, { k: 53, v: 5 }, { k: 54, v: 6 }, { k: 55, v: 7 }, { k: 56, v: 8 }, { k: 57, v: 9 }, { k: 65, v: 10 }, { k: 66, v: 11 }, { k: 67, v: 12 }, { k: 68, v: 13 }, { k: 69, v: 14 }, { k: 70, v: 15 }, { k: 71, v: 16 }, { k: 72, v: 17 }, { k: 73, v: 18 }, { k: 74, v: 19 }, { k: 75, v: 20 }, { k: 76, v: 21 }, { k: 77, v: 22 }, { k: 78, v: 23 }, { k: 79, v: 24 }, { k: 80, v: 25 }, { k: 81, v: 26 }, { k: 82, v: 27 }, { k: 83, v: 28 }, { k: 84, v: 29 }, { k: 85, v: 30 }, { k: 86, v: 31 }, { k: 87, v: 32 }, { k: 88, v: 33 }, { k: 89, v: 34 }, { k: 90, v: 35 }, { k: 112, v: 49 }, { k: 113, v: 50 }, { k: 114, v: 51 }, { k: 115, v: 52 }, { k: 116, v: 53 }, { k: 117, v: 54 }, { k: 118, v: 55 }, { k: 119, v: 56 }, { k: 120, v: 57 }, { k: 121, v: 58 }, { k: 122, v: 59 }, { k: 123, v: 60 }, { k: 186, v: 72 }, { k: 187, v: 47 }, { k: 188, v: 41 }, { k: 189, v: 66 }, { k: 190, v: 69 }, { k: 191, v: 74 }, { k: 192, v: 61 }, { k: 219, v: 65 }, { k: 220, v: 38 }, { k: 221, v: 71 }, { k: 222, v: 37 }]);
		codeToMouseButton = $makeMap($Int.keyFor, [{ k: 0, v: 0 }, { k: 1, v: 2 }, { k: 2, v: 1 }]);
		$pkg.RegularTermination = errors.New("regular termination");
		currentUI = new userInterface.ptr(0, 0, 0, false, false, true, true);
		$r = init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten"] = (function() {
	var $pkg = {}, $init, fmt, affine, clock, devicescale, graphics, graphicsutil, hooks, opengl, packing, restorable, sync, ui, web, image, color, runtime, atomic, ColorM, GamepadButton, GeoM, Filter, CompositeMode, graphicsContext, Image, DrawImageOptions, ImagePart, ImageParts, imageParts, Touch, Key, MouseButton, sharedImage, sharedImagePart, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, ptrType$4, sliceType$1, sliceType$2, ptrType$5, ptrType$6, ptrType$7, sliceType$3, funcType, sliceType$5, ptrType$8, ptrType$9, ptrType$10, ptrType$11, funcType$1, ptrType$12, emptyImage, isRunningSlowly, isRunningSlowly$24ptr, theGraphicsContext, theSharedImages, sharedImageLock, newGraphicsContext, init, NewImage, newImageWithoutInit, newVolatileImage, NewImageFromImage, newImageWithScreenFramebuffer, checkSize, IsKeyPressed, IsMouseButtonPressed, GamepadIDs, GamepadButtonNum, IsGamepadButtonPressed, Touches, CurrentFPS, setRunningSlowly, run, Run, SetScreenScale, newSharedImagePart;
	fmt = $packages["fmt"];
	affine = $packages["github.com/hajimehoshi/ebiten/internal/affine"];
	clock = $packages["github.com/hajimehoshi/ebiten/internal/clock"];
	devicescale = $packages["github.com/hajimehoshi/ebiten/internal/devicescale"];
	graphics = $packages["github.com/hajimehoshi/ebiten/internal/graphics"];
	graphicsutil = $packages["github.com/hajimehoshi/ebiten/internal/graphicsutil"];
	hooks = $packages["github.com/hajimehoshi/ebiten/internal/hooks"];
	opengl = $packages["github.com/hajimehoshi/ebiten/internal/opengl"];
	packing = $packages["github.com/hajimehoshi/ebiten/internal/packing"];
	restorable = $packages["github.com/hajimehoshi/ebiten/internal/restorable"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	ui = $packages["github.com/hajimehoshi/ebiten/internal/ui"];
	web = $packages["github.com/hajimehoshi/ebiten/internal/web"];
	image = $packages["image"];
	color = $packages["image/color"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	ColorM = $pkg.ColorM = $newType(0, $kindStruct, "ebiten.ColorM", true, "github.com/hajimehoshi/ebiten", true, function(impl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.impl = ptrType$2.nil;
			return;
		}
		this.impl = impl_;
	});
	GamepadButton = $pkg.GamepadButton = $newType(4, $kindInt, "ebiten.GamepadButton", true, "github.com/hajimehoshi/ebiten", true, null);
	GeoM = $pkg.GeoM = $newType(0, $kindStruct, "ebiten.GeoM", true, "github.com/hajimehoshi/ebiten", true, function(impl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.impl = ptrType$3.nil;
			return;
		}
		this.impl = impl_;
	});
	Filter = $pkg.Filter = $newType(4, $kindInt, "ebiten.Filter", true, "github.com/hajimehoshi/ebiten", true, null);
	CompositeMode = $pkg.CompositeMode = $newType(4, $kindInt, "ebiten.CompositeMode", true, "github.com/hajimehoshi/ebiten", true, null);
	graphicsContext = $pkg.graphicsContext = $newType(0, $kindStruct, "ebiten.graphicsContext", true, "github.com/hajimehoshi/ebiten", false, function(f_, offscreen_, screen_, initialized_, invalidated_, offsetX_, offsetY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			this.offscreen = ptrType.nil;
			this.screen = ptrType.nil;
			this.initialized = false;
			this.invalidated = false;
			this.offsetX = 0;
			this.offsetY = 0;
			return;
		}
		this.f = f_;
		this.offscreen = offscreen_;
		this.screen = screen_;
		this.initialized = initialized_;
		this.invalidated = invalidated_;
		this.offsetX = offsetX_;
		this.offsetY = offsetY_;
	});
	Image = $pkg.Image = $newType(0, $kindStruct, "ebiten.Image", true, "github.com/hajimehoshi/ebiten", true, function(addr_, restorable_, sharedImagePart_, filter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.addr = ptrType.nil;
			this.restorable = ptrType$5.nil;
			this.sharedImagePart = ptrType$6.nil;
			this.filter = 0;
			return;
		}
		this.addr = addr_;
		this.restorable = restorable_;
		this.sharedImagePart = sharedImagePart_;
		this.filter = filter_;
	});
	DrawImageOptions = $pkg.DrawImageOptions = $newType(0, $kindStruct, "ebiten.DrawImageOptions", true, "github.com/hajimehoshi/ebiten", true, function(SourceRect_, GeoM_, ColorM_, CompositeMode_, Filter_, ImageParts_, Parts_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SourceRect = ptrType$4.nil;
			this.GeoM = new GeoM.ptr(ptrType$3.nil);
			this.ColorM = new ColorM.ptr(ptrType$2.nil);
			this.CompositeMode = 0;
			this.Filter = 0;
			this.ImageParts = $ifaceNil;
			this.Parts = sliceType$1.nil;
			return;
		}
		this.SourceRect = SourceRect_;
		this.GeoM = GeoM_;
		this.ColorM = ColorM_;
		this.CompositeMode = CompositeMode_;
		this.Filter = Filter_;
		this.ImageParts = ImageParts_;
		this.Parts = Parts_;
	});
	ImagePart = $pkg.ImagePart = $newType(0, $kindStruct, "ebiten.ImagePart", true, "github.com/hajimehoshi/ebiten", true, function(Dst_, Src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dst = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.Src = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			return;
		}
		this.Dst = Dst_;
		this.Src = Src_;
	});
	ImageParts = $pkg.ImageParts = $newType(8, $kindInterface, "ebiten.ImageParts", true, "github.com/hajimehoshi/ebiten", true, null);
	imageParts = $pkg.imageParts = $newType(12, $kindSlice, "ebiten.imageParts", true, "github.com/hajimehoshi/ebiten", false, null);
	Touch = $pkg.Touch = $newType(8, $kindInterface, "ebiten.Touch", true, "github.com/hajimehoshi/ebiten", true, null);
	Key = $pkg.Key = $newType(4, $kindInt, "ebiten.Key", true, "github.com/hajimehoshi/ebiten", true, null);
	MouseButton = $pkg.MouseButton = $newType(4, $kindInt, "ebiten.MouseButton", true, "github.com/hajimehoshi/ebiten", true, null);
	sharedImage = $pkg.sharedImage = $newType(0, $kindStruct, "ebiten.sharedImage", true, "github.com/hajimehoshi/ebiten", false, function(restorable_, page_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.restorable = ptrType$5.nil;
			this.page = new packing.Page.ptr(ptrType$9.nil, new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false)));
			return;
		}
		this.restorable = restorable_;
		this.page = page_;
	});
	sharedImagePart = $pkg.sharedImagePart = $newType(0, $kindStruct, "ebiten.sharedImagePart", true, "github.com/hajimehoshi/ebiten", false, function(sharedImage_, node_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sharedImage = ptrType$1.nil;
			this.node = ptrType$9.nil;
			return;
		}
		this.sharedImage = sharedImage_;
		this.node = node_;
	});
	ptrType = $ptrType(Image);
	ptrType$1 = $ptrType(sharedImage);
	sliceType = $sliceType(ptrType$1);
	ptrType$2 = $ptrType(affine.ColorM);
	ptrType$3 = $ptrType(affine.GeoM);
	ptrType$4 = $ptrType(image.Rectangle);
	sliceType$1 = $sliceType(ImagePart);
	sliceType$2 = $sliceType($Uint8);
	ptrType$5 = $ptrType(restorable.Image);
	ptrType$6 = $ptrType(sharedImagePart);
	ptrType$7 = $ptrType(DrawImageOptions);
	sliceType$3 = $sliceType($emptyInterface);
	funcType = $funcType([ptrType], [$error], false);
	sliceType$5 = $sliceType(Touch);
	ptrType$8 = $ptrType($Int32);
	ptrType$9 = $ptrType(packing.Node);
	ptrType$10 = $ptrType(ColorM);
	ptrType$11 = $ptrType(GeoM);
	funcType$1 = $funcType([], [], false);
	ptrType$12 = $ptrType(graphicsContext);
	ColorM.ptr.prototype.Reset = function() {
		var $ptr, c;
		c = this;
		c.impl = ptrType$2.nil;
	};
	ColorM.prototype.Reset = function() { return this.$val.Reset(); };
	ColorM.ptr.prototype.Apply = function(clr) {
		var $ptr, _r, c, clr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; clr = $f.clr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.impl.Apply(clr); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ColorM.ptr.prototype.Apply }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.clr = clr; $f.$s = $s; $f.$r = $r; return $f;
	};
	ColorM.prototype.Apply = function(clr) { return this.$val.Apply(clr); };
	ColorM.ptr.prototype.Concat = function(other) {
		var $ptr, c, other;
		c = this;
		c.impl = c.impl.Concat(other.impl);
	};
	ColorM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	ColorM.ptr.prototype.Add = function(other) {
		var $ptr, c, other;
		c = this;
		c.impl = c.impl.Add(other.impl);
	};
	ColorM.prototype.Add = function(other) { return this.$val.Add(other); };
	ColorM.ptr.prototype.Scale = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.impl = c.impl.Scale(($fround(r)), ($fround(g)), ($fround(b)), ($fround(a)));
	};
	ColorM.prototype.Scale = function(r, g, b, a) { return this.$val.Scale(r, g, b, a); };
	ColorM.ptr.prototype.Translate = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.impl = c.impl.Translate(($fround(r)), ($fround(g)), ($fround(b)), ($fround(a)));
	};
	ColorM.prototype.Translate = function(r, g, b, a) { return this.$val.Translate(r, g, b, a); };
	ColorM.ptr.prototype.RotateHue = function(theta) {
		var $ptr, c, theta;
		c = this;
		c.ChangeHSV(theta, 1, 1);
	};
	ColorM.prototype.RotateHue = function(theta) { return this.$val.RotateHue(theta); };
	ColorM.ptr.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) {
		var $ptr, c, hueTheta, saturationScale, valueScale;
		c = this;
		c.impl = c.impl.ChangeHSV(hueTheta, ($fround(saturationScale)), ($fround(valueScale)));
	};
	ColorM.prototype.ChangeHSV = function(hueTheta, saturationScale, valueScale) { return this.$val.ChangeHSV(hueTheta, saturationScale, valueScale); };
	ColorM.ptr.prototype.Element = function(i, j) {
		var $ptr, _tuple, b, c, i, j, t, x;
		c = this;
		_tuple = c.impl.UnsafeElements();
		b = _tuple[0];
		t = _tuple[1];
		if (j < 4) {
			return ((x = i + ($imul(j, 4)) >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])));
		}
		return (((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]));
	};
	ColorM.prototype.Element = function(i, j) { return this.$val.Element(i, j); };
	ColorM.ptr.prototype.SetElement = function(i, j, element) {
		var $ptr, c, element, i, j;
		c = this;
		c.impl = c.impl.SetElement(i, j, ($fround(element)));
	};
	ColorM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	GeoM.ptr.prototype.Reset = function() {
		var $ptr, g;
		g = this;
		g.impl = ptrType$3.nil;
	};
	GeoM.prototype.Reset = function() { return this.$val.Reset(); };
	GeoM.ptr.prototype.Apply = function(x, y) {
		var $ptr, _tuple, g, x, x2, y, y2;
		x2 = 0;
		y2 = 0;
		g = this;
		_tuple = g.impl.Apply(x, y);
		x2 = _tuple[0];
		y2 = _tuple[1];
		return [x2, y2];
	};
	GeoM.prototype.Apply = function(x, y) { return this.$val.Apply(x, y); };
	GeoM.ptr.prototype.Element = function(i, j) {
		var $ptr, _tuple, a, b, c, d, g, i, j, tx, ty;
		g = this;
		_tuple = g.impl.Elements();
		a = _tuple[0];
		b = _tuple[1];
		c = _tuple[2];
		d = _tuple[3];
		tx = _tuple[4];
		ty = _tuple[5];
		if ((i === 0) && (j === 0)) {
			return a;
		} else if ((i === 0) && (j === 1)) {
			return b;
		} else if ((i === 0) && (j === 2)) {
			return tx;
		} else if ((i === 1) && (j === 0)) {
			return c;
		} else if ((i === 1) && (j === 1)) {
			return d;
		} else if ((i === 1) && (j === 2)) {
			return ty;
		} else {
			$panic(new $String("ebiten: i or j is out of index"));
		}
	};
	GeoM.prototype.Element = function(i, j) { return this.$val.Element(i, j); };
	GeoM.ptr.prototype.Concat = function(other) {
		var $ptr, g, other;
		g = this;
		g.impl = g.impl.Concat(other.impl);
	};
	GeoM.prototype.Concat = function(other) { return this.$val.Concat(other); };
	GeoM.ptr.prototype.Add = function(other) {
		var $ptr, g, other;
		g = this;
		g.impl = g.impl.Add(other.impl);
	};
	GeoM.prototype.Add = function(other) { return this.$val.Add(other); };
	GeoM.ptr.prototype.Scale = function(x, y) {
		var $ptr, g, x, y;
		g = this;
		g.impl = g.impl.Scale(x, y);
	};
	GeoM.prototype.Scale = function(x, y) { return this.$val.Scale(x, y); };
	GeoM.ptr.prototype.Translate = function(tx, ty) {
		var $ptr, g, tx, ty;
		g = this;
		g.impl = g.impl.Translate(tx, ty);
	};
	GeoM.prototype.Translate = function(tx, ty) { return this.$val.Translate(tx, ty); };
	GeoM.ptr.prototype.Rotate = function(theta) {
		var $ptr, g, theta;
		g = this;
		g.impl = g.impl.Rotate(theta);
	};
	GeoM.prototype.Rotate = function(theta) { return this.$val.Rotate(theta); };
	GeoM.ptr.prototype.SetElement = function(i, j, element) {
		var $ptr, _r, element, g, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; element = $f.element; g = $f.g; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.impl.SetElement(i, j, element); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g.impl = _r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GeoM.ptr.prototype.SetElement }; } $f.$ptr = $ptr; $f._r = _r; $f.element = element; $f.g = g; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	GeoM.prototype.SetElement = function(i, j, element) { return this.$val.SetElement(i, j, element); };
	newGraphicsContext = function(f) {
		var $ptr, f;
		return new graphicsContext.ptr(f, ptrType.nil, ptrType.nil, false, false, 0, 0);
	};
	graphicsContext.ptr.prototype.Invalidate = function() {
		var $ptr, c;
		c = this;
		c.invalidated = true;
	};
	graphicsContext.prototype.Invalidate = function() { return this.$val.Invalidate(); };
	graphicsContext.ptr.prototype.SetSize = function(screenWidth, screenHeight, screenScale) {
		var $ptr, _r, _r$1, _tuple, c, h, px0, py0, screenHeight, screenScale, screenWidth, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; h = $f.h; px0 = $f.px0; py0 = $f.py0; screenHeight = $f.screenHeight; screenScale = $f.screenScale; screenWidth = $f.screenWidth; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!(c.screen === ptrType.nil)) {
			$unused(c.screen.Dispose());
		}
		if (!(c.offscreen === ptrType.nil)) {
			$unused(c.offscreen.Dispose());
		}
		_r = newVolatileImage(screenWidth, screenHeight, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c.offscreen = _r;
		w = (((screenWidth) * screenScale >> 0));
		h = (((screenHeight) * screenScale >> 0));
		_tuple = ui.ScreenPadding();
		px0 = _tuple[0];
		py0 = _tuple[1];
		_r$1 = newImageWithScreenFramebuffer(w, h); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		c.screen = _r$1;
		c.offsetX = px0;
		c.offsetY = py0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.SetSize }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.h = h; $f.px0 = px0; $f.py0 = py0; $f.screenHeight = screenHeight; $f.screenScale = screenScale; $f.screenWidth = screenWidth; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.SetSize = function(screenWidth, screenHeight, screenScale) { return this.$val.SetSize(screenWidth, screenHeight, screenScale); };
	graphicsContext.ptr.prototype.initializeIfNeeded = function() {
		var $ptr, _r, _r$1, c, err, err$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; err = $f.err; err$1 = $f.err$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!c.initialized) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!c.initialized) { */ case 1:
			_r = restorable.InitializeGLState(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			c.initialized = true;
		/* } */ case 2:
		_r$1 = c.restoreIfNeeded(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.initializeIfNeeded }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.initializeIfNeeded = function() { return this.$val.initializeIfNeeded(); };
	graphicsContext.ptr.prototype.Update = function(afterFrameUpdate) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, afterFrameUpdate, c, dh, dw, err, err$1, err$2, err$3, h, i, op, op$1, scale, sw, updateCount, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; afterFrameUpdate = $f.afterFrameUpdate; c = $f.c; dh = $f.dh; dw = $f.dw; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; h = $f.h; i = $f.i; op = $f.op; op$1 = $f.op$1; scale = $f.scale; sw = $f.sw; updateCount = $f.updateCount; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = clock.Update(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		updateCount = _r;
		_r$1 = c.initializeIfNeeded(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < updateCount)) { break; } */ if(!(i < updateCount)) { $s = 4; continue; }
			$r = c.offscreen.fill(0, 0, 0, 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			setRunningSlowly(i < (updateCount - 1 >> 0));
			_r$2 = hooks.Run(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_r$3 = c.f(c.offscreen); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err$2 = _r$3;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			$r = afterFrameUpdate(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		/* */ if (c.offsetX > 0 || c.offsetY > 0) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (c.offsetX > 0 || c.offsetY > 0) { */ case 9:
			op = new DrawImageOptions.ptr(ptrType$4.nil, new GeoM.ptr(ptrType$3.nil), new ColorM.ptr(ptrType$2.nil), 0, 0, $ifaceNil, sliceType$1.nil);
			_tuple = emptyImage.Size();
			w = _tuple[0];
			h = _tuple[1];
			op.GeoM.Scale(4096 / (w), 4096 / (h));
			op.CompositeMode = 2;
			_r$4 = c.screen.DrawImage(emptyImage, op); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 10:
		_tuple$1 = c.screen.Size();
		dw = _tuple$1[0];
		dh = _tuple$1[1];
		_tuple$2 = c.offscreen.Size();
		sw = _tuple$2[0];
		scale = (dw) / (sw);
		op$1 = new DrawImageOptions.ptr(ptrType$4.nil, new GeoM.ptr(ptrType$3.nil), new ColorM.ptr(ptrType$2.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		op$1.GeoM.Scale(scale, -scale);
		op$1.GeoM.Translate(0, (dh));
		op$1.GeoM.Translate(c.offsetX, c.offsetY);
		op$1.CompositeMode = 2;
		op$1.Filter = 3;
		_r$5 = c.screen.DrawImage(c.offscreen, op$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$unused(_r$5);
		_r$6 = restorable.ResolveStaleImages(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err$3 = _r$6;
		if (!($interfaceIsEqual(err$3, $ifaceNil))) {
			$s = -1; return err$3;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.Update }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.afterFrameUpdate = afterFrameUpdate; $f.c = c; $f.dh = dh; $f.dw = dw; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.h = h; $f.i = i; $f.op = op; $f.op$1 = op$1; $f.scale = scale; $f.sw = sw; $f.updateCount = updateCount; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.Update = function(afterFrameUpdate) { return this.$val.Update(afterFrameUpdate); };
	graphicsContext.ptr.prototype.needsRestoring = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (web.IsBrowser()) {
			$s = -1; return [c.invalidated, $ifaceNil];
		}
		_r = c.offscreen.restorable.IsInvalidated(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.needsRestoring }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.needsRestoring = function() { return this.$val.needsRestoring(); };
	graphicsContext.ptr.prototype.restoreIfNeeded = function() {
		var $ptr, _r, _r$1, _tuple, c, err, err$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; err = $f.err; err$1 = $f.err$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!restorable.IsRestoringEnabled()) {
			$s = -1; return $ifaceNil;
		}
		_r = c.needsRestoring(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!r) {
			$s = -1; return $ifaceNil;
		}
		_r$1 = restorable.Restore(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		c.invalidated = false;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: graphicsContext.ptr.prototype.restoreIfNeeded }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	graphicsContext.prototype.restoreIfNeeded = function() { return this.$val.restoreIfNeeded(); };
	init = function() {
		var $ptr, _r, _r$1, pix, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; pix = $f.pix; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newImageWithoutInit(16, 16); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		emptyImage = _r;
		pix = $makeSlice(sliceType$2, 1024);
		_r$1 = emptyImage.ReplacePixels(pix); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$unused(_r$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.pix = pix; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.ptr.prototype.copyCheck = function() {
		var $ptr, i;
		i = this;
		if (i.addr === ptrType.nil) {
			i.addr = i;
			return;
		}
		if (!(i.addr === i)) {
			$panic(new $String("ebiten: illegal use of non-zero Image copied by value"));
		}
	};
	Image.prototype.copyCheck = function() { return this.$val.copyCheck(); };
	Image.ptr.prototype.Size = function() {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, h, height, i, w, width;
		width = 0;
		height = 0;
		i = this;
		w = 0;
		h = 0;
		if (!(i.restorable === ptrType$5.nil)) {
			_tuple = i.restorable.Size();
			w = _tuple[0];
			h = _tuple[1];
		} else if (!(i.sharedImagePart === ptrType$6.nil)) {
			_tuple$1 = i.sharedImagePart.region();
			w = _tuple$1[2];
			h = _tuple$1[3];
		}
		_tmp = w;
		_tmp$1 = h;
		width = _tmp;
		height = _tmp$1;
		return [width, height];
	};
	Image.prototype.Size = function() { return this.$val.Size(); };
	Image.ptr.prototype.Clear = function() {
		var $ptr, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		$r = i.fill(0, 0, 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Clear }; } $f.$ptr = $ptr; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Clear = function() { return this.$val.Clear(); };
	Image.ptr.prototype.Fill = function(clr) {
		var $ptr, _r, _tuple, a, b, clr, g, i, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; clr = $f.clr; g = $f.g; i = $f.i; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		$r = i.fill((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.Fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.clr = clr; $f.g = g; $f.i = i; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.Fill = function(clr) { return this.$val.Fill(clr); };
	Image.ptr.prototype.ensureNotShared = function() {
		var $ptr, _tuple, h, i, s, w, x, y;
		i = this;
		if (i.sharedImagePart === ptrType$6.nil) {
			return;
		}
		if (!(i.restorable === ptrType$5.nil)) {
			$panic(new $String("not reached"));
		}
		s = i.sharedImagePart;
		_tuple = s.region();
		x = _tuple[0];
		y = _tuple[1];
		w = _tuple[2];
		h = _tuple[3];
		i.restorable = restorable.NewImage(w, h, false);
		i.sharedImagePart = ptrType$6.nil;
		i.restorable.DrawImage(s.image(), x, y, w, h, ptrType$3.nil, ptrType$2.nil, 2, 1);
		s.Dispose();
	};
	Image.prototype.ensureNotShared = function() { return this.$val.ensureNotShared(); };
	Image.ptr.prototype.fill = function(r, g, b, a) {
		var $ptr, _r, _tuple, _tuple$1, a, af, b, bf, g, gf, hd, hs, i, op, r, rf, sh, sw, wd, ws, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; af = $f.af; b = $f.b; bf = $f.bf; g = $f.g; gf = $f.gf; hd = $f.hd; hs = $f.hs; i = $f.i; op = $f.op; r = $f.r; rf = $f.rf; sh = $f.sh; sw = $f.sw; wd = $f.wd; ws = $f.ws; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_tuple = i.Size();
		wd = _tuple[0];
		hd = _tuple[1];
		_tuple$1 = emptyImage.Size();
		ws = _tuple$1[0];
		hs = _tuple$1[1];
		sw = (wd) / (ws);
		sh = (hd) / (hs);
		op = new DrawImageOptions.ptr(ptrType$4.nil, new GeoM.ptr(ptrType$3.nil), new ColorM.ptr(ptrType$2.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		op.GeoM.Scale(sw, sh);
		if (a > 0) {
			rf = (r) / (a);
			gf = (g) / (a);
			bf = (b) / (a);
			af = (a) / 255;
			op.ColorM.Translate(rf, gf, bf, af);
		}
		op.CompositeMode = 2;
		op.Filter = 1;
		_r = i.DrawImage(emptyImage, op); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$unused(_r);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.af = af; $f.b = b; $f.bf = bf; $f.g = g; $f.gf = gf; $f.hd = hd; $f.hs = hs; $f.i = i; $f.op = op; $f.r = r; $f.rf = rf; $f.sh = sh; $f.sw = sw; $f.wd = wd; $f.ws = ws; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.fill = function(r, g, b, a) { return this.$val.fill(r, g, b, a); };
	Image.ptr.prototype.isDisposed = function() {
		var $ptr, i;
		i = this;
		return i.restorable === ptrType$5.nil && i.sharedImagePart === ptrType$6.nil;
	};
	Image.prototype.isDisposed = function() { return this.$val.isDisposed(); };
	Image.ptr.prototype.DrawImage = function(img, options) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, dx, dx$1, dx0, dx1, dy, dy$1, dy0, dy1, filter, g, geom, h, i, idx, img, l, mode, op, options, parts, r, r$1, sx0, sx0$1, sx1, sx1$1, sy0, sy0$1, sy1, sy1$1, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; dx = $f.dx; dx$1 = $f.dx$1; dx0 = $f.dx0; dx1 = $f.dx1; dy = $f.dy; dy$1 = $f.dy$1; dy0 = $f.dy0; dy1 = $f.dy1; filter = $f.filter; g = $f.g; geom = $f.geom; h = $f.h; i = $f.i; idx = $f.idx; img = $f.img; l = $f.l; mode = $f.mode; op = $f.op; options = $f.options; parts = $f.parts; r = $f.r; r$1 = $f.r$1; sx0 = $f.sx0; sx0$1 = $f.sx0$1; sx1 = $f.sx1; sx1$1 = $f.sx1$1; sy0 = $f.sy0; sy0$1 = $f.sy0$1; sy1 = $f.sy1; sy1$1 = $f.sy1$1; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (img.isDisposed()) {
			$panic(new $String("ebiten: the given image to DrawImage must not be disposed"));
		}
		i.ensureNotShared();
		if (i.restorable === ptrType$5.nil) {
			$panic(new $String("not reached"));
		}
		if (i === img) {
			$panic(new $String("ebiten: Image.DrawImage: img must be different from the receiver"));
		}
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		if (options === ptrType$7.nil) {
			options = new DrawImageOptions.ptr(ptrType$4.nil, new GeoM.ptr(ptrType$3.nil), new ColorM.ptr(ptrType$2.nil), 0, 0, $ifaceNil, sliceType$1.nil);
		}
		parts = options.ImageParts;
		if ($interfaceIsEqual(parts, $ifaceNil) && !(options.Parts === sliceType$1.nil)) {
			parts = ((x = options.Parts, $subslice(new imageParts(x.$array), x.$offset, x.$offset + x.$length)));
		}
		/* */ if (!($interfaceIsEqual(parts, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(parts, $ifaceNil))) { */ case 1:
			_r = parts.Len(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
			idx = 0;
			/* while (true) { */ case 4:
				/* if (!(idx < l)) { break; } */ if(!(idx < l)) { $s = 5; continue; }
				r = [r];
				_r$1 = parts.Src(idx); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				sx0 = _tuple[0];
				sy0 = _tuple[1];
				sx1 = _tuple[2];
				sy1 = _tuple[3];
				_r$2 = parts.Dst(idx); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				dx0 = _tuple$1[0];
				dy0 = _tuple$1[1];
				dx1 = _tuple$1[2];
				dy1 = _tuple$1[3];
				op = new DrawImageOptions.ptr(ptrType$4.nil, new GeoM.ptr(ptrType$3.nil), $clone(options.ColorM, ColorM), options.CompositeMode, 0, $ifaceNil, sliceType$1.nil);
				r[0] = $clone(image.Rect(sx0, sy0, sx1, sy1), image.Rectangle);
				op.SourceRect = r[0];
				op.GeoM.Scale(((dx1 - dx0 >> 0)) / ((sx1 - sx0 >> 0)), ((dy1 - dy0 >> 0)) / ((sy1 - sy0 >> 0)));
				op.GeoM.Translate((dx0), (dy0));
				op.GeoM.Concat($clone(options.GeoM, GeoM));
				_r$3 = i.DrawImage(img, op); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				idx = idx + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		_tuple$2 = img.Size();
		w = _tuple$2[0];
		h = _tuple$2[1];
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = w;
		_tmp$3 = h;
		sx0$1 = _tmp;
		sy0$1 = _tmp$1;
		sx1$1 = _tmp$2;
		sy1$1 = _tmp$3;
		r$1 = options.SourceRect;
		if (!(r$1 === ptrType$4.nil)) {
			sx0$1 = r$1.Min.X;
			sy0$1 = r$1.Min.Y;
			if (sx1$1 > r$1.Max.X) {
				sx1$1 = r$1.Max.X;
			}
			if (sy1$1 > r$1.Max.Y) {
				sy1$1 = r$1.Max.Y;
			}
		}
		geom = options.GeoM.impl;
		if (sx0$1 < 0 || sy0$1 < 0) {
			dx = 0;
			dy = 0;
			if (sx0$1 < 0) {
				dx = -(sx0$1);
				sx0$1 = 0;
			}
			if (sy0$1 < 0) {
				dy = -(sy0$1);
				sy0$1 = 0;
			}
			g = ptrType$3.nil;
			g = g.Translate(dx, dy);
			g = g.Concat(geom);
			geom = g;
		}
		if (!(img.sharedImagePart === ptrType$6.nil)) {
			_tuple$3 = img.sharedImagePart.region();
			dx$1 = _tuple$3[0];
			dy$1 = _tuple$3[1];
			sx0$1 = sx0$1 + (dx$1) >> 0;
			sy0$1 = sy0$1 + (dy$1) >> 0;
			sx1$1 = sx1$1 + (dx$1) >> 0;
			sy1$1 = sy1$1 + (dy$1) >> 0;
		}
		mode = ((options.CompositeMode >> 0));
		filter = 1;
		if (!((options.Filter === 0))) {
			filter = ((options.Filter >> 0));
		} else if (!((img.filter === 0))) {
			filter = ((img.filter >> 0));
		}
		i.restorable.DrawImage(img.restorableImage(), sx0$1, sy0$1, sx1$1, sy1$1, geom, options.ColorM.impl, mode, filter);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.DrawImage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.dx = dx; $f.dx$1 = dx$1; $f.dx0 = dx0; $f.dx1 = dx1; $f.dy = dy; $f.dy$1 = dy$1; $f.dy0 = dy0; $f.dy1 = dy1; $f.filter = filter; $f.g = g; $f.geom = geom; $f.h = h; $f.i = i; $f.idx = idx; $f.img = img; $f.l = l; $f.mode = mode; $f.op = op; $f.options = options; $f.parts = parts; $f.r = r; $f.r$1 = r$1; $f.sx0 = sx0; $f.sx0$1 = sx0$1; $f.sx1 = sx1; $f.sx1$1 = sx1$1; $f.sy0 = sy0; $f.sy0$1 = sy0$1; $f.sy1 = sy1; $f.sy1$1 = sy1$1; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.DrawImage = function(img, options) { return this.$val.DrawImage(img, options); };
	Image.ptr.prototype.Bounds = function() {
		var $ptr, _tuple, h, i, w;
		i = this;
		_tuple = i.Size();
		w = _tuple[0];
		h = _tuple[1];
		return image.Rect(0, 0, w, h);
	};
	Image.prototype.Bounds = function() { return this.$val.Bounds(); };
	Image.ptr.prototype.ColorModel = function() {
		var $ptr, i;
		i = this;
		return color.RGBAModel;
	};
	Image.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Image.ptr.prototype.At = function(x, y) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, clr, clr$1, err, err$1, h, i, ox, oy, w, x, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; clr = $f.clr; clr$1 = $f.clr$1; err = $f.err; err$1 = $f.err$1; h = $f.h; i = $f.i; ox = $f.ox; oy = $f.oy; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (i.isDisposed()) {
			$s = -1; return (x$1 = new color.RGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
			/* */ if (!(i.restorable === ptrType$5.nil)) { $s = 2; continue; }
			/* */ if (!(i.sharedImagePart === ptrType$6.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(i.restorable === ptrType$5.nil)) { */ case 2:
				_r = i.restorable.At(x, y); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				clr = $clone(_tuple[0], color.RGBA);
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$panic(err);
				}
				$s = -1; return new clr.constructor.elem(clr);
			/* } else if (!(i.sharedImagePart === ptrType$6.nil)) { */ case 3:
				_tuple$1 = i.sharedImagePart.region();
				ox = _tuple$1[0];
				oy = _tuple$1[1];
				w = _tuple$1[2];
				h = _tuple$1[3];
				if (x < 0 || y < 0 || x >= w || y >= h) {
					$s = -1; return (x$2 = new color.RGBA.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2));
				}
				_r$1 = i.sharedImagePart.image().At(x + ox >> 0, y + oy >> 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				clr$1 = $clone(_tuple$2[0], color.RGBA);
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$panic(err$1);
				}
				$s = -1; return new clr$1.constructor.elem(clr$1);
			/* } else { */ case 4:
				$panic(new $String("not reached"));
			/* } */ case 5:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.At }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.clr = clr; $f.clr$1 = clr$1; $f.err = err; $f.err$1 = err$1; $f.h = h; $f.i = i; $f.ox = ox; $f.oy = oy; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.At = function(x, y) { return this.$val.At(x, y); };
	Image.ptr.prototype.Dispose = function() {
		var $ptr, i;
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			return $ifaceNil;
		}
		if (!(i.restorable === ptrType$5.nil)) {
			i.restorable.Dispose();
			i.restorable = ptrType$5.nil;
		} else if (!(i.sharedImagePart === ptrType$6.nil)) {
			i.sharedImagePart.Dispose();
			i.sharedImagePart = ptrType$6.nil;
		} else {
			$panic(new $String("not reached"));
		}
		runtime.SetFinalizer(i, $ifaceNil);
		return $ifaceNil;
	};
	Image.prototype.Dispose = function() { return this.$val.Dispose(); };
	Image.ptr.prototype.region = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, h, height, i, w, width, x, y;
		x = 0;
		y = 0;
		width = 0;
		height = 0;
		i = this;
		if (!(i.restorable === ptrType$5.nil)) {
			_tuple = i.restorable.Size();
			w = _tuple[0];
			h = _tuple[1];
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = w;
			_tmp$3 = h;
			x = _tmp;
			y = _tmp$1;
			width = _tmp$2;
			height = _tmp$3;
			return [x, y, width, height];
		}
		if (!(i.sharedImagePart === ptrType$6.nil)) {
			_tuple$1 = i.sharedImagePart.region();
			x = _tuple$1[0];
			y = _tuple$1[1];
			width = _tuple$1[2];
			height = _tuple$1[3];
			return [x, y, width, height];
		}
		$panic(new $String("not reached"));
	};
	Image.prototype.region = function() { return this.$val.region(); };
	Image.ptr.prototype.restorableImage = function() {
		var $ptr, i;
		i = this;
		if (!(i.restorable === ptrType$5.nil)) {
			return i.restorable;
		}
		if (!(i.sharedImagePart === ptrType$6.nil)) {
			return i.sharedImagePart.image();
		}
		$panic(new $String("not reached"));
	};
	Image.prototype.restorableImage = function() { return this.$val.restorableImage(); };
	Image.ptr.prototype.ReplacePixels = function(p) {
		var $ptr, _r, _tuple, h, i, l, p, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; h = $f.h; i = $f.i; l = $f.l; p = $f.p; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		i.copyCheck();
		if (i.isDisposed()) {
			$s = -1; return $ifaceNil;
		}
		_tuple = i.region();
		x = _tuple[0];
		y = _tuple[1];
		w = _tuple[2];
		h = _tuple[3];
		l = $imul(($imul(4, w)), h);
		/* */ if (!((p.$length === l))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.$length === l))) { */ case 1:
			_r = fmt.Sprintf("ebiten: len(p) was %d but must be %d", new sliceType$3([new $Int(p.$length), new $Int(l)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		$r = i.restorableImage().ReplacePixels(p, x, y, w, h); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Image.ptr.prototype.ReplacePixels }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.h = h; $f.i = i; $f.l = l; $f.p = p; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Image.prototype.ReplacePixels = function(p) { return this.$val.ReplacePixels(p); };
	NewImage = function(width, height, filter) {
		var $ptr, filter, height, i, r, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; filter = $f.filter; height = $f.height; i = $f.i; r = $f.r; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkSize(width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = ptrType.nil;
		s = newSharedImagePart(width, height);
		if (!(s === ptrType$6.nil)) {
			i = new Image.ptr(ptrType.nil, ptrType$5.nil, s, filter);
		} else {
			r = restorable.NewImage(width, height, false);
			i = new Image.ptr(ptrType.nil, r, ptrType$6.nil, filter);
		}
		$r = i.fill(0, 0, 0, 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return [i, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewImage }; } $f.$ptr = $ptr; $f.filter = filter; $f.height = height; $f.i = i; $f.r = r; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewImage = NewImage;
	newImageWithoutInit = function(width, height) {
		var $ptr, height, i, r, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; height = $f.height; i = $f.i; r = $f.r; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkSize(width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = ptrType.nil;
		s = newSharedImagePart(width, height);
		if (!(s === ptrType$6.nil)) {
			i = new Image.ptr(ptrType.nil, ptrType$5.nil, s, 0);
		} else {
			r = restorable.NewImage(width, height, false);
			i = new Image.ptr(ptrType.nil, r, ptrType$6.nil, 0);
		}
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newImageWithoutInit }; } $f.$ptr = $ptr; $f.height = height; $f.i = i; $f.r = r; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	newVolatileImage = function(width, height, filter) {
		var $ptr, filter, height, i, r, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; filter = $f.filter; height = $f.height; i = $f.i; r = $f.r; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkSize(width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = restorable.NewImage(width, height, true);
		i = new Image.ptr(ptrType.nil, r, ptrType$6.nil, filter);
		$r = i.fill(0, 0, 0, 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newVolatileImage }; } $f.$ptr = $ptr; $f.filter = filter; $f.height = height; $f.i = i; $f.r = r; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewImageFromImage = function(source, filter) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, filter, height, i, j, p, r, rgbaImg, s, size, source, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; filter = $f.filter; height = $f.height; i = $f.i; j = $f.j; p = $f.p; r = $f.r; rgbaImg = $f.rgbaImg; s = $f.s; size = $f.size; source = $f.source; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = source.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, image.Rectangle).Size(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		size = $clone(_r$1, image.Point);
		$r = checkSize(size.X, size.Y); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = size.X;
		_tmp$1 = size.Y;
		width = _tmp;
		height = _tmp$1;
		i = ptrType.nil;
		s = newSharedImagePart(width, height);
		if (!(s === ptrType$6.nil)) {
			i = new Image.ptr(ptrType.nil, ptrType$5.nil, s, filter);
		} else {
			r = restorable.NewImage(width, height, false);
			i = new Image.ptr(ptrType.nil, r, ptrType$6.nil, filter);
		}
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		_r$2 = graphicsutil.CopyImage(source); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		rgbaImg = _r$2;
		p = $makeSlice(sliceType$2, ($imul(($imul(4, width)), height)));
		j = 0;
		while (true) {
			if (!(j < height)) { break; }
			$copySlice($subslice(p, ($imul(($imul(j, width)), 4)), ($imul(($imul(((j + 1 >> 0)), width)), 4))), $subslice(rgbaImg.Pix, ($imul(j, rgbaImg.Stride))));
			j = j + (1) >> 0;
		}
		_r$3 = i.ReplacePixels(p); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$unused(_r$3);
		$s = -1; return [i, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewImageFromImage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.filter = filter; $f.height = height; $f.i = i; $f.j = j; $f.p = p; $f.r = r; $f.rgbaImg = rgbaImg; $f.s = s; $f.size = size; $f.source = source; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewImageFromImage = NewImageFromImage;
	newImageWithScreenFramebuffer = function(width, height) {
		var $ptr, height, i, r, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; height = $f.height; i = $f.i; r = $f.r; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkSize(width, height); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = restorable.NewScreenFramebufferImage(width, height);
		i = new Image.ptr(ptrType.nil, r, ptrType$6.nil, 0);
		runtime.SetFinalizer(i, new funcType($methodExpr(ptrType, "Dispose")));
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newImageWithScreenFramebuffer }; } $f.$ptr = $ptr; $f.height = height; $f.i = i; $f.r = r; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	checkSize = function(width, height) {
		var $ptr, _r, _r$1, height, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; height = $f.height; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (width <= 0) {
			$panic(new $String("ebiten: width must be more than 0"));
		}
		if (height <= 0) {
			$panic(new $String("ebiten: height must be more than 0"));
		}
		/* */ if (width > 4096) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (width > 4096) { */ case 1:
			_r = fmt.Sprintf("ebiten: width (%d) must be less than or equal to %d", new sliceType$3([new $Int(width), new $Int(4096)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		/* */ if (height > 4096) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (height > 4096) { */ case 4:
			_r$1 = fmt.Sprintf("ebiten: height (%d) must be less than or equal to %d", new sliceType$3([new $Int(height), new $Int(4096)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkSize }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.height = height; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	imageParts.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(imageParts).prototype.Len = function() { return this.$get().Len(); };
	imageParts.prototype.Dst = function(i) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, dst, i, p, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		p = this;
		dst = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Dst;
		_tmp = dst.Min.X;
		_tmp$1 = dst.Min.Y;
		_tmp$2 = dst.Max.X;
		_tmp$3 = dst.Max.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$ptrType(imageParts).prototype.Dst = function(i) { return this.$get().Dst(i); };
	imageParts.prototype.Src = function(i) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, i, p, src, x0, x1, y0, y1;
		x0 = 0;
		y0 = 0;
		x1 = 0;
		y1 = 0;
		p = this;
		src = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Src;
		_tmp = src.Min.X;
		_tmp$1 = src.Min.Y;
		_tmp$2 = src.Max.X;
		_tmp$3 = src.Max.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		x1 = _tmp$2;
		y1 = _tmp$3;
		return [x0, y0, x1, y1];
	};
	$ptrType(imageParts).prototype.Src = function(i) { return this.$get().Src(i); };
	IsKeyPressed = function(key) {
		var $ptr, key;
		return ui.CurrentInput().IsKeyPressed(((key >> 0)));
	};
	$pkg.IsKeyPressed = IsKeyPressed;
	IsMouseButtonPressed = function(mouseButton) {
		var $ptr, mouseButton;
		return ui.CurrentInput().IsMouseButtonPressed(((mouseButton >> 0)));
	};
	$pkg.IsMouseButtonPressed = IsMouseButtonPressed;
	GamepadIDs = function() {
		var $ptr;
		return ui.CurrentInput().GamepadIDs();
	};
	$pkg.GamepadIDs = GamepadIDs;
	GamepadButtonNum = function(id) {
		var $ptr, id;
		return ui.CurrentInput().GamepadButtonNum(id);
	};
	$pkg.GamepadButtonNum = GamepadButtonNum;
	IsGamepadButtonPressed = function(id, button) {
		var $ptr, button, id;
		return ui.CurrentInput().IsGamepadButtonPressed(id, ((button >> 0)));
	};
	$pkg.IsGamepadButtonPressed = IsGamepadButtonPressed;
	Touches = function() {
		var $ptr, i, t, tt;
		t = ui.CurrentInput().Touches();
		tt = $makeSlice(sliceType$5, t.$length);
		i = 0;
		while (true) {
			if (!(i < tt.$length)) { break; }
			((i < 0 || i >= tt.$length) ? ($throwRuntimeError("index out of range"), undefined) : tt.$array[tt.$offset + i] = ((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]));
			i = i + (1) >> 0;
		}
		return tt;
	};
	$pkg.Touches = Touches;
	CurrentFPS = function() {
		var $ptr;
		return clock.CurrentFPS();
	};
	$pkg.CurrentFPS = CurrentFPS;
	setRunningSlowly = function(slow) {
		var $ptr, slow, v;
		v = 0;
		if (slow) {
			v = 1;
		}
		atomic.StoreInt32((isRunningSlowly$24ptr || (isRunningSlowly$24ptr = new ptrType$8(function() { return isRunningSlowly; }, function($v) { isRunningSlowly = $v; }))), v);
	};
	run = function(width, height, scale, title, g) {
		var $ptr, _r, err, g, height, scale, title, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; g = $f.g; height = $f.height; scale = $f.scale; title = $f.title; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ui.Run(width, height, scale, title, g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, ui.RegularTermination)) {
				$s = -1; return $ifaceNil;
			}
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: run }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.g = g; $f.height = height; $f.scale = scale; $f.title = title; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Run = function(f, width, height, scale, title) {
		var $ptr, _r, ch, err, f, height, scale, title, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; err = $f.err; f = $f.f; height = $f.height; scale = $f.scale; title = $f.title; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		f = [f];
		height = [height];
		scale = [scale];
		title = [title];
		width = [width];
		ch[0] = new $Chan($error, 0);
		$go((function(ch, f, height, scale, title, width) { return function $b() {
			var $ptr, _arg, _r, err, g, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; err = $f.err; g = $f.g; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			$deferred.push([function(_arg) { $close(_arg); }, [ch[0]]]);
			g = newGraphicsContext(f[0]);
			theGraphicsContext.Store(g);
			_r = run(width[0], height[0], scale[0], title[0], g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
				$r = $send(ch[0], err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f.err = err; $f.g = g; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		}; })(ch, f, height, scale, title, width), []);
		_r = ui.RunMainThreadLoop(ch[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Run }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.err = err; $f.f = f; $f.height = height; $f.scale = scale; $f.title = title; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	SetScreenScale = function(scale) {
		var $ptr, _r, scale, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; scale = $f.scale; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (scale <= 0) {
			$panic(new $String("ebiten: scale must be positive"));
		}
		_r = ui.SetScreenScale(scale); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetScreenScale }; } $f.$ptr = $ptr; $f._r = _r; $f.scale = scale; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetScreenScale = SetScreenScale;
	sharedImagePart.ptr.prototype.image = function() {
		var $ptr, s;
		s = this;
		return s.sharedImage.restorable;
	};
	sharedImagePart.prototype.image = function() { return this.$val.image(); };
	sharedImagePart.ptr.prototype.region = function() {
		var $ptr, _tuple, height, s, width, x, y;
		x = 0;
		y = 0;
		width = 0;
		height = 0;
		s = this;
		_tuple = s.node.Region();
		x = _tuple[0];
		y = _tuple[1];
		width = _tuple[2];
		height = _tuple[3];
		return [x, y, width, height];
	};
	sharedImagePart.prototype.region = function() { return this.$val.region(); };
	sharedImagePart.ptr.prototype.Dispose = function() {
		var $ptr, _i, _ref, i, index, s, sh;
		s = this;
		s.sharedImage.page.Free(s.node);
		if (s.sharedImage.page.IsEmpty()) {
			s.sharedImage.restorable.Dispose();
			s.sharedImage.restorable = ptrType$5.nil;
			index = -1;
			_ref = theSharedImages;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				sh = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (sh === s.sharedImage) {
					index = i;
					break;
				}
				_i++;
			}
			if (index === -1) {
				$panic(new $String("not reached"));
			}
			theSharedImages = $appendSlice($subslice(theSharedImages, 0, index), $subslice(theSharedImages, (index + 1 >> 0)));
		}
	};
	sharedImagePart.prototype.Dispose = function() { return this.$val.Dispose(); };
	newSharedImagePart = function(width, height) {
		var $ptr, _i, _ref, height, n, n$1, s, s$1, width;
		sharedImageLock.Mutex.Lock();
		sharedImageLock.Mutex.Unlock();
		if (width > 2048 || height > 2048) {
			return ptrType$6.nil;
		}
		_ref = theSharedImages;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			n = s.page.Alloc(width, height);
			if (!(n === ptrType$9.nil)) {
				return new sharedImagePart.ptr(s, n);
			}
			_i++;
		}
		s$1 = new sharedImage.ptr(restorable.NewImage(2048, 2048, false), new packing.Page.ptr(ptrType$9.nil, new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false))));
		theSharedImages = $append(theSharedImages, s$1);
		n$1 = s$1.page.Alloc(width, height);
		if (n$1 === ptrType$9.nil) {
			$panic(new $String("not reached"));
		}
		return new sharedImagePart.ptr(s$1, n$1);
	};
	ptrType$10.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([ColorM], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ColorM], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "RotateHue", name: "RotateHue", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ChangeHSV", name: "ChangeHSV", pkg: "", typ: $funcType([$Float64, $Float64, $Float64], [], false)}, {prop: "Element", name: "Element", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	ptrType$11.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Apply", name: "Apply", pkg: "", typ: $funcType([$Float64, $Float64], [$Float64, $Float64], false)}, {prop: "Element", name: "Element", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Concat", name: "Concat", pkg: "", typ: $funcType([GeoM], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([GeoM], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Translate", name: "Translate", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Rotate", name: "Rotate", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetElement", name: "SetElement", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	ptrType$12.methods = [{prop: "Invalidate", name: "Invalidate", pkg: "", typ: $funcType([], [], false)}, {prop: "SetSize", name: "SetSize", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}, {prop: "initializeIfNeeded", name: "initializeIfNeeded", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$error], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "needsRestoring", name: "needsRestoring", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Bool, $error], false)}, {prop: "restoreIfNeeded", name: "restoreIfNeeded", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "copyCheck", name: "copyCheck", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([color.Color], [$error], false)}, {prop: "ensureNotShared", name: "ensureNotShared", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [], false)}, {prop: "fill", name: "fill", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([$Uint8, $Uint8, $Uint8, $Uint8], [], false)}, {prop: "isDisposed", name: "isDisposed", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Bool], false)}, {prop: "DrawImage", name: "DrawImage", pkg: "", typ: $funcType([ptrType, ptrType$7], [$error], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [$error], false)}, {prop: "region", name: "region", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Int, $Int, $Int, $Int], false)}, {prop: "restorableImage", name: "restorableImage", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [ptrType$5], false)}, {prop: "ReplacePixels", name: "ReplacePixels", pkg: "", typ: $funcType([sliceType$2], [$error], false)}];
	imageParts.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dst", name: "Dst", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}, {prop: "Src", name: "Src", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}];
	ptrType$6.methods = [{prop: "image", name: "image", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [ptrType$5], false)}, {prop: "region", name: "region", pkg: "github.com/hajimehoshi/ebiten", typ: $funcType([], [$Int, $Int, $Int, $Int], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}];
	ColorM.init("github.com/hajimehoshi/ebiten", [{prop: "impl", name: "impl", exported: false, typ: ptrType$2, tag: ""}]);
	GeoM.init("github.com/hajimehoshi/ebiten", [{prop: "impl", name: "impl", exported: false, typ: ptrType$3, tag: ""}]);
	graphicsContext.init("github.com/hajimehoshi/ebiten", [{prop: "f", name: "f", exported: false, typ: funcType, tag: ""}, {prop: "offscreen", name: "offscreen", exported: false, typ: ptrType, tag: ""}, {prop: "screen", name: "screen", exported: false, typ: ptrType, tag: ""}, {prop: "initialized", name: "initialized", exported: false, typ: $Bool, tag: ""}, {prop: "invalidated", name: "invalidated", exported: false, typ: $Bool, tag: ""}, {prop: "offsetX", name: "offsetX", exported: false, typ: $Float64, tag: ""}, {prop: "offsetY", name: "offsetY", exported: false, typ: $Float64, tag: ""}]);
	Image.init("github.com/hajimehoshi/ebiten", [{prop: "addr", name: "addr", exported: false, typ: ptrType, tag: ""}, {prop: "restorable", name: "restorable", exported: false, typ: ptrType$5, tag: ""}, {prop: "sharedImagePart", name: "sharedImagePart", exported: false, typ: ptrType$6, tag: ""}, {prop: "filter", name: "filter", exported: false, typ: Filter, tag: ""}]);
	DrawImageOptions.init("", [{prop: "SourceRect", name: "SourceRect", exported: true, typ: ptrType$4, tag: ""}, {prop: "GeoM", name: "GeoM", exported: true, typ: GeoM, tag: ""}, {prop: "ColorM", name: "ColorM", exported: true, typ: ColorM, tag: ""}, {prop: "CompositeMode", name: "CompositeMode", exported: true, typ: CompositeMode, tag: ""}, {prop: "Filter", name: "Filter", exported: true, typ: Filter, tag: ""}, {prop: "ImageParts", name: "ImageParts", exported: true, typ: ImageParts, tag: ""}, {prop: "Parts", name: "Parts", exported: true, typ: sliceType$1, tag: ""}]);
	ImagePart.init("", [{prop: "Dst", name: "Dst", exported: true, typ: image.Rectangle, tag: ""}, {prop: "Src", name: "Src", exported: true, typ: image.Rectangle, tag: ""}]);
	ImageParts.init([{prop: "Dst", name: "Dst", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Src", name: "Src", pkg: "", typ: $funcType([$Int], [$Int, $Int, $Int, $Int], false)}]);
	imageParts.init(ImagePart);
	Touch.init([{prop: "ID", name: "ID", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [$Int, $Int], false)}]);
	sharedImage.init("github.com/hajimehoshi/ebiten", [{prop: "restorable", name: "restorable", exported: false, typ: ptrType$5, tag: ""}, {prop: "page", name: "page", exported: false, typ: packing.Page, tag: ""}]);
	sharedImagePart.init("github.com/hajimehoshi/ebiten", [{prop: "sharedImage", name: "sharedImage", exported: false, typ: ptrType$1, tag: ""}, {prop: "node", name: "node", exported: false, typ: ptrType$9, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = affine.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = clock.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = devicescale.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphicsutil.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hooks.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = packing.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = restorable.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = web.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		emptyImage = ptrType.nil;
		theGraphicsContext = new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil);
		sharedImageLock = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
		isRunningSlowly = 0;
		theSharedImages = new sliceType([]);
		$r = init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth;
	reflect = $packages["reflect"];
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var $ptr, depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, $init, bufio, fmt, io, math, sort, strconv, sync, dictDecoder, huffmanBitWriter, hcode, huffmanEncoder, literalNode, levelInfo, byLiteral, byFreq, CorruptInputError, InternalError, Resetter, huffmanDecoder, Reader, decompressor, token, ptrType, arrayType, sliceType, sliceType$1, sliceType$4, sliceType$5, ptrType$3, arrayType$5, arrayType$6, sliceType$7, sliceType$8, sliceType$9, arrayType$7, arrayType$8, arrayType$9, arrayType$10, ptrType$7, ptrType$8, arrayType$11, ptrType$9, sliceType$10, ptrType$10, arrayType$12, arrayType$13, ptrType$11, arrayType$14, ptrType$12, arrayType$15, ptrType$13, ptrType$14, funcType$3, huffOffset, fixedLiteralEncoding, fixedOffsetEncoding, fixedOnce, fixedHuffmanDecoder, fixedHuffmanDecoder$24ptr, codeOrder, reverseByte, newHuffmanBitWriter, init, maxNode, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, makeReader, fixedHuffmanDecoderInit, NewReader, NewReaderDict, reverseUint16, reverseBits;
	bufio = $packages["bufio"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	dictDecoder = $pkg.dictDecoder = $newType(0, $kindStruct, "flate.dictDecoder", true, "compress/flate", false, function(hist_, wrPos_, rdPos_, full_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hist = sliceType$4.nil;
			this.wrPos = 0;
			this.rdPos = 0;
			this.full = false;
			return;
		}
		this.hist = hist_;
		this.wrPos = wrPos_;
		this.rdPos = rdPos_;
		this.full = full_;
	});
	huffmanBitWriter = $pkg.huffmanBitWriter = $newType(0, $kindStruct, "flate.huffmanBitWriter", true, "compress/flate", false, function(writer_, bits_, nbits_, bytes_, codegenFreq_, nbytes_, literalFreq_, offsetFreq_, codegen_, literalEncoding_, offsetEncoding_, codegenEncoding_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writer = $ifaceNil;
			this.bits = new $Uint64(0, 0);
			this.nbits = 0;
			this.bytes = arrayType$5.zero();
			this.codegenFreq = arrayType$6.zero();
			this.nbytes = 0;
			this.literalFreq = sliceType$7.nil;
			this.offsetFreq = sliceType$7.nil;
			this.codegen = sliceType$4.nil;
			this.literalEncoding = ptrType.nil;
			this.offsetEncoding = ptrType.nil;
			this.codegenEncoding = ptrType.nil;
			this.err = $ifaceNil;
			return;
		}
		this.writer = writer_;
		this.bits = bits_;
		this.nbits = nbits_;
		this.bytes = bytes_;
		this.codegenFreq = codegenFreq_;
		this.nbytes = nbytes_;
		this.literalFreq = literalFreq_;
		this.offsetFreq = offsetFreq_;
		this.codegen = codegen_;
		this.literalEncoding = literalEncoding_;
		this.offsetEncoding = offsetEncoding_;
		this.codegenEncoding = codegenEncoding_;
		this.err = err_;
	});
	hcode = $pkg.hcode = $newType(0, $kindStruct, "flate.hcode", true, "compress/flate", false, function(code_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.code = 0;
			this.len = 0;
			return;
		}
		this.code = code_;
		this.len = len_;
	});
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, $kindStruct, "flate.huffmanEncoder", true, "compress/flate", false, function(codes_, freqcache_, bitCount_, lns_, lfs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.codes = sliceType$8.nil;
			this.freqcache = sliceType$9.nil;
			this.bitCount = arrayType$7.zero();
			this.lns = byLiteral.nil;
			this.lfs = byFreq.nil;
			return;
		}
		this.codes = codes_;
		this.freqcache = freqcache_;
		this.bitCount = bitCount_;
		this.lns = lns_;
		this.lfs = lfs_;
	});
	literalNode = $pkg.literalNode = $newType(0, $kindStruct, "flate.literalNode", true, "compress/flate", false, function(literal_, freq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.literal = 0;
			this.freq = 0;
			return;
		}
		this.literal = literal_;
		this.freq = freq_;
	});
	levelInfo = $pkg.levelInfo = $newType(0, $kindStruct, "flate.levelInfo", true, "compress/flate", false, function(level_, lastFreq_, nextCharFreq_, nextPairFreq_, needed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.level = 0;
			this.lastFreq = 0;
			this.nextCharFreq = 0;
			this.nextPairFreq = 0;
			this.needed = 0;
			return;
		}
		this.level = level_;
		this.lastFreq = lastFreq_;
		this.nextCharFreq = nextCharFreq_;
		this.nextPairFreq = nextPairFreq_;
		this.needed = needed_;
	});
	byLiteral = $pkg.byLiteral = $newType(12, $kindSlice, "flate.byLiteral", true, "compress/flate", false, null);
	byFreq = $pkg.byFreq = $newType(12, $kindSlice, "flate.byFreq", true, "compress/flate", false, null);
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "flate.CorruptInputError", true, "compress/flate", true, null);
	InternalError = $pkg.InternalError = $newType(8, $kindString, "flate.InternalError", true, "compress/flate", true, null);
	Resetter = $pkg.Resetter = $newType(8, $kindInterface, "flate.Resetter", true, "compress/flate", true, null);
	huffmanDecoder = $pkg.huffmanDecoder = $newType(0, $kindStruct, "flate.huffmanDecoder", true, "compress/flate", false, function(min_, chunks_, links_, linkMask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.chunks = arrayType.zero();
			this.links = sliceType$1.nil;
			this.linkMask = 0;
			return;
		}
		this.min = min_;
		this.chunks = chunks_;
		this.links = links_;
		this.linkMask = linkMask_;
	});
	Reader = $pkg.Reader = $newType(8, $kindInterface, "flate.Reader", true, "compress/flate", true, null);
	decompressor = $pkg.decompressor = $newType(0, $kindStruct, "flate.decompressor", true, "compress/flate", false, function(r_, roffset_, b_, nb_, h1_, h2_, bits_, codebits_, dict_, buf_, step_, stepState_, final$12_, err_, toRead_, hl_, hd_, copyLen_, copyDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.roffset = new $Int64(0, 0);
			this.b = 0;
			this.nb = 0;
			this.h1 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.h2 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.bits = ptrType$11.nil;
			this.codebits = ptrType$12.nil;
			this.dict = new dictDecoder.ptr(sliceType$4.nil, 0, 0, false);
			this.buf = arrayType$15.zero();
			this.step = $throwNilPointerError;
			this.stepState = 0;
			this.final$12 = false;
			this.err = $ifaceNil;
			this.toRead = sliceType$4.nil;
			this.hl = ptrType$9.nil;
			this.hd = ptrType$9.nil;
			this.copyLen = 0;
			this.copyDist = 0;
			return;
		}
		this.r = r_;
		this.roffset = roffset_;
		this.b = b_;
		this.nb = nb_;
		this.h1 = h1_;
		this.h2 = h2_;
		this.bits = bits_;
		this.codebits = codebits_;
		this.dict = dict_;
		this.buf = buf_;
		this.step = step_;
		this.stepState = stepState_;
		this.final$12 = final$12_;
		this.err = err_;
		this.toRead = toRead_;
		this.hl = hl_;
		this.hd = hd_;
		this.copyLen = copyLen_;
		this.copyDist = copyDist_;
	});
	token = $pkg.token = $newType(4, $kindUint32, "flate.token", true, "compress/flate", false, null);
	ptrType = $ptrType(huffmanEncoder);
	arrayType = $arrayType($Uint32, 512);
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType(sliceType);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType(token);
	ptrType$3 = $ptrType(huffmanBitWriter);
	arrayType$5 = $arrayType($Uint8, 248);
	arrayType$6 = $arrayType($Int32, 19);
	sliceType$7 = $sliceType($Int32);
	sliceType$8 = $sliceType(hcode);
	sliceType$9 = $sliceType(literalNode);
	arrayType$7 = $arrayType($Int32, 17);
	arrayType$8 = $arrayType(levelInfo, 16);
	arrayType$9 = $arrayType($Int32, 16);
	arrayType$10 = $arrayType(arrayType$9, 16);
	ptrType$7 = $ptrType(byLiteral);
	ptrType$8 = $ptrType(byFreq);
	arrayType$11 = $arrayType($Int, 16);
	ptrType$9 = $ptrType(huffmanDecoder);
	sliceType$10 = $sliceType($Int);
	ptrType$10 = $ptrType(decompressor);
	arrayType$12 = $arrayType($Int, 288);
	arrayType$13 = $arrayType($Int, 316);
	ptrType$11 = $ptrType(arrayType$13);
	arrayType$14 = $arrayType($Int, 19);
	ptrType$12 = $ptrType(arrayType$14);
	arrayType$15 = $arrayType($Uint8, 4);
	ptrType$13 = $ptrType(dictDecoder);
	ptrType$14 = $ptrType(hcode);
	funcType$3 = $funcType([ptrType$10], [], false);
	dictDecoder.ptr.prototype.init = function(size, dict) {
		var $ptr, dd, dict, size;
		dd = this;
		dictDecoder.copy(dd, new dictDecoder.ptr(dd.hist, 0, 0, false));
		if (dd.hist.$capacity < size) {
			dd.hist = $makeSlice(sliceType$4, size);
		}
		dd.hist = $subslice(dd.hist, 0, size);
		if (dict.$length > dd.hist.$length) {
			dict = $subslice(dict, (dict.$length - dd.hist.$length >> 0));
		}
		dd.wrPos = $copySlice(dd.hist, dict);
		if (dd.wrPos === dd.hist.$length) {
			dd.wrPos = 0;
			dd.full = true;
		}
		dd.rdPos = dd.wrPos;
	};
	dictDecoder.prototype.init = function(size, dict) { return this.$val.init(size, dict); };
	dictDecoder.ptr.prototype.histSize = function() {
		var $ptr, dd;
		dd = this;
		if (dd.full) {
			return dd.hist.$length;
		}
		return dd.wrPos;
	};
	dictDecoder.prototype.histSize = function() { return this.$val.histSize(); };
	dictDecoder.ptr.prototype.availRead = function() {
		var $ptr, dd;
		dd = this;
		return dd.wrPos - dd.rdPos >> 0;
	};
	dictDecoder.prototype.availRead = function() { return this.$val.availRead(); };
	dictDecoder.ptr.prototype.availWrite = function() {
		var $ptr, dd;
		dd = this;
		return dd.hist.$length - dd.wrPos >> 0;
	};
	dictDecoder.prototype.availWrite = function() { return this.$val.availWrite(); };
	dictDecoder.ptr.prototype.writeSlice = function() {
		var $ptr, dd;
		dd = this;
		return $subslice(dd.hist, dd.wrPos);
	};
	dictDecoder.prototype.writeSlice = function() { return this.$val.writeSlice(); };
	dictDecoder.ptr.prototype.writeMark = function(cnt) {
		var $ptr, cnt, dd;
		dd = this;
		dd.wrPos = dd.wrPos + (cnt) >> 0;
	};
	dictDecoder.prototype.writeMark = function(cnt) { return this.$val.writeMark(cnt); };
	dictDecoder.ptr.prototype.writeByte = function(c) {
		var $ptr, c, dd, x, x$1;
		dd = this;
		(x = dd.hist, x$1 = dd.wrPos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		dd.wrPos = dd.wrPos + (1) >> 0;
	};
	dictDecoder.prototype.writeByte = function(c) { return this.$val.writeByte(c); };
	dictDecoder.ptr.prototype.writeCopy = function(dist, length) {
		var $ptr, dd, dist, dstBase, dstPos, endPos, length, srcPos;
		dd = this;
		dstBase = dd.wrPos;
		dstPos = dstBase;
		srcPos = dstPos - dist >> 0;
		endPos = dstPos + length >> 0;
		if (endPos > dd.hist.$length) {
			endPos = dd.hist.$length;
		}
		if (srcPos < 0) {
			srcPos = srcPos + (dd.hist.$length) >> 0;
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos))) >> 0;
			srcPos = 0;
		}
		while (true) {
			if (!(dstPos < endPos)) { break; }
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		}
		dd.wrPos = dstPos;
		return dstPos - dstBase >> 0;
	};
	dictDecoder.prototype.writeCopy = function(dist, length) { return this.$val.writeCopy(dist, length); };
	dictDecoder.ptr.prototype.tryWriteCopy = function(dist, length) {
		var $ptr, dd, dist, dstBase, dstPos, endPos, length, srcPos, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		dd = this;
		dstPos = dd.wrPos;
		endPos = dstPos + length >> 0;
		if (dstPos < dist || endPos > dd.hist.$length) {
			$s = -1; return 0;
		}
		dstBase = dstPos;
		srcPos = dstPos - dist >> 0;
		/* loop: */ case 1:
		dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		/* */ if (dstPos < endPos) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dstPos < endPos) { */ case 2:
			/* goto loop */ $s = 1; continue;
		/* } */ case 3:
		dd.wrPos = dstPos;
		$s = -1; return dstPos - dstBase >> 0;
		/* */ } return; }
	};
	dictDecoder.prototype.tryWriteCopy = function(dist, length) { return this.$val.tryWriteCopy(dist, length); };
	dictDecoder.ptr.prototype.readFlush = function() {
		var $ptr, _tmp, _tmp$1, dd, toRead;
		dd = this;
		toRead = $subslice(dd.hist, dd.rdPos, dd.wrPos);
		dd.rdPos = dd.wrPos;
		if (dd.wrPos === dd.hist.$length) {
			_tmp = 0;
			_tmp$1 = 0;
			dd.wrPos = _tmp;
			dd.rdPos = _tmp$1;
			dd.full = true;
		}
		return toRead;
	};
	dictDecoder.prototype.readFlush = function() { return this.$val.readFlush(); };
	newHuffmanBitWriter = function(w) {
		var $ptr, w;
		return new huffmanBitWriter.ptr(w, new $Uint64(0, 0), 0, arrayType$5.zero(), arrayType$6.zero(), 0, $makeSlice(sliceType$7, 286), $makeSlice(sliceType$7, 30), $makeSlice(sliceType$4, 317), newHuffmanEncoder(286), newHuffmanEncoder(30), newHuffmanEncoder(19), $ifaceNil);
	};
	init = function() {
		var $ptr, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = newHuffmanBitWriter($ifaceNil);
		(x = w.offsetFreq, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = 1));
		huffOffset = newHuffmanEncoder(30);
		$r = huffOffset.generate(w.offsetFreq, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	hcode.ptr.prototype.set = function(code, length) {
		var $ptr, code, h, length;
		h = this;
		h.len = length;
		h.code = code;
	};
	hcode.prototype.set = function(code, length) { return this.$val.set(code, length); };
	maxNode = function() {
		var $ptr;
		return new literalNode.ptr(65535, 2147483647);
	};
	newHuffmanEncoder = function(size) {
		var $ptr, size;
		return new huffmanEncoder.ptr($makeSlice(sliceType$8, size), sliceType$9.nil, arrayType$7.zero(), byLiteral.nil, byFreq.nil);
	};
	generateFixedLiteralEncoding = function() {
		var $ptr, bits, ch, codes, h, size;
		h = newHuffmanEncoder(286);
		codes = h.codes;
		ch = 0;
		ch = 0;
		while (true) {
			if (!(ch < 286)) { break; }
			bits = 0;
			size = 0;
			switch (0) { default:
				if (ch < 144) {
					bits = ch + 48 << 16 >>> 16;
					size = 8;
					break;
				} else if (ch < 256) {
					bits = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
					size = 9;
					break;
				} else if (ch < 280) {
					bits = ch - 256 << 16 >>> 16;
					size = 7;
					break;
				} else {
					bits = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
					size = 8;
				}
			}
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(bits, ((size << 24 >>> 24))), size));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var $ptr, _i, _ref, ch, codes, h;
		h = newHuffmanEncoder(30);
		codes = h.codes;
		_ref = codes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = _i;
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(((ch << 16 >>> 16)), 5), 5));
			_i++;
		}
		return h;
	};
	huffmanEncoder.ptr.prototype.bitCounts = function(list, maxBits) {
		var $ptr, bitCount, bits, counts, h, l, leafCounts, level, level$1, level$2, levels$1, list, maxBits, n, n$1, prevFreq, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		h = this;
		if (maxBits >= 16) {
			$panic(new $String("flate: maxBits too large"));
		}
		n = ((list.$length >> 0));
		list = $subslice(list, 0, (n + 1 >> 0));
		literalNode.copy(((n < 0 || n >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n]), maxNode());
		if (maxBits > (n - 1 >> 0)) {
			maxBits = n - 1 >> 0;
		}
		levels$1 = arrayType$8.zero();
		leafCounts = arrayType$10.zero();
		level = 1;
		while (true) {
			if (!(level <= maxBits)) { break; }
			levelInfo.copy(((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]), new levelInfo.ptr(level, (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq, (2 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 2]).freq, (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).freq + (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq >> 0, 0));
			(x = ((level < 0 || level >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level]), ((level < 0 || level >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[level] = 2));
			if (level === 1) {
				((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]).nextPairFreq = 2147483647;
			}
			level = level + (1) >> 0;
		}
		((maxBits < 0 || maxBits >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[maxBits]).needed = ($imul(2, n)) - 4 >> 0;
		level$1 = maxBits;
		while (true) {
			l = ((level$1 < 0 || level$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level$1]);
			if ((l.nextPairFreq === 2147483647) && (l.nextCharFreq === 2147483647)) {
				l.needed = 0;
				(x$1 = level$1 + 1 >> 0, ((x$1 < 0 || x$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$1])).nextPairFreq = 2147483647;
				level$1 = level$1 + (1) >> 0;
				continue;
			}
			prevFreq = l.lastFreq;
			if (l.nextCharFreq < l.nextPairFreq) {
				n$1 = (x$2 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[level$1])) + 1 >> 0;
				l.lastFreq = l.nextCharFreq;
				(x$3 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[level$1] = n$1));
				l.nextCharFreq = ((n$1 < 0 || n$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n$1]).freq;
			} else {
				l.lastFreq = l.nextPairFreq;
				$copySlice($subslice(new sliceType$7(((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1])), 0, level$1), $subslice(new sliceType$7((x$4 = level$1 - 1 >> 0, ((x$4 < 0 || x$4 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[x$4]))), 0, level$1));
				(x$5 = l.level - 1 >> 0, ((x$5 < 0 || x$5 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$5])).needed = 2;
			}
			l.needed = l.needed - (1) >> 0;
			if (l.needed === 0) {
				if (l.level === maxBits) {
					break;
				}
				(x$6 = l.level + 1 >> 0, ((x$6 < 0 || x$6 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$6])).nextPairFreq = prevFreq + l.lastFreq >> 0;
				level$1 = level$1 + (1) >> 0;
			} else {
				while (true) {
					if (!((x$7 = level$1 - 1 >> 0, ((x$7 < 0 || x$7 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$7])).needed > 0)) { break; }
					level$1 = level$1 - (1) >> 0;
				}
			}
		}
		if (!(((x$8 = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]), ((maxBits < 0 || maxBits >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[maxBits])) === n))) {
			$panic(new $String("leafCounts[maxBits][maxBits] != n"));
		}
		bitCount = $subslice(new sliceType$7(h.bitCount), 0, (maxBits + 1 >> 0));
		bits = 1;
		counts = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]);
		level$2 = maxBits;
		while (true) {
			if (!(level$2 > 0)) { break; }
			((bits < 0 || bits >= bitCount.$length) ? ($throwRuntimeError("index out of range"), undefined) : bitCount.$array[bitCount.$offset + bits] = ((counts.nilCheck, ((level$2 < 0 || level$2 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[level$2])) - (x$9 = level$2 - 1 >> 0, (counts.nilCheck, ((x$9 < 0 || x$9 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[x$9]))) >> 0));
			bits = bits + (1) >> 0;
			level$2 = level$2 - (1) >> 0;
		}
		return bitCount;
	};
	huffmanEncoder.prototype.bitCounts = function(list, maxBits) { return this.$val.bitCounts(list, maxBits); };
	huffmanEncoder.ptr.prototype.assignEncodingAndSize = function(bitCount, list) {
		var $ptr, _i, _i$1, _ref, _ref$1, bitCount, bits, chunk, code, h, list, n, node, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; bits = $f.bits; chunk = $f.chunk; code = $f.code; h = $f.h; list = $f.list; n = $f.n; node = $f.node; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		code = 0;
		_ref = bitCount;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = _i;
			bits = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			code = (y = (1), y < 32 ? (code << y) : 0) << 16 >>> 16;
			/* */ if ((n === 0) || (bits === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((n === 0) || (bits === 0)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			chunk = $subslice(list, (list.$length - ((bits >> 0)) >> 0));
			$r = (h.$ptr_lns || (h.$ptr_lns = new ptrType$7(function() { return this.$target.lns; }, function($v) { this.$target.lns = $v; }, h))).sort(chunk); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = chunk;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				hcode.copy((x = h.codes, x$1 = node.literal, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), new hcode.ptr(reverseBits(code, ((n << 24 >>> 24))), ((n << 16 >>> 16))));
				code = code + (1) << 16 >>> 16;
				_i$1++;
			}
			list = $subslice(list, 0, (list.$length - ((bits >> 0)) >> 0));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.assignEncodingAndSize }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.bits = bits; $f.chunk = chunk; $f.code = code; $f.h = h; $f.list = list; $f.n = n; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.assignEncodingAndSize = function(bitCount, list) { return this.$val.assignEncodingAndSize(bitCount, list); };
	huffmanEncoder.ptr.prototype.generate = function(freq, maxBits) {
		var $ptr, _i, _i$1, _ref, _ref$1, bitCount, count, f, freq, h, i, i$1, list, maxBits, node, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; count = $f.count; f = $f.f; freq = $f.freq; h = $f.h; i = $f.i; i$1 = $f.i$1; list = $f.list; maxBits = $f.maxBits; node = $f.node; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h.freqcache === sliceType$9.nil) {
			h.freqcache = $makeSlice(sliceType$9, 287);
		}
		list = $subslice(h.freqcache, 0, (freq.$length + 1 >> 0));
		count = 0;
		_ref = freq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((f === 0))) {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(((i << 16 >>> 16)), f));
				count = count + (1) >> 0;
			} else {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(0, 0));
				(x = h.codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).len = 0;
			}
			_i++;
		}
		literalNode.copy((x$1 = freq.$length, ((x$1 < 0 || x$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + x$1])), new literalNode.ptr(0, 0));
		list = $subslice(list, 0, count);
		if (count <= 2) {
			_ref$1 = list;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				(x$2 = h.codes, x$3 = node.literal, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).set(((i$1 << 16 >>> 16)), 1);
				_i$1++;
			}
			$s = -1; return;
		}
		$r = (h.$ptr_lfs || (h.$ptr_lfs = new ptrType$8(function() { return this.$target.lfs; }, function($v) { this.$target.lfs = $v; }, h))).sort(list); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bitCount = h.bitCounts(list, maxBits);
		$r = h.assignEncodingAndSize(bitCount, list); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.generate }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.count = count; $f.f = f; $f.freq = freq; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.maxBits = maxBits; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.generate = function(freq, maxBits) { return this.$val.generate(freq, maxBits); };
	$ptrType(byLiteral).prototype.sort = function(a) {
		var $ptr, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byLiteral(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byLiteral).prototype.sort }; } $f.$ptr = $ptr; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byLiteral.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(byLiteral).prototype.Len = function() { return this.$get().Len(); };
	byLiteral.prototype.Less = function(i, j) {
		var $ptr, i, j, s;
		s = this;
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
	};
	$ptrType(byLiteral).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byLiteral.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byLiteral).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(byFreq).prototype.sort = function(a) {
		var $ptr, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byFreq(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byFreq).prototype.sort }; } $f.$ptr = $ptr; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byFreq.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(byFreq).prototype.Len = function() { return this.$get().Len(); };
	byFreq.prototype.Less = function(i, j) {
		var $ptr, i, j, s;
		s = this;
		if (((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq === ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq) {
			return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
		}
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq;
	};
	$ptrType(byFreq).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byFreq.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byFreq).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "flate: corrupt input before offset " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	InternalError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "flate: internal error: " + (e);
	};
	$ptrType(InternalError).prototype.Error = function() { return new InternalError(this.$get()).Error(); };
	huffmanDecoder.ptr.prototype.init = function(bits) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, bits, chunk, chunk$1, chunk$2, code, code$1, count, h, i, i$1, i$2, j, j$1, link, linktab, linktab$1, max, min, n, n$1, nextcode, numLinks, off, off$1, off$2, reverse, reverse$1, value, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4;
		h = this;
		if (!((h.min === 0))) {
			huffmanDecoder.copy(h, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0));
		}
		count = arrayType$11.zero();
		_tmp = 0;
		_tmp$1 = 0;
		min = _tmp;
		max = _tmp$1;
		_ref = bits;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n === 0) {
				_i++;
				continue;
			}
			if ((min === 0) || n < min) {
				min = n;
			}
			if (n > max) {
				max = n;
			}
			((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n] = (((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n]) + (1) >> 0));
			_i++;
		}
		if (max === 0) {
			return true;
		}
		code = 0;
		nextcode = arrayType$11.zero();
		i = min;
		while (true) {
			if (!(i <= max)) { break; }
			code = (y = (1), y < 32 ? (code << y) : 0) >> 0;
			((i < 0 || i >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[i] = code);
			code = code + (((i < 0 || i >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[i])) >> 0;
			i = i + (1) >> 0;
		}
		if (!((code === ((y$1 = ((max >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >> 0))) && !((code === 1) && (max === 1))) {
			return false;
		}
		h.min = min;
		if (max > 9) {
			numLinks = (y$2 = ((((max >>> 0)) - 9 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) >> 0;
			h.linkMask = (((numLinks - 1 >> 0) >>> 0));
			link = nextcode[10] >> 1 >> 0;
			h.links = $makeSlice(sliceType$1, (512 - link >> 0));
			j = ((link >>> 0));
			while (true) {
				if (!(j < 512)) { break; }
				reverse = (((x = j >>> 8 >>> 0, ((x < 0 || x >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x])) >> 0)) | ((((x$1 = (j & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) >> 0)) << 8 >> 0);
				reverse = (reverse >> $min((7), 31)) >> 0;
				off = j - ((link >>> 0)) >>> 0;
				if (false && !(((x$2 = h.chunks, ((reverse < 0 || reverse >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[reverse])) === 0))) {
					$panic(new $String("impossible: overwriting existing chunk"));
				}
				(x$3 = h.chunks, ((reverse < 0 || reverse >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[reverse] = (((((off << 4 >>> 0) | 10) >>> 0) >>> 0))));
				(x$4 = h.links, ((off < 0 || off >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + off] = $makeSlice(sliceType, numLinks)));
				j = j + (1) >>> 0;
			}
		}
		_ref$1 = bits;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (n$1 === 0) {
				_i$1++;
				continue;
			}
			code$1 = ((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]);
			((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1] = (((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]) + (1) >> 0));
			chunk = ((((i$1 << 4 >> 0) | n$1) >>> 0));
			reverse$1 = (((x$5 = code$1 >> 8 >> 0, ((x$5 < 0 || x$5 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$5])) >> 0)) | ((((x$6 = code$1 & 255, ((x$6 < 0 || x$6 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$6])) >> 0)) << 8 >> 0);
			reverse$1 = (reverse$1 >> $min(((((16 - n$1 >> 0) >>> 0))), 31)) >> 0;
			if (n$1 <= 9) {
				off$1 = reverse$1;
				while (true) {
					if (!(off$1 < 512)) { break; }
					if (false && !(((x$7 = h.chunks, ((off$1 < 0 || off$1 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[off$1])) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					(x$8 = h.chunks, ((off$1 < 0 || off$1 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[off$1] = chunk));
					off$1 = off$1 + (((y$3 = ((n$1 >>> 0)), y$3 < 32 ? (1 << y$3) : 0) >> 0)) >> 0;
				}
			} else {
				j$1 = reverse$1 & 511;
				if (false && !(((((x$9 = h.chunks, ((j$1 < 0 || j$1 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[j$1])) & 15) >>> 0) === 10))) {
					$panic(new $String("impossible: not an indirect chunk"));
				}
				value = (x$10 = h.chunks, ((j$1 < 0 || j$1 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[j$1])) >>> 4 >>> 0;
				linktab = (x$11 = h.links, ((value < 0 || value >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + value]));
				reverse$1 = (reverse$1 >> $min((9), 31)) >> 0;
				off$2 = reverse$1;
				while (true) {
					if (!(off$2 < linktab.$length)) { break; }
					if (false && !((((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2]) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2] = chunk);
					off$2 = off$2 + (((y$4 = (((n$1 - 9 >> 0) >>> 0)), y$4 < 32 ? (1 << y$4) : 0) >> 0)) >> 0;
				}
			}
			_i$1++;
		}
		if (false) {
			_ref$2 = h.chunks;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 512)) { break; }
				i$2 = _i$2;
				chunk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2[_i$2]);
				if (chunk$1 === 0) {
					if ((code === 1) && ((_r = i$2 % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1)) {
						_i$2++;
						continue;
					}
					$panic(new $String("impossible: missing chunk"));
				}
				_i$2++;
			}
			_ref$3 = h.links;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				linktab$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
				_ref$4 = linktab$1;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					chunk$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
					if (chunk$2 === 0) {
						$panic(new $String("impossible: missing chunk"));
					}
					_i$4++;
				}
				_i$3++;
			}
		}
		return true;
	};
	huffmanDecoder.prototype.init = function(bits) { return this.$val.init(bits); };
	decompressor.ptr.prototype.nextBlock = function() {
		var $ptr, _1, _r, _r$1, f, typ, x, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; typ = $f.typ; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f.err = _r;
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return;
			}
		/* } */ $s = 1; continue; case 2:
		f.final$12 = ((f.b & 1) >>> 0) === 1;
		f.b = (y = (1), y < 32 ? (f.b >>> y) : 0) >>> 0;
		typ = (f.b & 3) >>> 0;
		f.b = (y$1 = (2), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		f.nb = f.nb - (3) >>> 0;
			_1 = typ;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 5:
				$r = f.dataBlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.hl = fixedHuffmanDecoder;
				f.hd = ptrType$9.nil;
				$r = f.huffmanBlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (2)) { */ case 7:
				_r$1 = f.readHuffman(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f.err = _r$1;
				if (!($interfaceIsEqual(f.err, $ifaceNil))) {
					/* break; */ $s = 4; continue;
				}
				f.hl = f.h1;
				f.hd = f.h2;
				$r = f.huffmanBlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
			/* } */ case 9:
		case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.nextBlock }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.typ = typ; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.nextBlock = function() { return this.$val.nextBlock(); };
	decompressor.ptr.prototype.Read = function(b) {
		var $ptr, b, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			if (f.toRead.$length > 0) {
				n = $copySlice(b, f.toRead);
				f.toRead = $subslice(f.toRead, n);
				if (f.toRead.$length === 0) {
					$s = -1; return [n, f.err];
				}
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return [0, f.err];
			}
			$r = f.step(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(f.err, $ifaceNil)) && (f.toRead.$length === 0)) {
				f.toRead = f.dict.readFlush();
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.Read }; } $f.$ptr = $ptr; $f.b = b; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.Read = function(b) { return this.$val.Read(b); };
	decompressor.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if ($interfaceIsEqual(f.err, io.EOF)) {
			return $ifaceNil;
		}
		return f.err;
	};
	decompressor.prototype.Close = function() { return this.$val.Close(); };
	decompressor.ptr.prototype.readHuffman = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, b, err, err$1, err$2, err$3, f, i, i$1, i$2, j, n, nb, nclen, ndist, nlit, rep, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, y$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; n = $f.n; nb = $f.nb; nclen = $f.nclen; ndist = $f.ndist; nlit = $f.nlit; rep = $f.rep; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 14)) { break; } */ if(!(f.nb < 14)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		nlit = ((((f.b & 31) >>> 0) >> 0)) + 257 >> 0;
		if (nlit > 286) {
			$s = -1; return ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
		}
		f.b = (y = (5), y < 32 ? (f.b >>> y) : 0) >>> 0;
		ndist = ((((f.b & 31) >>> 0) >> 0)) + 1 >> 0;
		if (ndist > 30) {
			$s = -1; return ((x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low)));
		}
		f.b = (y$1 = (5), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		nclen = ((((f.b & 15) >>> 0) >> 0)) + 4 >> 0;
		f.b = (y$2 = (4), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
		f.nb = f.nb - (14) >>> 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < nclen)) { break; } */ if(!(i < nclen)) { $s = 5; continue; }
			/* while (true) { */ case 6:
				/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 7; continue; }
				_r$1 = f.moreBits(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
			/* } */ $s = 6; continue; case 7:
			(x$2 = f.codebits, x$3 = ((i < 0 || i >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i]), x$2.nilCheck, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((((f.b & 7) >>> 0) >> 0))));
			f.b = (y$3 = (3), y$3 < 32 ? (f.b >>> y$3) : 0) >>> 0;
			f.nb = f.nb - (3) >>> 0;
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$1 = nclen;
		while (true) {
			if (!(i$1 < 19)) { break; }
			(x$4 = f.codebits, x$5 = ((i$1 < 0 || i$1 >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i$1]), x$4.nilCheck, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = 0));
			i$1 = i$1 + (1) >> 0;
		}
		if (!f.h1.init($subslice(new sliceType$10(f.codebits), 0))) {
			$s = -1; return ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
		}
		_tmp = 0;
		_tmp$1 = nlit + ndist >> 0;
		i$2 = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i$2 < n)) { break; } */ if(!(i$2 < n)) { $s = 10; continue; }
			_r$2 = f.huffSym(f.h1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			x$7 = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			/* */ if (x$7 < 16) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (x$7 < 16) { */ case 12:
				(x$8 = f.bits, x$8.nilCheck, ((i$2 < 0 || i$2 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[i$2] = x$7));
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			rep = 0;
			nb = 0;
			b = 0;
			_1 = x$7;
			if (_1 === (16)) {
				rep = 3;
				nb = 2;
				if (i$2 === 0) {
					$s = -1; return ((x$9 = f.roffset, new CorruptInputError(x$9.$high, x$9.$low)));
				}
				b = (x$10 = f.bits, x$11 = i$2 - 1 >> 0, (x$10.nilCheck, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])));
			} else if (_1 === (17)) {
				rep = 3;
				nb = 3;
				b = 0;
			} else if (_1 === (18)) {
				rep = 11;
				nb = 7;
				b = 0;
			} else {
				$s = -1; return new InternalError("unexpected length code");
			}
			/* while (true) { */ case 14:
				/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 15; continue; }
				_r$3 = f.moreBits(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
			/* } */ $s = 14; continue; case 15:
			rep = rep + (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
			f.nb = f.nb - (nb) >>> 0;
			if ((i$2 + rep >> 0) > n) {
				$s = -1; return ((x$12 = f.roffset, new CorruptInputError(x$12.$high, x$12.$low)));
			}
			j = 0;
			while (true) {
				if (!(j < rep)) { break; }
				(x$13 = f.bits, x$13.nilCheck, ((i$2 < 0 || i$2 >= x$13.length) ? ($throwRuntimeError("index out of range"), undefined) : x$13[i$2] = b));
				i$2 = i$2 + (1) >> 0;
				j = j + (1) >> 0;
			}
		/* } */ $s = 9; continue; case 10:
		if (!f.h1.init($subslice(new sliceType$10(f.bits), 0, nlit)) || !f.h2.init($subslice(new sliceType$10(f.bits), nlit, (nlit + ndist >> 0)))) {
			$s = -1; return ((x$14 = f.roffset, new CorruptInputError(x$14.$high, x$14.$low)));
		}
		if (f.h1.min < (x$15 = f.bits, (x$15.nilCheck, x$15[256]))) {
			f.h1.min = (x$16 = f.bits, (x$16.nilCheck, x$16[256]));
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.readHuffman }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.n = n; $f.nb = nb; $f.nclen = nclen; $f.ndist = ndist; $f.nlit = nlit; $f.rep = rep; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.readHuffman = function() { return this.$val.readHuffman(); };
	decompressor.ptr.prototype.huffmanBlock = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, cnt, dist, err, extra, f, length, n, nb, v, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5, y$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cnt = $f.cnt; dist = $f.dist; err = $f.err; extra = $f.extra; f = $f.f; length = $f.length; n = $f.n; nb = $f.nb; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
			_1 = f.stepState;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				/* goto readLiteral */ $s = 5; continue;
				$s = 4; continue;
			/* } else if (_1 === (1)) { */ case 3:
				/* goto copyHistory */ $s = 6; continue;
			/* } */ case 4:
		case 1:
		/* readLiteral: */ case 5:
		_r = f.huffSym(f.hl); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			f.err = err;
			$s = -1; return;
		}
		n = 0;
		length = 0;
			/* */ if (v < 256) { $s = 9; continue; }
			/* */ if ((v === 256)) { $s = 10; continue; }
			/* */ if (v < 265) { $s = 11; continue; }
			/* */ if (v < 269) { $s = 12; continue; }
			/* */ if (v < 273) { $s = 13; continue; }
			/* */ if (v < 277) { $s = 14; continue; }
			/* */ if (v < 281) { $s = 15; continue; }
			/* */ if (v < 285) { $s = 16; continue; }
			/* */ if (v < 286) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (v < 256) { */ case 9:
				f.dict.writeByte(((v << 24 >>> 24)));
				if (f.dict.availWrite() === 0) {
					f.toRead = f.dict.readFlush();
					f.step = $methodExpr(ptrType$10, "huffmanBlock");
					f.stepState = 0;
					$s = -1; return;
				}
				/* goto readLiteral */ $s = 5; continue;
				$s = 19; continue;
			/* } else if ((v === 256)) { */ case 10:
				f.finishBlock();
				$s = -1; return;
			/* } else if (v < 265) { */ case 11:
				length = v - 254 >> 0;
				n = 0;
				$s = 19; continue;
			/* } else if (v < 269) { */ case 12:
				length = ($imul(v, 2)) - 519 >> 0;
				n = 1;
				$s = 19; continue;
			/* } else if (v < 273) { */ case 13:
				length = ($imul(v, 4)) - 1057 >> 0;
				n = 2;
				$s = 19; continue;
			/* } else if (v < 277) { */ case 14:
				length = ($imul(v, 8)) - 2149 >> 0;
				n = 3;
				$s = 19; continue;
			/* } else if (v < 281) { */ case 15:
				length = ($imul(v, 16)) - 4365 >> 0;
				n = 4;
				$s = 19; continue;
			/* } else if (v < 285) { */ case 16:
				length = ($imul(v, 32)) - 8861 >> 0;
				n = 5;
				$s = 19; continue;
			/* } else if (v < 286) { */ case 17:
				length = 258;
				n = 0;
				$s = 19; continue;
			/* } else { */ case 18:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
				$s = -1; return;
			/* } */ case 19:
		case 8:
		/* */ if (n > 0) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (n > 0) { */ case 20:
			/* while (true) { */ case 22:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 23; continue; }
				_r$1 = f.moreBits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 22; continue; case 23:
			length = length + (((((f.b & ((((y = n, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$1 = (n), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
			f.nb = f.nb - (n) >>> 0;
		/* } */ case 21:
		dist = 0;
		/* */ if (f.hd === ptrType$9.nil) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (f.hd === ptrType$9.nil) { */ case 25:
			/* while (true) { */ case 28:
				/* if (!(f.nb < 5)) { break; } */ if(!(f.nb < 5)) { $s = 29; continue; }
				_r$2 = f.moreBits(); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 28; continue; case 29:
			dist = (((x$1 = (((f.b & 31) >>> 0)) << 3 >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) >> 0));
			f.b = (y$2 = (5), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
			f.nb = f.nb - (5) >>> 0;
			$s = 27; continue;
		/* } else { */ case 26:
			_r$3 = f.huffSym(f.hd); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			dist = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				f.err = err;
				$s = -1; return;
			}
		/* } */ case 27:
			/* */ if (dist < 4) { $s = 33; continue; }
			/* */ if (dist < 30) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (dist < 4) { */ case 33:
				dist = dist + (1) >> 0;
				$s = 36; continue;
			/* } else if (dist < 30) { */ case 34:
				nb = (((dist - 2 >> 0) >>> 0)) >>> 1 >>> 0;
				extra = (y$3 = nb, y$3 < 32 ? (((dist & 1)) << y$3) : 0) >> 0;
				/* while (true) { */ case 37:
					/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 38; continue; }
					_r$4 = f.moreBits(); /* */ $s = 39; case 39: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						$s = -1; return;
					}
				/* } */ $s = 37; continue; case 38:
				extra = extra | (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0)));
				f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
				f.nb = f.nb - (nb) >>> 0;
				dist = (((y$6 = ((nb + 1 >>> 0)), y$6 < 32 ? (1 << y$6) : 0) >> 0) + 1 >> 0) + extra >> 0;
				$s = 36; continue;
			/* } else { */ case 35:
				f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
				$s = -1; return;
			/* } */ case 36:
		case 32:
		if (dist > f.dict.histSize()) {
			f.err = ((x$3 = f.roffset, new CorruptInputError(x$3.$high, x$3.$low)));
			$s = -1; return;
		}
		_tmp = length;
		_tmp$1 = dist;
		f.copyLen = _tmp;
		f.copyDist = _tmp$1;
		/* goto copyHistory */ $s = 6; continue;
		/* copyHistory: */ case 6:
		cnt = f.dict.tryWriteCopy(f.copyDist, f.copyLen);
		if (cnt === 0) {
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen);
		}
		f.copyLen = f.copyLen - (cnt) >> 0;
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "huffmanBlock");
			f.stepState = 1;
			$s = -1; return;
		}
		/* goto readLiteral */ $s = 5; continue;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffmanBlock }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cnt = cnt; $f.dist = dist; $f.err = err; $f.extra = extra; $f.f = f; $f.length = length; $f.n = n; $f.nb = nb; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffmanBlock = function() { return this.$val.huffmanBlock(); };
	decompressor.ptr.prototype.dataBlock = function() {
		var $ptr, _r, _tuple, err, f, n, nn, nr, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; nr = $f.nr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.nb = 0;
		f.b = 0;
		_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.buf), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nr = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, nr)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		n = ((f.buf[0] >> 0)) | (((f.buf[1] >> 0)) << 8 >> 0);
		nn = ((f.buf[2] >> 0)) | (((f.buf[3] >> 0)) << 8 >> 0);
		if (!((((nn << 16 >>> 16)) === (((~n >> 0) << 16 >>> 16))))) {
			f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
			$s = -1; return;
		}
		if (n === 0) {
			f.toRead = f.dict.readFlush();
			f.finishBlock();
			$s = -1; return;
		}
		f.copyLen = n;
		$r = f.copyData(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.dataBlock }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.nr = nr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.dataBlock = function() { return this.$val.dataBlock(); };
	decompressor.ptr.prototype.copyData = function() {
		var $ptr, _r, _tuple, buf, cnt, err, f, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; cnt = $f.cnt; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		buf = f.dict.writeSlice();
		if (buf.$length > f.copyLen) {
			buf = $subslice(buf, 0, f.copyLen);
		}
		_r = io.ReadFull(f.r, buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cnt = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, cnt)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.copyLen = f.copyLen - (cnt) >> 0;
		f.dict.writeMark(cnt);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "copyData");
			$s = -1; return;
		}
		f.finishBlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyData }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.cnt = cnt; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyData = function() { return this.$val.copyData(); };
	decompressor.ptr.prototype.finishBlock = function() {
		var $ptr, f;
		f = this;
		if (f.final$12) {
			if (f.dict.availRead() > 0) {
				f.toRead = f.dict.readFlush();
			}
			f.err = io.EOF;
		}
		f.step = $methodExpr(ptrType$10, "nextBlock");
	};
	decompressor.prototype.finishBlock = function() { return this.$val.finishBlock(); };
	decompressor.ptr.prototype.moreBits = function() {
		var $ptr, _r, _tuple, c, err, f, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		c = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return err;
		}
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.b = (f.b | (((y = f.nb, y < 32 ? (((c >>> 0)) << y) : 0) >>> 0))) >>> 0;
		f.nb = f.nb + (8) >>> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.moreBits }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.moreBits = function() { return this.$val.moreBits(); };
	decompressor.ptr.prototype.huffSym = function(h) {
		var $ptr, _r, chunk, err, f, h, n, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; chunk = $f.chunk; err = $f.err; f = $f.f; h = $f.h; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = ((h.min >>> 0));
		/* while (true) { */ case 1:
			/* while (true) { */ case 3:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 4; continue; }
				_r = f.moreBits(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [0, err];
				}
			/* } */ $s = 3; continue; case 4:
			chunk = (x = h.chunks, x$1 = (f.b & 511) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			n = ((((chunk & 15) >>> 0) >>> 0));
			if (n > 9) {
				chunk = (x$2 = (x$3 = h.links, x$4 = chunk >>> 4 >>> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), x$5 = (((f.b >>> 9 >>> 0)) & h.linkMask) >>> 0, ((x$5 < 0 || x$5 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$5]));
				n = ((((chunk & 15) >>> 0) >>> 0));
			}
			if (n <= f.nb) {
				if (n === 0) {
					f.err = ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
					$s = -1; return [0, f.err];
				}
				f.b = (y = (n), y < 32 ? (f.b >>> y) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
				$s = -1; return [(((chunk >>> 4 >>> 0) >> 0)), $ifaceNil];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffSym }; } $f.$ptr = $ptr; $f._r = _r; $f.chunk = chunk; $f.err = err; $f.f = f; $f.h = h; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffSym = function(h) { return this.$val.huffSym(h); };
	makeReader = function(r) {
		var $ptr, _tuple, ok, r, rr;
		_tuple = $assertType(r, Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	fixedHuffmanDecoderInit = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixedOnce.Do((function() {
			var $ptr, bits, i, i$1, i$2, i$3;
			bits = arrayType$12.zero();
			i = 0;
			while (true) {
				if (!(i < 144)) { break; }
				((i < 0 || i >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i] = 8);
				i = i + (1) >> 0;
			}
			i$1 = 144;
			while (true) {
				if (!(i$1 < 256)) { break; }
				((i$1 < 0 || i$1 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$1] = 9);
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 256;
			while (true) {
				if (!(i$2 < 280)) { break; }
				((i$2 < 0 || i$2 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$2] = 7);
				i$2 = i$2 + (1) >> 0;
			}
			i$3 = 280;
			while (true) {
				if (!(i$3 < 288)) { break; }
				((i$3 < 0 || i$3 >= bits.length) ? ($throwRuntimeError("index out of range"), undefined) : bits[i$3] = 8);
				i$3 = i$3 + (1) >> 0;
			}
			fixedHuffmanDecoder.init(new sliceType$10(bits));
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fixedHuffmanDecoderInit }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.ptr.prototype.Reset = function(r, dict) {
		var $ptr, dict, f, r;
		f = this;
		decompressor.copy(f, new decompressor.ptr(makeReader(r), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), f.bits, f.codebits, $clone(f.dict, dictDecoder), arrayType$15.zero(), $methodExpr(ptrType$10, "nextBlock"), 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0));
		f.dict.init(32768, dict);
		return $ifaceNil;
	};
	decompressor.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewReader = function(r) {
		var $ptr, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, sliceType$4.nil);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var $ptr, dict, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dict = $f.dict; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, dict);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.$ptr = $ptr; $f.dict = dict; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reverseUint16 = function(v) {
		var $ptr, v, x, x$1;
		return ((((x = v >>> 8 << 16 >>> 16, ((x < 0 || x >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x])) << 16 >>> 16)) | ((((x$1 = (v & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? ($throwRuntimeError("index out of range"), undefined) : reverseByte[x$1])) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	reverseBits = function(number, bitLength) {
		var $ptr, bitLength, number, y;
		return reverseUint16((y = ((16 - bitLength << 24 >>> 24)), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	ptrType$13.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([$Int, sliceType$4], [], false)}, {prop: "histSize", name: "histSize", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availRead", name: "availRead", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availWrite", name: "availWrite", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "writeSlice", name: "writeSlice", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}, {prop: "writeMark", name: "writeMark", pkg: "compress/flate", typ: $funcType([$Int], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "compress/flate", typ: $funcType([$Uint8], [], false)}, {prop: "writeCopy", name: "writeCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "tryWriteCopy", name: "tryWriteCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "readFlush", name: "readFlush", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}];
	ptrType$3.methods = [{prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([io.Writer], [], false)}, {prop: "flush", name: "flush", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "write", name: "write", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "writeBits", name: "writeBits", pkg: "compress/flate", typ: $funcType([$Int32, $Uint], [], false)}, {prop: "writeBytes", name: "writeBytes", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "generateCodegen", name: "generateCodegen", pkg: "compress/flate", typ: $funcType([$Int, $Int, ptrType, ptrType], [], false)}, {prop: "dynamicSize", name: "dynamicSize", pkg: "compress/flate", typ: $funcType([ptrType, ptrType, $Int], [$Int, $Int], false)}, {prop: "fixedSize", name: "fixedSize", pkg: "compress/flate", typ: $funcType([$Int], [$Int], false)}, {prop: "storedSize", name: "storedSize", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int, $Bool], false)}, {prop: "writeCode", name: "writeCode", pkg: "compress/flate", typ: $funcType([hcode], [], false)}, {prop: "writeDynamicHeader", name: "writeDynamicHeader", pkg: "compress/flate", typ: $funcType([$Int, $Int, $Int, $Bool], [], false)}, {prop: "writeStoredHeader", name: "writeStoredHeader", pkg: "compress/flate", typ: $funcType([$Int, $Bool], [], false)}, {prop: "writeFixedHeader", name: "writeFixedHeader", pkg: "compress/flate", typ: $funcType([$Bool], [], false)}, {prop: "writeBlock", name: "writeBlock", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "writeBlockDynamic", name: "writeBlockDynamic", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "indexTokens", name: "indexTokens", pkg: "compress/flate", typ: $funcType([sliceType$5], [$Int, $Int], false)}, {prop: "writeTokens", name: "writeTokens", pkg: "compress/flate", typ: $funcType([sliceType$5, sliceType$8, sliceType$8], [], false)}, {prop: "writeBlockHuff", name: "writeBlockHuff", pkg: "compress/flate", typ: $funcType([$Bool, sliceType$4], [], false)}];
	ptrType$14.methods = [{prop: "set", name: "set", pkg: "compress/flate", typ: $funcType([$Uint16, $Uint16], [], false)}];
	ptrType.methods = [{prop: "bitLength", name: "bitLength", pkg: "compress/flate", typ: $funcType([sliceType$7], [$Int], false)}, {prop: "bitCounts", name: "bitCounts", pkg: "compress/flate", typ: $funcType([sliceType$9, $Int32], [sliceType$7], false)}, {prop: "assignEncodingAndSize", name: "assignEncodingAndSize", pkg: "compress/flate", typ: $funcType([sliceType$7, sliceType$9], [], false)}, {prop: "generate", name: "generate", pkg: "compress/flate", typ: $funcType([sliceType$7, $Int32], [], false)}];
	byLiteral.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$7.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	byFreq.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$8.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InternalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([sliceType$10], [$Bool], false)}];
	ptrType$10.methods = [{prop: "nextBlock", name: "nextBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readHuffman", name: "readHuffman", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffmanBlock", name: "huffmanBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "dataBlock", name: "dataBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyData", name: "copyData", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "finishBlock", name: "finishBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "moreBits", name: "moreBits", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffSym", name: "huffSym", pkg: "compress/flate", typ: $funcType([ptrType$9], [$Int, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}];
	token.methods = [{prop: "literal", name: "literal", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "offset", name: "offset", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "length", name: "length", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}];
	dictDecoder.init("compress/flate", [{prop: "hist", name: "hist", exported: false, typ: sliceType$4, tag: ""}, {prop: "wrPos", name: "wrPos", exported: false, typ: $Int, tag: ""}, {prop: "rdPos", name: "rdPos", exported: false, typ: $Int, tag: ""}, {prop: "full", name: "full", exported: false, typ: $Bool, tag: ""}]);
	huffmanBitWriter.init("compress/flate", [{prop: "writer", name: "writer", exported: false, typ: io.Writer, tag: ""}, {prop: "bits", name: "bits", exported: false, typ: $Uint64, tag: ""}, {prop: "nbits", name: "nbits", exported: false, typ: $Uint, tag: ""}, {prop: "bytes", name: "bytes", exported: false, typ: arrayType$5, tag: ""}, {prop: "codegenFreq", name: "codegenFreq", exported: false, typ: arrayType$6, tag: ""}, {prop: "nbytes", name: "nbytes", exported: false, typ: $Int, tag: ""}, {prop: "literalFreq", name: "literalFreq", exported: false, typ: sliceType$7, tag: ""}, {prop: "offsetFreq", name: "offsetFreq", exported: false, typ: sliceType$7, tag: ""}, {prop: "codegen", name: "codegen", exported: false, typ: sliceType$4, tag: ""}, {prop: "literalEncoding", name: "literalEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "offsetEncoding", name: "offsetEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "codegenEncoding", name: "codegenEncoding", exported: false, typ: ptrType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	hcode.init("compress/flate", [{prop: "code", name: "code", exported: false, typ: $Uint16, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uint16, tag: ""}]);
	huffmanEncoder.init("compress/flate", [{prop: "codes", name: "codes", exported: false, typ: sliceType$8, tag: ""}, {prop: "freqcache", name: "freqcache", exported: false, typ: sliceType$9, tag: ""}, {prop: "bitCount", name: "bitCount", exported: false, typ: arrayType$7, tag: ""}, {prop: "lns", name: "lns", exported: false, typ: byLiteral, tag: ""}, {prop: "lfs", name: "lfs", exported: false, typ: byFreq, tag: ""}]);
	literalNode.init("compress/flate", [{prop: "literal", name: "literal", exported: false, typ: $Uint16, tag: ""}, {prop: "freq", name: "freq", exported: false, typ: $Int32, tag: ""}]);
	levelInfo.init("compress/flate", [{prop: "level", name: "level", exported: false, typ: $Int32, tag: ""}, {prop: "lastFreq", name: "lastFreq", exported: false, typ: $Int32, tag: ""}, {prop: "nextCharFreq", name: "nextCharFreq", exported: false, typ: $Int32, tag: ""}, {prop: "nextPairFreq", name: "nextPairFreq", exported: false, typ: $Int32, tag: ""}, {prop: "needed", name: "needed", exported: false, typ: $Int32, tag: ""}]);
	byLiteral.init(literalNode);
	byFreq.init(literalNode);
	Resetter.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}]);
	huffmanDecoder.init("compress/flate", [{prop: "min", name: "min", exported: false, typ: $Int, tag: ""}, {prop: "chunks", name: "chunks", exported: false, typ: arrayType, tag: ""}, {prop: "links", name: "links", exported: false, typ: sliceType$1, tag: ""}, {prop: "linkMask", name: "linkMask", exported: false, typ: $Uint32, tag: ""}]);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decompressor.init("compress/flate", [{prop: "r", name: "r", exported: false, typ: Reader, tag: ""}, {prop: "roffset", name: "roffset", exported: false, typ: $Int64, tag: ""}, {prop: "b", name: "b", exported: false, typ: $Uint32, tag: ""}, {prop: "nb", name: "nb", exported: false, typ: $Uint, tag: ""}, {prop: "h1", name: "h1", exported: false, typ: huffmanDecoder, tag: ""}, {prop: "h2", name: "h2", exported: false, typ: huffmanDecoder, tag: ""}, {prop: "bits", name: "bits", exported: false, typ: ptrType$11, tag: ""}, {prop: "codebits", name: "codebits", exported: false, typ: ptrType$12, tag: ""}, {prop: "dict", name: "dict", exported: false, typ: dictDecoder, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: arrayType$15, tag: ""}, {prop: "step", name: "step", exported: false, typ: funcType$3, tag: ""}, {prop: "stepState", name: "stepState", exported: false, typ: $Int, tag: ""}, {prop: "final$12", name: "final", exported: false, typ: $Bool, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "toRead", name: "toRead", exported: false, typ: sliceType$4, tag: ""}, {prop: "hl", name: "hl", exported: false, typ: ptrType$9, tag: ""}, {prop: "hd", name: "hd", exported: false, typ: ptrType$9, tag: ""}, {prop: "copyLen", name: "copyLen", exported: false, typ: $Int, tag: ""}, {prop: "copyDist", name: "copyDist", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		huffOffset = ptrType.nil;
		fixedOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		fixedHuffmanDecoder = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
		codeOrder = $toNativeArray($kindInt, [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		reverseByte = $toNativeArray($kindUint8, [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		fixedOffsetEncoding = generateFixedOffsetEncoding();
		$r = init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, littleEndian, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	littleEndian = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	littleEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	littleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	littleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	littleEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	littleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	littleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	littleEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$7 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	littleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	littleEndian.ptr.prototype.PutUint64 = function(b, v) {
		var $ptr, b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v.$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	littleEndian.ptr.prototype.String = function() {
		var $ptr;
		return "LittleEndian";
	};
	littleEndian.prototype.String = function() { return this.$val.String(); };
	littleEndian.ptr.prototype.GoString = function() {
		var $ptr;
		return "binary.LittleEndian";
	};
	littleEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var $ptr, b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var $ptr, b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var $ptr, b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var $ptr, b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var $ptr, b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		var $ptr;
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		var $ptr;
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	littleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	littleEndian.init("", []);
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LittleEndian = new littleEndian.ptr();
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash32, sliceType;
	io = $packages["io"];
	Hash32 = $pkg.Hash32 = $newType(8, $kindInterface, "hash.Hash32", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash32.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/crc32"] = (function() {
	var $pkg = {}, $init, hash, sync, Table, digest, slicing8Table, ptrType, ptrType$1, arrayType, arrayType$1, sliceType, ptrType$2, castagnoliTable, updateCastagnoli, ieeeTable8, ieeeArchImpl, updateIEEE, ieeeOnce, ieeeInit, New, NewIEEE, Update, ChecksumIEEE, simpleMakeTable, simplePopulateTable, simpleUpdate, slicingMakeTable, slicingUpdate, archAvailableIEEE, archInitIEEE, archUpdateIEEE;
	hash = $packages["hash"];
	sync = $packages["sync"];
	Table = $pkg.Table = $newType(1024, $kindArray, "crc32.Table", true, "hash/crc32", true, null);
	digest = $pkg.digest = $newType(0, $kindStruct, "crc32.digest", true, "hash/crc32", false, function(crc_, tab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.crc = 0;
			this.tab = ptrType.nil;
			return;
		}
		this.crc = crc_;
		this.tab = tab_;
	});
	slicing8Table = $pkg.slicing8Table = $newType(8192, $kindArray, "crc32.slicing8Table", true, "hash/crc32", false, null);
	ptrType = $ptrType(Table);
	ptrType$1 = $ptrType(slicing8Table);
	arrayType = $arrayType($Uint32, 256);
	arrayType$1 = $arrayType(Table, 8);
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(digest);
	ieeeInit = function() {
		var $ptr;
		ieeeArchImpl = archAvailableIEEE();
		if (ieeeArchImpl) {
			archInitIEEE();
			updateIEEE = archUpdateIEEE;
		} else {
			ieeeTable8 = slicingMakeTable(3988292384);
			updateIEEE = (function(crc, p) {
				var $ptr, crc, p;
				return slicingUpdate(crc, ieeeTable8, p);
			});
		}
	};
	New = function(tab) {
		var $ptr, tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($equal(tab, $pkg.IEEETable, Table)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal(tab, $pkg.IEEETable, Table)) { */ case 1:
			$r = ieeeOnce.Do(ieeeInit); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return new digest.ptr(0, tab);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	NewIEEE = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New($pkg.IEEETable); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewIEEE }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewIEEE = NewIEEE;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 1;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.crc = 0;
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	Update = function(crc, tab, p) {
		var $ptr, _1, _r, _r$1, crc, p, tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; crc = $f.crc; p = $f.p; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = tab;
			/* */ if ($equal(_1, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_1, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_1, (castagnoliTable), Table)) { */ case 2:
				_r = updateCastagnoli(crc, p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if ($equal(_1, ($pkg.IEEETable), Table)) { */ case 3:
				$r = ieeeOnce.Do(ieeeInit); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = updateIEEE(crc, p); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else { */ case 4:
				$s = -1; return simpleUpdate(crc, tab, p);
			/* } */ case 5:
		case 1:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Update }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.crc = crc; $f.p = p; $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Update = Update;
	digest.ptr.prototype.Write = function(p) {
		var $ptr, _1, _r, _r$1, _tmp, _tmp$1, d, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
			_1 = d.tab;
			/* */ if ($equal(_1, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_1, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_1, (castagnoliTable), Table)) { */ case 2:
				_r = updateCastagnoli(d.crc, p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.crc = _r;
				$s = 5; continue;
			/* } else if ($equal(_1, ($pkg.IEEETable), Table)) { */ case 3:
				_r$1 = updateIEEE(d.crc, p); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				d.crc = _r$1;
				$s = 5; continue;
			/* } else { */ case 4:
				d.crc = simpleUpdate(d.crc, d.tab, p);
			/* } */ case 5:
		case 1:
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum32 = function() {
		var $ptr, d;
		d = this;
		return d.crc;
	};
	digest.prototype.Sum32 = function() { return this.$val.Sum32(); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, d, in$1, s;
		d = this;
		s = d.Sum32();
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	ChecksumIEEE = function(data) {
		var $ptr, _r, data, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ieeeOnce.Do(ieeeInit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = updateIEEE(0, data); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChecksumIEEE }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ChecksumIEEE = ChecksumIEEE;
	simpleMakeTable = function(poly) {
		var $ptr, poly, t;
		t = arrayType.zero();
		simplePopulateTable(poly, t);
		return t;
	};
	simplePopulateTable = function(poly, t) {
		var $ptr, crc, i, j, poly, t, y;
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = ((i >>> 0));
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				if (((crc & 1) >>> 0) === 1) {
					crc = (((crc >>> 1 >>> 0)) ^ poly) >>> 0;
				} else {
					crc = (y = (1), y < 32 ? (crc >>> y) : 0) >>> 0;
				}
				j = j + (1) >> 0;
			}
			t.nilCheck, ((i < 0 || i >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[i] = crc);
			i = i + (1) >> 0;
		}
	};
	simpleUpdate = function(crc, tab, p) {
		var $ptr, _i, _ref, crc, p, tab, v, x;
		crc = ~crc >>> 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			crc = ((x = (((crc << 24 >>> 24)) ^ v) << 24 >>> 24, (tab.nilCheck, ((x < 0 || x >= tab.length) ? ($throwRuntimeError("index out of range"), undefined) : tab[x]))) ^ ((crc >>> 8 >>> 0))) >>> 0;
			_i++;
		}
		return ~crc >>> 0;
	};
	slicingMakeTable = function(poly) {
		var $ptr, crc, i, j, poly, t, x, x$1, x$2, x$3;
		t = arrayType$1.zero();
		simplePopulateTable(poly, (t.nilCheck, t[0]));
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = (x = (t.nilCheck, t[0]), ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			j = 1;
			while (true) {
				if (!(j < 8)) { break; }
				crc = ((x$1 = (t.nilCheck, t[0]), x$2 = (crc & 255) >>> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) ^ ((crc >>> 8 >>> 0))) >>> 0;
				(x$3 = (t.nilCheck, ((j < 0 || j >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[j])), ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = crc));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return t;
	};
	slicingUpdate = function(crc, tab, p) {
		var $ptr, crc, p, tab, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if (p.$length >= 16) {
			crc = ~crc >>> 0;
			while (true) {
				if (!(p.$length > 8)) { break; }
				crc = (crc ^ ((((((((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0)) | ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0))) >>> 0;
				crc = ((((((((((((((x = (tab.nilCheck, tab[0]), x$1 = (7 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 7]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) ^ (x$2 = (tab.nilCheck, tab[1]), x$3 = (6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3]))) >>> 0) ^ (x$4 = (tab.nilCheck, tab[2]), x$5 = (5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]), ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5]))) >>> 0) ^ (x$6 = (tab.nilCheck, tab[3]), x$7 = (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))) >>> 0) ^ (x$8 = (tab.nilCheck, tab[4]), x$9 = crc >>> 24 >>> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9]))) >>> 0) ^ (x$10 = (tab.nilCheck, tab[5]), x$11 = (((crc >>> 16 >>> 0)) & 255) >>> 0, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11]))) >>> 0) ^ (x$12 = (tab.nilCheck, tab[6]), x$13 = (((crc >>> 8 >>> 0)) & 255) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))) >>> 0) ^ (x$14 = (tab.nilCheck, tab[7]), x$15 = (crc & 255) >>> 0, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15]))) >>> 0;
				p = $subslice(p, 8);
			}
			crc = ~crc >>> 0;
		}
		if (p.$length === 0) {
			return crc;
		}
		return simpleUpdate(crc, (tab.nilCheck, tab[0]), p);
	};
	archAvailableIEEE = function() {
		var $ptr;
		return false;
	};
	archInitIEEE = function() {
		var $ptr;
		$panic(new $String("not available"));
	};
	archUpdateIEEE = function(crc, p) {
		var $ptr, crc, p;
		$panic(new $String("not available"));
	};
	ptrType$2.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	Table.init($Uint32, 256);
	digest.init("hash/crc32", [{prop: "crc", name: "crc", exported: false, typ: $Uint32, tag: ""}, {prop: "tab", name: "tab", exported: false, typ: ptrType, tag: ""}]);
	slicing8Table.init(Table, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		castagnoliTable = ptrType.nil;
		updateCastagnoli = $throwNilPointerError;
		ieeeTable8 = ptrType$1.nil;
		ieeeArchImpl = false;
		updateIEEE = $throwNilPointerError;
		ieeeOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		$pkg.IEEETable = simpleMakeTable(3988292384);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/gzip"] = (function() {
	var $pkg = {}, $init, bufio, flate, binary, errors, fmt, crc32, io, time, Header, Reader, sliceType, ptrType, arrayType, ptrType$1, sliceType$1, le, noEOF, NewReader;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	crc32 = $packages["hash/crc32"];
	io = $packages["io"];
	time = $packages["time"];
	Header = $pkg.Header = $newType(0, $kindStruct, "gzip.Header", true, "compress/gzip", true, function(Comment_, Extra_, ModTime_, Name_, OS_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Comment = "";
			this.Extra = sliceType.nil;
			this.ModTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil);
			this.Name = "";
			this.OS = 0;
			return;
		}
		this.Comment = Comment_;
		this.Extra = Extra_;
		this.ModTime = ModTime_;
		this.Name = Name_;
		this.OS = OS_;
	});
	Reader = $pkg.Reader = $newType(0, $kindStruct, "gzip.Reader", true, "compress/gzip", true, function(Header_, r_, decompressor_, digest_, size_, buf_, err_, multistream_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Header = new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0);
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = 0;
			this.size = 0;
			this.buf = arrayType.zero();
			this.err = $ifaceNil;
			this.multistream = false;
			return;
		}
		this.Header = Header_;
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.size = size_;
		this.buf = buf_;
		this.err = err_;
		this.multistream = multistream_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(time.Location);
	arrayType = $arrayType($Uint8, 512);
	ptrType$1 = $ptrType(Reader);
	sliceType$1 = $sliceType($Int32);
	noEOF = function(err) {
		var $ptr, err;
		if ($interfaceIsEqual(err, io.EOF)) {
			return io.ErrUnexpectedEOF;
		}
		return err;
	};
	NewReader = function(r) {
		var $ptr, _r, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new Reader.ptr(new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0), $ifaceNil, $ifaceNil, 0, 0, arrayType.zero(), $ifaceNil, false);
		_r = z.Reset(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, _r, _tuple, _tuple$1, ok, r, rr, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ok = $f.ok; r = $f.r; rr = $f.rr; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		Reader.copy(z, new Reader.ptr(new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0), $ifaceNil, z.decompressor, 0, 0, arrayType.zero(), $ifaceNil, true));
		_tuple = $assertType(r, flate.Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = rr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = z.readHeader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		Header.copy(z.Header, _tuple$1[0]);
		z.err = _tuple$1[1];
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ok = ok; $f.r = r; $f.rr = rr; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.Multistream = function(ok) {
		var $ptr, ok, z;
		z = this;
		z.multistream = ok;
	};
	Reader.prototype.Multistream = function(ok) { return this.$val.Multistream(ok); };
	Reader.ptr.prototype.readString = function() {
		var $ptr, _i, _r, _r$1, _ref, _tuple, err, i, needConv, s, v, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; i = $f.i; needConv = $f.needConv; s = $f.s; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		err = $ifaceNil;
		needConv = false;
		i = 0;
		/* while (true) { */ case 1:
			if (i >= 512) {
				$s = -1; return ["", $pkg.ErrHeader];
			}
			_r = z.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			(x = z.buf, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = _tuple[0]));
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return ["", err];
			}
			if ((x$1 = z.buf, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) > 127) {
				needConv = true;
			}
			/* */ if ((x$2 = z.buf, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((x$2 = z.buf, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) === 0) { */ case 4:
				_r$1 = crc32.Update(z.digest, crc32.IEEETable, $subslice(new sliceType(z.buf), 0, (i + 1 >> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				z.digest = _r$1;
				if (needConv) {
					s = $makeSlice(sliceType$1, 0, i);
					_ref = $subslice(new sliceType(z.buf), 0, i);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						s = $append(s, ((v >> 0)));
						_i++;
					}
					$s = -1; return [($runesToString(s)), $ifaceNil];
				}
				$s = -1; return [($bytesToString($subslice(new sliceType(z.buf), 0, i))), $ifaceNil];
			/* } */ case 5:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ["", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.needConv = needConv; $f.s = s; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readString = function() { return this.$val.readString(); };
	Reader.ptr.prototype.readHeader = function() {
		var $ptr, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, data, digest, err, flg, hdr, s, t, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; data = $f.data; digest = $f.digest; err = $f.err; flg = $f.flg; hdr = $f.hdr; s = $f.s; t = $f.t; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hdr = new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0);
		err = $ifaceNil;
		z = this;
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $clone(hdr, Header);
			_tmp$1 = err;
			Header.copy(hdr, _tmp);
			err = _tmp$1;
			$s = -1; return [hdr, err];
		}
		if (!((z.buf[0] === 31)) || !((z.buf[1] === 139)) || !((z.buf[2] === 8))) {
			_tmp$2 = $clone(hdr, Header);
			_tmp$3 = $pkg.ErrHeader;
			Header.copy(hdr, _tmp$2);
			err = _tmp$3;
			$s = -1; return [hdr, err];
		}
		flg = z.buf[3];
		t = (new $Int64(0, $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 4, 8))));
		if ((t.$high > 0 || (t.$high === 0 && t.$low > 0))) {
			time.Time.copy(hdr.ModTime, time.Unix(t, new $Int64(0, 0)));
		}
		hdr.OS = z.buf[9];
		_r$1 = crc32.ChecksumIEEE($subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.digest = _r$1;
		/* */ if (!((((flg & 4) >>> 0) === 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((((flg & 4) >>> 0) === 0))) { */ case 3:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = $clone(hdr, Header);
				_tmp$5 = noEOF(err);
				Header.copy(hdr, _tmp$4);
				err = _tmp$5;
				$s = -1; return [hdr, err];
			}
			_r$3 = crc32.Update(z.digest, crc32.IEEETable, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			z.digest = _r$3;
			data = $makeSlice(sliceType, $clone(le, binary.littleEndian).Uint16($subslice(new sliceType(z.buf), 0, 2)));
			_r$4 = io.ReadFull(z.r, data); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = $clone(hdr, Header);
				_tmp$7 = noEOF(err);
				Header.copy(hdr, _tmp$6);
				err = _tmp$7;
				$s = -1; return [hdr, err];
			}
			_r$5 = crc32.Update(z.digest, crc32.IEEETable, data); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			z.digest = _r$5;
			hdr.Extra = data;
		/* } */ case 4:
		s = "";
		/* */ if (!((((flg & 8) >>> 0) === 0))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((((flg & 8) >>> 0) === 0))) { */ case 9:
			_r$6 = z.readString(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$3 = _r$6;
			s = _tuple$3[0];
			err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$8 = $clone(hdr, Header);
				_tmp$9 = err;
				Header.copy(hdr, _tmp$8);
				err = _tmp$9;
				$s = -1; return [hdr, err];
			}
			hdr.Name = s;
		/* } */ case 10:
		/* */ if (!((((flg & 16) >>> 0) === 0))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!((((flg & 16) >>> 0) === 0))) { */ case 12:
			_r$7 = z.readString(); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$4 = _r$7;
			s = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = $clone(hdr, Header);
				_tmp$11 = err;
				Header.copy(hdr, _tmp$10);
				err = _tmp$11;
				$s = -1; return [hdr, err];
			}
			hdr.Comment = s;
		/* } */ case 13:
		/* */ if (!((((flg & 2) >>> 0) === 0))) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!((((flg & 2) >>> 0) === 0))) { */ case 15:
			_r$8 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$5 = _r$8;
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = $clone(hdr, Header);
				_tmp$13 = noEOF(err);
				Header.copy(hdr, _tmp$12);
				err = _tmp$13;
				$s = -1; return [hdr, err];
			}
			digest = $clone(le, binary.littleEndian).Uint16($subslice(new sliceType(z.buf), 0, 2));
			if (!((digest === ((z.digest << 16 >>> 16))))) {
				_tmp$14 = $clone(hdr, Header);
				_tmp$15 = $pkg.ErrHeader;
				Header.copy(hdr, _tmp$14);
				err = _tmp$15;
				$s = -1; return [hdr, err];
			}
		/* } */ case 16:
		z.digest = 0;
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 18:
			_r$9 = flate.NewReader(z.r); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			z.decompressor = _r$9;
			$s = 20; continue;
		/* } else { */ case 19:
			_r$10 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, sliceType.nil); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 20:
		_tmp$16 = $clone(hdr, Header);
		_tmp$17 = $ifaceNil;
		Header.copy(hdr, _tmp$16);
		err = _tmp$17;
		$s = -1; return [hdr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readHeader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.data = data; $f.digest = digest; $f.err = err; $f.flg = flg; $f.hdr = hdr; $f.s = s; $f.t = t; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readHeader = function() { return this.$val.readHeader(); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, digest, err, err$1, n, p, size, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; digest = $f.digest; err = $f.err; err$1 = $f.err$1; n = $f.n; p = $f.p; size = $f.size; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = z.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = crc32.Update(z.digest, crc32.IEEETable, $subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.digest = _r$1;
		z.size = z.size + (((n >>> 0))) >>> 0;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			_tmp$2 = n;
			_tmp$3 = z.err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			z.err = noEOF(err$1);
			_tmp$4 = n;
			_tmp$5 = z.err;
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		digest = $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 0, 4));
		size = $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 4, 8));
		if (!((digest === z.digest)) || !((size === z.size))) {
			z.err = $pkg.ErrChecksum;
			_tmp$6 = n;
			_tmp$7 = z.err;
			n = _tmp$6;
			err = _tmp$7;
			$s = -1; return [n, err];
		}
		_tmp$8 = 0;
		_tmp$9 = 0;
		z.digest = _tmp$8;
		z.size = _tmp$9;
		if (!z.multistream) {
			_tmp$10 = n;
			_tmp$11 = io.EOF;
			n = _tmp$10;
			err = _tmp$11;
			$s = -1; return [n, err];
		}
		z.err = $ifaceNil;
		_r$3 = z.readHeader(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		z.err = _tuple$2[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp$12 = n;
			_tmp$13 = z.err;
			n = _tmp$12;
			err = _tmp$13;
			$s = -1; return [n, err];
		}
		if (n > 0) {
			_tmp$14 = n;
			_tmp$15 = $ifaceNil;
			n = _tmp$14;
			err = _tmp$15;
			$s = -1; return [n, err];
		}
		_r$4 = z.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$3 = _r$4;
		n = _tuple$3[0];
		err = _tuple$3[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.digest = digest; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.p = p; $f.size = size; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.Close = function() {
		var $ptr, _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Close = function() { return this.$val.Close(); };
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [$error], false)}, {prop: "Multistream", name: "Multistream", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "readString", name: "readString", pkg: "compress/gzip", typ: $funcType([], [$String, $error], false)}, {prop: "readHeader", name: "readHeader", pkg: "compress/gzip", typ: $funcType([], [Header, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	Header.init("", [{prop: "Comment", name: "Comment", exported: true, typ: $String, tag: ""}, {prop: "Extra", name: "Extra", exported: true, typ: sliceType, tag: ""}, {prop: "ModTime", name: "ModTime", exported: true, typ: time.Time, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "OS", name: "OS", exported: true, typ: $Uint8, tag: ""}]);
	Reader.init("compress/gzip", [{prop: "Header", name: "", exported: true, typ: Header, tag: ""}, {prop: "r", name: "r", exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", exported: false, typ: $Uint32, tag: ""}, {prop: "size", name: "size", exported: false, typ: $Uint32, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: arrayType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "multistream", name: "multistream", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("gzip: invalid checksum");
		$pkg.ErrHeader = errors.New("gzip: invalid header");
		le = $clone(binary.LittleEndian, binary.littleEndian);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, syscall, utf8;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadAll;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType$1, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadAll = function(r) {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = readAll(r, new $Int64(0, 512)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAll }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAll = ReadAll;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr, b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/ebitenutil/internal/assets"] = (function() {
	var $pkg = {}, $init, bytes, gzip, fmt, image, ioutil, sliceType, sliceType$1, ptrType, compressedTextRGBA, CreateTextImage;
	bytes = $packages["bytes"];
	gzip = $packages["compress/gzip"];
	fmt = $packages["fmt"];
	image = $packages["image"];
	ioutil = $packages["io/ioutil"];
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(image.RGBA);
	CreateTextImage = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, err, pix, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; pix = $f.pix; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_r = gzip.NewReader(bytes.NewReader(compressedTextRGBA)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Sprintf("assets: gzip.NewReader failed: %v", new sliceType$1([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 3:
		$deferred.push([$methodVal(s, "Close"), []]);
		_r$2 = ioutil.ReadAll(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		pix = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
			_r$3 = fmt.Sprintf("assets: ioutil.ReadAll failed: %v", new sliceType$1([err])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 7:
		$s = -1; return new image.RGBA.ptr(pix, 768, $clone(image.Rect(0, 0, 192, 128), image.Rectangle));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: CreateTextImage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.pix = pix; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.CreateTextImage = CreateTextImage;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gzip.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		compressedTextRGBA = new sliceType([31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 236, 93, 237, 146, 36, 33, 8, 243, 253, 95, 122, 238, 239, 213, 214, 76, 75, 66, 80, 180, 147, 63, 87, 231, 238, 218, 126, 68, 68, 4, 28, 134, 97, 24, 134, 97, 140, 207, 231, 243, 169, 172, 71, 85, 127, 117, 127, 85, 237, 239, 214, 223, 95, 109, 252, 31, 209, 62, 253, 255, 239, 223, 191, 251, 251, 179, 191, 245, 63, 149, 207, 218, 201, 140, 251, 175, 250, 103, 255, 55, 255, 205, 255, 25, 247, 17, 190, 161, 252, 252, 246, 251, 209, 53, 250, 237, 111, 204, 255, 62, 252, 175, 26, 123, 70, 86, 42, 228, 191, 66, 206, 179, 252, 159, 173, 167, 174, 252, 127, 26, 187, 155, 249, 175, 148, 15, 79, 115, 136, 200, 202, 39, 61, 102, 183, 252, 159, 173, 233, 217, 24, 124, 171, 63, 178, 142, 44, 255, 245, 252, 143, 234, 24, 10, 254, 103, 228, 255, 108, 77, 68, 245, 255, 200, 55, 103, 251, 69, 180, 237, 145, 245, 136, 172, 163, 93, 252, 95, 181, 47, 172, 230, 63, 122, 126, 99, 120, 130, 232, 92, 191, 248, 63, 227, 85, 68, 94, 223, 100, 183, 177, 252, 223, 39, 255, 159, 184, 54, 211, 39, 127, 253, 172, 66, 254, 163, 235, 72, 33, 255, 81, 57, 19, 249, 110, 100, 204, 144, 177, 123, 66, 214, 86, 145, 221, 23, 162, 109, 251, 128, 80, 174, 175, 95, 186, 107, 165, 252, 71, 245, 127, 134, 135, 168, 254, 175, 148, 227, 213, 231, 184, 83, 236, 129, 187, 206, 185, 12, 87, 88, 110, 173, 176, 255, 32, 246, 141, 10, 249, 255, 118, 254, 179, 251, 194, 78, 254, 163, 245, 162, 123, 252, 74, 251, 127, 70, 254, 163, 246, 42, 230, 252, 107, 249, 223, 131, 255, 25, 59, 57, 186, 158, 17, 25, 80, 41, 255, 119, 233, 63, 136, 94, 119, 43, 255, 213, 250, 249, 233, 231, 125, 149, 188, 232, 102, 255, 57, 93, 78, 190, 81, 255, 55, 12, 195, 48, 12, 195, 48, 12, 195, 56, 237, 12, 220, 225, 188, 54, 138, 253, 105, 141, 119, 115, 61, 194, 127, 196, 79, 99, 144, 247, 23, 43, 252, 105, 87, 143, 235, 147, 237, 121, 118, 95, 255, 173, 236, 201, 127, 161, 226, 247, 89, 223, 17, 181, 252, 27, 65, 255, 97, 244, 110, 44, 203, 255, 136, 31, 221, 47, 94, 84, 241, 127, 247, 186, 136, 246, 95, 233, 95, 146, 241, 145, 81, 112, 160, 154, 251, 8, 111, 20, 117, 69, 228, 67, 116, 79, 200, 248, 231, 35, 50, 1, 189, 191, 94, 33, 251, 159, 198, 150, 225, 127, 132, 147, 25, 185, 128, 180, 63, 187, 110, 217, 121, 81, 197, 57, 49, 123, 69, 36, 238, 16, 145, 85, 234, 61, 17, 213, 55, 86, 241, 159, 185, 167, 70, 214, 195, 147, 188, 154, 149, 103, 215, 87, 70, 95, 138, 248, 108, 162, 115, 185, 138, 255, 172, 126, 203, 202, 163, 204, 126, 168, 136, 187, 97, 229, 18, 179, 31, 69, 198, 25, 213, 121, 212, 254, 188, 234, 122, 148, 231, 215, 85, 252, 103, 244, 27, 196, 198, 116, 146, 252, 71, 245, 114, 86, 31, 64, 253, 199, 20, 250, 22, 18, 139, 162, 224, 48, 35, 255, 87, 250, 223, 70, 121, 157, 245, 5, 93, 161, 255, 87, 197, 61, 41, 244, 251, 25, 159, 209, 248, 208, 140, 61, 34, 43, 215, 79, 246, 71, 66, 244, 76, 116, 93, 168, 251, 203, 250, 135, 103, 126, 95, 193, 255, 12, 191, 178, 231, 86, 150, 255, 76, 28, 226, 42, 157, 125, 181, 254, 131, 234, 4, 217, 62, 239, 138, 11, 70, 245, 248, 232, 30, 206, 216, 225, 85, 60, 140, 196, 128, 70, 237, 24, 89, 189, 174, 234, 231, 39, 99, 117, 46, 159, 213, 117, 220, 14, 143, 145, 97, 24, 134, 97, 24, 134, 97, 24, 134, 97, 24, 198, 221, 80, 221, 179, 12, 225, 253, 78, 54, 191, 34, 146, 79, 111, 16, 246, 109, 198, 207, 234, 219, 239, 87, 229, 175, 142, 180, 159, 29, 79, 230, 247, 217, 251, 223, 108, 222, 111, 54, 111, 45, 227, 255, 146, 241, 157, 97, 255, 143, 250, 4, 102, 239, 69, 84, 249, 252, 51, 237, 252, 150, 255, 26, 125, 119, 163, 186, 92, 61, 143, 89, 254, 63, 205, 171, 130, 255, 153, 249, 143, 204, 221, 202, 119, 94, 50, 235, 130, 229, 63, 155, 147, 178, 66, 78, 42, 246, 169, 106, 254, 87, 236, 161, 232, 26, 80, 248, 214, 69, 251, 117, 51, 255, 51, 241, 102, 79, 190, 79, 230, 255, 93, 252, 207, 228, 209, 251, 165, 7, 70, 235, 71, 243, 229, 238, 228, 63, 163, 15, 179, 227, 198, 156, 227, 102, 58, 68, 165, 223, 172, 50, 94, 165, 130, 255, 217, 115, 83, 181, 252, 175, 210, 123, 213, 249, 75, 171, 198, 77, 37, 239, 21, 252, 87, 230, 61, 216, 201, 127, 229, 126, 125, 42, 255, 217, 115, 250, 142, 113, 203, 228, 130, 65, 249, 63, 22, 229, 253, 96, 244, 28, 117, 108, 77, 213, 252, 118, 176, 255, 172, 94, 215, 187, 235, 87, 253, 127, 144, 249, 190, 51, 241, 156, 43, 248, 143, 218, 213, 87, 216, 255, 35, 237, 100, 237, 237, 217, 254, 102, 227, 167, 208, 60, 36, 170, 251, 142, 104, 30, 161, 21, 252, 103, 222, 45, 202, 218, 72, 141, 179, 239, 69, 223, 210, 207, 232, 125, 229, 0, 239, 139, 119, 190, 177, 108, 232, 184, 225, 145, 48, 12, 195, 48, 12, 195, 48, 12, 195, 200, 157, 173, 222, 216, 55, 159, 39, 207, 57, 235, 103, 115, 196, 170, 248, 95, 145, 143, 17, 25, 135, 42, 14, 71, 236, 240, 150, 111, 251, 218, 138, 250, 17, 169, 242, 71, 237, 226, 255, 234, 92, 95, 55, 231, 77, 122, 19, 255, 103, 254, 140, 230, 191, 249, 127, 187, 252, 87, 235, 97, 153, 248, 187, 17, 244, 117, 70, 246, 181, 95, 239, 107, 160, 249, 247, 16, 223, 36, 164, 79, 179, 246, 48, 227, 137, 244, 151, 241, 87, 239, 16, 255, 56, 26, 191, 227, 179, 50, 142, 3, 245, 183, 97, 227, 223, 144, 119, 58, 16, 94, 84, 199, 63, 34, 245, 143, 196, 27, 49, 35, 17, 255, 194, 228, 227, 205, 248, 63, 87, 172, 131, 106, 255, 127, 68, 14, 84, 196, 255, 102, 198, 191, 99, 156, 163, 42, 239, 180, 34, 254, 101, 213, 251, 71, 149, 249, 252, 21, 243, 178, 43, 94, 111, 167, 252, 223, 197, 127, 133, 252, 95, 193, 127, 70, 206, 159, 198, 127, 181, 191, 250, 32, 252, 159, 25, 254, 179, 250, 130, 58, 254, 49, 218, 95, 148, 111, 179, 56, 229, 200, 24, 40, 222, 253, 60, 237, 252, 155, 137, 63, 85, 157, 127, 209, 117, 132, 228, 195, 71, 239, 91, 80, 254, 15, 194, 255, 95, 165, 255, 68, 236, 3, 85, 241, 47, 183, 156, 127, 187, 217, 197, 110, 201, 201, 191, 227, 77, 147, 238, 243, 181, 250, 254, 247, 164, 49, 85, 188, 165, 214, 105, 236, 110, 229, 127, 199, 177, 54, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 48, 12, 195, 96, 16, 205, 225, 113, 75, 95, 21, 249, 17, 144, 124, 47, 158, 71, 190, 253, 179, 114, 230, 29, 87, 54, 127, 216, 183, 220, 68, 35, 240, 206, 108, 38, 223, 100, 132, 155, 209, 188, 73, 153, 247, 111, 209, 156, 248, 108, 31, 148, 235, 154, 233, 59, 147, 251, 191, 90, 6, 68, 242, 153, 86, 241, 159, 105, 95, 21, 87, 216, 239, 70, 199, 12, 205, 73, 170, 126, 11, 61, 35, 7, 6, 152, 7, 17, 217, 43, 170, 228, 23, 51, 70, 200, 252, 69, 115, 110, 42, 120, 137, 230, 163, 27, 68, 158, 77, 228, 187, 140, 254, 195, 200, 49, 101, 219, 213, 239, 61, 32, 121, 25, 51, 58, 136, 106, 108, 162, 121, 47, 35, 58, 17, 194, 53, 5, 47, 149, 235, 81, 33, 251, 20, 122, 148, 98, 239, 29, 193, 124, 164, 21, 251, 240, 76, 166, 15, 65, 174, 232, 33, 204, 151, 152, 201, 117, 250, 244, 55, 232, 123, 244, 153, 156, 153, 17, 253, 54, 218, 47, 36, 15, 106, 133, 158, 169, 250, 46, 195, 127, 230, 76, 192, 242, 141, 125, 67, 65, 185, 118, 81, 57, 28, 201, 125, 154, 61, 219, 140, 194, 156, 129, 209, 28, 179, 43, 228, 127, 181, 30, 27, 201, 211, 59, 10, 242, 174, 178, 186, 39, 179, 103, 48, 50, 179, 138, 255, 179, 119, 121, 20, 123, 158, 242, 187, 153, 239, 43, 249, 191, 202, 174, 87, 113, 14, 82, 201, 30, 84, 46, 101, 242, 84, 163, 54, 38, 52, 143, 124, 165, 110, 167, 178, 31, 173, 180, 255, 116, 224, 127, 149, 29, 64, 105, 107, 71, 114, 229, 51, 239, 68, 100, 207, 17, 200, 91, 66, 138, 250, 51, 231, 199, 202, 53, 144, 253, 174, 186, 30, 214, 206, 163, 178, 55, 40, 255, 22, 181, 247, 71, 223, 167, 56, 97, 127, 30, 47, 205, 249, 190, 90, 214, 118, 59, 167, 24, 70, 119, 254, 155, 251, 134, 97, 24, 134, 97, 24, 134, 97, 220, 114, 30, 202, 190, 167, 201, 220, 235, 237, 106, 255, 16, 248, 97, 14, 145, 77, 157, 181, 95, 87, 206, 23, 58, 15, 43, 198, 77, 113, 207, 59, 72, 63, 204, 111, 254, 51, 204, 155, 215, 10, 191, 253, 76, 251, 7, 121, 247, 155, 173, 127, 230, 227, 86, 213, 95, 102, 190, 102, 235, 116, 199, 188, 156, 114, 223, 24, 93, 183, 138, 119, 221, 79, 222, 123, 79, 126, 231, 183, 195, 253, 12, 243, 62, 251, 16, 250, 88, 103, 227, 197, 24, 31, 216, 136, 127, 38, 91, 62, 130, 113, 4, 217, 114, 116, 175, 172, 110, 207, 204, 127, 108, 246, 254, 61, 170, 3, 236, 42, 239, 192, 127, 166, 189, 171, 202, 87, 124, 39, 162, 247, 116, 224, 73, 228, 172, 112, 34, 255, 59, 181, 237, 73, 62, 223, 200, 255, 89, 28, 66, 23, 94, 177, 251, 192, 174, 245, 56, 59, 87, 118, 93, 155, 89, 253, 71, 93, 190, 83, 254, 35, 118, 160, 183, 201, 127, 214, 158, 16, 181, 183, 236, 44, 183, 254, 115, 142, 254, 176, 147, 255, 25, 158, 156, 50, 158, 104, 251, 205, 255, 90, 190, 101, 237, 23, 230, 127, 156, 255, 17, 59, 204, 233, 246, 31, 116, 191, 222, 101, 255, 97, 236, 255, 43, 218, 147, 213, 147, 79, 182, 149, 27, 158, 143, 55, 241, 198, 220, 55, 204, 29, 195, 48, 12, 195, 48, 12, 195, 48, 42, 207, 7, 246, 255, 175, 173, 63, 226, 27, 120, 138, 255, 255, 234, 121, 25, 68, 46, 159, 46, 254, 228, 106, 191, 223, 19, 253, 255, 255, 206, 123, 100, 60, 119, 205, 87, 199, 121, 97, 242, 19, 117, 178, 5, 189, 61, 167, 207, 105, 119, 50, 221, 219, 105, 59, 231, 157, 58, 232, 41, 109, 236, 16, 255, 162, 146, 65, 187, 226, 44, 118, 198, 161, 32, 121, 197, 213, 229, 209, 248, 199, 19, 252, 31, 118, 250, 207, 160, 254, 36, 29, 203, 187, 251, 189, 171, 251, 57, 227, 125, 7, 191, 172, 89, 92, 70, 7, 63, 109, 246, 236, 89, 233, 67, 143, 148, 51, 241, 47, 213, 254, 111, 187, 248, 223, 141, 39, 145, 51, 229, 169, 254, 219, 221, 202, 223, 226, 255, 127, 122, 156, 172, 249, 223, 203, 255, 255, 38, 253, 231, 20, 254, 179, 241, 107, 153, 242, 168, 254, 240, 164, 43, 156, 164, 255, 116, 59, 167, 143, 77, 249, 22, 198, 129, 254, 255, 85, 235, 33, 99, 219, 63, 213, 78, 106, 251, 174, 231, 99, 8, 226, 1, 79, 228, 145, 185, 111, 160, 251, 102, 102, 95, 51, 140, 219, 241, 47, 0, 0, 255, 255, 14, 48, 92, 223, 0, 128, 1, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/color/palette"] = (function() {
	var $pkg = {}, $init, color;
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = color.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/lzw"] = (function() {
	var $pkg = {}, $init, bufio, errors, fmt, io, decoder, sliceType, arrayType, arrayType$1, arrayType$2, ptrType, sliceType$1, funcType, errClosed, errOutOfCodes, NewReader;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	decoder = $pkg.decoder = $newType(0, $kindStruct, "lzw.decoder", true, "compress/lzw", false, function(r_, bits_, nBits_, width_, read_, litWidth_, err_, clear_, eof_, hi_, overflow_, last_, suffix_, prefix_, output_, o_, toRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.bits = 0;
			this.nBits = 0;
			this.width = 0;
			this.read = $throwNilPointerError;
			this.litWidth = 0;
			this.err = $ifaceNil;
			this.clear = 0;
			this.eof = 0;
			this.hi = 0;
			this.overflow = 0;
			this.last = 0;
			this.suffix = arrayType.zero();
			this.prefix = arrayType$1.zero();
			this.output = arrayType$2.zero();
			this.o = 0;
			this.toRead = sliceType.nil;
			return;
		}
		this.r = r_;
		this.bits = bits_;
		this.nBits = nBits_;
		this.width = width_;
		this.read = read_;
		this.litWidth = litWidth_;
		this.err = err_;
		this.clear = clear_;
		this.eof = eof_;
		this.hi = hi_;
		this.overflow = overflow_;
		this.last = last_;
		this.suffix = suffix_;
		this.prefix = prefix_;
		this.output = output_;
		this.o = o_;
		this.toRead = toRead_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4096);
	arrayType$1 = $arrayType($Uint16, 4096);
	arrayType$2 = $arrayType($Uint8, 8192);
	ptrType = $ptrType(decoder);
	sliceType$1 = $sliceType($emptyInterface);
	funcType = $funcType([ptrType], [$Uint16, $error], false);
	decoder.ptr.prototype.readLSB = function() {
		var $ptr, _r, _tuple, code, d, err, x, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; code = $f.code; d = $f.d; err = $f.err; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(d.nBits < d.width)) { break; } */ if(!(d.nBits < d.width)) { $s = 2; continue; }
			_r = d.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			d.bits = (d.bits | (((y = d.nBits, y < 32 ? (((x >>> 0)) << y) : 0) >>> 0))) >>> 0;
			d.nBits = d.nBits + (8) >>> 0;
		/* } */ $s = 1; continue; case 2:
		code = ((((d.bits & ((((y$1 = d.width, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0))) >>> 0) << 16 >>> 16));
		d.bits = (y$2 = (d.width), y$2 < 32 ? (d.bits >>> y$2) : 0) >>> 0;
		d.nBits = d.nBits - (d.width) >>> 0;
		$s = -1; return [code, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readLSB }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.code = code; $f.d = d; $f.err = err; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readLSB = function() { return this.$val.readLSB(); };
	decoder.ptr.prototype.readMSB = function() {
		var $ptr, _r, _tuple, code, d, err, x, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; code = $f.code; d = $f.d; err = $f.err; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(d.nBits < d.width)) { break; } */ if(!(d.nBits < d.width)) { $s = 2; continue; }
			_r = d.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			d.bits = (d.bits | (((y = ((24 - d.nBits >>> 0)), y < 32 ? (((x >>> 0)) << y) : 0) >>> 0))) >>> 0;
			d.nBits = d.nBits + (8) >>> 0;
		/* } */ $s = 1; continue; case 2:
		code = ((((y$1 = ((32 - d.width >>> 0)), y$1 < 32 ? (d.bits >>> y$1) : 0) >>> 0) << 16 >>> 16));
		d.bits = (y$2 = (d.width), y$2 < 32 ? (d.bits << y$2) : 0) >>> 0;
		d.nBits = d.nBits - (d.width) >>> 0;
		$s = -1; return [code, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readMSB }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.code = code; $f.d = d; $f.err = err; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readMSB = function() { return this.$val.readMSB(); };
	decoder.ptr.prototype.Read = function(b) {
		var $ptr, b, d, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; d = $f.d; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			if (d.toRead.$length > 0) {
				n = $copySlice(b, d.toRead);
				d.toRead = $subslice(d.toRead, n);
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				$s = -1; return [0, d.err];
			}
			$r = d.decode(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.Read }; } $f.$ptr = $ptr; $f.b = b; $f.d = d; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.Read = function(b) { return this.$val.Read(b); };
	decoder.ptr.prototype.decode = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, c, code, d, err, i, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; c = $f.c; code = $f.code; d = $f.d; err = $f.err; i = $f.i; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r = d.read(d); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			code = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				d.err = err;
				/* break; */ $s = 2; continue;
			}
			if (code < d.clear) {
				(x = d.output, x$1 = d.o, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = ((code << 24 >>> 24))));
				d.o = d.o + (1) >> 0;
				if (!((d.last === 65535))) {
					(x$2 = d.suffix, x$3 = d.hi, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((code << 24 >>> 24))));
					(x$4 = d.prefix, x$5 = d.hi, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = d.last));
				}
			} else if ((code === d.clear)) {
				d.width = 1 + ((d.litWidth >>> 0)) >>> 0;
				d.hi = d.eof;
				d.overflow = (y = d.width, y < 32 ? (1 << y) : 0) << 16 >>> 16;
				d.last = 65535;
				/* continue; */ $s = 1; continue;
			} else if ((code === d.eof)) {
				d.err = io.EOF;
				/* break loop; */ $s = 2; continue s;
			} else if (code <= d.hi) {
				_tmp = code;
				_tmp$1 = 8191;
				c = _tmp;
				i = _tmp$1;
				if (code === d.hi) {
					c = d.last;
					while (true) {
						if (!(c >= d.clear)) { break; }
						c = (x$6 = d.prefix, ((c < 0 || c >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[c]));
					}
					(x$7 = d.output, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i] = ((c << 24 >>> 24))));
					i = i - (1) >> 0;
					c = d.last;
				}
				while (true) {
					if (!(c >= d.clear)) { break; }
					(x$9 = d.output, ((i < 0 || i >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[i] = (x$8 = d.suffix, ((c < 0 || c >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[c]))));
					i = i - (1) >> 0;
					c = (x$10 = d.prefix, ((c < 0 || c >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[c]));
				}
				(x$11 = d.output, ((i < 0 || i >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[i] = ((c << 24 >>> 24))));
				d.o = d.o + ($copySlice($subslice(new sliceType(d.output), d.o), $subslice(new sliceType(d.output), i))) >> 0;
				if (!((d.last === 65535))) {
					(x$12 = d.suffix, x$13 = d.hi, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13] = ((c << 24 >>> 24))));
					(x$14 = d.prefix, x$15 = d.hi, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15] = d.last));
				}
			} else {
				d.err = errors.New("lzw: invalid code");
				/* break loop; */ $s = 2; continue s;
			}
			_tmp$2 = code;
			_tmp$3 = d.hi + 1 << 16 >>> 16;
			d.last = _tmp$2;
			d.hi = _tmp$3;
			if (d.hi >= d.overflow) {
				if (d.width === 12) {
					d.last = 65535;
				} else {
					d.width = d.width + (1) >>> 0;
					d.overflow = (y$1 = (1), y$1 < 32 ? (d.overflow << y$1) : 0) << 16 >>> 16;
				}
			}
			if (d.o >= 4096) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		d.toRead = $subslice(new sliceType(d.output), 0, d.o);
		d.o = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.c = c; $f.code = code; $f.d = d; $f.err = err; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decode = function() { return this.$val.decode(); };
	decoder.ptr.prototype.Close = function() {
		var $ptr, d;
		d = this;
		d.err = errClosed;
		return $ifaceNil;
	};
	decoder.prototype.Close = function() { return this.$val.Close(); };
	NewReader = function(r, order, litWidth) {
		var $ptr, _1, _r, _tmp, _tmp$1, _tuple, br, d, litWidth, ok, order, r, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; br = $f.br; d = $f.d; litWidth = $f.litWidth; ok = $f.ok; order = $f.order; r = $f.r; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, 0, 0, 0, $throwNilPointerError, 0, $ifaceNil, 0, 0, 0, 0, 0, arrayType.zero(), arrayType$1.zero(), arrayType$2.zero(), 0, sliceType.nil);
		_1 = order;
		if (_1 === (0)) {
			d.read = $methodExpr(ptrType, "readLSB");
		} else if (_1 === (1)) {
			d.read = $methodExpr(ptrType, "readMSB");
		} else {
			d.err = errors.New("lzw: unknown order");
			$s = -1; return d;
		}
		/* */ if (litWidth < 2 || 8 < litWidth) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (litWidth < 2 || 8 < litWidth) { */ case 1:
			_r = fmt.Errorf("lzw: litWidth %d out of range", new sliceType$1([new $Int(litWidth)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			d.err = _r;
			$s = -1; return d;
		/* } */ case 2:
		_tuple = $assertType(r, io.ByteReader, true);
		br = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			d.r = br;
		} else {
			d.r = bufio.NewReader(r);
		}
		d.litWidth = litWidth;
		d.width = 1 + ((litWidth >>> 0)) >>> 0;
		d.clear = (y = ((litWidth >>> 0)), y < 32 ? (1 << y) : 0) << 16 >>> 16;
		_tmp = d.clear + 1 << 16 >>> 16;
		_tmp$1 = d.clear + 1 << 16 >>> 16;
		d.eof = _tmp;
		d.hi = _tmp$1;
		d.overflow = (y$1 = d.width, y$1 < 32 ? (1 << y$1) : 0) << 16 >>> 16;
		d.last = 65535;
		$s = -1; return d;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.br = br; $f.d = d; $f.litWidth = litWidth; $f.ok = ok; $f.order = order; $f.r = r; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "readLSB", name: "readLSB", pkg: "compress/lzw", typ: $funcType([], [$Uint16, $error], false)}, {prop: "readMSB", name: "readMSB", pkg: "compress/lzw", typ: $funcType([], [$Uint16, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "decode", name: "decode", pkg: "compress/lzw", typ: $funcType([], [], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	decoder.init("compress/lzw", [{prop: "r", name: "r", exported: false, typ: io.ByteReader, tag: ""}, {prop: "bits", name: "bits", exported: false, typ: $Uint32, tag: ""}, {prop: "nBits", name: "nBits", exported: false, typ: $Uint, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Uint, tag: ""}, {prop: "read", name: "read", exported: false, typ: funcType, tag: ""}, {prop: "litWidth", name: "litWidth", exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "clear", name: "clear", exported: false, typ: $Uint16, tag: ""}, {prop: "eof", name: "eof", exported: false, typ: $Uint16, tag: ""}, {prop: "hi", name: "hi", exported: false, typ: $Uint16, tag: ""}, {prop: "overflow", name: "overflow", exported: false, typ: $Uint16, tag: ""}, {prop: "last", name: "last", exported: false, typ: $Uint16, tag: ""}, {prop: "suffix", name: "suffix", exported: false, typ: arrayType, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: arrayType$1, tag: ""}, {prop: "output", name: "output", exported: false, typ: arrayType$2, tag: ""}, {prop: "o", name: "o", exported: false, typ: $Int, tag: ""}, {prop: "toRead", name: "toRead", exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errClosed = errors.New("lzw: reader/writer is closed");
		errOutOfCodes = errors.New("lzw: out of codes");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/gif"] = (function() {
	var $pkg = {}, $init, bufio, bytes, lzw, errors, fmt, image, color, palette, draw, io, reader, decoder, blockReader, interlaceScan, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, ptrType, sliceType$4, sliceType$5, arrayType$1, ptrType$4, ptrType$5, errNotEnough, errTooMuch, errBadPixel, interlacing, readFull, readByte, uninterlace, Decode, DecodeConfig, init;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	lzw = $packages["compress/lzw"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	image = $packages["image"];
	color = $packages["image/color"];
	palette = $packages["image/color/palette"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(8, $kindInterface, "gif.reader", true, "image/gif", false, null);
	decoder = $pkg.decoder = $newType(0, $kindStruct, "gif.decoder", true, "image/gif", false, function(r_, vers_, width_, height_, loopCount_, delayTime_, backgroundIndex_, disposalMethod_, imageFields_, transparentIndex_, hasTransparentIndex_, globalColorTable_, delay_, disposal_, image_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.vers = "";
			this.width = 0;
			this.height = 0;
			this.loopCount = 0;
			this.delayTime = 0;
			this.backgroundIndex = 0;
			this.disposalMethod = 0;
			this.imageFields = 0;
			this.transparentIndex = 0;
			this.hasTransparentIndex = false;
			this.globalColorTable = color.Palette.nil;
			this.delay = sliceType$4.nil;
			this.disposal = sliceType$1.nil;
			this.image = sliceType$5.nil;
			this.tmp = arrayType$1.zero();
			return;
		}
		this.r = r_;
		this.vers = vers_;
		this.width = width_;
		this.height = height_;
		this.loopCount = loopCount_;
		this.delayTime = delayTime_;
		this.backgroundIndex = backgroundIndex_;
		this.disposalMethod = disposalMethod_;
		this.imageFields = imageFields_;
		this.transparentIndex = transparentIndex_;
		this.hasTransparentIndex = hasTransparentIndex_;
		this.globalColorTable = globalColorTable_;
		this.delay = delay_;
		this.disposal = disposal_;
		this.image = image_;
		this.tmp = tmp_;
	});
	blockReader = $pkg.blockReader = $newType(0, $kindStruct, "gif.blockReader", true, "image/gif", false, function(r_, slice_, err_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.slice = sliceType$1.nil;
			this.err = $ifaceNil;
			this.tmp = arrayType.zero();
			return;
		}
		this.r = r_;
		this.slice = slice_;
		this.err = err_;
		this.tmp = tmp_;
	});
	interlaceScan = $pkg.interlaceScan = $newType(0, $kindStruct, "gif.interlaceScan", true, "image/gif", false, function(skip_, start_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.skip = 0;
			this.start = 0;
			return;
		}
		this.skip = skip_;
		this.start = start_;
	});
	sliceType = $sliceType(interlaceScan);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType(color.Color);
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(image.Paletted);
	sliceType$4 = $sliceType($Int);
	sliceType$5 = $sliceType(ptrType);
	arrayType$1 = $arrayType($Uint8, 1024);
	ptrType$4 = $ptrType(decoder);
	ptrType$5 = $ptrType(blockReader);
	readFull = function(r, b) {
		var $ptr, _r, _tuple, b, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = io.ReadFull(r, b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if ($interfaceIsEqual(err, io.EOF)) {
			err = io.ErrUnexpectedEOF;
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: readFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	readByte = function(r) {
		var $ptr, _r, _tuple, b, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, io.EOF)) {
			err = io.ErrUnexpectedEOF;
		}
		$s = -1; return [b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readByte }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	blockReader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tuple, b, blockLen, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; b = $f.b; blockLen = $f.blockLen; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return [0, b.err];
		}
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		/* */ if (b.slice.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.slice.$length === 0) { */ case 1:
			blockLen = 0;
			_r = b.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			blockLen = _tuple[0];
			b.err = _tuple[1];
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.err];
			}
			if (blockLen === 0) {
				b.err = io.EOF;
				$s = -1; return [0, b.err];
			}
			b.slice = $subslice(new sliceType$1(b.tmp), 0, blockLen);
			_r$1 = readFull(b.r, b.slice); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b.err = _r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.err];
			}
		/* } */ case 2:
		n = $copySlice(p, b.slice);
		b.slice = $subslice(b.slice, n);
		$s = -1; return [n, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: blockReader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.b = b; $f.blockLen = blockLen; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	blockReader.prototype.Read = function(p) { return this.$val.Read(p); };
	decoder.ptr.prototype.decode = function(r, configOnly) {
		var $ptr, _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, br, c, configOnly, d, err, err$1, err$2, err$3, err$4, i, litWidth, lzwr, m, n, n$1, ok, p, pixel, r, rr, ti, useLocalColorTable, x, x$1, x$2, x$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; br = $f.br; c = $f.c; configOnly = $f.configOnly; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; litWidth = $f.litWidth; lzwr = $f.lzwr; m = $f.m; n = $f.n; n$1 = $f.n$1; ok = $f.ok; p = $f.p; pixel = $f.pixel; r = $f.r; rr = $f.rr; ti = $f.ti; useLocalColorTable = $f.useLocalColorTable; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		_tuple = $assertType(r, reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			d.r = rr;
		} else {
			d.r = bufio.NewReader(r);
		}
		_r = d.readHeaderAndScreenDescriptor(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (configOnly) {
			$s = -1; return $ifaceNil;
		}
		/* while (true) { */ case 2:
			_r$1 = readByte(d.r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			c = _tuple$1[0];
			err$1 = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
				_r$2 = fmt.Errorf("gif: reading frames: %v", new sliceType$2([err$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } */ case 6:
				_1 = c;
				/* */ if (_1 === (33)) { $s = 9; continue; }
				/* */ if (_1 === (44)) { $s = 10; continue; }
				/* */ if (_1 === (59)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (33)) { */ case 9:
					_r$3 = d.readExtension(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err$1 = _r$3;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					$s = 13; continue;
				/* } else if (_1 === (44)) { */ case 10:
					_r$4 = d.newImageFromDescriptor(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$2 = _r$4;
					m = _tuple$2[0];
					err$2 = _tuple$2[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					useLocalColorTable = !((((d.imageFields & 128) >>> 0) === 0));
					/* */ if (useLocalColorTable) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (useLocalColorTable) { */ case 16:
						_r$5 = d.readColorTable(d.imageFields); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_tuple$3 = _r$5;
						m.Palette = _tuple$3[0];
						err$2 = _tuple$3[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return err$2;
						}
						$s = 18; continue;
					/* } else { */ case 17:
						if (d.globalColorTable === color.Palette.nil) {
							$s = -1; return errors.New("gif: no color table");
						}
						m.Palette = d.globalColorTable;
					/* } */ case 18:
					if (d.hasTransparentIndex) {
						if (!useLocalColorTable) {
							m.Palette = $appendSlice((color.Palette.nil), (x = d.globalColorTable, $subslice(new sliceType$3(x.$array), x.$offset, x.$offset + x.$length)));
						}
						ti = ((d.transparentIndex >> 0));
						if (ti < m.Palette.$length) {
							(x$2 = m.Palette, ((ti < 0 || ti >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ti] = (x$1 = new color.RGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1))));
						} else {
							p = $makeSlice(color.Palette, (ti + 1 >> 0));
							$copySlice(p, m.Palette);
							i = m.Palette.$length;
							while (true) {
								if (!(i < p.$length)) { break; }
								((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = (x$3 = new color.RGBA.ptr(0, 0, 0, 0), new x$3.constructor.elem(x$3)));
								i = i + (1) >> 0;
							}
							m.Palette = p;
						}
					}
					_r$6 = readByte(d.r); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$4 = _r$6;
					litWidth = _tuple$4[0];
					err$2 = _tuple$4[1];
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
						_r$7 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$2])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$s = -1; return _r$7;
					/* } */ case 22:
					/* */ if (litWidth < 2 || litWidth > 8) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (litWidth < 2 || litWidth > 8) { */ case 24:
						_r$8 = fmt.Errorf("gif: pixel size in decode out of range: %d", new sliceType$2([new $Uint8(litWidth)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$s = -1; return _r$8;
					/* } */ case 25:
					br = new blockReader.ptr(d.r, sliceType$1.nil, $ifaceNil, arrayType.zero());
					_r$9 = lzw.NewReader(br, 0, ((litWidth >> 0))); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					lzwr = _r$9;
					$deferred.push([$methodVal(lzwr, "Close"), []]);
					_r$10 = readFull(lzwr, m.Pix); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$2 = _r$10;
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 29:
						/* */ if (!($interfaceIsEqual(err$2, io.ErrUnexpectedEOF))) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (!($interfaceIsEqual(err$2, io.ErrUnexpectedEOF))) { */ case 31:
							_r$11 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$2])); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							$s = -1; return _r$11;
						/* } */ case 32:
						$s = -1; return errNotEnough;
					/* } */ case 30:
					_r$12 = lzwr.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 34; case 34: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$5 = _r$12;
					n = _tuple$5[0];
					err$3 = _tuple$5[1];
					/* */ if (!((n === 0)) || (!($interfaceIsEqual(err$3, io.EOF)) && !($interfaceIsEqual(err$3, io.ErrUnexpectedEOF)))) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (!((n === 0)) || (!($interfaceIsEqual(err$3, io.EOF)) && !($interfaceIsEqual(err$3, io.ErrUnexpectedEOF)))) { */ case 35:
						/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 37; continue; }
						/* */ $s = 38; continue;
						/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 37:
							_r$13 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$3])); /* */ $s = 39; case 39: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							$s = -1; return _r$13;
						/* } */ case 38:
						$s = -1; return errTooMuch;
					/* } */ case 36:
					_r$14 = br.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 40; case 40: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$6 = _r$14;
					n$1 = _tuple$6[0];
					err$4 = _tuple$6[1];
					/* */ if (!((n$1 === 0)) || !($interfaceIsEqual(err$4, io.EOF))) { $s = 41; continue; }
					/* */ $s = 42; continue;
					/* if (!((n$1 === 0)) || !($interfaceIsEqual(err$4, io.EOF))) { */ case 41:
						/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 43:
							_r$15 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$4])); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							$s = -1; return _r$15;
						/* } */ case 44:
						$s = -1; return errTooMuch;
					/* } */ case 42:
					if (m.Palette.$length < 256) {
						_ref = m.Pix;
						_i = 0;
						while (true) {
							if (!(_i < _ref.$length)) { break; }
							pixel = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
							if (((pixel >> 0)) >= m.Palette.$length) {
								$s = -1; return errBadPixel;
							}
							_i++;
						}
					}
					if (!((((d.imageFields & 64) >>> 0) === 0))) {
						uninterlace(m);
					}
					d.image = $append(d.image, m);
					d.delay = $append(d.delay, d.delayTime);
					d.disposal = $append(d.disposal, d.disposalMethod);
					d.delayTime = 0;
					d.hasTransparentIndex = false;
					$s = 13; continue;
				/* } else if (_1 === (59)) { */ case 11:
					/* */ if (d.image.$length === 0) { $s = 46; continue; }
					/* */ $s = 47; continue;
					/* if (d.image.$length === 0) { */ case 46:
						_r$16 = fmt.Errorf("gif: missing image data", new sliceType$2([])); /* */ $s = 48; case 48: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						$s = -1; return _r$16;
					/* } */ case 47:
					$s = -1; return $ifaceNil;
				/* } else { */ case 12:
					_r$17 = fmt.Errorf("gif: unknown block type: 0x%.2x", new sliceType$2([new $Uint8(c)])); /* */ $s = 49; case 49: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$s = -1; return _r$17;
				/* } */ case 13:
			case 8:
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.br = br; $f.c = c; $f.configOnly = configOnly; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.litWidth = litWidth; $f.lzwr = lzwr; $f.m = m; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.p = p; $f.pixel = pixel; $f.r = r; $f.rr = rr; $f.ti = ti; $f.useLocalColorTable = useLocalColorTable; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decoder.prototype.decode = function(r, configOnly) { return this.$val.decode(r, configOnly); };
	decoder.ptr.prototype.readHeaderAndScreenDescriptor = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, d, err, fields, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; err = $f.err; fields = $f.fields; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading header: %v", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		d.vers = ($bytesToString($subslice(new sliceType$1(d.tmp), 0, 6)));
		/* */ if (!(d.vers === "GIF87a") && !(d.vers === "GIF89a")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(d.vers === "GIF87a") && !(d.vers === "GIF89a")) { */ case 5:
			_r$2 = fmt.Errorf("gif: can't recognize format %q", new sliceType$2([new $String(d.vers)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		d.width = ((d.tmp[6] >> 0)) + (((d.tmp[7] >> 0)) << 8 >> 0) >> 0;
		d.height = ((d.tmp[8] >> 0)) + (((d.tmp[9] >> 0)) << 8 >> 0) >> 0;
		fields = d.tmp[10];
		/* */ if (!((((fields & 128) >>> 0) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((((fields & 128) >>> 0) === 0))) { */ case 8:
			d.backgroundIndex = d.tmp[11];
			_r$3 = d.readColorTable(fields); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			d.globalColorTable = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readHeaderAndScreenDescriptor }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.fields = fields; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readHeaderAndScreenDescriptor = function() { return this.$val.readHeaderAndScreenDescriptor(); };
	decoder.ptr.prototype.readColorTable = function(fields) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, d, err, fields, i, j, n, p, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; fields = $f.fields; i = $f.i; j = $f.j; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		n = (y = ((1 + ((((fields & 7) >>> 0) >>> 0)) >>> 0)), y < 32 ? (1 << y) : 0) >> 0;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, ($imul(3, n)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading color table: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [color.Palette.nil, _r$1];
		/* } */ case 3:
		_tmp = 0;
		_tmp$1 = $makeSlice(color.Palette, n);
		j = _tmp;
		p = _tmp$1;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = (x = new color.RGBA.ptr((x$1 = d.tmp, x$2 = j + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), (x$3 = d.tmp, x$4 = j + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), (x$5 = d.tmp, x$6 = j + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), 255), new x.constructor.elem(x)));
			j = j + (3) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readColorTable }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.fields = fields; $f.i = i; $f.j = j; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readColorTable = function(fields) { return this.$val.readColorTable(fields); };
	decoder.ptr.prototype.readExtension = function() {
		var $ptr, _1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, b, d, err, err$1, err$2, err$3, err$4, extension, n, n$1, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; extension = $f.extension; n = $f.n; n$1 = $f.n$1; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readByte(d.r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		extension = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		size = 0;
			_1 = extension;
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (249)) { $s = 7; continue; }
			/* */ if (_1 === (254)) { $s = 8; continue; }
			/* */ if (_1 === (255)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (1)) { */ case 6:
				size = 13;
				$s = 11; continue;
			/* } else if (_1 === (249)) { */ case 7:
				_r$2 = d.readGraphicControl(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (254)) { */ case 8:
				$s = 11; continue;
			/* } else if (_1 === (255)) { */ case 9:
				_r$3 = readByte(d.r); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				b = _tuple$1[0];
				err$1 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:
					_r$4 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$1])); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } */ case 15:
				size = ((b >> 0));
				$s = 11; continue;
			/* } else { */ case 10:
				_r$5 = fmt.Errorf("gif: unknown extension 0x%.2x", new sliceType$2([new $Uint8(extension)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 11:
		case 5:
		/* */ if (size > 0) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (size > 0) { */ case 18:
			_r$6 = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, size)); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err$2 = _r$6;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
				_r$7 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$2])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } */ case 22:
		/* } */ case 19:
		/* */ if ((extension === 255) && ($bytesToString($subslice(new sliceType$1(d.tmp), 0, size))) === "NETSCAPE2.0") { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ((extension === 255) && ($bytesToString($subslice(new sliceType$1(d.tmp), 0, size))) === "NETSCAPE2.0") { */ case 24:
			_r$8 = d.readBlock(); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$2 = _r$8;
			n = _tuple$2[0];
			err$3 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 27:
				_r$9 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$3])); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$s = -1; return _r$9;
			/* } */ case 28:
			if (n === 0) {
				$s = -1; return $ifaceNil;
			}
			if ((n === 3) && (d.tmp[0] === 1)) {
				d.loopCount = ((d.tmp[1] >> 0)) | (((d.tmp[2] >> 0)) << 8 >> 0);
			}
		/* } */ case 25:
		/* while (true) { */ case 30:
			_r$10 = d.readBlock(); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$3 = _r$10;
			n$1 = _tuple$3[0];
			err$4 = _tuple$3[1];
			/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 33:
				_r$11 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$4])); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$s = -1; return _r$11;
			/* } */ case 34:
			if (n$1 === 0) {
				$s = -1; return $ifaceNil;
			}
		/* } */ $s = 30; continue; case 31:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readExtension }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.extension = extension; $f.n = n; $f.n$1 = n$1; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readExtension = function() { return this.$val.readExtension(); };
	decoder.ptr.prototype.readGraphicControl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, d, err, flags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; err = $f.err; flags = $f.flags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 6)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: can't read graphic control: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		/* */ if (!((d.tmp[0] === 4))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((d.tmp[0] === 4))) { */ case 5:
			_r$2 = fmt.Errorf("gif: invalid graphic control extension block size: %d", new sliceType$2([new $Uint8(d.tmp[0])])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		flags = d.tmp[1];
		d.disposalMethod = (((flags & 28) >>> 0)) >>> 2 << 24 >>> 24;
		d.delayTime = ((d.tmp[2] >> 0)) | (((d.tmp[3] >> 0)) << 8 >> 0);
		if (!((((flags & 1) >>> 0) === 0))) {
			d.transparentIndex = d.tmp[4];
			d.hasTransparentIndex = true;
		}
		/* */ if (!((d.tmp[5] === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((d.tmp[5] === 0))) { */ case 8:
			_r$3 = fmt.Errorf("gif: invalid graphic control extension block terminator: %d", new sliceType$2([new $Uint8(d.tmp[5])])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readGraphicControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.err = err; $f.flags = flags; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readGraphicControl = function() { return this.$val.readGraphicControl(); };
	decoder.ptr.prototype.newImageFromDescriptor = function() {
		var $ptr, _r, _r$1, bounds, d, err, height, left, top, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; bounds = $f.bounds; d = $f.d; err = $f.err; height = $f.height; left = $f.left; top = $f.top; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 9)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: can't read image descriptor: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, _r$1];
		/* } */ case 3:
		left = ((d.tmp[0] >> 0)) + (((d.tmp[1] >> 0)) << 8 >> 0) >> 0;
		top = ((d.tmp[2] >> 0)) + (((d.tmp[3] >> 0)) << 8 >> 0) >> 0;
		width = ((d.tmp[4] >> 0)) + (((d.tmp[5] >> 0)) << 8 >> 0) >> 0;
		height = ((d.tmp[6] >> 0)) + (((d.tmp[7] >> 0)) << 8 >> 0) >> 0;
		d.imageFields = d.tmp[8];
		bounds = $clone(image.Rect(left, top, left + width >> 0, top + height >> 0), image.Rectangle);
		if (!($equal(bounds, $clone(bounds, image.Rectangle).Intersect($clone(image.Rect(0, 0, d.width, d.height), image.Rectangle)), image.Rectangle))) {
			$s = -1; return [ptrType.nil, errors.New("gif: frame bounds larger than image bounds")];
		}
		$s = -1; return [image.NewPaletted($clone(bounds, image.Rectangle), color.Palette.nil), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.newImageFromDescriptor }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.bounds = bounds; $f.d = d; $f.err = err; $f.height = height; $f.left = left; $f.top = top; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.newImageFromDescriptor = function() { return this.$val.newImageFromDescriptor(); };
	decoder.ptr.prototype.readBlock = function() {
		var $ptr, _r, _r$1, _tuple, d, err, err$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readByte(d.r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if ((n === 0) || !($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		_r$1 = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		$s = -1; return [((n >> 0)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readBlock }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readBlock = function() { return this.$val.readBlock(); };
	uninterlace = function(m) {
		var $ptr, _i, _ref, dx, dy, m, nOffset, nPix, offset, pass, y;
		nPix = sliceType$1.nil;
		dx = $clone(m.Bounds(), image.Rectangle).Dx();
		dy = $clone(m.Bounds(), image.Rectangle).Dy();
		nPix = $makeSlice(sliceType$1, ($imul(dx, dy)));
		offset = 0;
		_ref = interlacing;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pass = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), interlaceScan);
			nOffset = $imul(pass.start, dx);
			y = pass.start;
			while (true) {
				if (!(y < dy)) { break; }
				$copySlice($subslice(nPix, nOffset, (nOffset + dx >> 0)), $subslice(m.Pix, offset, (offset + dx >> 0)));
				offset = offset + (dx) >> 0;
				nOffset = nOffset + (($imul(dx, pass.skip))) >> 0;
				y = y + (pass.skip) >> 0;
			}
			_i++;
		}
		m.Pix = nPix;
	};
	Decode = function(r) {
		var $ptr, _r, d, err, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; err = $f.err; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, "", 0, 0, 0, 0, 0, 0, 0, 0, false, color.Palette.nil, sliceType$4.nil, sliceType$1.nil, sliceType$5.nil, arrayType$1.zero());
		_r = d.decode(r, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [(x = d.image, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.err = err; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var $ptr, _r, d, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, "", 0, 0, 0, 0, 0, 0, 0, 0, false, color.Palette.nil, sliceType$4.nil, sliceType$1.nil, sliceType$5.nil, arrayType$1.zero());
		_r = d.decode(r, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		$s = -1; return [new image.Config.ptr(d.globalColorTable, d.width, d.height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		var $ptr;
		image.RegisterFormat("gif", "GIF8?a", Decode, DecodeConfig);
	};
	ptrType$4.methods = [{prop: "decode", name: "decode", pkg: "image/gif", typ: $funcType([io.Reader, $Bool], [$error], false)}, {prop: "readHeaderAndScreenDescriptor", name: "readHeaderAndScreenDescriptor", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "readColorTable", name: "readColorTable", pkg: "image/gif", typ: $funcType([$Uint8], [color.Palette, $error], false)}, {prop: "readExtension", name: "readExtension", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "readGraphicControl", name: "readGraphicControl", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "newImageFromDescriptor", name: "newImageFromDescriptor", pkg: "image/gif", typ: $funcType([], [ptrType, $error], false)}, {prop: "readBlock", name: "readBlock", pkg: "image/gif", typ: $funcType([], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decoder.init("image/gif", [{prop: "r", name: "r", exported: false, typ: reader, tag: ""}, {prop: "vers", name: "vers", exported: false, typ: $String, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}, {prop: "loopCount", name: "loopCount", exported: false, typ: $Int, tag: ""}, {prop: "delayTime", name: "delayTime", exported: false, typ: $Int, tag: ""}, {prop: "backgroundIndex", name: "backgroundIndex", exported: false, typ: $Uint8, tag: ""}, {prop: "disposalMethod", name: "disposalMethod", exported: false, typ: $Uint8, tag: ""}, {prop: "imageFields", name: "imageFields", exported: false, typ: $Uint8, tag: ""}, {prop: "transparentIndex", name: "transparentIndex", exported: false, typ: $Uint8, tag: ""}, {prop: "hasTransparentIndex", name: "hasTransparentIndex", exported: false, typ: $Bool, tag: ""}, {prop: "globalColorTable", name: "globalColorTable", exported: false, typ: color.Palette, tag: ""}, {prop: "delay", name: "delay", exported: false, typ: sliceType$4, tag: ""}, {prop: "disposal", name: "disposal", exported: false, typ: sliceType$1, tag: ""}, {prop: "image", name: "image", exported: false, typ: sliceType$5, tag: ""}, {prop: "tmp", name: "tmp", exported: false, typ: arrayType$1, tag: ""}]);
	blockReader.init("image/gif", [{prop: "r", name: "r", exported: false, typ: reader, tag: ""}, {prop: "slice", name: "slice", exported: false, typ: sliceType$1, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "tmp", name: "tmp", exported: false, typ: arrayType, tag: ""}]);
	interlaceScan.init("image/gif", [{prop: "skip", name: "skip", exported: false, typ: $Int, tag: ""}, {prop: "start", name: "start", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = lzw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = palette.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errNotEnough = errors.New("gif: not enough image data");
		errTooMuch = errors.New("gif: too much image data");
		errBadPixel = errors.New("gif: invalid pixel value");
		interlacing = new sliceType([new interlaceScan.ptr(8, 0), new interlaceScan.ptr(8, 4), new interlaceScan.ptr(4, 2), new interlaceScan.ptr(2, 1)]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/adler32"] = (function() {
	var $pkg = {}, $init, hash, digest, ptrType, sliceType, New, update, Checksum;
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(4, $kindUint32, "adler32.digest", true, "hash/adler32", false, null);
	ptrType = $ptrType(digest);
	sliceType = $sliceType($Uint8);
	$ptrType(digest).prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.$set(1);
	};
	New = function() {
		var $ptr, d;
		d = $newDataPointer(0, ptrType);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	$ptrType(digest).prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	$ptrType(digest).prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	update = function(d, p) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, d, p, q, s1, s2, x;
		_tmp = ((((d & 65535) >>> 0) >>> 0));
		_tmp$1 = (((d >>> 16 >>> 0) >>> 0));
		s1 = _tmp;
		s2 = _tmp$1;
		while (true) {
			if (!(p.$length > 0)) { break; }
			q = sliceType.nil;
			if (p.$length > 5552) {
				_tmp$2 = $subslice(p, 0, 5552);
				_tmp$3 = $subslice(p, 5552);
				p = _tmp$2;
				q = _tmp$3;
			}
			while (true) {
				if (!(p.$length >= 4)) { break; }
				s1 = s1 + ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				p = $subslice(p, 4);
			}
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				s1 = s1 + (((x >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				_i++;
			}
			s1 = (_r = s1 % (65521), _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			s2 = (_r$1 = s2 % (65521), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			p = q;
		}
		return (((((s2 << 16 >>> 0) | s1) >>> 0) >>> 0));
	};
	$ptrType(digest).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, d, err, nn, p;
		nn = 0;
		err = $ifaceNil;
		d = this;
		d.$set(update(d.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		nn = _tmp;
		err = _tmp$1;
		return [nn, err];
	};
	$ptrType(digest).prototype.Sum32 = function() {
		var $ptr, d;
		d = this;
		return ((d.$get() >>> 0));
	};
	$ptrType(digest).prototype.Sum = function(in$1) {
		var $ptr, d, in$1, s;
		d = this;
		s = ((d.$get() >>> 0));
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	Checksum = function(data) {
		var $ptr, data;
		return ((update(1, data) >>> 0));
	};
	$pkg.Checksum = Checksum;
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/zlib"] = (function() {
	var $pkg = {}, $init, bufio, flate, errors, fmt, hash, adler32, io, reader, sliceType, arrayType, ptrType$2, NewReader, NewReaderDict;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	adler32 = $packages["hash/adler32"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(0, $kindStruct, "zlib.reader", true, "compress/zlib", false, function(r_, decompressor_, digest_, err_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = $ifaceNil;
			this.err = $ifaceNil;
			this.scratch = arrayType.zero();
			return;
		}
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.err = err_;
		this.scratch = scratch_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(reader);
	NewReader = function(r) {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewReaderDict(r, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var $ptr, _r, dict, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; dict = $f.dict; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new reader.ptr($ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, arrayType.zero());
		_r = z.Reset(r, dict); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.$ptr = $ptr; $f._r = _r; $f.dict = dict; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, checksum, err, n, p, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; checksum = $f.checksum; err = $f.err; n = $f.n; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return [0, z.err];
		}
		n = 0;
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = z.digest.Write($subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return [n, z.err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			z.err = err;
			$s = -1; return [n, z.err];
		}
		checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
		_r$3 = z.digest.Sum32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((checksum === _r$3))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((checksum === _r$3))) { */ case 4:
			z.err = $pkg.ErrChecksum;
			$s = -1; return [n, z.err];
		/* } */ case 5:
		$s = -1; return [n, io.EOF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.checksum = checksum; $f.err = err; $f.n = n; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Read = function(p) { return this.$val.Read(p); };
	reader.ptr.prototype.Close = function() {
		var $ptr, _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil)) && !($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return z.err;
		}
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.err = _r;
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Close = function() { return this.$val.Close(); };
	reader.ptr.prototype.Reset = function(r, dict) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, checksum, dict, fr, h, haveDict, ok, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; checksum = $f.checksum; dict = $f.dict; fr = $f.fr; h = $f.h; haveDict = $f.haveDict; ok = $f.ok; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		reader.copy(z, new reader.ptr($ifaceNil, z.decompressor, $ifaceNil, $ifaceNil, arrayType.zero()));
		_tuple = $assertType(r, flate.Reader, true);
		fr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = fr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		z.err = _tuple$1[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			if ($interfaceIsEqual(z.err, io.EOF)) {
				z.err = io.ErrUnexpectedEOF;
			}
			$s = -1; return z.err;
		}
		h = ((((z.scratch[0] >>> 0)) << 8 >>> 0) | ((z.scratch[1] >>> 0))) >>> 0;
		if ((!((((z.scratch[0] & 15) >>> 0) === 8))) || (!(((_r$1 = h % 31, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)))) {
			z.err = $pkg.ErrHeader;
			$s = -1; return z.err;
		}
		haveDict = !((((z.scratch[1] & 32) >>> 0) === 0));
		/* */ if (haveDict) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (haveDict) { */ case 2:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			z.err = _tuple$2[1];
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				if ($interfaceIsEqual(z.err, io.EOF)) {
					z.err = io.ErrUnexpectedEOF;
				}
				$s = -1; return z.err;
			}
			checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
			if (!((checksum === adler32.Checksum(dict)))) {
				z.err = $pkg.ErrDictionary;
				$s = -1; return z.err;
			}
		/* } */ case 3:
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 5:
			/* */ if (haveDict) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (haveDict) { */ case 8:
				_r$3 = flate.NewReaderDict(z.r, dict); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				z.decompressor = _r$3;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$4 = flate.NewReader(z.r); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				z.decompressor = _r$4;
			/* } */ case 10:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$5 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, dict); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 7:
		z.digest = adler32.New();
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.checksum = checksum; $f.dict = dict; $f.fr = fr; $f.h = h; $f.haveDict = haveDict; $f.ok = ok; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType], [$error], false)}];
	reader.init("compress/zlib", [{prop: "r", name: "r", exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", exported: false, typ: hash.Hash32, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "scratch", name: "scratch", exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = adler32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("zlib: invalid checksum");
		$pkg.ErrDictionary = errors.New("zlib: invalid dictionary");
		$pkg.ErrHeader = errors.New("zlib: invalid header");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/png"] = (function() {
	var $pkg = {}, $init, bufio, zlib, binary, fmt, hash, crc32, image, color, io, strconv, interlaceScan, decoder, FormatError, UnsupportedError, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, arrayType, arrayType$1, arrayType$2, ptrType$11, interlacing, chunkOrderError, abs, filterPaeth, cbPaletted, min, Decode, DecodeConfig, init;
	bufio = $packages["bufio"];
	zlib = $packages["compress/zlib"];
	binary = $packages["encoding/binary"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	crc32 = $packages["hash/crc32"];
	image = $packages["image"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	interlaceScan = $pkg.interlaceScan = $newType(0, $kindStruct, "png.interlaceScan", true, "image/png", false, function(xFactor_, yFactor_, xOffset_, yOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xFactor = 0;
			this.yFactor = 0;
			this.xOffset = 0;
			this.yOffset = 0;
			return;
		}
		this.xFactor = xFactor_;
		this.yFactor = yFactor_;
		this.xOffset = xOffset_;
		this.yOffset = yOffset_;
	});
	decoder = $pkg.decoder = $newType(0, $kindStruct, "png.decoder", true, "image/png", false, function(r_, img_, crc_, width_, height_, depth_, palette_, cb_, stage_, idatLength_, tmp_, interlace_, useTransparent_, transparent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.img = $ifaceNil;
			this.crc = $ifaceNil;
			this.width = 0;
			this.height = 0;
			this.depth = 0;
			this.palette = color.Palette.nil;
			this.cb = 0;
			this.stage = 0;
			this.idatLength = 0;
			this.tmp = arrayType$1.zero();
			this.interlace = 0;
			this.useTransparent = false;
			this.transparent = arrayType$2.zero();
			return;
		}
		this.r = r_;
		this.img = img_;
		this.crc = crc_;
		this.width = width_;
		this.height = height_;
		this.depth = depth_;
		this.palette = palette_;
		this.cb = cb_;
		this.stage = stage_;
		this.idatLength = idatLength_;
		this.tmp = tmp_;
		this.interlace = interlace_;
		this.useTransparent = useTransparent_;
		this.transparent = transparent_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "png.FormatError", true, "image/png", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "png.UnsupportedError", true, "image/png", true, null);
	sliceType = $sliceType(interlaceScan);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType(image.Gray);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.NRGBA);
	ptrType$4 = $ptrType(image.Gray16);
	ptrType$5 = $ptrType(image.RGBA64);
	ptrType$6 = $ptrType(image.NRGBA64);
	ptrType$7 = $ptrType(image.Alpha);
	ptrType$8 = $ptrType(image.Alpha16);
	arrayType = $arrayType($Uint8, 4096);
	arrayType$1 = $arrayType($Uint8, 768);
	arrayType$2 = $arrayType($Uint8, 6);
	ptrType$11 = $ptrType(decoder);
	abs = function(x) {
		var $ptr, m, x;
		m = x >> 31 >> 0;
		return (((x ^ m) >> 0)) - m >> 0;
	};
	filterPaeth = function(cdat, pdat, bytesPerPixel) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, a, b, bytesPerPixel, c, cdat, i, j, pa, pb, pc, pdat;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		pa = _tmp$3;
		pb = _tmp$4;
		pc = _tmp$5;
		i = 0;
		while (true) {
			if (!(i < bytesPerPixel)) { break; }
			_tmp$6 = 0;
			_tmp$7 = 0;
			a = _tmp$6;
			c = _tmp$7;
			j = i;
			while (true) {
				if (!(j < cdat.$length)) { break; }
				b = ((((j < 0 || j >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + j]) >> 0));
				pa = b - c >> 0;
				pb = a - c >> 0;
				pc = abs(pa + pb >> 0);
				pa = abs(pa);
				pb = abs(pb);
				if (pa <= pb && pa <= pc) {
				} else if (pb <= pc) {
					a = b;
				} else {
					a = c;
				}
				a = a + (((((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j]) >> 0))) >> 0;
				a = a & (255);
				((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j] = ((a << 24 >>> 24)));
				c = b;
				j = j + (bytesPerPixel) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	cbPaletted = function(cb) {
		var $ptr, cb;
		return 7 <= cb && cb <= 10;
	};
	FormatError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "png: invalid format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "png: unsupported feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	decoder.ptr.prototype.parseIHDR = function(length) {
		var $ptr, _1, _2, _3, _4, _5, _6, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, d, err, h, length, nPixels, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; err = $f.err; h = $f.h; length = $f.length; nPixels = $f.nPixels; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 13))) {
			$s = -1; return new FormatError("bad IHDR length");
		}
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!((d.tmp[10] === 0))) {
			$s = -1; return new UnsupportedError("compression method");
		}
		if (!((d.tmp[11] === 0))) {
			$s = -1; return new UnsupportedError("filter method");
		}
		if (!((d.tmp[12] === 0)) && !((d.tmp[12] === 1))) {
			$s = -1; return new FormatError("invalid interlace method");
		}
		d.interlace = ((d.tmp[12] >> 0));
		w = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) >> 0));
		h = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 4, 8)) >> 0));
		if (w <= 0 || h <= 0) {
			$s = -1; return new FormatError("non-positive dimension");
		}
		nPixels = $mul64((new $Int64(0, w)), (new $Int64(0, h)));
		if (!((x = (new $Int64(0, (((nPixels.$low + ((nPixels.$high >> 31) * 4294967296)) >> 0)))), (nPixels.$high === x.$high && nPixels.$low === x.$low)))) {
			$s = -1; return new UnsupportedError("dimension overflow");
		}
		d.cb = 0;
		d.depth = ((d.tmp[8] >> 0));
		_1 = d.depth;
		if (_1 === (1)) {
			_2 = d.tmp[9];
			if (_2 === (0)) {
				d.cb = 1;
			} else if (_2 === (3)) {
				d.cb = 7;
			}
		} else if (_1 === (2)) {
			_3 = d.tmp[9];
			if (_3 === (0)) {
				d.cb = 2;
			} else if (_3 === (3)) {
				d.cb = 8;
			}
		} else if (_1 === (4)) {
			_4 = d.tmp[9];
			if (_4 === (0)) {
				d.cb = 3;
			} else if (_4 === (3)) {
				d.cb = 9;
			}
		} else if (_1 === (8)) {
			_5 = d.tmp[9];
			if (_5 === (0)) {
				d.cb = 4;
			} else if (_5 === (2)) {
				d.cb = 6;
			} else if (_5 === (3)) {
				d.cb = 10;
			} else if (_5 === (4)) {
				d.cb = 5;
			} else if (_5 === (6)) {
				d.cb = 11;
			}
		} else if (_1 === (16)) {
			_6 = d.tmp[9];
			if (_6 === (0)) {
				d.cb = 12;
			} else if (_6 === (2)) {
				d.cb = 14;
			} else if (_6 === (4)) {
				d.cb = 13;
			} else if (_6 === (6)) {
				d.cb = 15;
			}
		}
		/* */ if (d.cb === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.cb === 0) { */ case 3:
			_r$2 = fmt.Sprintf("bit depth %d, color type %d", new sliceType$2([new $Uint8(d.tmp[8]), new $Uint8(d.tmp[9])])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$2));
		/* } */ case 4:
		_tmp = ((w >> 0));
		_tmp$1 = ((h >> 0));
		d.width = _tmp;
		d.height = _tmp$1;
		_r$3 = d.verifyChecksum(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIHDR }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.h = h; $f.length = length; $f.nPixels = nPixels; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIHDR = function(length) { return this.$val.parseIHDR(length); };
	decoder.ptr.prototype.parsePLTE = function(length) {
		var $ptr, _1, _q, _r, _r$1, _r$2, _r$3, _tuple, d, err, i, i$1, length, n, np, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; i$1 = $f.i$1; length = $f.length; n = $f.n; np = $f.np; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		np = (((_q = length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		if (!(((_r = length % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0)) || np <= 0 || np > 256 || np > ((y = ((d.depth >>> 0)), y < 32 ? (1 << y) : 0) >> 0)) {
			$s = -1; return new FormatError("bad PLTE length");
		}
		_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, ($imul(3, np)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_1 = d.cb;
		if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			d.palette = $makeSlice(color.Palette, 256);
			i = 0;
			while (true) {
				if (!(i < np)) { break; }
				(x$7 = d.palette, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i] = (x = new color.RGBA.ptr((x$1 = d.tmp, x$2 = ($imul(3, i)) + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), (x$3 = d.tmp, x$4 = ($imul(3, i)) + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), (x$5 = d.tmp, x$6 = ($imul(3, i)) + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), 255), new x.constructor.elem(x))));
				i = i + (1) >> 0;
			}
			i$1 = np;
			while (true) {
				if (!(i$1 < 256)) { break; }
				(x$9 = d.palette, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = (x$8 = new color.RGBA.ptr(0, 0, 0, 255), new x$8.constructor.elem(x$8))));
				i$1 = i$1 + (1) >> 0;
			}
			d.palette = $subslice(d.palette, 0, np);
		} else if ((_1 === (6)) || (_1 === (11)) || (_1 === (14)) || (_1 === (15))) {
		} else {
			$s = -1; return new FormatError("PLTE, color type mismatch");
		}
		_r$3 = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsePLTE }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.length = length; $f.n = n; $f.np = np; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsePLTE = function(length) { return this.$val.parsePLTE(length); };
	decoder.ptr.prototype.parsetRNS = function(length) {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, d, err, err$1, err$2, i, length, n, n$1, n$2, rgba, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; length = $f.length; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; rgba = $f.rgba; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_1 = d.cb;
			/* */ if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { $s = 2; continue; }
			/* */ if ((_1 === (6)) || (_1 === (14))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { */ case 2:
				if (!((length === 2))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				_2 = d.cb;
				if (_2 === (1)) {
					d.transparent[1] = (d.transparent[1] * (255) << 24 >>> 24);
				} else if (_2 === (2)) {
					d.transparent[1] = (d.transparent[1] * (85) << 24 >>> 24);
				} else if (_2 === (3)) {
					d.transparent[1] = (d.transparent[1] * (17) << 24 >>> 24);
				}
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (6)) || (_1 === (14))) { */ case 3:
				if (!((length === 6))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$2 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				n$1 = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				_r$3 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { */ case 4:
				if (length > 256) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$4 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$2 = _r$4;
				n$2 = _tuple$2[0];
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
				}
				_r$5 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$2)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if (d.palette.$length < n$2) {
					d.palette = $subslice(d.palette, 0, n$2);
				}
				i = 0;
				while (true) {
					if (!(i < n$2)) { break; }
					rgba = $clone($assertType((x = d.palette, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), color.RGBA), color.RGBA);
					(x$3 = d.palette, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$1 = new color.NRGBA.ptr(rgba.R, rgba.G, rgba.B, (x$2 = d.tmp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]))), new x$1.constructor.elem(x$1))));
					i = i + (1) >> 0;
				}
				$s = 6; continue;
			/* } else { */ case 5:
				$s = -1; return new FormatError("tRNS, color type mismatch");
			/* } */ case 6:
		case 1:
		_r$6 = d.verifyChecksum(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsetRNS }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.length = length; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.rgba = rgba; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsetRNS = function(length) { return this.$val.parsetRNS(length); };
	decoder.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, d, err, err$1, err$2, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		/* while (true) { */ case 1:
			/* if (!(d.idatLength === 0)) { break; } */ if(!(d.idatLength === 0)) { $s = 2; continue; }
			_r = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [0, err$1];
			}
			d.idatLength = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
			if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8))) === "IDAT")) {
				$s = -1; return [0, new FormatError("not enough pixel data")];
			}
			$r = d.crc.Reset(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		if (((d.idatLength >> 0)) < 0) {
			$s = -1; return [0, new UnsupportedError("IDAT chunk length overflow")];
		}
		_r$3 = d.r.Read($subslice(p, 0, min(p.$length, ((d.idatLength >> 0))))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		n = _tuple$1[0];
		err$2 = _tuple$1[1];
		_r$4 = d.crc.Write($subslice(p, 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		d.idatLength = d.idatLength - (((n >>> 0))) >>> 0;
		$s = -1; return [n, err$2];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.Read = function(p) { return this.$val.Read(p); };
	decoder.ptr.prototype.decode = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, err, err$1, i, imagePass, img, n, pass, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; d = $f.d; err = $f.err; err$1 = $f.err$1; i = $f.i; imagePass = $f.imagePass; img = $f.img; n = $f.n; pass = $f.pass; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		_r = zlib.NewReader(d); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$deferred.push([$methodVal(r, "Close"), []]);
		img = $ifaceNil;
		/* */ if (d.interlace === 0) { $s = 2; continue; }
		/* */ if (d.interlace === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.interlace === 0) { */ case 2:
			_r$1 = d.readImagePass(r, 0, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			img = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			$s = 4; continue;
		/* } else if (d.interlace === 1) { */ case 3:
			_r$2 = d.readImagePass($ifaceNil, 0, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			img = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			pass = 0;
			/* while (true) { */ case 7:
				/* if (!(pass < 7)) { break; } */ if(!(pass < 7)) { $s = 8; continue; }
				_r$3 = d.readImagePass(r, pass, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				imagePass = _tuple$3[0];
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [$ifaceNil, err$1];
				}
				/* */ if (!($interfaceIsEqual(imagePass, $ifaceNil))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!($interfaceIsEqual(imagePass, $ifaceNil))) { */ case 10:
					$r = d.mergePassInto(img, imagePass, pass); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				pass = pass + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		n = 0;
		i = 0;
		/* while (true) { */ case 13:
			/* if (!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
			if (i === 100) {
				$s = -1; return [$ifaceNil, io.ErrNoProgress];
			}
			_r$4 = r.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$4 = _r$4;
			n = _tuple$4[0];
			err = _tuple$4[1];
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		/* */ if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { */ case 16:
			_r$5 = err.Error(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, new FormatError((_r$5))];
		/* } */ case 17:
		if (!((n === 0)) || !((d.idatLength === 0))) {
			$s = -1; return [$ifaceNil, new FormatError("too much pixel data")];
		}
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.imagePass = imagePass; $f.img = img; $f.n = n; $f.pass = pass; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decoder.prototype.decode = function() { return this.$val.decode(); };
	decoder.ptr.prototype.readImagePass = function(r, pass, allocateOnly) {
		var $ptr, _1, _2, _3, _i, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, acol, acol$1, acol$2, acol$3, acol$4, acol$5, acol$6, allocateOnly, b, b$1, b$2, b$3, b$4, b$5, b$6, b$7, b$8, b$9, bcol, bcol$1, bcol$2, bitsPerPixel, bytesPerPixel, cdat, cr, d, err, g, gcol, gcol$1, gcol$2, gray, gray16, height, i, i$1, i$2, i$3, i$4, i$5, idx, idx$1, idx$2, img, j, j$1, nrgba, nrgba64, p, p$1, paletted, pass, pdat, pix, pix$1, pixOffset, pr, r, r$1, rcol, rcol$1, rcol$2, rgba, rgba64, rowSize, tb, tb$1, tg, tg$1, tr, tr$1, ty, ty$1, ty$2, ty$3, width, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$8, x$9, x2, x2$1, x2$2, x2$3, x2$4, x2$5, x2$6, x2$7, x2$8, y, y$1, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, ycol, ycol$1, ycol$2, ycol$3, ycol$4, ycol$5, ycol$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _q$10 = $f._q$10; _q$11 = $f._q$11; _q$12 = $f._q$12; _q$13 = $f._q$13; _q$14 = $f._q$14; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _q$9 = $f._q$9; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; acol = $f.acol; acol$1 = $f.acol$1; acol$2 = $f.acol$2; acol$3 = $f.acol$3; acol$4 = $f.acol$4; acol$5 = $f.acol$5; acol$6 = $f.acol$6; allocateOnly = $f.allocateOnly; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; b$5 = $f.b$5; b$6 = $f.b$6; b$7 = $f.b$7; b$8 = $f.b$8; b$9 = $f.b$9; bcol = $f.bcol; bcol$1 = $f.bcol$1; bcol$2 = $f.bcol$2; bitsPerPixel = $f.bitsPerPixel; bytesPerPixel = $f.bytesPerPixel; cdat = $f.cdat; cr = $f.cr; d = $f.d; err = $f.err; g = $f.g; gcol = $f.gcol; gcol$1 = $f.gcol$1; gcol$2 = $f.gcol$2; gray = $f.gray; gray16 = $f.gray16; height = $f.height; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; idx = $f.idx; idx$1 = $f.idx$1; idx$2 = $f.idx$2; img = $f.img; j = $f.j; j$1 = $f.j$1; nrgba = $f.nrgba; nrgba64 = $f.nrgba64; p = $f.p; p$1 = $f.p$1; paletted = $f.paletted; pass = $f.pass; pdat = $f.pdat; pix = $f.pix; pix$1 = $f.pix$1; pixOffset = $f.pixOffset; pr = $f.pr; r = $f.r; r$1 = $f.r$1; rcol = $f.rcol; rcol$1 = $f.rcol$1; rcol$2 = $f.rcol$2; rgba = $f.rgba; rgba64 = $f.rgba64; rowSize = $f.rowSize; tb = $f.tb; tb$1 = $f.tb$1; tg = $f.tg; tg$1 = $f.tg$1; tr = $f.tr; tr$1 = $f.tr$1; ty = $f.ty; ty$1 = $f.ty$1; ty$2 = $f.ty$2; ty$3 = $f.ty$3; width = $f.width; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$64 = $f.x$64; x$65 = $f.x$65; x$66 = $f.x$66; x$67 = $f.x$67; x$68 = $f.x$68; x$69 = $f.x$69; x$7 = $f.x$7; x$70 = $f.x$70; x$71 = $f.x$71; x$72 = $f.x$72; x$73 = $f.x$73; x$8 = $f.x$8; x$9 = $f.x$9; x2 = $f.x2; x2$1 = $f.x2$1; x2$2 = $f.x2$2; x2$3 = $f.x2$3; x2$4 = $f.x2$4; x2$5 = $f.x2$5; x2$6 = $f.x2$6; x2$7 = $f.x2$7; x2$8 = $f.x2$8; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; ycol = $f.ycol; ycol$1 = $f.ycol$1; ycol$2 = $f.ycol$2; ycol$3 = $f.ycol$3; ycol$4 = $f.ycol$4; ycol$5 = $f.ycol$5; ycol$6 = $f.ycol$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		bitsPerPixel = 0;
		pixOffset = 0;
		gray = ptrType.nil;
		rgba = ptrType$1.nil;
		paletted = ptrType$2.nil;
		nrgba = ptrType$3.nil;
		gray16 = ptrType$4.nil;
		rgba64 = ptrType$5.nil;
		nrgba64 = ptrType$6.nil;
		img = $ifaceNil;
		_tmp = d.width;
		_tmp$1 = d.height;
		width = _tmp;
		height = _tmp$1;
		if ((d.interlace === 1) && !allocateOnly) {
			p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
			width = (_q = ((((width - p.xOffset >> 0) + p.xFactor >> 0) - 1 >> 0)) / p.xFactor, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			height = (_q$1 = ((((height - p.yOffset >> 0) + p.yFactor >> 0) - 1 >> 0)) / p.yFactor, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			if ((width === 0) || (height === 0)) {
				$s = -1; return [$ifaceNil, $ifaceNil];
			}
		}
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			bitsPerPixel = d.depth;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				gray = image.NewGray($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray;
			}
		} else if (_1 === (5)) {
			bitsPerPixel = 16;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (6)) {
			bitsPerPixel = 24;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				rgba = image.NewRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba;
			}
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			bitsPerPixel = d.depth;
			paletted = image.NewPaletted($clone(image.Rect(0, 0, width, height), image.Rectangle), d.palette);
			img = paletted;
		} else if (_1 === (11)) {
			bitsPerPixel = 32;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (12)) {
			bitsPerPixel = 16;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				gray16 = image.NewGray16($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray16;
			}
		} else if (_1 === (13)) {
			bitsPerPixel = 32;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		} else if (_1 === (14)) {
			bitsPerPixel = 48;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				rgba64 = image.NewRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba64;
			}
		} else if (_1 === (15)) {
			bitsPerPixel = 64;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		}
		if (allocateOnly) {
			$s = -1; return [img, $ifaceNil];
		}
		bytesPerPixel = (_q$2 = ((bitsPerPixel + 7 >> 0)) / 8, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		rowSize = 1 + (_q$3 = ((($imul(bitsPerPixel, width)) + 7 >> 0)) / 8, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		cr = $makeSlice(sliceType$1, rowSize);
		pr = $makeSlice(sliceType$1, rowSize);
		y = 0;
		/* while (true) { */ case 1:
			/* if (!(y < height)) { break; } */ if(!(y < height)) { $s = 2; continue; }
			_r = io.ReadFull(r, cr); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF) || $interfaceIsEqual(err, io.ErrUnexpectedEOF)) {
					$s = -1; return [$ifaceNil, new FormatError("not enough pixel data")];
				}
				$s = -1; return [$ifaceNil, err];
			}
			cdat = $subslice(cr, 1);
			pdat = $subslice(pr, 1);
			_2 = (0 >= cr.$length ? ($throwRuntimeError("index out of range"), undefined) : cr.$array[cr.$offset + 0]);
			if (_2 === (0)) {
			} else if (_2 === (1)) {
				i = bytesPerPixel;
				while (true) {
					if (!(i < cdat.$length)) { break; }
					((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i] = (((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i]) + ((x = i - bytesPerPixel >> 0, ((x < 0 || x >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x]))) << 24 >>> 24));
					i = i + (1) >> 0;
				}
			} else if (_2 === (2)) {
				_ref = pdat;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$1 = _i;
					p$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1] = (((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1]) + (p$1) << 24 >>> 24));
					_i++;
				}
			} else if (_2 === (3)) {
				i$2 = 0;
				while (true) {
					if (!(i$2 < bytesPerPixel)) { break; }
					((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2] = (((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2]) + ((_q$4 = ((i$2 < 0 || i$2 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$2]) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero"))) << 24 >>> 24));
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = bytesPerPixel;
				while (true) {
					if (!(i$3 < cdat.$length)) { break; }
					((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3] = (((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3]) + ((((_q$5 = (((((x$1 = i$3 - bytesPerPixel >> 0, ((x$1 < 0 || x$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$1])) >> 0)) + ((((i$3 < 0 || i$3 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$3]) >> 0)) >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24));
					i$3 = i$3 + (1) >> 0;
				}
			} else if (_2 === (4)) {
				filterPaeth(cdat, pdat, bytesPerPixel);
			} else {
				$s = -1; return [$ifaceNil, new FormatError("bad filter type")];
			}
			_3 = d.cb;
			if (_3 === (1)) {
				if (d.useTransparent) {
					ty = d.transparent[1];
					x$2 = 0;
					while (true) {
						if (!(x$2 < width)) { break; }
						b = (x$3 = (_q$6 = x$2 / 8, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$3 < 0 || x$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$3]));
						x2 = 0;
						while (true) {
							if (!(x2 < 8 && (x$2 + x2 >> 0) < width)) { break; }
							ycol = ((b >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24;
							acol = 255;
							if (ycol === ty) {
								acol = 0;
							}
							nrgba.SetNRGBA(x$2 + x2 >> 0, y, new color.NRGBA.ptr(ycol, ycol, ycol, acol));
							b = (y$1 = (1), y$1 < 32 ? (b << y$1) : 0) << 24 >>> 24;
							x2 = x2 + (1) >> 0;
						}
						x$2 = x$2 + (8) >> 0;
					}
				} else {
					x$4 = 0;
					while (true) {
						if (!(x$4 < width)) { break; }
						b$1 = (x$5 = (_q$7 = x$4 / 8, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$5 < 0 || x$5 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$5]));
						x2$1 = 0;
						while (true) {
							if (!(x2$1 < 8 && (x$4 + x2$1 >> 0) < width)) { break; }
							gray.SetGray(x$4 + x2$1 >> 0, y, new color.Gray.ptr(((b$1 >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24));
							b$1 = (y$2 = (1), y$2 < 32 ? (b$1 << y$2) : 0) << 24 >>> 24;
							x2$1 = x2$1 + (1) >> 0;
						}
						x$4 = x$4 + (8) >> 0;
					}
				}
			} else if (_3 === (2)) {
				if (d.useTransparent) {
					ty$1 = d.transparent[1];
					x$6 = 0;
					while (true) {
						if (!(x$6 < width)) { break; }
						b$2 = (x$7 = (_q$8 = x$6 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$7 < 0 || x$7 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$7]));
						x2$2 = 0;
						while (true) {
							if (!(x2$2 < 4 && (x$6 + x2$2 >> 0) < width)) { break; }
							ycol$1 = ((b$2 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24;
							acol$1 = 255;
							if (ycol$1 === ty$1) {
								acol$1 = 0;
							}
							nrgba.SetNRGBA(x$6 + x2$2 >> 0, y, new color.NRGBA.ptr(ycol$1, ycol$1, ycol$1, acol$1));
							b$2 = (y$3 = (2), y$3 < 32 ? (b$2 << y$3) : 0) << 24 >>> 24;
							x2$2 = x2$2 + (1) >> 0;
						}
						x$6 = x$6 + (4) >> 0;
					}
				} else {
					x$8 = 0;
					while (true) {
						if (!(x$8 < width)) { break; }
						b$3 = (x$9 = (_q$9 = x$8 / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$9 < 0 || x$9 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$9]));
						x2$3 = 0;
						while (true) {
							if (!(x2$3 < 4 && (x$8 + x2$3 >> 0) < width)) { break; }
							gray.SetGray(x$8 + x2$3 >> 0, y, new color.Gray.ptr(((b$3 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24));
							b$3 = (y$4 = (2), y$4 < 32 ? (b$3 << y$4) : 0) << 24 >>> 24;
							x2$3 = x2$3 + (1) >> 0;
						}
						x$8 = x$8 + (4) >> 0;
					}
				}
			} else if (_3 === (3)) {
				if (d.useTransparent) {
					ty$2 = d.transparent[1];
					x$10 = 0;
					while (true) {
						if (!(x$10 < width)) { break; }
						b$4 = (x$11 = (_q$10 = x$10 / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$11 < 0 || x$11 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$11]));
						x2$4 = 0;
						while (true) {
							if (!(x2$4 < 2 && (x$10 + x2$4 >> 0) < width)) { break; }
							ycol$2 = ((b$4 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24;
							acol$2 = 255;
							if (ycol$2 === ty$2) {
								acol$2 = 0;
							}
							nrgba.SetNRGBA(x$10 + x2$4 >> 0, y, new color.NRGBA.ptr(ycol$2, ycol$2, ycol$2, acol$2));
							b$4 = (y$5 = (4), y$5 < 32 ? (b$4 << y$5) : 0) << 24 >>> 24;
							x2$4 = x2$4 + (1) >> 0;
						}
						x$10 = x$10 + (2) >> 0;
					}
				} else {
					x$12 = 0;
					while (true) {
						if (!(x$12 < width)) { break; }
						b$5 = (x$13 = (_q$11 = x$12 / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$13 < 0 || x$13 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$13]));
						x2$5 = 0;
						while (true) {
							if (!(x2$5 < 2 && (x$12 + x2$5 >> 0) < width)) { break; }
							gray.SetGray(x$12 + x2$5 >> 0, y, new color.Gray.ptr(((b$5 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24));
							b$5 = (y$6 = (4), y$6 < 32 ? (b$5 << y$6) : 0) << 24 >>> 24;
							x2$5 = x2$5 + (1) >> 0;
						}
						x$12 = x$12 + (2) >> 0;
					}
				}
			} else if (_3 === (4)) {
				$copySlice($subslice(gray.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (gray.Stride) >> 0;
			} else if (_3 === (5)) {
				x$14 = 0;
				while (true) {
					if (!(x$14 < width)) { break; }
					ycol$3 = (x$15 = ($imul(2, x$14)) + 0 >> 0, ((x$15 < 0 || x$15 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$15]));
					nrgba.SetNRGBA(x$14, y, new color.NRGBA.ptr(ycol$3, ycol$3, ycol$3, (x$16 = ($imul(2, x$14)) + 1 >> 0, ((x$16 < 0 || x$16 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$16]))));
					x$14 = x$14 + (1) >> 0;
				}
			} else if (_3 === (6)) {
				if (d.useTransparent) {
					_tmp$2 = nrgba.Pix;
					_tmp$3 = pixOffset;
					_tmp$4 = 0;
					pix = _tmp$2;
					i$4 = _tmp$3;
					j = _tmp$4;
					_tmp$5 = d.transparent[1];
					_tmp$6 = d.transparent[3];
					_tmp$7 = d.transparent[5];
					tr = _tmp$5;
					tg = _tmp$6;
					tb = _tmp$7;
					x$17 = 0;
					while (true) {
						if (!(x$17 < width)) { break; }
						r$1 = (x$18 = j + 0 >> 0, ((x$18 < 0 || x$18 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$18]));
						g = (x$19 = j + 1 >> 0, ((x$19 < 0 || x$19 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$19]));
						b$6 = (x$20 = j + 2 >> 0, ((x$20 < 0 || x$20 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$20]));
						a = 255;
						if ((r$1 === tr) && (g === tg) && (b$6 === tb)) {
							a = 0;
						}
						(x$21 = i$4 + 0 >> 0, ((x$21 < 0 || x$21 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$21] = r$1));
						(x$22 = i$4 + 1 >> 0, ((x$22 < 0 || x$22 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$22] = g));
						(x$23 = i$4 + 2 >> 0, ((x$23 < 0 || x$23 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$23] = b$6));
						(x$24 = i$4 + 3 >> 0, ((x$24 < 0 || x$24 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$24] = a));
						i$4 = i$4 + (4) >> 0;
						j = j + (3) >> 0;
						x$17 = x$17 + (1) >> 0;
					}
					pixOffset = pixOffset + (nrgba.Stride) >> 0;
				} else {
					_tmp$8 = rgba.Pix;
					_tmp$9 = pixOffset;
					_tmp$10 = 0;
					pix$1 = _tmp$8;
					i$5 = _tmp$9;
					j$1 = _tmp$10;
					x$25 = 0;
					while (true) {
						if (!(x$25 < width)) { break; }
						(x$27 = i$5 + 0 >> 0, ((x$27 < 0 || x$27 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$27] = (x$26 = j$1 + 0 >> 0, ((x$26 < 0 || x$26 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$26]))));
						(x$29 = i$5 + 1 >> 0, ((x$29 < 0 || x$29 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$29] = (x$28 = j$1 + 1 >> 0, ((x$28 < 0 || x$28 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$28]))));
						(x$31 = i$5 + 2 >> 0, ((x$31 < 0 || x$31 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$31] = (x$30 = j$1 + 2 >> 0, ((x$30 < 0 || x$30 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$30]))));
						(x$32 = i$5 + 3 >> 0, ((x$32 < 0 || x$32 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$32] = 255));
						i$5 = i$5 + (4) >> 0;
						j$1 = j$1 + (3) >> 0;
						x$25 = x$25 + (1) >> 0;
					}
					pixOffset = pixOffset + (rgba.Stride) >> 0;
				}
			} else if (_3 === (7)) {
				x$33 = 0;
				while (true) {
					if (!(x$33 < width)) { break; }
					b$7 = (x$34 = (_q$12 = x$33 / 8, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$34 < 0 || x$34 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$34]));
					x2$6 = 0;
					while (true) {
						if (!(x2$6 < 8 && (x$33 + x2$6 >> 0) < width)) { break; }
						idx = b$7 >>> 7 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$33 + x2$6 >> 0, y, idx);
						b$7 = (y$7 = (1), y$7 < 32 ? (b$7 << y$7) : 0) << 24 >>> 24;
						x2$6 = x2$6 + (1) >> 0;
					}
					x$33 = x$33 + (8) >> 0;
				}
			} else if (_3 === (8)) {
				x$35 = 0;
				while (true) {
					if (!(x$35 < width)) { break; }
					b$8 = (x$36 = (_q$13 = x$35 / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$36 < 0 || x$36 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$36]));
					x2$7 = 0;
					while (true) {
						if (!(x2$7 < 4 && (x$35 + x2$7 >> 0) < width)) { break; }
						idx$1 = b$8 >>> 6 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$1 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$1 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$35 + x2$7 >> 0, y, idx$1);
						b$8 = (y$8 = (2), y$8 < 32 ? (b$8 << y$8) : 0) << 24 >>> 24;
						x2$7 = x2$7 + (1) >> 0;
					}
					x$35 = x$35 + (4) >> 0;
				}
			} else if (_3 === (9)) {
				x$37 = 0;
				while (true) {
					if (!(x$37 < width)) { break; }
					b$9 = (x$38 = (_q$14 = x$37 / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$38 < 0 || x$38 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$38]));
					x2$8 = 0;
					while (true) {
						if (!(x2$8 < 2 && (x$37 + x2$8 >> 0) < width)) { break; }
						idx$2 = b$9 >>> 4 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$2 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$2 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$37 + x2$8 >> 0, y, idx$2);
						b$9 = (y$9 = (4), y$9 < 32 ? (b$9 << y$9) : 0) << 24 >>> 24;
						x2$8 = x2$8 + (1) >> 0;
					}
					x$37 = x$37 + (2) >> 0;
				}
			} else if (_3 === (10)) {
				if (!((paletted.Palette.$length === 255))) {
					x$39 = 0;
					while (true) {
						if (!(x$39 < width)) { break; }
						if (paletted.Palette.$length <= ((((x$39 < 0 || x$39 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$39]) >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((((x$39 < 0 || x$39 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$39]) >> 0)) + 1 >> 0));
						}
						x$39 = x$39 + (1) >> 0;
					}
				}
				$copySlice($subslice(paletted.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (paletted.Stride) >> 0;
			} else if (_3 === (11)) {
				$copySlice($subslice(nrgba.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (nrgba.Stride) >> 0;
			} else if (_3 === (12)) {
				if (d.useTransparent) {
					ty$3 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					x$40 = 0;
					while (true) {
						if (!(x$40 < width)) { break; }
						ycol$4 = (((((x$41 = ($imul(2, x$40)) + 0 >> 0, ((x$41 < 0 || x$41 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$41])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$42 = ($imul(2, x$40)) + 1 >> 0, ((x$42 < 0 || x$42 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$42])) << 16 >>> 16))) >>> 0;
						acol$3 = 65535;
						if (ycol$4 === ty$3) {
							acol$3 = 0;
						}
						nrgba64.SetNRGBA64(x$40, y, new color.NRGBA64.ptr(ycol$4, ycol$4, ycol$4, acol$3));
						x$40 = x$40 + (1) >> 0;
					}
				} else {
					x$43 = 0;
					while (true) {
						if (!(x$43 < width)) { break; }
						ycol$5 = (((((x$44 = ($imul(2, x$43)) + 0 >> 0, ((x$44 < 0 || x$44 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$44])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$45 = ($imul(2, x$43)) + 1 >> 0, ((x$45 < 0 || x$45 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$45])) << 16 >>> 16))) >>> 0;
						gray16.SetGray16(x$43, y, new color.Gray16.ptr(ycol$5));
						x$43 = x$43 + (1) >> 0;
					}
				}
			} else if (_3 === (13)) {
				x$46 = 0;
				while (true) {
					if (!(x$46 < width)) { break; }
					ycol$6 = (((((x$47 = ($imul(4, x$46)) + 0 >> 0, ((x$47 < 0 || x$47 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$47])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$48 = ($imul(4, x$46)) + 1 >> 0, ((x$48 < 0 || x$48 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$48])) << 16 >>> 16))) >>> 0;
					acol$4 = (((((x$49 = ($imul(4, x$46)) + 2 >> 0, ((x$49 < 0 || x$49 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$49])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$50 = ($imul(4, x$46)) + 3 >> 0, ((x$50 < 0 || x$50 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$50])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$46, y, new color.NRGBA64.ptr(ycol$6, ycol$6, ycol$6, acol$4));
					x$46 = x$46 + (1) >> 0;
				}
			} else if (_3 === (14)) {
				if (d.useTransparent) {
					tr$1 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					tg$1 = ((((d.transparent[2] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[3] << 16 >>> 16))) >>> 0;
					tb$1 = ((((d.transparent[4] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[5] << 16 >>> 16))) >>> 0;
					x$51 = 0;
					while (true) {
						if (!(x$51 < width)) { break; }
						rcol = (((((x$52 = ($imul(6, x$51)) + 0 >> 0, ((x$52 < 0 || x$52 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$52])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$53 = ($imul(6, x$51)) + 1 >> 0, ((x$53 < 0 || x$53 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$53])) << 16 >>> 16))) >>> 0;
						gcol = (((((x$54 = ($imul(6, x$51)) + 2 >> 0, ((x$54 < 0 || x$54 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$54])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$55 = ($imul(6, x$51)) + 3 >> 0, ((x$55 < 0 || x$55 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$55])) << 16 >>> 16))) >>> 0;
						bcol = (((((x$56 = ($imul(6, x$51)) + 4 >> 0, ((x$56 < 0 || x$56 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$56])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$57 = ($imul(6, x$51)) + 5 >> 0, ((x$57 < 0 || x$57 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$57])) << 16 >>> 16))) >>> 0;
						acol$5 = 65535;
						if ((rcol === tr$1) && (gcol === tg$1) && (bcol === tb$1)) {
							acol$5 = 0;
						}
						nrgba64.SetNRGBA64(x$51, y, new color.NRGBA64.ptr(rcol, gcol, bcol, acol$5));
						x$51 = x$51 + (1) >> 0;
					}
				} else {
					x$58 = 0;
					while (true) {
						if (!(x$58 < width)) { break; }
						rcol$1 = (((((x$59 = ($imul(6, x$58)) + 0 >> 0, ((x$59 < 0 || x$59 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$59])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$60 = ($imul(6, x$58)) + 1 >> 0, ((x$60 < 0 || x$60 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$60])) << 16 >>> 16))) >>> 0;
						gcol$1 = (((((x$61 = ($imul(6, x$58)) + 2 >> 0, ((x$61 < 0 || x$61 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$61])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$62 = ($imul(6, x$58)) + 3 >> 0, ((x$62 < 0 || x$62 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$62])) << 16 >>> 16))) >>> 0;
						bcol$1 = (((((x$63 = ($imul(6, x$58)) + 4 >> 0, ((x$63 < 0 || x$63 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$63])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$64 = ($imul(6, x$58)) + 5 >> 0, ((x$64 < 0 || x$64 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$64])) << 16 >>> 16))) >>> 0;
						rgba64.SetRGBA64(x$58, y, new color.RGBA64.ptr(rcol$1, gcol$1, bcol$1, 65535));
						x$58 = x$58 + (1) >> 0;
					}
				}
			} else if (_3 === (15)) {
				x$65 = 0;
				while (true) {
					if (!(x$65 < width)) { break; }
					rcol$2 = (((((x$66 = ($imul(8, x$65)) + 0 >> 0, ((x$66 < 0 || x$66 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$66])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$67 = ($imul(8, x$65)) + 1 >> 0, ((x$67 < 0 || x$67 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$67])) << 16 >>> 16))) >>> 0;
					gcol$2 = (((((x$68 = ($imul(8, x$65)) + 2 >> 0, ((x$68 < 0 || x$68 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$68])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$69 = ($imul(8, x$65)) + 3 >> 0, ((x$69 < 0 || x$69 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$69])) << 16 >>> 16))) >>> 0;
					bcol$2 = (((((x$70 = ($imul(8, x$65)) + 4 >> 0, ((x$70 < 0 || x$70 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$70])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$71 = ($imul(8, x$65)) + 5 >> 0, ((x$71 < 0 || x$71 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$71])) << 16 >>> 16))) >>> 0;
					acol$6 = (((((x$72 = ($imul(8, x$65)) + 6 >> 0, ((x$72 < 0 || x$72 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$72])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$73 = ($imul(8, x$65)) + 7 >> 0, ((x$73 < 0 || x$73 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$73])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$65, y, new color.NRGBA64.ptr(rcol$2, gcol$2, bcol$2, acol$6));
					x$65 = x$65 + (1) >> 0;
				}
			}
			_tmp$11 = cr;
			_tmp$12 = pr;
			pr = _tmp$11;
			cr = _tmp$12;
			y = y + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readImagePass }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._q$10 = _q$10; $f._q$11 = _q$11; $f._q$12 = _q$12; $f._q$13 = _q$13; $f._q$14 = _q$14; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._q$9 = _q$9; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.acol = acol; $f.acol$1 = acol$1; $f.acol$2 = acol$2; $f.acol$3 = acol$3; $f.acol$4 = acol$4; $f.acol$5 = acol$5; $f.acol$6 = acol$6; $f.allocateOnly = allocateOnly; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.b$5 = b$5; $f.b$6 = b$6; $f.b$7 = b$7; $f.b$8 = b$8; $f.b$9 = b$9; $f.bcol = bcol; $f.bcol$1 = bcol$1; $f.bcol$2 = bcol$2; $f.bitsPerPixel = bitsPerPixel; $f.bytesPerPixel = bytesPerPixel; $f.cdat = cdat; $f.cr = cr; $f.d = d; $f.err = err; $f.g = g; $f.gcol = gcol; $f.gcol$1 = gcol$1; $f.gcol$2 = gcol$2; $f.gray = gray; $f.gray16 = gray16; $f.height = height; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.idx = idx; $f.idx$1 = idx$1; $f.idx$2 = idx$2; $f.img = img; $f.j = j; $f.j$1 = j$1; $f.nrgba = nrgba; $f.nrgba64 = nrgba64; $f.p = p; $f.p$1 = p$1; $f.paletted = paletted; $f.pass = pass; $f.pdat = pdat; $f.pix = pix; $f.pix$1 = pix$1; $f.pixOffset = pixOffset; $f.pr = pr; $f.r = r; $f.r$1 = r$1; $f.rcol = rcol; $f.rcol$1 = rcol$1; $f.rcol$2 = rcol$2; $f.rgba = rgba; $f.rgba64 = rgba64; $f.rowSize = rowSize; $f.tb = tb; $f.tb$1 = tb$1; $f.tg = tg; $f.tg$1 = tg$1; $f.tr = tr; $f.tr$1 = tr$1; $f.ty = ty; $f.ty$1 = ty$1; $f.ty$2 = ty$2; $f.ty$3 = ty$3; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$64 = x$64; $f.x$65 = x$65; $f.x$66 = x$66; $f.x$67 = x$67; $f.x$68 = x$68; $f.x$69 = x$69; $f.x$7 = x$7; $f.x$70 = x$70; $f.x$71 = x$71; $f.x$72 = x$72; $f.x$73 = x$73; $f.x$8 = x$8; $f.x$9 = x$9; $f.x2 = x2; $f.x2$1 = x2$1; $f.x2$2 = x2$2; $f.x2$3 = x2$3; $f.x2$4 = x2$4; $f.x2$5 = x2$5; $f.x2$6 = x2$6; $f.x2$7 = x2$7; $f.x2$8 = x2$8; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.ycol = ycol; $f.ycol$1 = ycol$1; $f.ycol$2 = ycol$2; $f.ycol$3 = ycol$3; $f.ycol$4 = ycol$4; $f.ycol$5 = ycol$5; $f.ycol$6 = ycol$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readImagePass = function(r, pass, allocateOnly) { return this.$val.readImagePass(r, pass, allocateOnly); };
	decoder.ptr.prototype.mergePassInto = function(dst, src, pass) {
		var $ptr, _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, bounds, bytesPerPixel, d, d$1, dBase, dst, dstPix, p, pass, rect, s, src, srcPix, stride, target, target$1, target$2, target$3, target$4, target$5, target$6, target$7, target$8, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; bounds = $f.bounds; bytesPerPixel = $f.bytesPerPixel; d = $f.d; d$1 = $f.d$1; dBase = $f.dBase; dst = $f.dst; dstPix = $f.dstPix; p = $f.p; pass = $f.pass; rect = $f.rect; s = $f.s; src = $f.src; srcPix = $f.srcPix; stride = $f.stride; target = $f.target; target$1 = $f.target$1; target$2 = $f.target$2; target$3 = $f.target$3; target$4 = $f.target$4; target$5 = $f.target$5; target$6 = $f.target$6; target$7 = $f.target$7; target$8 = $f.target$8; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
		srcPix = sliceType$1.nil;
		dstPix = sliceType$1.nil;
		stride = 0;
		rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		bytesPerPixel = 0;
		_ref = dst;
		if ($assertType(_ref, ptrType$7, true)[1]) {
			target = _ref.$val;
			srcPix = $assertType(src, ptrType$7).Pix;
			_tmp = target.Pix;
			_tmp$1 = target.Stride;
			_tmp$2 = $clone(target.Rect, image.Rectangle);
			dstPix = _tmp;
			stride = _tmp$1;
			image.Rectangle.copy(rect, _tmp$2);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			target$1 = _ref.$val;
			srcPix = $assertType(src, ptrType$8).Pix;
			_tmp$3 = target$1.Pix;
			_tmp$4 = target$1.Stride;
			_tmp$5 = $clone(target$1.Rect, image.Rectangle);
			dstPix = _tmp$3;
			stride = _tmp$4;
			image.Rectangle.copy(rect, _tmp$5);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType, true)[1]) {
			target$2 = _ref.$val;
			srcPix = $assertType(src, ptrType).Pix;
			_tmp$6 = target$2.Pix;
			_tmp$7 = target$2.Stride;
			_tmp$8 = $clone(target$2.Rect, image.Rectangle);
			dstPix = _tmp$6;
			stride = _tmp$7;
			image.Rectangle.copy(rect, _tmp$8);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			target$3 = _ref.$val;
			srcPix = $assertType(src, ptrType$4).Pix;
			_tmp$9 = target$3.Pix;
			_tmp$10 = target$3.Stride;
			_tmp$11 = $clone(target$3.Rect, image.Rectangle);
			dstPix = _tmp$9;
			stride = _tmp$10;
			image.Rectangle.copy(rect, _tmp$11);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			target$4 = _ref.$val;
			srcPix = $assertType(src, ptrType$3).Pix;
			_tmp$12 = target$4.Pix;
			_tmp$13 = target$4.Stride;
			_tmp$14 = $clone(target$4.Rect, image.Rectangle);
			dstPix = _tmp$12;
			stride = _tmp$13;
			image.Rectangle.copy(rect, _tmp$14);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			target$5 = _ref.$val;
			srcPix = $assertType(src, ptrType$6).Pix;
			_tmp$15 = target$5.Pix;
			_tmp$16 = target$5.Stride;
			_tmp$17 = $clone(target$5.Rect, image.Rectangle);
			dstPix = _tmp$15;
			stride = _tmp$16;
			image.Rectangle.copy(rect, _tmp$17);
			bytesPerPixel = 8;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			target$6 = _ref.$val;
			srcPix = $assertType(src, ptrType$2).Pix;
			_tmp$18 = target$6.Pix;
			_tmp$19 = target$6.Stride;
			_tmp$20 = $clone(target$6.Rect, image.Rectangle);
			dstPix = _tmp$18;
			stride = _tmp$19;
			image.Rectangle.copy(rect, _tmp$20);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$1, true)[1]) {
			target$7 = _ref.$val;
			srcPix = $assertType(src, ptrType$1).Pix;
			_tmp$21 = target$7.Pix;
			_tmp$22 = target$7.Stride;
			_tmp$23 = $clone(target$7.Rect, image.Rectangle);
			dstPix = _tmp$21;
			stride = _tmp$22;
			image.Rectangle.copy(rect, _tmp$23);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			target$8 = _ref.$val;
			srcPix = $assertType(src, ptrType$5).Pix;
			_tmp$24 = target$8.Pix;
			_tmp$25 = target$8.Stride;
			_tmp$26 = $clone(target$8.Rect, image.Rectangle);
			dstPix = _tmp$24;
			stride = _tmp$25;
			image.Rectangle.copy(rect, _tmp$26);
			bytesPerPixel = 8;
		}
		_tmp$27 = 0;
		_r = src.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$28 = $clone(_r, image.Rectangle);
		s = _tmp$27;
		bounds = $clone(_tmp$28, image.Rectangle);
		y = bounds.Min.Y;
		while (true) {
			if (!(y < bounds.Max.Y)) { break; }
			dBase = ($imul((((($imul(y, p.yFactor)) + p.yOffset >> 0) - rect.Min.Y >> 0)), stride)) + ($imul(((p.xOffset - rect.Min.X >> 0)), bytesPerPixel)) >> 0;
			x = bounds.Min.X;
			while (true) {
				if (!(x < bounds.Max.X)) { break; }
				d$1 = dBase + ($imul(($imul(x, p.xFactor)), bytesPerPixel)) >> 0;
				$copySlice($subslice(dstPix, d$1), $subslice(srcPix, s, (s + bytesPerPixel >> 0)));
				s = s + (bytesPerPixel) >> 0;
				x = x + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.mergePassInto }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.bounds = bounds; $f.bytesPerPixel = bytesPerPixel; $f.d = d; $f.d$1 = d$1; $f.dBase = dBase; $f.dst = dst; $f.dstPix = dstPix; $f.p = p; $f.pass = pass; $f.rect = rect; $f.s = s; $f.src = src; $f.srcPix = srcPix; $f.stride = stride; $f.target = target; $f.target$1 = target$1; $f.target$2 = target$2; $f.target$3 = target$3; $f.target$4 = target$4; $f.target$5 = target$5; $f.target$6 = target$6; $f.target$7 = target$7; $f.target$8 = target$8; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.mergePassInto = function(dst, src, pass) { return this.$val.mergePassInto(dst, src, pass); };
	decoder.ptr.prototype.parseIDAT = function(length) {
		var $ptr, _r, _r$1, _tuple, d, err, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		d = this;
		d.idatLength = length;
		_r = d.decode(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		d.img = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		_r$1 = d.verifyChecksum(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIDAT }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIDAT = function(length) { return this.$val.parseIDAT(length); };
	decoder.ptr.prototype.parseIEND = function(length) {
		var $ptr, _r, d, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 0))) {
			$s = -1; return new FormatError("bad IEND length");
		}
		_r = d.verifyChecksum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIEND }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIEND = function(length) { return this.$val.parseIEND(length); };
	decoder.ptr.prototype.parseChunk = function() {
		var $ptr, _1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, d, err, ignored, length, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; ignored = $f.ignored; length = $f.length; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		length = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
		$r = d.crc.Reset(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
			_1 = ($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8)));
			/* */ if (_1 === ("IHDR")) { $s = 5; continue; }
			/* */ if (_1 === ("PLTE")) { $s = 6; continue; }
			/* */ if (_1 === ("tRNS")) { $s = 7; continue; }
			/* */ if (_1 === ("IDAT")) { $s = 8; continue; }
			/* */ if (_1 === ("IEND")) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === ("IHDR")) { */ case 5:
				if (!((d.stage === 0))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 1;
				_r$2 = d.parseIHDR(length); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === ("PLTE")) { */ case 6:
				if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 2;
				_r$3 = d.parsePLTE(length); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === ("tRNS")) { */ case 7:
				if (cbPaletted(d.cb)) {
					if (!((d.stage === 2))) {
						$s = -1; return new FormatError(chunkOrderError);
					}
				} else if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 3;
				_r$4 = d.parsetRNS(length); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === ("IDAT")) { */ case 8:
				if (d.stage < 1 || d.stage > 4 || ((d.stage === 1) && cbPaletted(d.cb))) {
					$s = -1; return new FormatError(chunkOrderError);
				} else if (d.stage === 4) {
					/* break; */ $s = 4; continue;
				}
				d.stage = 4;
				_r$5 = d.parseIDAT(length); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_1 === ("IEND")) { */ case 9:
				if (!((d.stage === 4))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 5;
				_r$6 = d.parseIEND(length); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } */ case 10:
		case 4:
		/* */ if (length > 2147483647) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (length > 2147483647) { */ case 16:
			_r$7 = fmt.Sprintf("Bad chunk length: %d", new sliceType$2([new $Uint32(length)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$7));
		/* } */ case 17:
		ignored = arrayType.zero();
		/* while (true) { */ case 19:
			/* if (!(length > 0)) { break; } */ if(!(length > 0)) { $s = 20; continue; }
			_r$8 = io.ReadFull(d.r, $subslice(new sliceType$1(ignored), 0, min(4096, ((length >> 0))))); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$1 = _r$8;
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_r$9 = d.crc.Write($subslice(new sliceType$1(ignored), 0, n)); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			length = length - (((n >>> 0))) >>> 0;
		/* } */ $s = 19; continue; case 20:
		_r$10 = d.verifyChecksum(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$s = -1; return _r$10;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseChunk }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.ignored = ignored; $f.length = length; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseChunk = function() { return this.$val.parseChunk(); };
	decoder.ptr.prototype.verifyChecksum = function() {
		var $ptr, _r, _r$1, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Sum32(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { */ case 2:
			$s = -1; return new FormatError("invalid checksum");
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.verifyChecksum }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.verifyChecksum = function() { return this.$val.verifyChecksum(); };
	decoder.ptr.prototype.checkHeader = function() {
		var $ptr, _r, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 0, 8))) === "\x89PNG\r\n\x1A\n")) {
			$s = -1; return new FormatError("not a PNG file");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.checkHeader }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.checkHeader = function() { return this.$val.checkHeader(); };
	Decode = function(r) {
		var $ptr, _r, _r$1, _r$2, d, err, err$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; err = $f.err; err$1 = $f.err$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [$ifaceNil, err];
		}
		/* while (true) { */ case 3:
			/* if (!(!((d.stage === 5)))) { break; } */ if(!(!((d.stage === 5)))) { $s = 4; continue; }
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [$ifaceNil, err$1];
			}
		/* } */ $s = 3; continue; case 4:
		$s = -1; return [d.img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var $ptr, _1, _r, _r$1, _r$2, cm, d, err, err$1, paletted, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; cm = $f.cm; d = $f.d; err = $f.err; err$1 = $f.err$1; paletted = $f.paletted; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		/* while (true) { */ case 3:
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err$1];
			}
			paletted = cbPaletted(d.cb);
			if ((d.stage === 1) && !paletted) {
				/* break; */ $s = 4; continue;
			}
			if ((d.stage === 2) && paletted) {
				/* break; */ $s = 4; continue;
			}
		/* } */ $s = 3; continue; case 4:
		cm = $ifaceNil;
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			cm = color.GrayModel;
		} else if (_1 === (5)) {
			cm = color.NRGBAModel;
		} else if (_1 === (6)) {
			cm = color.RGBAModel;
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			cm = d.palette;
		} else if (_1 === (11)) {
			cm = color.NRGBAModel;
		} else if (_1 === (12)) {
			cm = color.Gray16Model;
		} else if (_1 === (13)) {
			cm = color.NRGBA64Model;
		} else if (_1 === (14)) {
			cm = color.RGBA64Model;
		} else if (_1 === (15)) {
			cm = color.NRGBA64Model;
		}
		$s = -1; return [new image.Config.ptr(cm, d.width, d.height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.cm = cm; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.paletted = paletted; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		var $ptr;
		image.RegisterFormat("png", "\x89PNG\r\n\x1A\n", Decode, DecodeConfig);
	};
	ptrType$11.methods = [{prop: "parseIHDR", name: "parseIHDR", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsePLTE", name: "parsePLTE", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsetRNS", name: "parsetRNS", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "decode", name: "decode", pkg: "image/png", typ: $funcType([], [image.Image, $error], false)}, {prop: "readImagePass", name: "readImagePass", pkg: "image/png", typ: $funcType([io.Reader, $Int, $Bool], [image.Image, $error], false)}, {prop: "mergePassInto", name: "mergePassInto", pkg: "image/png", typ: $funcType([image.Image, image.Image, $Int], [], false)}, {prop: "parseIDAT", name: "parseIDAT", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseIEND", name: "parseIEND", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseChunk", name: "parseChunk", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "verifyChecksum", name: "verifyChecksum", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "checkHeader", name: "checkHeader", pkg: "image/png", typ: $funcType([], [$error], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	interlaceScan.init("image/png", [{prop: "xFactor", name: "xFactor", exported: false, typ: $Int, tag: ""}, {prop: "yFactor", name: "yFactor", exported: false, typ: $Int, tag: ""}, {prop: "xOffset", name: "xOffset", exported: false, typ: $Int, tag: ""}, {prop: "yOffset", name: "yOffset", exported: false, typ: $Int, tag: ""}]);
	decoder.init("image/png", [{prop: "r", name: "r", exported: false, typ: io.Reader, tag: ""}, {prop: "img", name: "img", exported: false, typ: image.Image, tag: ""}, {prop: "crc", name: "crc", exported: false, typ: hash.Hash32, tag: ""}, {prop: "width", name: "width", exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", exported: false, typ: $Int, tag: ""}, {prop: "depth", name: "depth", exported: false, typ: $Int, tag: ""}, {prop: "palette", name: "palette", exported: false, typ: color.Palette, tag: ""}, {prop: "cb", name: "cb", exported: false, typ: $Int, tag: ""}, {prop: "stage", name: "stage", exported: false, typ: $Int, tag: ""}, {prop: "idatLength", name: "idatLength", exported: false, typ: $Uint32, tag: ""}, {prop: "tmp", name: "tmp", exported: false, typ: arrayType$1, tag: ""}, {prop: "interlace", name: "interlace", exported: false, typ: $Int, tag: ""}, {prop: "useTransparent", name: "useTransparent", exported: false, typ: $Bool, tag: ""}, {prop: "transparent", name: "transparent", exported: false, typ: arrayType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = zlib.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		interlacing = new sliceType([new interlaceScan.ptr(8, 8, 0, 0), new interlaceScan.ptr(8, 8, 4, 0), new interlaceScan.ptr(4, 8, 0, 4), new interlaceScan.ptr(4, 4, 2, 0), new interlaceScan.ptr(2, 4, 0, 2), new interlaceScan.ptr(2, 2, 1, 0), new interlaceScan.ptr(1, 2, 0, 1)]);
		chunkOrderError = "chunk out of order";
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/ebitenutil"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, js, ebiten, assets, image, color, palette, draw, gif, png, io, math, sync, ptrType, ptrType$1, ptrType$2, ptrType$3, sliceType, sliceType$2, sliceType$3, debugPrintTextImage, debugPrintTextShadowImage, cheapPalette, emptyImage, init, DebugPrint, drawDebugText, init$1, init$2;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	assets = $packages["github.com/hajimehoshi/ebiten/ebitenutil/internal/assets"];
	image = $packages["image"];
	color = $packages["image/color"];
	palette = $packages["image/color/palette"];
	draw = $packages["image/draw"];
	gif = $packages["image/gif"];
	png = $packages["image/png"];
	io = $packages["io"];
	math = $packages["math"];
	sync = $packages["sync"];
	ptrType = $ptrType(ebiten.Image);
	ptrType$1 = $ptrType(image.Rectangle);
	ptrType$2 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].GeoM);
	ptrType$3 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	sliceType = $sliceType(ebiten.ImagePart);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType(color.Color);
	init = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, i, idx, img, j, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; i = $f.i; idx = $f.idx; img = $f.img; j = $f.j; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = assets.CreateTextImage(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		img = _r;
		_r$1 = ebiten.NewImageFromImage(img, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		debugPrintTextImage = _tuple[0];
		s = $clone($clone(img.Bounds(), image.Rectangle).Size(), image.Point);
		j = 0;
		while (true) {
			if (!(j < s.Y)) { break; }
			i = 0;
			while (true) {
				if (!(i < s.X)) { break; }
				idx = ($imul((img.Stride), j)) + ($imul(4, i)) >> 0;
				if (!(((x = img.Pix, x$1 = idx + 3 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) === 0))) {
					(x$2 = img.Pix, ((idx < 0 || idx >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + idx] = 0));
					(x$3 = img.Pix, x$4 = idx + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = 0));
					(x$5 = img.Pix, x$6 = idx + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = 0));
					(x$7 = img.Pix, x$8 = idx + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = 128));
				}
				i = i + (1) >> 0;
			}
			j = j + (1) >> 0;
		}
		_r$2 = ebiten.NewImageFromImage(img, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		debugPrintTextShadowImage = _tuple$1[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.i = i; $f.idx = idx; $f.img = img; $f.j = j; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.$s = $s; $f.$r = $r; return $f;
	};
	DebugPrint = function(image$1, str) {
		var $ptr, image$1, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; image$1 = $f.image$1; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = drawDebugText(image$1, str, 1, 1, debugPrintTextShadowImage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = drawDebugText(image$1, str, 0, 0, debugPrintTextImage); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DebugPrint }; } $f.$ptr = $ptr; $f.image$1 = image$1; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DebugPrint = DebugPrint;
	drawDebugText = function(rt, str, ox, oy, src) {
		var $ptr, _i, _q, _q$1, _r, _r$1, _ref, _rune, _tuple, c, n, op, ox, oy, r, rt, src, str, sx, sy, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; c = $f.c; n = $f.n; op = $f.op; ox = $f.ox; oy = $f.oy; r = $f.r; rt = $f.rt; src = $f.src; str = $f.str; sx = $f.sx; sy = $f.sy; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		op = new ebiten.DrawImageOptions.ptr(ptrType$1.nil, new ebiten.GeoM.ptr(ptrType$2.nil), new ebiten.ColorM.ptr(ptrType$3.nil), 0, 0, $ifaceNil, sliceType.nil);
		x = 0;
		y = 0;
		_tuple = debugPrintTextImage.Size();
		w = _tuple[0];
		_ref = str;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			r = [r];
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (c === 10) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (c === 10) { */ case 3:
				x = 0;
				y = y + (16) >> 0;
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			n = (_q = w / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			sx = $imul(((_r = ((c >> 0)) % n, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), 6);
			sy = $imul(((_q$1 = ((c >> 0)) / n, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 16);
			r[0] = $clone(image.Rect(sx, sy, sx + 6 >> 0, sy + 16 >> 0), image.Rectangle);
			op.SourceRect = r[0];
			op.GeoM.Reset();
			op.GeoM.Translate((x), (y));
			op.GeoM.Translate(((ox + 1 >> 0)), (oy));
			_r$1 = rt.DrawImage(src, op); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$unused(_r$1);
			x = x + (6) >> 0;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawDebugText }; } $f.$ptr = $ptr; $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.c = c; $f.n = n; $f.op = op; $f.ox = ox; $f.oy = oy; $f.r = r; $f.rt = rt; $f.src = src; $f.str = str; $f.sx = sx; $f.sy = sy; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	init$1 = function() {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, b, cs, g, r, x;
		cs = new sliceType$3([]);
		_ref = new sliceType$2([0, 128, 255]);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = new sliceType$2([0, 128, 255]);
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				g = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_ref$2 = new sliceType$2([0, 128, 255]);
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					b = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					cs = $append(cs, (x = new color.RGBA.ptr(r, g, b, 255), new x.constructor.elem(x)));
					_i$2++;
				}
				_i$1++;
			}
			_i++;
		}
		cheapPalette = ($subslice(new color.Palette(cs.$array), cs.$offset, cs.$offset + cs.$length));
	};
	init$2 = function() {
		var $ptr, _r, _r$1, _tuple, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ebiten.NewImage(16, 16, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		emptyImage = _tuple[0];
		_r$1 = emptyImage.Fill((x = color.White, new x.constructor.elem(x))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$unused(_r$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init$2 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ebiten.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = assets.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = palette.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gif.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = png.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		debugPrintTextImage = ptrType.nil;
		debugPrintTextShadowImage = ptrType.nil;
		cheapPalette = color.Palette.nil;
		emptyImage = ptrType.nil;
		$r = init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init$1();
		$r = init$2(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/inpututil"] = (function() {
	var $pkg = {}, $init, ebiten, hooks, sync, inputState, sliceType, structType, sliceType$1, ptrType, mapType, mapType$1, mapType$2, mapType$3, mapType$4, theInputState, init, IsKeyJustPressed, KeyPressDuration;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	hooks = $packages["github.com/hajimehoshi/ebiten/internal/hooks"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	inputState = $pkg.inputState = $newType(0, $kindStruct, "inpututil.inputState", true, "github.com/hajimehoshi/ebiten/inpututil", false, function(keyStates_, prevKeyStates_, mouseButtonStates_, prevMouseButtonStates_, gamepadButtonStates_, prevGamepadButtonStates_, touchStates_, prevTouchStates_, m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.keyStates = false;
			this.prevKeyStates = false;
			this.mouseButtonStates = false;
			this.prevMouseButtonStates = false;
			this.gamepadButtonStates = false;
			this.prevGamepadButtonStates = false;
			this.touchStates = false;
			this.prevTouchStates = false;
			this.m = new sync.RWMutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].RWMutex.ptr(false, 0));
			return;
		}
		this.keyStates = keyStates_;
		this.prevKeyStates = prevKeyStates_;
		this.mouseButtonStates = mouseButtonStates_;
		this.prevMouseButtonStates = prevMouseButtonStates_;
		this.gamepadButtonStates = gamepadButtonStates_;
		this.prevGamepadButtonStates = prevGamepadButtonStates_;
		this.touchStates = touchStates_;
		this.prevTouchStates = prevTouchStates_;
		this.m = m_;
	});
	sliceType = $sliceType(ebiten.MouseButton);
	structType = $structType("", []);
	sliceType$1 = $sliceType($Int);
	ptrType = $ptrType(inputState);
	mapType = $mapType(ebiten.Key, $Int);
	mapType$1 = $mapType(ebiten.MouseButton, $Int);
	mapType$2 = $mapType(ebiten.GamepadButton, $Int);
	mapType$3 = $mapType($Int, mapType$2);
	mapType$4 = $mapType($Int, $Int);
	init = function() {
		var $ptr;
		hooks.AppendHookOnUpdate((function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = theInputState.update(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}));
	};
	inputState.ptr.prototype.update = function() {
		var $ptr, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$19, _entry$2, _entry$20, _entry$21, _entry$22, _entry$23, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _index, _key, _key$1, _key$10, _key$11, _key$12, _key$13, _key$14, _key$15, _key$16, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _key$9, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, _tuple$2, _tuple$3, b, b$1, b$2, i, id, id$1, id$2, id$3, id$4, id$5, id$6, ids, idsToDelete, k, n, ok, ok$1, ok$2, ok$3, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$15 = $f._entry$15; _entry$16 = $f._entry$16; _entry$17 = $f._entry$17; _entry$18 = $f._entry$18; _entry$19 = $f._entry$19; _entry$2 = $f._entry$2; _entry$20 = $f._entry$20; _entry$21 = $f._entry$21; _entry$22 = $f._entry$22; _entry$23 = $f._entry$23; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _i$7 = $f._i$7; _i$8 = $f._i$8; _i$9 = $f._i$9; _index = $f._index; _key = $f._key; _key$1 = $f._key$1; _key$10 = $f._key$10; _key$11 = $f._key$11; _key$12 = $f._key$12; _key$13 = $f._key$13; _key$14 = $f._key$14; _key$15 = $f._key$15; _key$16 = $f._key$16; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _key$8 = $f._key$8; _key$9 = $f._key$9; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _keys$4 = $f._keys$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _ref$9 = $f._ref$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; i = $f.i; id = $f.id; id$1 = $f.id$1; id$2 = $f.id$2; id$3 = $f.id$3; id$4 = $f.id$4; id$5 = $f.id$5; id$6 = $f.id$6; ids = $f.ids; idsToDelete = $f.idsToDelete; k = $f.k; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = this;
		i.m.RWMutex.Lock();
		$deferred.push([$methodVal(i.m.RWMutex, "Unlock"), []]);
		k = 0;
		while (true) {
			if (!(k <= 77)) { break; }
			_key = k; (i.prevKeyStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key)] = { k: _key, v: (_entry = i.keyStates[ebiten.Key.keyFor(k)], _entry !== undefined ? _entry.v : 0) };
			if (ebiten.IsKeyPressed(k)) {
				_key$1 = k; (i.keyStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = i.keyStates[ebiten.Key.keyFor(k)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >> 0 };
			} else {
				_key$2 = k; (i.keyStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.Key.keyFor(_key$2)] = { k: _key$2, v: 0 };
			}
			k = k + (1) >> 0;
		}
		_ref = new sliceType([0, 1, 2]);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_key$3 = b; (i.prevMouseButtonStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$3)] = { k: _key$3, v: (_entry$2 = i.mouseButtonStates[ebiten.MouseButton.keyFor(b)], _entry$2 !== undefined ? _entry$2.v : 0) };
			if (ebiten.IsMouseButtonPressed(b)) {
				_key$4 = b; (i.mouseButtonStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$4)] = { k: _key$4, v: (_entry$3 = i.mouseButtonStates[ebiten.MouseButton.keyFor(b)], _entry$3 !== undefined ? _entry$3.v : 0) + (1) >> 0 };
			} else {
				_key$5 = b; (i.mouseButtonStates || $throwRuntimeError("assignment to entry in nil map"))[ebiten.MouseButton.keyFor(_key$5)] = { k: _key$5, v: 0 };
			}
			_i++;
		}
		_ref$1 = i.prevGamepadButtonStates;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys.length)) { break; }
			_entry$4 = _ref$1[_keys[_i$1]];
			if (_entry$4 === undefined) {
				_i$1++;
				continue;
			}
			id = _entry$4.k;
			_ref$2 = (_entry$5 = i.prevGamepadButtonStates[$Int.keyFor(id)], _entry$5 !== undefined ? _entry$5.v : false);
			_i$2 = 0;
			_keys$1 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$1.length)) { break; }
				_entry$6 = _ref$2[_keys$1[_i$2]];
				if (_entry$6 === undefined) {
					_i$2++;
					continue;
				}
				b$1 = _entry$6.k;
				_key$6 = b$1; ((_entry$7 = i.prevGamepadButtonStates[$Int.keyFor(id)], _entry$7 !== undefined ? _entry$7.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$6)] = { k: _key$6, v: 0 };
				_i$2++;
			}
			_i$1++;
		}
		ids = $makeMap($Int.keyFor, []);
		_ref$3 = ebiten.GamepadIDs();
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			id$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			_key$7 = id$1; (ids || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$7)] = { k: _key$7, v: new structType.ptr() };
			_tuple = (_entry$8 = i.prevGamepadButtonStates[$Int.keyFor(id$1)], _entry$8 !== undefined ? [_entry$8.v, true] : [false, false]);
			ok = _tuple[1];
			if (!ok) {
				_key$8 = id$1; (i.prevGamepadButtonStates || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$8)] = { k: _key$8, v: $makeMap(ebiten.GamepadButton.keyFor, []) };
			}
			_tuple$1 = (_entry$9 = i.gamepadButtonStates[$Int.keyFor(id$1)], _entry$9 !== undefined ? [_entry$9.v, true] : [false, false]);
			ok$1 = _tuple$1[1];
			if (!ok$1) {
				_key$9 = id$1; (i.gamepadButtonStates || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$9)] = { k: _key$9, v: $makeMap(ebiten.GamepadButton.keyFor, []) };
			}
			n = ebiten.GamepadButtonNum(id$1);
			b$2 = 0;
			while (true) {
				if (!(b$2 < ((n >> 0)))) { break; }
				_key$10 = b$2; ((_entry$10 = i.prevGamepadButtonStates[$Int.keyFor(id$1)], _entry$10 !== undefined ? _entry$10.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$10)] = { k: _key$10, v: (_entry$11 = (_entry$12 = i.gamepadButtonStates[$Int.keyFor(id$1)], _entry$12 !== undefined ? _entry$12.v : false)[ebiten.GamepadButton.keyFor(b$2)], _entry$11 !== undefined ? _entry$11.v : 0) };
				if (ebiten.IsGamepadButtonPressed(id$1, b$2)) {
					_key$11 = b$2; ((_entry$13 = i.gamepadButtonStates[$Int.keyFor(id$1)], _entry$13 !== undefined ? _entry$13.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$11)] = { k: _key$11, v: (_entry$14 = (_entry$15 = i.gamepadButtonStates[$Int.keyFor(id$1)], _entry$15 !== undefined ? _entry$15.v : false)[ebiten.GamepadButton.keyFor(b$2)], _entry$14 !== undefined ? _entry$14.v : 0) + (1) >> 0 };
				} else {
					_key$12 = b$2; ((_entry$16 = i.gamepadButtonStates[$Int.keyFor(id$1)], _entry$16 !== undefined ? _entry$16.v : false) || $throwRuntimeError("assignment to entry in nil map"))[ebiten.GamepadButton.keyFor(_key$12)] = { k: _key$12, v: 0 };
				}
				b$2 = b$2 + (1) >> 0;
			}
			_i$3++;
		}
		idsToDelete = new sliceType$1([]);
		_ref$4 = i.gamepadButtonStates;
		_i$4 = 0;
		_keys$2 = $keys(_ref$4);
		while (true) {
			if (!(_i$4 < _keys$2.length)) { break; }
			_entry$17 = _ref$4[_keys$2[_i$4]];
			if (_entry$17 === undefined) {
				_i$4++;
				continue;
			}
			id$2 = _entry$17.k;
			_tuple$2 = (_entry$18 = ids[$Int.keyFor(id$2)], _entry$18 !== undefined ? [_entry$18.v, true] : [new structType.ptr(), false]);
			ok$2 = _tuple$2[1];
			if (!ok$2) {
				idsToDelete = $append(idsToDelete, id$2);
			}
			_i$4++;
		}
		_ref$5 = idsToDelete;
		_i$5 = 0;
		while (true) {
			if (!(_i$5 < _ref$5.$length)) { break; }
			id$3 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
			delete i.gamepadButtonStates[$Int.keyFor(id$3)];
			_i$5++;
		}
		ids = $makeMap($Int.keyFor, []);
		_ref$6 = i.prevTouchStates;
		_i$6 = 0;
		_keys$3 = $keys(_ref$6);
		while (true) {
			if (!(_i$6 < _keys$3.length)) { break; }
			_entry$19 = _ref$6[_keys$3[_i$6]];
			if (_entry$19 === undefined) {
				_i$6++;
				continue;
			}
			id$4 = _entry$19.k;
			_key$13 = id$4; (i.prevTouchStates || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$13)] = { k: _key$13, v: 0 };
			_i$6++;
		}
		_ref$7 = ebiten.Touches();
		_i$7 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$7 < _ref$7.$length)) { break; } */ if(!(_i$7 < _ref$7.$length)) { $s = 2; continue; }
			t = ((_i$7 < 0 || _i$7 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$7]);
			_r = t.ID(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_key$14 = _r; (ids || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$14)] = { k: _key$14, v: new structType.ptr() };
			_r$1 = t.ID(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = t.ID(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_key$15 = _r$1; (i.prevTouchStates || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$15)] = { k: _key$15, v: (_entry$20 = i.touchStates[$Int.keyFor(_r$2)], _entry$20 !== undefined ? _entry$20.v : 0) };
			_r$3 = t.ID(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_index = _r$3;
			_key$16 = _index; (i.touchStates || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$16)] = { k: _key$16, v: (_entry$21 = i.touchStates[$Int.keyFor(_index)], _entry$21 !== undefined ? _entry$21.v : 0) + (1) >> 0 };
			_i$7++;
		/* } */ $s = 1; continue; case 2:
		idsToDelete = new sliceType$1([]);
		_ref$8 = i.touchStates;
		_i$8 = 0;
		_keys$4 = $keys(_ref$8);
		while (true) {
			if (!(_i$8 < _keys$4.length)) { break; }
			_entry$22 = _ref$8[_keys$4[_i$8]];
			if (_entry$22 === undefined) {
				_i$8++;
				continue;
			}
			id$5 = _entry$22.k;
			_tuple$3 = (_entry$23 = ids[$Int.keyFor(id$5)], _entry$23 !== undefined ? [_entry$23.v, true] : [new structType.ptr(), false]);
			ok$3 = _tuple$3[1];
			if (!ok$3) {
				idsToDelete = $append(idsToDelete, id$5);
			}
			_i$8++;
		}
		_ref$9 = idsToDelete;
		_i$9 = 0;
		while (true) {
			if (!(_i$9 < _ref$9.$length)) { break; }
			id$6 = ((_i$9 < 0 || _i$9 >= _ref$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$9.$array[_ref$9.$offset + _i$9]);
			delete i.touchStates[$Int.keyFor(id$6)];
			_i$9++;
		}
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: inputState.ptr.prototype.update }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$15 = _entry$15; $f._entry$16 = _entry$16; $f._entry$17 = _entry$17; $f._entry$18 = _entry$18; $f._entry$19 = _entry$19; $f._entry$2 = _entry$2; $f._entry$20 = _entry$20; $f._entry$21 = _entry$21; $f._entry$22 = _entry$22; $f._entry$23 = _entry$23; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._i$7 = _i$7; $f._i$8 = _i$8; $f._i$9 = _i$9; $f._index = _index; $f._key = _key; $f._key$1 = _key$1; $f._key$10 = _key$10; $f._key$11 = _key$11; $f._key$12 = _key$12; $f._key$13 = _key$13; $f._key$14 = _key$14; $f._key$15 = _key$15; $f._key$16 = _key$16; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._key$8 = _key$8; $f._key$9 = _key$9; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._keys$4 = _keys$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._ref$9 = _ref$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.i = i; $f.id = id; $f.id$1 = id$1; $f.id$2 = id$2; $f.id$3 = id$3; $f.id$4 = id$4; $f.id$5 = id$5; $f.id$6 = id$6; $f.ids = ids; $f.idsToDelete = idsToDelete; $f.k = k; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	inputState.prototype.update = function() { return this.$val.update(); };
	IsKeyJustPressed = function(key) {
		var $ptr, key;
		return KeyPressDuration(key) === 1;
	};
	$pkg.IsKeyJustPressed = IsKeyJustPressed;
	KeyPressDuration = function(key) {
		var $ptr, _entry, key, s;
		theInputState.m.RWMutex.RLock();
		s = (_entry = theInputState.keyStates[ebiten.Key.keyFor(key)], _entry !== undefined ? _entry.v : 0);
		theInputState.m.RWMutex.RUnlock();
		return s;
	};
	$pkg.KeyPressDuration = KeyPressDuration;
	ptrType.methods = [{prop: "update", name: "update", pkg: "github.com/hajimehoshi/ebiten/inpututil", typ: $funcType([], [], false)}];
	inputState.init("github.com/hajimehoshi/ebiten/inpututil", [{prop: "keyStates", name: "keyStates", exported: false, typ: mapType, tag: ""}, {prop: "prevKeyStates", name: "prevKeyStates", exported: false, typ: mapType, tag: ""}, {prop: "mouseButtonStates", name: "mouseButtonStates", exported: false, typ: mapType$1, tag: ""}, {prop: "prevMouseButtonStates", name: "prevMouseButtonStates", exported: false, typ: mapType$1, tag: ""}, {prop: "gamepadButtonStates", name: "gamepadButtonStates", exported: false, typ: mapType$3, tag: ""}, {prop: "prevGamepadButtonStates", name: "prevGamepadButtonStates", exported: false, typ: mapType$3, tag: ""}, {prop: "touchStates", name: "touchStates", exported: false, typ: mapType$4, tag: ""}, {prop: "prevTouchStates", name: "prevTouchStates", exported: false, typ: mapType$4, tag: ""}, {prop: "m", name: "m", exported: false, typ: sync.RWMutex, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hooks.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theInputState = new inputState.ptr($makeMap(ebiten.Key.keyFor, []), $makeMap(ebiten.Key.keyFor, []), $makeMap(ebiten.MouseButton.keyFor, []), $makeMap(ebiten.MouseButton.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), $makeMap($Int.keyFor, []), new sync.RWMutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].RWMutex.ptr(false, 0)));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/hajimehoshi/ebiten/text"] = (function() {
	var $pkg = {}, $init, ebiten, sync, font, fixed, image, color, math, reflect, colorMCacheKey, colorMCacheEntry, glyphImageCacheEntry, ptrType, ptrType$1, ptrType$2, ptrType$3, sliceType, ptrType$4, structType, ptrType$5, ptrType$6, sliceType$1, glyphAdvanceCache, monotonicClock, colorMCache, fontFaces, glyphBoundsCache, glyphImageCache, emptyGlyphs, textM, glyphAdvance, now, fixed26_6ToFloat64, drawGlyph, uniqFace, getGlyphBounds, getGlyphImage, Draw;
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	sync = $packages["github.com/hajimehoshi/ebiten/internal/sync"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	colorMCacheKey = $pkg.colorMCacheKey = $newType(4, $kindUint32, "text.colorMCacheKey", true, "github.com/hajimehoshi/ebiten/text", false, null);
	colorMCacheEntry = $pkg.colorMCacheEntry = $newType(0, $kindStruct, "text.colorMCacheEntry", true, "github.com/hajimehoshi/ebiten/text", false, function(m_, atime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new ebiten.ColorM.ptr(ptrType$3.nil);
			this.atime = new $Int64(0, 0);
			return;
		}
		this.m = m_;
		this.atime = atime_;
	});
	glyphImageCacheEntry = $pkg.glyphImageCacheEntry = $newType(0, $kindStruct, "text.glyphImageCacheEntry", true, "github.com/hajimehoshi/ebiten/text", false, function(image_, atime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.image = ptrType.nil;
			this.atime = new $Int64(0, 0);
			return;
		}
		this.image = image_;
		this.atime = atime_;
	});
	ptrType = $ptrType(ebiten.Image);
	ptrType$1 = $ptrType(image.Rectangle);
	ptrType$2 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].GeoM);
	ptrType$3 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	sliceType = $sliceType(ebiten.ImagePart);
	ptrType$4 = $ptrType(colorMCacheEntry);
	structType = $structType("", []);
	ptrType$5 = $ptrType(fixed.Rectangle26_6);
	ptrType$6 = $ptrType(glyphImageCacheEntry);
	sliceType$1 = $sliceType($Int32);
	glyphAdvance = function(face, r) {
		var $ptr, _entry, _entry$1, _key, _key$1, _r, _tuple, _tuple$1, _tuple$2, a, face, m, ok, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; face = $f.face; m = $f.m; ok = $f.ok; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = glyphAdvanceCache[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = $makeMap($Int32.keyFor, []);
			_key = face; (glyphAdvanceCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: m };
		}
		_tuple$1 = (_entry$1 = m[$Int32.keyFor(r)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
		a = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = face.GlyphAdvance(r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			a = _tuple$2[0];
			_key$1 = r; (m || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: a };
		/* } */ case 2:
		$s = -1; return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: glyphAdvance }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.face = face; $f.m = m; $f.ok = ok; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	now = function() {
		var $ptr, x;
		monotonicClock = (x = new $Int64(0, 1), new $Int64(monotonicClock.$high + x.$high, monotonicClock.$low + x.$low));
		return monotonicClock;
	};
	fixed26_6ToFloat64 = function(x) {
		var $ptr, x;
		return (x) / 64;
	};
	drawGlyph = function(dst, face, r, x, y, clr) {
		var $ptr, _entry, _entry$1, _i, _key, _keys, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, af, b, bf, c, ca, cb, cg, clr, cm, cr, dst, e, face, gf, img, key, key$1, ok, oldest, oldestKey, op, r, rf, x, x$1, y, y$1, y$2, y$3, y$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; af = $f.af; b = $f.b; bf = $f.bf; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; clr = $f.clr; cm = $f.cm; cr = $f.cr; dst = $f.dst; e = $f.e; face = $f.face; gf = $f.gf; img = $f.img; key = $f.key; key$1 = $f.key$1; ok = $f.ok; oldest = $f.oldest; oldestKey = $f.oldestKey; op = $f.op; r = $f.r; rf = $f.rf; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = clr.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cr = _tuple[0];
		cg = _tuple[1];
		cb = _tuple[2];
		ca = _tuple[3];
		cr = (y$1 = (8), y$1 < 32 ? (cr >>> y$1) : 0) >>> 0;
		cg = (y$2 = (8), y$2 < 32 ? (cg >>> y$2) : 0) >>> 0;
		cb = (y$3 = (8), y$3 < 32 ? (cb >>> y$3) : 0) >>> 0;
		ca = (y$4 = (8), y$4 < 32 ? (ca >>> y$4) : 0) >>> 0;
		if (ca === 0) {
			$s = -1; return;
		}
		_r$1 = getGlyphImage(face, r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		img = _r$1;
		if (img === ptrType.nil) {
			$s = -1; return;
		}
		_r$2 = getGlyphBounds(face, r); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		op = new ebiten.DrawImageOptions.ptr(ptrType$1.nil, new ebiten.GeoM.ptr(ptrType$2.nil), new ebiten.ColorM.ptr(ptrType$3.nil), 0, 0, $ifaceNil, sliceType.nil);
		op.GeoM.Translate(fixed26_6ToFloat64(x + b.Min.X >> 0), fixed26_6ToFloat64(y + b.Min.Y >> 0));
		key = (((((((((cr) | (((cg) << 8 >>> 0))) >>> 0) | (((cb) << 16 >>> 0))) >>> 0) | (((ca) << 24 >>> 0))) >>> 0) >>> 0));
		_tuple$1 = (_entry = colorMCache[colorMCacheKey.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			e.atime = now();
		} else {
			if ($keys(colorMCache).length > 512) {
				oldest = new $Int64(2147483647, 4294967295);
				oldestKey = 0;
				_ref = colorMCache;
				_i = 0;
				_keys = $keys(_ref);
				while (true) {
					if (!(_i < _keys.length)) { break; }
					_entry$1 = _ref[_keys[_i]];
					if (_entry$1 === undefined) {
						_i++;
						continue;
					}
					key$1 = _entry$1.k;
					c = _entry$1.v;
					if ((x$1 = c.atime, (x$1.$high < oldest.$high || (x$1.$high === oldest.$high && x$1.$low < oldest.$low)))) {
						oldestKey = key$1;
						oldest = c.atime;
					}
					_i++;
				}
				delete colorMCache[colorMCacheKey.keyFor(oldestKey)];
			}
			cm = new ebiten.ColorM.ptr(ptrType$3.nil);
			rf = (cr) / (ca);
			gf = (cg) / (ca);
			bf = (cb) / (ca);
			af = (ca) / 255;
			cm.Scale(rf, gf, bf, af);
			e = new colorMCacheEntry.ptr($clone(cm, ebiten.ColorM), now());
			_key = key; (colorMCache || $throwRuntimeError("assignment to entry in nil map"))[colorMCacheKey.keyFor(_key)] = { k: _key, v: e };
		}
		ebiten.ColorM.copy(op.ColorM, e.m);
		_r$3 = dst.DrawImage(img, op); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$unused(_r$3);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawGlyph }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.af = af; $f.b = b; $f.bf = bf; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.clr = clr; $f.cm = cm; $f.cr = cr; $f.dst = dst; $f.e = e; $f.face = face; $f.gf = gf; $f.img = img; $f.key = key; $f.key$1 = key$1; $f.ok = ok; $f.oldest = oldest; $f.oldestKey = oldestKey; $f.op = op; $f.r = r; $f.rf = rf; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	uniqFace = function(f) {
		var $ptr, _entry, _entry$1, _i, _key, _keys, _r, _ref, _tuple, f, key, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; f = $f.f; key = $f.key; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = fontFaces[font.Face.keyFor(f)], _entry !== undefined ? [_entry.v, true] : [new structType.ptr(), false]);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return f;
		}
		_ref = fontFaces;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			key = _entry$1.k;
			_r = reflect.DeepEqual(key, f); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return key;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_key = f; (fontFaces || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: new structType.ptr() };
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: uniqFace }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.f = f; $f.key = key; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	getGlyphBounds = function(face, r) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _r, _tuple, _tuple$1, _tuple$2, b, b$1, face, ok, ok$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; b$1 = $f.b$1; face = $f.face; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_tuple = (_entry = glyphBoundsCache[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = face; (glyphBoundsCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: $makeMap($Int32.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = (_entry$2 = glyphBoundsCache[font.Face.keyFor(face)], _entry$2 !== undefined ? _entry$2.v : false)[$Int32.keyFor(r)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$5.nil, false]);
		b$1 = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (ok$1) {
			$s = -1; return b$1;
		}
		_r = face.GlyphBounds(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$2 = _r;
		b[0] = $clone(_tuple$2[0], fixed.Rectangle26_6);
		_key$1 = r; ((_entry$3 = glyphBoundsCache[font.Face.keyFor(face)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: b[0] };
		$s = -1; return b[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getGlyphBounds }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.b$1 = b$1; $f.face = face; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	getGlyphImage = function(face, r) {
		var $ptr, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _key, _key$1, _key$2, _key$3, _keys, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, d, e, e$1, face, h, img, ok, ok$1, ok$2, ok$3, oldest, oldestKey, r, r$1, rgba, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; b = $f.b; d = $f.d; e = $f.e; e$1 = $f.e$1; face = $f.face; h = $f.h; img = $f.img; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; oldest = $f.oldest; oldestKey = $f.oldestKey; r = $f.r; r$1 = $f.r$1; rgba = $f.rgba; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = emptyGlyphs[font.Face.keyFor(face)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = face; (emptyGlyphs || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key)] = { k: _key, v: $makeMap($Int32.keyFor, []) };
		}
		_tuple$1 = (_entry$1 = glyphImageCache[font.Face.keyFor(face)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
		ok$1 = _tuple$1[1];
		if (!ok$1) {
			_key$1 = face; (glyphImageCache || $throwRuntimeError("assignment to entry in nil map"))[font.Face.keyFor(_key$1)] = { k: _key$1, v: $makeMap($Int32.keyFor, []) };
		}
		_tuple$2 = (_entry$2 = (_entry$3 = emptyGlyphs[font.Face.keyFor(face)], _entry$3 !== undefined ? _entry$3.v : false)[$Int32.keyFor(r)], _entry$2 !== undefined ? [_entry$2.v, true] : [new structType.ptr(), false]);
		ok$2 = _tuple$2[1];
		if (ok$2) {
			$s = -1; return ptrType.nil;
		}
		_tuple$3 = (_entry$4 = (_entry$5 = glyphImageCache[font.Face.keyFor(face)], _entry$5 !== undefined ? _entry$5.v : false)[$Int32.keyFor(r)], _entry$4 !== undefined ? [_entry$4.v, true] : [ptrType$6.nil, false]);
		e = _tuple$3[0];
		ok$3 = _tuple$3[1];
		if (ok$3) {
			e.atime = now();
			$s = -1; return e.image;
		}
		_r = getGlyphBounds(face, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		_tmp = new fixed.Int26_6(((b.Max.X - b.Min.X >> 0))).Ceil();
		_tmp$1 = new fixed.Int26_6(((b.Max.Y - b.Min.Y >> 0))).Ceil();
		w = _tmp;
		h = _tmp$1;
		if ((w === 0) || (h === 0)) {
			_key$2 = r; ((_entry$6 = emptyGlyphs[font.Face.keyFor(face)], _entry$6 !== undefined ? _entry$6.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$2)] = { k: _key$2, v: new structType.ptr() };
			$s = -1; return ptrType.nil;
		}
		if ($keys((_entry$7 = glyphImageCache[font.Face.keyFor(face)], _entry$7 !== undefined ? _entry$7.v : false)).length > 512) {
			oldest = new $Int64(2147483647, 4294967295);
			oldestKey = -1;
			_ref = (_entry$8 = glyphImageCache[font.Face.keyFor(face)], _entry$8 !== undefined ? _entry$8.v : false);
			_i = 0;
			_keys = $keys(_ref);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry$9 = _ref[_keys[_i]];
				if (_entry$9 === undefined) {
					_i++;
					continue;
				}
				r$1 = _entry$9.k;
				e$1 = _entry$9.v;
				if ((x = e$1.atime, (x.$high < oldest.$high || (x.$high === oldest.$high && x.$low < oldest.$low)))) {
					oldestKey = r$1;
					oldest = e$1.atime;
				}
				_i++;
			}
			(_entry$10 = (_entry$11 = glyphImageCache[font.Face.keyFor(face)], _entry$11 !== undefined ? _entry$11.v : false)[$Int32.keyFor(oldestKey)], _entry$10 !== undefined ? _entry$10.v : ptrType$6.nil).image.Dispose();
			delete (_entry$12 = glyphImageCache[font.Face.keyFor(face)], _entry$12 !== undefined ? _entry$12.v : false)[$Int32.keyFor(oldestKey)];
		}
		rgba = image.NewRGBA($clone(image.Rect(0, 0, w, h), image.Rectangle));
		d = new font.Drawer.ptr(rgba, image.White, face, new fixed.Point26_6.ptr(0, 0));
		fixed.Point26_6.copy(d.Dot, new fixed.Point26_6.ptr(-b.Min.X, -b.Min.Y));
		$r = d.DrawString(($encodeRune(r))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = ebiten.NewImageFromImage(rgba, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$4 = _r$1;
		img = _tuple$4[0];
		_key$3 = r; ((_entry$13 = glyphImageCache[font.Face.keyFor(face)], _entry$13 !== undefined ? _entry$13.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$3)] = { k: _key$3, v: new glyphImageCacheEntry.ptr(img, now()) };
		$s = -1; return img;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getGlyphImage }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.b = b; $f.d = d; $f.e = e; $f.e$1 = e$1; $f.face = face; $f.h = h; $f.img = img; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.oldest = oldest; $f.oldestKey = oldestKey; $f.r = r; $f.r$1 = r$1; $f.rgba = rgba; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Draw = function(dst, text, face, x, y, clr) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, clr, dst, fa, face, fx, prevR, r, runes, text, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; clr = $f.clr; dst = $f.dst; fa = $f.fa; face = $f.face; fx = $f.fx; prevR = $f.prevR; r = $f.r; runes = $f.runes; text = $f.text; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		textM.Mutex.Lock();
		fx = fixed.I(x);
		prevR = -1;
		runes = (new sliceType$1($stringToRunes(text)));
		_ref = runes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (prevR >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevR >= 0) { */ case 3:
				_r = face.Kern(prevR, r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				fx = fx + (_r) >> 0;
			/* } */ case 4:
			_r$1 = uniqFace(face); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			fa = _r$1;
			$r = drawGlyph(dst, fa, r, fx, fixed.I(y), clr); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = glyphAdvance(fa, r); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			fx = fx + (_r$2) >> 0;
			prevR = r;
			_i++;
		/* } */ $s = 1; continue; case 2:
		textM.Mutex.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.clr = clr; $f.dst = dst; $f.fa = fa; $f.face = face; $f.fx = fx; $f.prevR = prevR; $f.r = r; $f.runes = runes; $f.text = text; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	colorMCacheEntry.init("github.com/hajimehoshi/ebiten/text", [{prop: "m", name: "m", exported: false, typ: ebiten.ColorM, tag: ""}, {prop: "atime", name: "atime", exported: false, typ: $Int64, tag: ""}]);
	glyphImageCacheEntry.init("github.com/hajimehoshi/ebiten/text", [{prop: "image", name: "image", exported: false, typ: ptrType, tag: ""}, {prop: "atime", name: "atime", exported: false, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ebiten.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		monotonicClock = new $Int64(0, 0);
		textM = new sync.Mutex.ptr(new $packages["github.com/gopherjs/gopherjs/nosync"].Mutex.ptr(false));
		glyphAdvanceCache = $makeMap(font.Face.keyFor, []);
		colorMCache = $makeMap(colorMCacheKey.keyFor, []);
		fontFaces = $makeMap(font.Face.keyFor, []);
		glyphBoundsCache = $makeMap(font.Face.keyFor, []);
		glyphImageCache = $makeMap(font.Face.keyFor, []);
		emptyGlyphs = $makeMap(font.Face.keyFor, []);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/colornames"] = (function() {
	var $pkg = {}, $init, color;
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = color.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Darkgreen = new color.RGBA.ptr(0, 100, 0, 255);
		$pkg.White = new color.RGBA.ptr(255, 255, 255, 255);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Fatal;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", true, "log", true, function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var $ptr, flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var $ptr, l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var $ptr, _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = ((((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24)));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = (((48 + i >> 0) << 24 >>> 24)));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		if (!(((l.flag & 32) === 0))) {
			time.Time.copy(t, $clone(t, time.Time).UTC());
		}
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = $clone(t, time.Time).Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, ((month >> 0)), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = $clone(t, time.Time).Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = $clone(t, time.Time).Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = $substring(file, (i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), $clone(now, time.Time), file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var $ptr, flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var $ptr, l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatal = Fatal;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init("log", [{prop: "mu", name: "mu", exported: false, typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", exported: false, typ: $String, tag: ""}, {prop: "flag", name: "flag", exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, Seed, Intn, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var $ptr, i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var $ptr, rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var $ptr, _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var $ptr, _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var $ptr, _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($shiftRightInt64(_r, 31).$low >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var $ptr, _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var $ptr, _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var $ptr, _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var $ptr, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var $ptr, _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ((_r >> 0));
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var $ptr, _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var $ptr, _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var $ptr, _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Seed = function(seed) {
		var $ptr, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = globalRand.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Seed }; } $f.$ptr = $ptr; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Seed = Seed;
	Intn = function(n) {
		var $ptr, _r, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = globalRand.Intn(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Intn }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Intn = Intn;
	lockedSource.ptr.prototype.Int63 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var $ptr, _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var $ptr, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var $ptr, r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.$ptr = $ptr; $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var $ptr, _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var $ptr, _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var $ptr, i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var $ptr, rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var $ptr, rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, bytes, fmt, truetype, js, ebiten, ebitenutil, inpututil, text, colornames, font, color, png, log, rand, strconv, strings, time, course, player, sliceType, ptrType, sliceType$1, sliceType$2, sliceType$3, ptrType$1, ptrType$2, ptrType$3, sliceType$4, funcType, ptrType$4, raceCourse, racePlayer, playerImage, courseImage, mainFont, score, isGameOver, bigFont, isDrawScore, count, carBytes, fontBytes, isFirstJS, init, createCourse, collision, update, keyEvent, main, decodeFont, jsEvent, fitScreen, calcScale;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	truetype = $packages["github.com/golang/freetype/truetype"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	ebiten = $packages["github.com/hajimehoshi/ebiten"];
	ebitenutil = $packages["github.com/hajimehoshi/ebiten/ebitenutil"];
	inpututil = $packages["github.com/hajimehoshi/ebiten/inpututil"];
	text = $packages["github.com/hajimehoshi/ebiten/text"];
	colornames = $packages["golang.org/x/image/colornames"];
	font = $packages["golang.org/x/image/font"];
	color = $packages["image/color"];
	png = $packages["image/png"];
	log = $packages["log"];
	rand = $packages["math/rand"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	time = $packages["time"];
	course = $pkg.course = $newType(0, $kindStruct, "main.course", true, "main", false, function(curveTo_, positionX_, isFirst_, data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.curveTo = 0;
			this.positionX = 0;
			this.isFirst = false;
			this.data = sliceType.nil;
			return;
		}
		this.curveTo = curveTo_;
		this.positionX = positionX_;
		this.isFirst = isFirst_;
		this.data = data_;
	});
	player = $pkg.player = $newType(0, $kindStruct, "main.player", true, "main", false, function(positionX_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.positionX = 0;
			return;
		}
		this.positionX = positionX_;
	});
	sliceType = $sliceType($Float64);
	ptrType = $ptrType(ebiten.Image);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($Int);
	ptrType$1 = $ptrType($packages["image"].Rectangle);
	ptrType$2 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].GeoM);
	ptrType$3 = $ptrType($packages["github.com/hajimehoshi/ebiten/internal/affine"].ColorM);
	sliceType$4 = $sliceType(ebiten.ImagePart);
	funcType = $funcType([], [], false);
	ptrType$4 = $ptrType(course);
	init = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, carPNG, err, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; carPNG = $f.carPNG; err = $f.err; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = rand.Seed($clone(time.Now(), time.Time).UnixNano()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = $ifaceNil;
		r = bytes.NewReader(carBytes);
		_r = png.Decode(r); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		carPNG = _tuple[0];
		_r$1 = ebiten.NewImageFromImage(carPNG, 1); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		playerImage = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		_r$2 = ebiten.NewImage(64, 1, 1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		courseImage = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		_r$3 = courseImage.Fill((x = new color.RGBA.ptr(168, 171, 169, 255), new x.constructor.elem(x))); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = rand.Intn(2); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		course.copy(raceCourse, new course.ptr(_r$4, 88, true, sliceType.nil));
		_r$5 = decodeFont(fontBytes, 8); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		mainFont = _r$5;
		_r$6 = decodeFont(fontBytes, 24); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		bigFont = _r$6;
		score = 0;
		isGameOver = false;
		isDrawScore = false;
		count = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.carPNG = carPNG; $f.err = err; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	createCourse = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, curve, i, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; curve = $f.curve; i = $f.i; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(!isGameOver)) { break; } */ if(!(!isGameOver)) { $s = 4; continue; }
				if ((i === 180) && (count === 0)) {
					racePlayer.positionX = (x = raceCourse.data, (60 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 60])) + 32;
				}
				curve = new sliceType$3([1, 0, -1]);
				if ((_r = i % 46, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
					raceCourse.curveTo = 0;
				}
				/* */ if (((_r$1 = i % 56, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && !((score === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((_r$1 = i % 56, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && !((score === 0))) { */ case 5:
					_r$2 = rand.Intn(3); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					raceCourse.curveTo = (x$1 = _r$2, ((x$1 < 0 || x$1 >= curve.$length) ? ($throwRuntimeError("index out of range"), undefined) : curve.$array[curve.$offset + x$1]));
				/* } */ case 6:
				if ((_r$3 = i % 1, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0) {
					if (raceCourse.positionX < 20 && (raceCourse.curveTo === (2 >= curve.$length ? ($throwRuntimeError("index out of range"), undefined) : curve.$array[curve.$offset + 2]))) {
						raceCourse.curveTo = 0;
					} else if (raceCourse.positionX > 172 && (raceCourse.curveTo === (0 >= curve.$length ? ($throwRuntimeError("index out of range"), undefined) : curve.$array[curve.$offset + 0]))) {
						raceCourse.curveTo = 0;
					} else {
						raceCourse.positionX = raceCourse.positionX + (raceCourse.curveTo) >> 0;
					}
				}
				/* */ if (count === 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (count === 0) { */ case 8:
					/* */ if (i > 180) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (i > 180) { */ case 11:
						$r = time.Sleep(new time.Duration(0, 12000000)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						raceCourse.data = $append($subslice(raceCourse.data, 1), (raceCourse.positionX));
						$s = 13; continue;
					/* } else { */ case 12:
						raceCourse.data = $append(raceCourse.data, (raceCourse.positionX));
					/* } */ case 13:
					$s = 10; continue;
				/* } else { */ case 9:
					$r = time.Sleep(new time.Duration(0, 12000000)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					raceCourse.data = $append($subslice(raceCourse.data, 1), (raceCourse.positionX));
				/* } */ case 10:
				if (((_r$4 = i % 110, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0) && i > 180) {
					score = score + (1) >> 0;
					isDrawScore = true;
				}
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			$r = time.Sleep(new time.Duration(0, 495000000)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: createCourse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.curve = curve; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	course.ptr.prototype.draw = function(screen) {
		var $ptr, _r, c, i, op, screen, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; op = $f.op; screen = $f.screen; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 181)) { break; } */ if(!(i < 181)) { $s = 2; continue; }
			op = new ebiten.DrawImageOptions.ptr(ptrType$1.nil, new ebiten.GeoM.ptr(ptrType$2.nil), new ebiten.ColorM.ptr(ptrType$3.nil), 0, 0, $ifaceNil, sliceType$4.nil);
			op.GeoM.Translate((x = c.data, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), ((210 - i >> 0)));
			_r = screen.DrawImage(courseImage, op); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: course.ptr.prototype.draw }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.op = op; $f.screen = screen; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	course.prototype.draw = function(screen) { return this.$val.draw(screen); };
	collision = function() {
		var $ptr, i, x, x$1;
		i = 30;
		while (true) {
			if (!(i < 66 && !isGameOver)) { break; }
			if (racePlayer.positionX <= (x = raceCourse.data, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]))) {
				isGameOver = true;
			}
			if (racePlayer.positionX + 24 >= (x$1 = raceCourse.data, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])) + 64) {
				isGameOver = true;
			}
			i = i + (1) >> 0;
		}
	};
	update = function(screen) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, op, screen, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; op = $f.op; screen = $f.screen; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = jsEvent(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = screen.Fill((x = colornames.Darkgreen, new x.constructor.elem(x))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = raceCourse.draw(screen); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		op = new ebiten.DrawImageOptions.ptr(ptrType$1.nil, new ebiten.GeoM.ptr(ptrType$2.nil), new ebiten.ColorM.ptr(ptrType$3.nil), 0, 0, $ifaceNil, sliceType$4.nil);
		op.GeoM.Translate(racePlayer.positionX, 144);
		_r$1 = screen.DrawImage(playerImage, op); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = text.Draw(screen, "SCORE " + strconv.Itoa(score), mainFont, 172, 18, (x$1 = colornames.White, new x$1.constructor.elem(x$1))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = screen;
		_r$2 = fmt.Sprintf("FPS: %0.2f", new sliceType$2([new $Float64(ebiten.CurrentFPS())])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = ebitenutil.DebugPrint(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		collision();
		/* */ if (score <= 2 && (count === 0)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (score <= 2 && (count === 0)) { */ case 8:
			$r = text.Draw(screen, "\xE3\x82\xBB\xE3\x83\x96\xE3\x83\xB3 \xE3\x83\xAC\xE3\x83\xBC\xE3\x82\xB9", bigFont, 48, 50, (x$2 = colornames.White, new x$2.constructor.elem(x$2))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* */ if (isGameOver) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (isGameOver) { */ case 11:
			$r = text.Draw(screen, "GAME OVER", bigFont, 20, 77, (x$3 = colornames.White, new x$3.constructor.elem(x$3))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = text.Draw(screen, "PRESS SPACE KEY", mainFont, 67, 90, (x$4 = colornames.White, new x$4.constructor.elem(x$4))); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: update }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.op = op; $f.screen = screen; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	keyEvent = function() {
		var $ptr, i, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* */ if (isGameOver) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (isGameOver) { */ case 3:
				$r = time.Sleep(new time.Duration(0, 10000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			/* */ if (inpututil.IsKeyJustPressed(75) && ((count === 0) || isGameOver)) { $s = 6; continue; }
			/* */ if (!isGameOver) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (inpututil.IsKeyJustPressed(75) && ((count === 0) || isGameOver)) { */ case 6:
				i = 0;
				while (true) {
					if (!(i < (raceCourse.data.$length - 40 >> 0))) { break; }
					(x$2 = raceCourse.data, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = (x = raceCourse.data, x$1 = raceCourse.data.$length - 40 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))));
					i = i + (1) >> 0;
				}
				racePlayer.positionX = (x$3 = raceCourse.data, x$4 = raceCourse.data.$length - 40 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])) + 32;
				isGameOver = false;
				count = count + (1) >> 0;
				score = 0;
				$s = 8; continue;
			/* } else if (!isGameOver) { */ case 7:
				$r = time.Sleep(new time.Duration(0, 10000000)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (ebiten.IsKeyPressed(64) || (ebiten.Touches().$length === 1)) {
					racePlayer.positionX = racePlayer.positionX - (0.6);
				}
				if (ebiten.IsKeyPressed(70) || ebiten.Touches().$length > 1) {
					racePlayer.positionX = racePlayer.positionX + (0.6);
				}
			/* } */ case 8:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: keyEvent }; } $f.$ptr = $ptr; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	main = function() {
		var $ptr, _r, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$go(createCourse, []);
		$go(keyEvent, []);
		_r = ebiten.Run(update, 256, 224, 3, "\xE3\x82\xBB\xE3\x83\x96\xE3\x83\xB3 \xE3\x83\xAC\xE3\x83\xBC\xE3\x82\xB9"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeFont = function(b, size) {
		var $ptr, _r, _tuple, b, err, f, size, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; size = $f.size; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = truetype.Parse(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		tt = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		f = truetype.NewFace(tt, new truetype.Options.ptr(size, 72, 2, 0, 0, 0));
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeFont }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.size = size; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsEvent = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (isFirstJS) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isFirstJS) { */ case 1:
			$r = fitScreen(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			isFirstJS = false;
		/* } */ case 2:
		$global.addEventListener($externalize("resize", $String), $externalize((function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = fitScreen(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: jsEvent }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	fitScreen = function() {
		var $ptr, scale, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; scale = $f.scale; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scale = calcScale();
		$r = ebiten.SetScreenScale(scale); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fitScreen }; } $f.$ptr = $ptr; $f.scale = scale; $f.$s = $s; $f.$r = $r; return $f;
	};
	calcScale = function() {
		var $ptr, innerHeight, innerWidth, scale, scaleHeight, scaleWidth;
		innerWidth = $parseFloat($global.window.innerWidth);
		innerHeight = $parseFloat($global.window.innerHeight);
		scaleWidth = innerWidth / 256;
		scaleHeight = innerHeight / 224;
		scale = 1;
		if (scaleWidth < scaleHeight) {
			scale = scaleWidth;
		} else {
			scale = scaleHeight;
		}
		return scale;
	};
	ptrType$4.methods = [{prop: "draw", name: "draw", pkg: "main", typ: $funcType([ptrType], [], false)}];
	course.init("main", [{prop: "curveTo", name: "curveTo", exported: false, typ: $Int, tag: ""}, {prop: "positionX", name: "positionX", exported: false, typ: $Int, tag: ""}, {prop: "isFirst", name: "isFirst", exported: false, typ: $Bool, tag: ""}, {prop: "data", name: "data", exported: false, typ: sliceType, tag: ""}]);
	player.init("main", [{prop: "positionX", name: "positionX", exported: false, typ: $Float64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = truetype.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ebiten.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ebitenutil.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = inpututil.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = text.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = colornames.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = png.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		raceCourse = new course.ptr(0, 0, false, sliceType.nil);
		racePlayer = new player.ptr(0);
		playerImage = ptrType.nil;
		courseImage = ptrType.nil;
		mainFont = $ifaceNil;
		score = 0;
		isGameOver = false;
		bigFont = $ifaceNil;
		isDrawScore = false;
		count = 0;
		carBytes = (new sliceType$1($stringToBytes("\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00\x18\x00\x00\x00$\b\x03\x00\x00\x00\xA4\x11\n\x1C\x00\x00\x03\x00PLTEbbb\x00\x18\x90\x1F\x00\x9B=\x00\x8Bc\x00is\x00\x17h\f\x00M*\x005K\x01\x00b\x00\x00f\x00\x01Y:\x00I|\x05\x05\x05\x05\x05\x05\x05\x05\x05\xBB\xB1\xBB V\xE5T4\xFD\x81\"\xEA\xAA#\xC3\xB3&^\xA9C\x00\x8C_\x00l|\x00!\x91\x00\x00\x97\x00\x00\x8DU\x00\x7F\xA8\x05\x05\x05\x05\x05\x05\x05\x05\x05\xFF\xFF\xFFl\xA6\xFF\x97\x88\xFF\xBCw\xFF\xE4t\xFF\xF4k\xB2\xEF\x86T\xD8\xA1 \xB5\xBA\x06u\xCD\tO\xD4?@\xCD\x87J\xC4\xD6SSS\x05\x05\x05\x05\x05\x05\xFF\xFF\xFF\xB2\xD5\xFF\xBA\xB8\xFF\xD1\xBA\xFF\xEC\xBC\xFF\xFF\xBF\xE5\xFF\xCA\xB8\xF0\xD5\xA3\xE6\xE4\x95\xCB\xF3\x85\xAB\xF3\x9B\x9E\xE8\xBD\x9E\xE6\xDC\xA8\xAB\xA9\x05\x05\x05\x05\x05\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xE4\xBB\x85;\x00\x00\x001tRNS\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x1F\x9AN!\x00\x00\x00\x7FIDATx\x9C\xCD\xD3\xC1\x11\x85 \f\x04\xD04A\x1F\xD9\n\xD2\x7FW\xFF\v\xC4l\x02\xA3\x8E'\xF7\xE6>\x07!\xAAhO\xA3\x8CFj\xED$\xDE\xDB\x8C\x8B\xF8\xFD\tZ\x82\xA1\x01\xB4\xF6\xD9\xFF\x85\x81\xFA\n\xED\t\xD0\x05\xC7\x06 %\x00X\xA4C\xED\x0Fy\x03\xBA\x7F\xC6<\xC7\xBA\xAB<+J\x07\xD4\x16\x0EE\x10\x80\xDC\x7F\x18l\x0Fs\xBA\xEB\x01\xED\xE6\x9D\xF3|3\xD4\xA9_\x81\xEE\x97\x8A\xAF=\x87~\x9C\xD2\xEB\x0F\x13\x96o\xC1M\xB0\xFB\xBF\x00\x00\x00\x00IEND\xAEB`\x82")));
		fontBytes = (new sliceType$1($stringToBytes("\x00\x01\x00\x00\x00\x10\x01\x00\x00\x04\x00\x00DSIG\x00\x00\x00\x01\x00\x00\xC7,\x00\x00\x00\bGDEF\x04\x18\x04\x1B\x00\x00\xC4\xA4\x00\x00\x00\x1CGSUBU\xDCZF\x00\x00\xC4\xC0\x00\x00\x02jOS/2^\x7F_\xDD\x00\x00\xA7\xAC\x00\x00\x00`cmapD\xD7\xD1y\x00\x00\xA8\f\x00\x00\x07\x9Ecvt \x00\x00\x00\x00\x00\x00\xB1\x8C\x00\x00\x00\x06fpgmG\xA6sB\x00\x00\xAF\xAC\x00\x00\x01\xDFgasp\x00\x1A\x00#\x00\x00\xC4\x94\x00\x00\x00\x10glyf\xAD\xB8\x8A_\x00\x00\x01\f\x00\x00\x99\x8Chead\vb\n\xDF\x00\x00\x9E\xF0\x00\x00\x006hhea\x02\xAA\x04n\x00\x00\xA7\x88\x00\x00\x00$hmtx\x82\x93\xFA8\x00\x00\x9F(\x00\x00\b`loca\x1C\xEDCz\x00\x00\x9A\xB8\x00\x00\x048maxp\x02\xA5\x04|\x00\x00\x9A\x98\x00\x00\x00 name\xE3\xA5\x95\x94\x00\x00\xB1\x94\x00\x00\x03fpost\xD4\xFC\\\xE3\x00\x00\xB4\xFC\x00\x00\x0F\x95\x00\x10\x00\x00\x00\x00\x00\xC8\x01@\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00?\x00\x00\x133\x15#\x073\x15#33\x15#'3\x15#33\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#\xA0((\xA0((((((((((((((((((((((((((P((((((((P((((((((\x01@(\xC8((\xA0((((\xA0(((\xC8(((\xC8(((\x00\x00\x06\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15353\x15##3\x15#73\x15#\x173\x15#'3\x15#'3\x15#((x(\xC8(((P((\xA0((P(((((\xA0((PP\xF0PPP\xF0Px(\x00\x00\x00\x00\x06\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x005353\x15353\x153\x15#5#\x15#73\x15#53\x15#33\x15#33\x15#'3\x15#((x(((\xC8(P(((((((((((((P((((P((\xA0(x(((\xA0(\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x005353\x15353\x153\x15#5#\x15#73\x15#73\x15#33\x15#'3\x15##3\x15#73\x15#((x(((\xC8(P((((((((((((((P((P((((P((\xA0(P((\xA0((((\x00\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15353\x15##3\x15#73\x15#\x173\x15#\x033\x15#33\x15#33\x15#53\x15#((x(\xC8(((P((\xA0((\xA0((((((((((\xA0((PP\xC8(PP\x01\x18(((x(\x00\x00\x00\x00\x06\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x005353\x15353\x153\x15#5#\x15#73\x15#73\x15#33\x15#'3\x15#33\x15#((x(((\xC8(P((((((((((((((P((((P((\xA0(P((\xA0((\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x005353\x15353\x153\x15#5#\x15#73\x15#73\x15#33\x15#'3\x15##3\x15#33\x15#73\x15#((x(((\xC8(P((((((((((((((((((((P((((P((\xA0(P((\xA0(((P(\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x005353\x15353\x153\x15#5#\x15#73\x15#73\x15#33\x15#'3\x15#'3\x15#73\x15#73\x15#((x(((\xC8(P(((((((((PPx(((PP\xA0((P((((P((\xA0(P((x(((P(((\x00\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x007#53\x1535#53\x15#\x153\x15#\x153\x15#'3\x15#73\x15#\xA0x(P(\xA0P((Px\xA0((P((PP(x((P(P(PP\xF0P\x00\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\r\x00\x11\x00\x00\x113\x15#\x15353\x15#\x153\x15#73\x15#\xC8\xA0\xA0(\xC8\xC8\xF0\xF0((\x01\x18(PPxP(xP\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#53\x15#P\xA0\xA0((((((P\xA0\xA0(((\xC8((((\x01\x18(\xA0(\xA0x((\xF0(x(\xC8(\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00!\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#53\x15#\x07353\x15#P\xA0\xA0((((((P\xA0\xA0(((\xC8((((\x96((P\x01\x18(x(xP((\xC8(P(\xA0(\xC8(P\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x00\x113\x15#\x153\x15#73\x15#73\x15#'3\x15#\xC8\xA0\xA0\xC8\xC8((((((((\x01\x18(\xC8(P(\xA0x\xA0(\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00\x113\x15#\x153\x15#73\x15#73\x15#'3\x15#\x073\x15#\xC8\xA0\xA0\xC8\xC8((((((((\xC8\xA0\xA0\x01\x18(\xC8(P(\xA0x\xA0(((\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x00\x11!\x15#\x153\x15#\x153\x15!\x01\x18\xF0\xC8\xC8\xF0\xFE\xE8\x01\x18(P(P(\x00\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x005353\x153\x15#\x153\x15#\x153\x15!\x133\x15#x(x\xF0\xC8\xC8\xF0\xFE\xE8\xA0((\xC8(((((((\x01\x18(\x00\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x005!\x15#\x153\x15#\x153\x15!\x133\x15##3\x15#73\x15#\x01\x18\xF0\xC8\xC8\xF0\xFE\xE8x(((((P((\xC8(((((\x01\x18((((\x00\x00\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x005!\x15#\x153\x15#\x153\x15!\x133\x15#'3\x15#\x01\x18\xF0\xC8\xC8\xF0\xFE\xE8\xA0((P((\xC8(((((\x01\x18(((\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x005353\x153\x15#\x153\x15#\x153\x15!\x133\x15#x(x\xF0\xC8\xC8\xF0\xFE\xE8P((\xC8(((((((\x01\x18(\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\t\x00\x00\x11!\x15#\x153\x15#\x15#\x01\x18\xF0\xC8\xC8(\x01\x18(P(x\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x007#53\x15#'3\x15#'3\x15#\x173\x15#'3\x15#73\x15#33\x15#\xF0x\xA0(\xC8(((((P\xA0\xA0((((\xA0\xA0\xA0((x(x((\xA0x((\xF0(P((\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x00\x113\x15353\x11#5#\x15#(\xC8((\xC8(\x01\x18xx\xFE\xE8xx\x00\x01\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x00535#53\x15#\x153\x15#PP\xC8PP\xC8(\xC8((\xC8(\x00\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x0F\x00\x13\x00\x00535#5353\x153\x15#\x153\x15#\x133\x15#PPP(PPP\xC8x(((x((((x(\x01\x18(\x00\x00\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00535#53\x15#\x153\x15#\x133\x15##3\x15#73\x15#PP\xC8PP\xC8P(((((P(((x((x(\x01\x18((((\x00\x00\x03\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x0F\x00\x13\x00\x00535#53\x15#\x153\x15#\x133\x15#'3\x15#PP\xC8PP\xC8x((P(((x((x(\x01\x18(((\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x0F\x00\x13\x00\x00535#5353\x153\x15#\x153\x15#\x133\x15#PPP(PPP\xC8((((x((((x(\x01\x18(\x00\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x007#53\x15#\x15#'3\x15#33\x15#\xA0x\xF0P(\xA0(((xx\xF0((\xC8PP(\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x00\x113\x153\x15#\x15#7353\x15#33\x15#33\x15#33\x15#'3\x15#73\x15#((((P((PP((((((((P(((((\x01\x18\xA0(P\xA0(P(((\xF0(P(\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\x00\x113\x153\x15!(\xF0\xFE\xE8\x01\x18\xF0(\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x11#\x033\x153\x15#\x15#73\x15#33\x15#73\x15#\xF0((((\xF0((((P((((((((\xC8((\xFE\xE8\x01\x18((\xC8\xC8((P(\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x11#\x033\x153\x15#\x15#73\x15#33\x15#33\x15#\xF0((((\xF0((((P((((((((((\xC8\xFE\xE8\x01\x18((\xC8\xC8(((\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x19\x00\x1D\x00!\x00%\x00\x005353\x15#\x15#73\x15#33\x15#33\x15#3353\x15#\x033\x15#33\x15#73\x15#((((P(((((((((((PxPPPPPP((\xC8(P\xA0\xA0(((\xA0\xC8\x01\x18((P(\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#73\x15#'3\x15#Pxx((((((Pxx(((\xA0((((((((\x01\x18(\xA0(\xA0x((\xF0(x(\xA0x\xA0(\x00\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007353\x153\x15##3\x15#33\x15#73\x15#'3\x15#(((x\xC8((((\xC8\xC8\xC8((x((\xC8(((x(\xA0x\xF0(\x00\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15##3\x15#33\x15#73\x15#'3\x15##3\x15#73\x15#(\xC8\xC8((((\xC8\xC8\xC8((x(((((P((\xC8(x(\xA0x\xF0((((\x00\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x00\x133\x15353\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#73\x15#'3\x15#P(((x((((((Pxx(((\xA0((((((((\x01\x18((Px(xP((\xC8(P(xPx(\x00\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007353\x153\x15##3\x15#33\x15#73\x15#'3\x15#(x((\xC8((((\xC8\xC8\xC8((x((\xC8(((x(\xA0x\xF0(\x00\x00\x00\x00\x0F\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#73\x15#'3\x15#73\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#Pxx((((((Pxx(((\xA0(((((((((((\xF0(((((((((((((((((\x01\x18(\xA0(\xA0x((\xF0(x(\xA0x\xA0(P(\xC8(P(P(P(P(P(\x00\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0073\x15##3\x15#33\x15#73\x15#'3\x15#'3\x15#73\x15#73\x15#(\xC8\xC8((((\xC8\xC8\xC8((xPPx(((PP\xA0((\xC8(x(\xA0x\xC8(((P(((\x00\x00\x00\x06\x00\x00\x00\x00\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#535#5353\x15#\x153\x15#\x153\x15#'3\x15#33\x15#'3\x15#73\x15#73\x15#\xA0((((xP((Pxx(((((P((((((((((x(((P(P(P((\xC8x\xA0(P(\x00\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\t\x00\r\x00\x00\x113\x15#\x153\x15#\x15#73\x15#\xF0\xC8\xC8\xC8(\xF0((\x01\x18(P(x\xF0P\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x0F\x00\x00\x113\x153\x15#\x153\x15#\x15#73\x15#(\xC8\xC8\xC8\xC8(\xF0((\x01\x18((P(P\xC8P\x00\x00\x00\n\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#33\x15#33\x15#53\x15#'3\x15#Pxx((((((Pxx(((x(((((((((((((\x01\x18(\xA0(\xA0x((\xF0(P(((\xC8x\xA0(\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\r\x00\x11\x00\x15\x00\x19\x00\x00\x113\x15#\x153\x15#\x15#5#\x15#73\x15#33\x15#53\x15#\xF0\xC8\xC8((x(\xC8(((((((\x01\x18(P(((xP((\xF0P\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#\x073\x15#33\x15#'3\x15#\x173\x15#'3\x15#33\x15#(\xC8\xC8((((\xC8\xC8(((\xF0((\xC8\xA0\xA0\xA0((\xA0((((\xF0P(P\xF0((\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x007#5!\x15#\x15#xx\x01\x18x(\xF0((\xF0\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x007353\x11#'3\x15#'3\x15#P\xA0(\xC8(((((((\xF0\xFE\xE8P(\xF0\xC8\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x007353\x15#'3\x15#'3\x15#73\x15#73\x15#P\xA0(\xC8((((((P((((((\xA0\xC8P(\xA0x\xA0(P(\x00\x00\x06\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x007353\x15#'3\x15#'3\x15#73\x15##3\x15#73\x15#P\xA0(\xC8((((((x(((((P(((\xA0\xC8P(\xA0x\xC8((((\x00\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x007353\x15#'3\x15#'3\x15#73\x15#73\x15#P\xA0(\xC8((((((P((P(((\xA0\xC8P(\xA0x\xC8(((\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x007353\x15#'3\x15#'3\x15#73\x15#33\x15#P\xA0(\xC8((((((P((((((\xA0\xC8P(\xA0x\xC8((\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00\x133\x15#\x073\x15#'3\x15#'3\x15#'3\x15#\x173\x15#73\x15#\xF0((x(((((((((((\xA0(((((\x01\x18P\xA0(xP\xA0P\xA0PPP\xA0P\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x11#\x033\x153\x15#\x15#73\x15#73\x15#'3\x15#\xF0((((\xF0((((P((P((((((P\xA0\xFE\xE8\x01\x18\xA0P(\xC8PPPx(\x00\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5353\x15#'3\x153\x15#\x15#73\x15#73\x15#33\x15#53\x15##3\x15#\xF0((((\xF0((((P(((((((((((((((x\xC8\xC8x((x(P((\xC8((\x00\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#5353\x15#'3\x153\x15#\x15#73\x15#73\x15#33\x15#'3\x15##3\x15#73\x15#\xF0((((\xF0((((P((((((((((((((P((((x\xC8\xC8x((x(P((\xC8((((\x00\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5353\x15#'3\x153\x15#\x15#73\x15#73\x15#33\x15#53\x15#'3\x15#\xF0((((\xF0((((P((((((((((P((((x\xC8\xC8x((x(P((\xC8(((\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5353\x15#'3\x153\x15#\x15#73\x15#73\x15#33\x15#'3\x15#33\x15#\xF0((((\xF0((((P((((((((P(((((((x\xC8\xC8x((x(P((\xC8((\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\v\x00\x0F\x00\x15\x00\x19\x00\x1D\x00!\x00'\x00+\x00\x00\x133\x15#\x15#\x07353\x15#73\x15#'#53\x15#33\x15#33\x15#33\x15#33\x153\x15#'3\x15#\xC8P((\xC8((PP((((P(((((((((((((P(((\x01\x18((\xA0(Px(\xA0(P(((((\xC8(\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#\x033\x15#33\x15#33\x15#73\x15#73\x15#73\x15#x((x((((((((P((((((((\xA0\xA0\x01\x18(((((P(P(\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#'3\x15#33\x15#33\x15#73\x15#73\x15#73\x15#'3\x15##3\x15#x((x((((((((P((((((((P(((((xx\xF0(((((P(P(P((\x00\n\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x0073\x15#'3\x15#33\x15#33\x15#73\x15#73\x15#73\x15#'3\x15##3\x15#73\x15#x((x((((((((P((((((((x(((((P((xx\xF0(((((P(P(P((((\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#'3\x15#33\x15#33\x15#73\x15#73\x15#73\x15#'3\x15#'3\x15#x((x((((((((P((((((((P((P((xx\xF0(((((P(P(P(((\x00\x00\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#'3\x15#33\x15#33\x15#73\x15#73\x15#73\x15#'3\x15#33\x15#x((x((((((((P((((((((\xA0(((((xx\xF0(((((P(P(P((\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5!\x15#\x15#\x07353\x153\x15!73\x15#73\x15#73\x15#\xC8\xC8\x01\x18((\xC8((\xC8\xFE\xE8P((((((((\xF0(((\xA0(((x(P(P(\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\v\x00\x0F\x00\x13\x00\x00735#5353\x153\x15#'3\x15#73\x15#(xxx((\xC8((((xx((((x(P(\xA0(\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x00735#5353\x153\x15#'3\x15#7353\x153\x15#73\x15#(xxx((\xC8(((((((xP((((((x(P(\xA0(((x(\x00\x04\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x00735#5353\x153\x15#'3\x15#73\x15353\x15#73\x15#(xxx((\xC8(((((((x(((((((x(P(\xC8((Px(\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00735#5353\x153\x15#'3\x15#73\x15#53\x15#73\x15#(xxx((\xC8((((xx((P((((((x(P(\xA0(x(((\x00\x00\x00\x04\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x00735#5353\x153\x15#'3\x15#7353\x153\x15#53\x15#(xxx((\xC8(((((((x((((((x(P(\xA0(((x(\x00\x00\x07\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x00735#5353\x153\x15#'3\x15#73\x15#73\x15##3\x15#33\x15#73\x15#(xxx((\xC8((((xx((((((((((((((((x(P(\xA0(x(((P(\x00\xFF\xFF\x00\x00\x00\x00\x00\xF0\x01\x18\x00\"\x00B\x00\x00\x00\x03\x01\xFC\x01@\x00\x00\x00\x04\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x00735#5353\x15353\x15#\x153\x15#'3\x15#73\x15#73\x15#(PPP(((PP\xC8((((PPx((((((((P((P(\xA0(((\x00\x02\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x00\x113\x153\x15#\x153\x15#73\x15#(\xA0\xA0\xA0\xC8\xC8((\x01\x18x(P(xP\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15##3\x15#33\x15#73\x15#53\x15#(\xA0\xA0((((\xA0\xA0\xA0((((\xC8(x(P(x(\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\t\x00\r\x00\x11\x00\x15\x00\x00335#53\x15#\x15#'3\x15#73\x15#33\x15#P(P\xA0(PP(((\xA0\xA0\xA0(((((P\xC8Px((\x00\x00\x00\x02\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x00735#5353\x11#'3\x15#(\xA0\xA0\xA0(\xC8((((P(x\xFE\xE8xP\x00\x00\x03\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x007#535#5353\x153\x15#\x15#'3\x15#33\x15#\xA0xx((((((\xA0(((xxx((((((\xA0PP(\x00\x03\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\t\x00\r\x00\x11\x00\x0053\x15353\x15#\x15#33\x15#53\x15#(\xA0(\xC8((\xC8\xC8\xA0\xA0\xA0((P((\xC8(\x00\x00\x00\x05\x00\x00\x00\x00\x01\x18\x01\x18\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x0073\x15353\x15#\x15#33\x15#'3\x15#33\x15#53\x15#((\xA0(\xC8((\xC8\xC8PPPP\xA0\xA0PP\xA0((P((\xF0((x(\x00\x04\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x17\x00\x1B\x00\x0053\x15353\x15#\x15#33\x15#53\x15353\x153\x15#73\x15#(\xA0(\xC8((\xC8\xC8((((\xA0(((\xA0((P((\xF0((((x(\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x0053\x15353\x15#\x15#33\x15#53\x15#53\x15#73\x15#(\xA0(\xC8((\xC8\xC8\xA0\xA0((P((\xA0((P((\xC8(x(((\x00\x00\x04\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x15\x00\x19\x00\x0053\x15353\x15#\x15#33\x15#5353\x153\x15#73\x15#(\xA0(\xC8((\xC8\xC8P((\xA0(((\xA0((P((\xC8(((x(\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x13\x00\x007#5353\x153\x15#\x15#\x133\x15#33\x15#PPP(xx((PPP((x(PP(x\x01\x18((\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\t\x00\r\x00\x11\x00\x007#535#53\x15##3\x15#53\x15#\xC8\xA0\xA0\xA0\xC8(\xC8\xC8\xC8((((P(\xC8(\xC8P\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x07\x00\v\x00\x00\x113\x153\x15#\x15#73\x15#(xx(\xA0((\x01\x18x(xxx\x00\x00\x00\x02\x00x\x00\x00\x00\xA0\x00\xF0\x00\x03\x00\x07\x00\x0073\x15#53\x15#x((((\xA0\xA0\xF0(\x00\x00\x00\x00\x03\x00x\x00\x00\x00\xC8\x01\x18\x00\x03\x00\x07\x00\v\x00\x0073\x15#53\x15#73\x15#x(((((((\xA0\xA0\xF0(P(\x00\x04\x00P\x00\x00\x00\xC8\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#'3\x15#73\x15#33\x15#x(((((((((((\xA0\xA0\xF0(P((\x00\x00\x03\x00P\x00\x00\x00\xC8\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0073\x15#'3\x15#73\x15#x(((((P((\xA0\xA0\xF0(((\x00\x00\x00\x00\x03\x00P\x00\x00\x00\xA0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0073\x15#\x033\x15#33\x15#x((((((((\xA0\xA0\x01\x18((\x00\x00\x00\x00\x03\x00(\xFF\xD8\x00\xA0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0073\x15##3\x15#\x133\x15#x((PPPP((\xA0\xA0(\x01\x18(\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00\x113\x153\x15#\x15#73\x15#33\x15#'3\x15#73\x15#((((PPPPPPPPPPPP\x01\x18\xA0(PP((\xA0(P(\x00\x00\x00\x01\x00x\x00\x00\x00\xA0\x01\x18\x00\x03\x00\x00\x133\x11#x((\x01\x18\xFE\xE8\x00\x00\x00\x00\x04\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x05\x00\t\x00\r\x00\x11\x00\x0053\x15#\x15#73\x15#73\x15#'3\x15#xP(x((x((PPP\xC8(\xA0\xA0\xA0\xA0\xA0\xC8(\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x00\xC8\x00\x05\x00\t\x00\x0053\x15#\x15#73\x15#\xA0x(\xA0((\xC8(\xA0\xA0\xA0\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x13\x00\x17\x00\x005353\x15353\x15#\x15#\x153\x15#5#\x15#75#\x15(PP(((((x(xP\xF0((((((\xA0\xA0\xA0\xC8((\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15##3\x15#33\x15#73\x15#(\xA0\xA0((((\xA0\xA0\xA0((\xC8(x(\xA0x\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007353\x153\x15##3\x15#33\x15#73\x15#'3\x15#(((P\xA0((((\xA0\xA0\xA0((P((\xC8(((x(\xA0x\xF0(\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x0073\x15353\x153\x15##3\x15#33\x15#73\x15#'3\x15#(((((\xA0((((\xA0\xA0\xA0((x((\xF0((((x(\xA0x\xF0(\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0073\x15##3\x15#33\x15#\x113\x15#\x173\x15#'3\x15#(\xA0\xA0((((\xA0\xA0((\xA0((P((\xC8(x(\x01\x18(Px\xF0(\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007353\x153\x15##3\x15#33\x15#\x113\x15#\x173\x15#(((P\xA0((((\xA0\xA0((\xA0((\xC8(((x(\x01\x18(Px\x00\x00\x00\x00\v\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x0073\x15##3\x15#33\x15#73\x15#73\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#(\xA0\xA0((((\xA0\xA0\xA0(((((\xF0(((((((((((((((((\xC8(x(\xA0x\xC8(\xC8(P(P(P(P(P(\x00\xFF\xFF\x00\x00\x00\x00\x00\xF0\x01\x18\x00\"\x00b\x00\x00\x00\x03\x01\xFC\x01@\x00\x00\x00\x06\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x0073\x15353\x15#\x15##3\x15#'3\x15#33\x15#'3\x15#73\x15#x(((P(PPP(((\xA0PPxPPx((\xA0((P((\xA0x(\xC8(((\x00\x02\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\t\x00\r\x00\x0053\x15#\x153\x15#\x15#73\x15#\xC8\xA0\xA0\xA0(\xC8((\xC8(P(P\xC8P\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x00\x113\x153\x15#\x153\x15#\x15#73\x15#(\xA0\xA0\xA0\xA0(\xC8((\x01\x18P(P(P\xC8P\x00\x00\x00\x02\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\t\x00\r\x00\x007#535#53\x15#'3\x15#\xC8\xA0\xA0\xA0\xC8(\xC8((((P(\xF0\xC8P\x00\x00\x00\x03\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x07\x00\v\x00\x0F\x00\x0053\x153\x15#\x15#73\x15#73\x15#((((P(((xx\xC8P(P\xA0(P(\x00\x05\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0053\x15#53\x15#33\x15#33\x15#'3\x15#\xC8\xC8(((\xA0\xA0\xA0((\xA0\xA0\xA0((\xA0(((\xA0(\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x17\x00\x00\x113\x15#\x15#73\x15#33\x15#73\x15#'353\x15#\xA0x(P(((PPP((xP(x\x01\x18(\xF0P((xPxPx\x00\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x00\xF0\x00\v\x00\x0F\x00\x007#5353\x153\x15#\x15#33\x15#PPP(PP((PP\xA0((((x(\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\xC8\x00\xC8\x00\x05\x00\t\x00\x007353\x15#'3\x15#(x(\xA0((((\xA0\xC8\xC8\xA0\x00\x00\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x007353\x15#'3\x15#73\x15#73\x15#(x(\xA0(((P((((((\xA0\xC8\xC8\xA0\xC8(P(\x00\x05\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x007353\x15#'3\x15#73\x15#73\x15#33\x15#(x(\xA0(((((((((((((\xA0\xC8\xC8\xA0\xC8(P((\x00\x00\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x007353\x15#'3\x15#73\x15#73\x15#(x(\xA0((((((P(((\xA0\xC8\xC8\xA0\xF0(((\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x007353\x15#'3\x15#73\x15#33\x15#(x(\xA0((((((((((\xA0\xC8\xC8\xA0\xF0((\x00\x00\x05\x00\x00\x00\x00\x00\xC8\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15##3\x15#33\x15#'3\x15#33\x15#\xA0((x(((((P((x((\xC8x((\xC8x(\x00\x07\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15##3\x15#'3\x15#73\x15#73\x15#33\x15#'3\x15#\xF0((\xC8(((((P((P(((((P((\xC8\xA0(\xC8\xA0(((((\xA0P\x00\xFF\xFF\x00\x00\x00\x00\x01\x18\x01\x18\x00\"\x00w\x00\x00\x00\x03\x01\xF6\x01\xB8\x00\x00\xFF\xFF\x00\x00\x00\x00\x01\x18\x01\x18\x00\"\x00w\x00\x00\x00\x03\x01\xF8\x01\x90\x00\x00\xFF\xFF\x00\x00\x00\x00\x01\x18\x01\x18\x00\"\x00w\x00\x00\x00\x03\x01\xF3\x01\x90\x00\x00\xFF\xFF\x00\x00\x00\x00\x01\x18\x01\x18\x00\"\x00w\x00\x00\x00\x03\x01\xF5\x01\x90\x00\x00\x00\t\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#'3\x15#73\x15#'3\x15#33\x15#33\x15#33\x15#53\x15#73\x15#\xC8PP\xA0(((((PPPP(((((((((((((((((P(\xA0((((x(P(\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xC8\x00\x07\x00\v\x00\x0F\x00\x007#5353\x15##3\x15#53\x15#\xA0xx((\xA0\xA0\xA0((((x\xC8(\xF0x\x00\xFF\xFF\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\"\x00}\x00\x00\x00\x03\x01\xF6\x01\x90\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x15##3\x15#53\x15#73\x15##3\x15#73\x15#\xA0xx((\xA0\xA0\xA0((P(((((P((((x\xC8(\xF0x\xC8((((\x00\xFF\xFF\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\"\x00}\x00\x00\x00\x03\x01\xF3\x01h\x00\x00\xFF\xFF\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\"\x00}\x00\x00\x00\x03\x01\xF5\x01h\x00\x00\x00\x03\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x07\x00\x0F\x00\x13\x00\x007#53\x15#\x15#\x07353\x153\x15#73\x15#\xA0\xA0\xF0((\xA0((\xA0\xF0PPP\xA0(((P(((x(\x00\x00\x00\x00\n\x00\x00\xFF\xD8\x02X\x01\x18\x00\x05\x00\r\x00\x11\x00\x15\x00\x19\x00!\x00'\x00/\x003\x009\x00\x00\x113\x15#\x15#73\x153\x15#\x15#73\x15#'5#\x15\x173\x15#73\x153\x15#\x15#\x033\x15#\x15#\x17#5353\x15#\x033\x15#7#53\x15#xP(\xA0((((P((\xA0(\xC8((\xC8((((xP((\xF0((((\xA0((P(P(\x01\x18xPPP(PPP\xF0(((P(((P\x01@(\xA0P(P\xA0\x01\x18(((\xA0\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x005353\x153\x15#5#\x15#53\x15#7353\x153\x15#33\x15#(x(P(P((((((xx(((PP(PP\xC8Px(((P\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x00\xC8\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0073\x15#\x073\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#73\x15#(xx((((xx((((xxx((P((P((\xF0(\xA0((\xF0x((\xA0(Px\x00\x00\x00\x00\b\x00\x00\x00\x00\x01\x18\x01\x18\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00-\x00\x00735#53\x15#\x153\x15353\x15#\x15##3\x15#'3\x15#\x173\x15#'3\x15#\x175#\x15\x173\x15#53\x15#P((x((((Px((((((Pxx(((x(P((((\xC8((((((P((\xA0x((\xF0(P((((\xC8(\x00\x00\x00\x06\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007353\x15#\x15#\x173\x15#'3\x15#33\x15#73\x15#73\x15#((xPP(xxP(((PPP((P((\xF0(((\xA0(\xC8P(xPx\xC8\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\xF0\x01\x18\x00\x07\x00\v\x00\x13\x00\x17\x00\x1F\x00\x007353\x15#\x15##3\x15#\x17#53\x153\x15#'3\x15#73\x153\x15#\x15#(PxPx(((xPxPx(((P((((\xF0(((x((((\xA0(P(((\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\t\x00\r\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x0073\x15#5#\x153\x15#\x073\x15#7#53\x15#\x15#33\x15#'3\x15#73\x15#'3\x15#\xA0x(((P\xA0PPP(x(((PPx((P(((xx\xC8P(((P(P((((\xF0xP(x(\x00\x05\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x07\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x005353\x15#\x15#33\x15#'3\x15#73\x15353\x15#33\x15#(xPPPxxP((((((xx((P((((\xC8P\xA0((PP\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#5353\x15##3\x15#'3\x153\x15#\x15#73\x15#33\x15#'3\x15#'3\x15#33\x15#73\x15#\xF0((((\xC8(((((((Pxxx((P((P(((xxx((Px(\xC8(\xF0(x((((\xA0(\xA0((P(\x00\x05\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007353\x153\x15#\x17#53\x15#\x15#'3\x15#73\x15#73\x15#((((x((x((P((P((P((\xF0(((\xA0(((\xC8xP(Px\x00\x00\x06\x00\x00\xFF\xD8\x00\xC8\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#53\x15#\x15##3\x15#53\x15#73\x15#'3\x15#33\x15#P(x((PPP((P(((xxx(((((((\xF0xP(x(x\x00\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007353\x153\x15#\x17#53\x15#\x15#'3\x15#73\x15#\x173\x15#'3\x15#73\x15#((((x((x((P((P((xPP((((PP\xF0(((\xA0(((\xC8xP(((\xA0x\xA0(\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x00\xC8\x00\xF0\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x007#53\x15#\x153\x15#'3\x15#73\x15#'3\x15#33\x15#P(x(PxP((P(((xxx(((((((\xF0xP(x(x\x00\x00\x00\f\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x00\x007#53\x15#\x15#\x073\x15#'3\x15#73\x15#'3\x15#'3\x15#\x173\x15#'3\x15#'3\x15#\x173\x15#'3\x15#53\x15#x(x((P(((((x((((((((\xA0(((((x((\xC8(((((((\xC8(((x(\xA0x((xPx(x(\xA0P\xC8(Px\xA0(x(\x00\x00\x04\x00\x00\x00(\x01\x18\x00\xF0\x00\v\x00\x11\x00\x15\x00\x1B\x00\x007#5353\x153\x15#\x15#'3\x15#\x15#75#\x15\x17353\x15#x((((((xP((\xA0(P((PPx((x(\xC8(\xA0P(((\xA0\xC8\x00\n\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x0073\x15##3\x15#'3\x15#\x173\x15#'3\x15#\x175#\x15\x173\x15#'3\x15#\x173\x15#'3\x15#Pxx((((((Pxx(((x(P((xxx\xA0(((((\xC8x(\xA0x((\xF0(P((((\xF0((x\xA0(\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xC8\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0053\x153\x15#\x15#73\x15#'3\x15#33\x15#(xx(P(((xxx((\xC8x(P\xC8(x(x\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x007#53\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#'3\x15#33\x15#xPx(x((\xA0PPP((\xA0((\xC8xxx((((P\xC8xP(\xC8((P\xF0(x\x00\x04\x00\x00\xFF\xD8\x00\xC8\x00\xF0\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0053\x153\x153\x15#5#\x15#73\x15#'3\x15#33\x15#(x(PP(P(((xxx((\xC8x(((P\xC8(x(x\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0073\x15#\x173\x15#'3\x15#'3\x15#\x173\x15#53\x15#\x173\x15#'3\x15#(\xA0\xA0(\xA0\xA0((((((Pxxxx\xA0(((((\xF0(\xC8(\xA0(xP((x((Px(\x00\x00\x05\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00735#53\x15#\x153\x15##3\x15#33\x15#73\x15#73\x15#((P\xC8P(x((((xx(((P((\xC8(((((x(x(Px\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x00335#53\x15#\x153\x15#'3\x15#73\x15#53\x15#\x173\x15#33\x15#'3\x15#33\x15#(P(x(P\xC8((((((((\xA0(((((\xA0xxx((P((P(P(P(\xA0P(((\xF0(P\x00\x04\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#53\x15353\x15#5#\x153\x15##3\x15#33\x15#73\x15#(((x((PPx((((xxx((\xC8P((x(((P(xP\x00\x00\x00\x07\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007353\x153\x15##3\x15#33\x15#73\x15#'3\x15#\x173\x15#53\x15#((((x((((xx(((P((\xA0((((\xC8PP(x(x(\xA0((x\xC8(\x00\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#\x073\x15#73\x15#33\x15#33\x15#'3\x15#'3\x15#\x173\x15#53\x15#PxxPPP((((xxxPPP((xPP\xC8((PP\xF0(\xA0(\xC8x((\xA0(\xA0((x\xC8(\x00\x06\x00\x00\x00\x00\x00\xC8\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x00735#53\x15#\x153\x15#'3\x15#53\x15#33\x15#33\x15#53\x15#(((x((x((((((xxx((((((((((\xC8P\xA0((P\xA0(\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x07\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x1F\x00\x007353\x153\x15#\x173\x15#'3\x15#\x17#53\x15#\x15#73\x15#'3\x15#((((xP((x((P(x((P((x((\xC8(((\xA0(\xC8P((((\xA0P\xC8(\x00\x00\xFF\xFF\x00\x00\x00\x00\x00\xF0\x00\xC8\x00\x02\x00b\x00\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\t\x00\r\x00\x11\x00\x00\x11!\x11#535#\x15#75#\x1535#\x15\x01\x18P(\xC8(xP\xC8P\x01\x18\xFE\xE8(Px\xA0PPPP\x00\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x19\x00\x1D\x00!\x00%\x00)\x00-\x00\x007#5#\x15#5#535#5353\x153\x15#\x153\x153\x15#'3\x15#33\x15#73\x15#33\x15#'3\x15#\xF0(P(((PP(xxx((\xF0(((PPP((P(((((P(P((P((((((xPP(P((x(\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#535#5353\x153\x15#\x153\x15#\x15#'3\x15#33\x15#73\x15#xP((((PPP((x(((PP\xA0(((((((((((((((PP\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0053\x15#33\x15#33\x15#73\x15#73\x15#'3\x15#(((((((((((x(((((\xF0\xC8((P(\xC8\xA0\xC8(\x00\x00\x04\x00\x00\xFF\xD8\x00\xC8\x00x\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0053\x15#33\x15#73\x15#'3\x15#(((((x(((((xx(xPx(\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00\x113\x15#\x173\x15#'3\x15#\x173\x15#'3\x15#33\x15#\xA0\xA0(PP(((x((Pxxx((\x01\x18(\xF0(\xC8(P(\xC8(x\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x00\xA0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#\x153\x15#'3\x15#73\x15#33\x15#(PPPP((((PPP((\xC8(\xA0(x(P(P\x00\x00\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x19\x00\x1D\x00!\x00\x007#53\x15#\x15#\x073\x15#73\x15#7#5353\x153\x15#33\x15#\x033\x15#\xA0x\xC8((\xA0(((((xP(((((PPxPP\xA0(((x(P(((((P(\x01@(\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xA0\x00\xC8\x00\t\x00\r\x00\x11\x00\x15\x00\x00735#53\x15#\x15##3\x15#73\x15#'3\x15#((P\xA0(P(((x((PPP((((P(((\xF0(\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x00335#535#5353\x153\x15#\x153\x15#\x15#'3\x15#33\x15#73\x15#\x113\x15#((((PP(PPxxP(((\xC8(((((((P(P((((((\xA0xP(\xA0x\x01\x18P\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\x15\x00\x19\x00\x1D\x00!\x00\x00335#535#5353\x153\x15#\x153\x15#\x15#'3\x15#73\x15#73\x15#(((((((((((P(((\xA0((((((((((((((PP((P\xC8(\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#5353\x153\x15#\x15##3\x15#\x173\x15#73\x15#73\x15#'3\x15#((((PP((((PPPP((P(((((\xA0(PP(P(((\xC8\xA0\xC8Px(\x00\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xF0\x00\xA0\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#5353\x153\x15#\x15##3\x15#33\x15#73\x15#73\x15#33\x15#((((((((((P(((((((((((P(((((((xP\xA0((\x00\x00\n\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x00\x007#5353\x153\x15#\x15##3\x15#\x173\x15#73\x15#73\x15#'3\x15#'3\x15#33\x15#73\x15#33\x15#((((PP((((PPPP((P(((((P(((((((((((\xA0(PP(P(((\xC8\xA0\xC8Px(\xA0((x((\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x15\x00\x19\x00\x1D\x00\x00735#535#5353\x153\x15#\x153\x15#\x15#'3\x15#33\x15#\xA0(\xC8\xA0\xA0x(xPP(P\xA0(((\xC8\xC8P(((((((((P(P(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00-\x00\x00735#535#5353\x153\x15#\x153\x15#\x15#'3\x15#33\x15#\x133\x15#33\x15#73\x15#33\x15#\xA0(\xC8\xA0\xA0x(xPP(P\xA0(((\xC8\xC8P(((((((((((P(((((((((P(P(\x01\x90((x((\x00\x00\x07\x00\x00\xFF\xD8\x00\xA0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0053\x15#33\x15#33\x15#33\x15#'3\x15#73\x15#73\x15#(((((((((((P((((((((\xA0P(((\xF0(P(P(\x00\x00\x00\x00\v\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x0053\x15#33\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#73\x15#\x173\x15#33\x15#(((((((((((P((P(((((P(((((P(((((\xA0P(((\xF0(((\xA0(P((((\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x007#5353\x153\x15#\x15#'3\x15#33\x15#\xC8PP((((\xC8((\xA0((\xA0(PP(\xA0\xF0\xF0(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5353\x153\x15#\x15#'3\x15#33\x15#\x033\x15#33\x15#73\x15#33\x15#\xC8PP((((\xC8((\xA0((((((((((((((\xA0(PP(\xA0\xF0\xF0(\x01\x90((x((\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\v\x00\x0F\x00\x13\x00\x007#5353\x153\x15#\x15#'3\x15#73\x15#x((((((x((P((P((((P\xA0\xC8((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0033\x15#'3\x15#73\x15#33\x15#(\xF0\xF0((((\xC8\xC8\xC8(((P(\xF0((\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0033\x15#'3\x15#73\x15#33\x15#'3\x15#33\x15#73\x15#33\x15#(\xF0\xF0((((\xC8\xC8\xC8((x((((((((((((P(\xF0((\xC8((x((\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00735#5353\x153\x15#\x153\x15##3\x15#33\x15#\x133\x15#(x\xA0x(xP(\xC8((((\xC8\xC8(((x(((((((P(\x01@(\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x00735#5353\x153\x15#\x153\x15##3\x15#33\x15#\x133\x15#73\x15#33\x15#73\x15#33\x15#(x\xA0x(xP(\xC8((((\xC8\xC8(((((((((((((((x(((((((P(\x01@(x((x((\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x03\x00\x07\x00\v\x00\x00\x113\x11#33\x15#73\x15#(((xxx((\x01\x18\xFE\xE8(xP\x00\x00\x00\x00\x07\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00\x113\x11#33\x15#73\x15#'3\x15#33\x15#73\x15#33\x15#(((xxx((P(((((((((((\x01\x18\xFE\xE8(xP\xF0((x((\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x007#535#535#5353\x153\x15#\x15##3\x15#'3\x15#\xC8xxxx\xC8\xC8((((PPPP(((((((((((\xC8(\xA0(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#535#535#5353\x153\x15#\x15##3\x15#'3\x15#\x133\x15#33\x15#73\x15#33\x15#\xC8xxxx\xC8\xC8((((PPPP((P((((((((((((((((((((\xC8(\xA0(\x01\x18((x((\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x15353\x153\x15#\x15#5#\x15#33\x15#73\x15#((((x((((x((\xA0\xA0P((\xA0(PPPP(PP\xA0(x(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#5353\x15353\x153\x15#\x15#5#\x15#33\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#((((x((((x((\xA0\xA0P((((((((((((((\xA0(PPPP(PP\xA0(x(\x01@((x((\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x1B\x00\x007#5353\x153\x15#\x15##3\x15#33\x15#\x11#53\x15#\x15#xxP(\xA0x(((((xxP\xC8P(x(((((P(\x01\x18(((\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x1F\x00#\x00'\x00+\x00\x007#5353\x153\x15#\x15##3\x15#33\x15#\x11#5353\x153\x15#\x15#53\x15#73\x15#33\x15#xxP(\xA0x(((((xxPx((P(((P(((((x(((((P(\x01\x18(((((\xA0(P((\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x153\x15#\x15##3\x15#73\x15#33\x15#'3\x15#((P(x\xA0((((x(((xx(\xA0\xA0\xA0(PP(xPP((\xA0(\x00\x00\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#5353\x153\x15#\x15##3\x15#73\x15#33\x15#'3\x15#\x113\x15#33\x15#73\x15#33\x15#((P(x\xA0((((x(((xx(\xA0\xA0(((((((((((\xA0(PP(xPP((\xA0(\x01\x18((x((\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x007#5353\x153\x15#\x153\x15#\x15#\x173\x15#73\x15#((P(x\xA0\xA0\xA0(Pxxx((\xA0(PP((((((xP\x00\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#5353\x153\x15#\x153\x15#\x15#\x173\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#((P(x\xA0\xA0\xA0(Pxxx((x(((((((((((\xA0(PP((((((xP\x01h((x((\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0053\x15#\x173\x15#73\x15#73\x15#\xC8\xC8(xxx(((((\xC8(\xA0(P(\xA0x\x00\x00\x04\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0053\x15#\x173\x15#73\x15#73\x15#\xA0\xA0(PPP(((((\xA0(x(P(xP\x00\x00\b\x00\x00\xFF\xD8\x00\xF0\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0053\x15#\x173\x15#73\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xC8\xC8(xxx(((((x(((((((((((\xC8(\xA0(P(\xA0x\x01@((x((\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007#5!\x15#\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\xA0\xA0\x01\x18(P((((((PPP(((\xC8(((x(xP((\xC8(\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#5!\x15#\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#53\x15#33\x15#73\x15#33\x15#\xA0\xA0\x01\x18(P((((((PPP((((((((((((((\xC8(((x(xP((\xC8(\xF0((x((\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x00\x133\x153\x15#\x073\x15#33\x15#53\x15#73\x15#P((PP(((\xF0\xF0((xPP\x01\x18x((P(\xA0(x(\x00\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x00\x133\x153\x15#\x073\x15#33\x15#53\x15#73\x15#'3\x15#33\x15#73\x15#33\x15#P((PP(((\xF0\xF0((xPP((((((((((((\x01\x18x((P(\xA0(x(\xC8((x((\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00!\x00%\x00)\x00\x007#5353\x153\x15#\x15#\x153\x15#'3\x15#\x173\x15#7#5353\x153\x15#53\x15#33\x15#((P((P((((((Pxxxxx((P(((((\xA0(PP((P(x(P(P((P(\xF0((\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0053\x11#73\x15#33\x15#\x113\x15#((P(((\xA0\xA0\xA0\xA0\xF0\xFE\xE8xP(\x01\x18(\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00#\x00/\x00\x005353\x153\x15#\x15#\x15#33\x15#73\x15#73\x15#\x173\x1535#5353\x15#5#5353\x153\x15#\x15#(((((((((((((((((((((x((((((xxP((P(xPx(((((P\xC8\xC8(PP((\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x1F\x00#\x00\x007#535#5353\x153\x15#\x15#'3\x15#73\x1535#5353\x15#53\x15#P((PP((((P((\xA0(((((xPP((P(Px(\xA0P(((((P\xC8\xF0(\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#53\x15#\x15##3\x15#'3\x15#33\x15#'3\x15#33\x15#'3\x15#x(x((PPP(((\xC8((\xA0((\xC8(((((\xC8((\xC8(\xC8\xA0(\xF0(\xA0\xC8(\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#535#5353\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\xC8PPPP((((((\xC8((P(((PPP(P((((x((\xF0\xFE\xE8xP(\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x00\x007#535#5353\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\x113\x15#33\x15#73\x15#33\x15#\xC8PPPP((((((\xC8((P(((PP(((((((((((P(P((((x((\xF0\xFE\xE8xP(\x01\x90((x((\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#535#535#53\x15#\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\x135#\x15\xC8PPPP(x((((((\xC8((P(((PPx(P(P((xx((x((\xF0\xFE\xE8xP(\x01h((\x00\x05\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1F\x00\x007353\x153\x15#\x15#\x15#'3\x15#33\x15#53\x15#7#53\x15#\x15#\xA0((((((\xA0(((xx(((P\xA0((Px((P(PP(\xC8Px(((\x00\x00\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1F\x00#\x00'\x00+\x00/\x00\x007353\x153\x15#\x15#\x15#'3\x15#33\x15#53\x15#7#53\x15#\x15#73\x15#33\x15#73\x15#33\x15#\xA0((((((\xA0(((xx(((P\xA0((((((((((((((Px((P(PP(\xC8Px(((\xC8((x((\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1F\x00#\x00'\x00\x007353\x153\x15#\x15#\x15#'3\x15#33\x15#53\x15#7#53\x15#\x15#73\x15#75#\x15\xA0((((((\xA0(((xx(((P\xA0((PxxP(Px((P(PP(\xC8Px(((\xF0x(((\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x007#53\x15#\x073\x15#33\x15#'3\x15#73\x15#'3\x15#\x173\x15#\xA0Px(\xA0((PPP(((x(((((x((\xC8(PPP(\xA0((x\xA0((P\x00\v\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00-\x00\x007#53\x15#\x073\x15#33\x15#'3\x15#73\x15#'3\x15#\x173\x15#\x033\x15#33\x15#73\x15#33\x15#\xA0Px(\xA0((PPP(((x(((((x((x(((((((((((\xC8(PPP(\xA0((x\xA0((P\x01h((x((\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00!\x00%\x00\x00\x133\x15#\x073\x15#33\x15#'3\x15#73\x15#'3\x15#\x173\x15#'#53\x15#75#\x15\xA0xx\xA0((PPP(((x(((((x((PPx(P(\x01\x90x\xC8P(\xA0((x\xA0((P\xC8(P\xA0((\x00\x00\x07\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#'3\x15#73\x15#73\x15#33\x15#33\x15#33\x15#\xF0((\xF0(((((((((((((((((((x(P(P((((\x00\x00\x00\v\x00\x00\x00\x00\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#33\x15#33\x15#33\x15#33\x15#\x033\x15#33\x15#73\x15#\xC8((\xC8((((((((((((((((((((x(((((P((\x01\x90(\xF0(P(P(((((\x01h((P(\x00\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#33\x15#33\x15#33\x15#33\x15#\x115#\x15\xA0xx\xA0(((((((((((((((((((((\x01\x90x\xA0(P(P(((((\x01@((\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#535#535#53\x15#\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\xC8PPPPP\xA0((((((\xC8((P(((PPP((((((((P((\xF0\xFE\xE8xP(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x00\x007#535#535#5353\x153\x15#\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\x113\x15#73\x15#33\x15#\xC8PPPPP((P((((((\xC8((P(((PP((P(((((P((((((((((P((\xF0\xFE\xE8xP(\x01\x90(P((\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x19\x00\x1D\x00!\x00%\x00)\x00\x007#535#535#5353\x15#\x153\x15#\x153\x15#\x15#'3\x11#73\x15#33\x15#\x135#\x15\xC8PPPPP(x((((((\xC8((P(((PPx(P(((((x\xA0((P((\xF0\xFE\xE8xP(\x01h((\x00\x02\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\x1D\x00!\x00\x00335#535#535#5353\x153\x15#\x153\x15#\x153\x15#\x15#'3\x15#(xxxxxxx(((((((\xA0((((((((((((((P((P(\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x007#\x15#5#535#53\x15353\x153\x15#\x15##3\x15#'3\x15#73\x15#33\x15#\xC8((PPPx(((((\xA0(((((P((P((x(((P(x(((x(\xA0xPP(\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x15\x00\x19\x00\x1D\x00!\x00\x003#535#535#5353\x153\x15#\x153\x15#'3\x15#73\x15#53\x15#P((((PP(((x\xA0P((\xF0(((((P((((((\xC8(\xA0P(P\xF0P\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x19\x00\x1D\x00%\x00)\x00\x007#5353\x153\x15#\x15#\x073\x15#'3\x15#7353\x15#33\x15#'#53\x153\x15#73\x15#\xA0((((((x(((((P((Px((x((((\xA0((\xA0(Px((P(\xA0x((P(\xA0xPP(x\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x007#535#5353\x153\x15#\x153\x15#\x15#33\x15#73\x15#PPPPP(PPPP((xxx((P(((PP(((P(P(\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#5353\x15353\x153\x15#\x15#33\x15#73\x15#33\x15#73\x15#((((P((\xA0((((((((PPP((\xA0(PPPP(xP\xA0((xP\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#5353\x15353\x153\x15#\x15#5#\x15#33\x15#73\x15#73\x15#((((((((((((((P(((((P(P((((((PPP(xP\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1F\x00#\x00\x00735#5353\x153\x15#\x153\x15##3\x15#53\x15#'3\x153\x15#\x15#73\x15#x(PP((((x(((((P((((\xF0(((\xA0((((\xA0((x(\xC8((x\xA0\xA0\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xF0\x00\xC8\x00\x13\x00\x1B\x00\x1F\x00\x003#535#5353\x153\x15#\x153\x15#\x15#'3\x153\x15#\x15#73\x15#x((((((((((x((((\xC8(((P((((P((\xC8(((PP\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x11\x00\x15\x00\x19\x00\x005353\x153\x15#\x153\x15#\x15#5#\x15#33\x15#73\x15#\xA0(PP(((x((xx\xC8((P\xC8P(P(((((P(\x00\x00\x02\x00\x00\xFF\xD8\x00\xC8\x00\xC8\x00\x11\x00\x15\x00\x00335#5353\x153\x15#\x153\x15#\x15#'3\x15#(PPP(((((x(((((x((P((P(\x00\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x0053\x153\x15#\x173\x15#73\x15#33\x15#\x033\x15#33\x15#((P(\xA0\xA0(xxx((\xA0PPPPP\xC8P(P(\xC8(x\x01\x18((\x00\x04\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x133\x15#\x073\x15#73\x15#\x033\x15#\xA0((xPPP((x((\x01\x18\xF0((P(\x01\x18\xC8\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x17\x00\x1B\x00#\x00'\x00\x007#53\x15#\x15#\x073\x15#'3\x15#\x17353\x153\x15#53\x15#'353\x153\x15#33\x15#\xA0x\xC8((x(((((PP((\xA0PP((PP\xC8\xC8((\xF0(((\xA0(x(P(((x(x(((x\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#535#5353\x153\x15#\x15#'3\x15#33\x15#'3\x15#'3\x15#33\x15#P((PP((((P((\xF0((((((PPP((((P(Px(\xA0P((xP\xC8(P\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x17\x00\x1B\x00\x007#53\x15#\x15#\x073\x15#\x173\x15#'353\x153\x15#33\x15#\xA0x\xC8((\xA0((P\xA0\xA0((PP\xC8\xC8((\xF0(((P(P(\xC8(((x\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x007#535#\x15#5353\x153\x15#\x15#'3\x15#33\x15#73\x15#'3\x15#P((((P((((P((\xC8(((((PPP((P(PPx(\xA0P((\xC8\xA0\xC8(\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\x0F\x00\x13\x00\x17\x00\x003#535#5353\x153\x15#\x15#73\x15#73\x15#((((((PP(P(((((((((((x((xP\x00\x05\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\r\x00\x11\x00\x15\x00!\x00%\x00\x007#535#53\x153\x15#\x15##3\x15#'3\x15#73\x1535#5353\x15#73\x15#P((PxPP(((((((\xA0(((((x(((x(((((\xA0(\xA0x(((((\xA0\xC8(\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00#\x00'\x00+\x00\x00735#53\x15#\x153\x15#\x073\x15#73\x15#'3\x15#\x17353\x153\x15#5#\x15#33\x15#53\x15#(PP\xC8((\xC8(((x((x((((PPP(P\xC8((((\xC8(((((\xA0(((\xC8(PP(P(((\xC8P\x00\x00\x05\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5#5#5353\x153\x15#\x153\x153\x15#'3\x15#'3\x15#\x173\x15#73\x15#x(((P((P(((P(((((PxxP((P(P((((((P(Px(P(\xC8(\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x007353\x153\x15#\x15##3\x15#73\x15#33\x15#\x033\x15#((((P((((\xA0(((PPP((xPP((PxP(\x01@P\x00\x00\x00\t\x00\x00\xFF\xD8\x00\xF0\x01\x90\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x00\x11353\x15#\x173\x15#'3\x15#\x173\x15#'3\x15#33\x15#\x033\x15#73\x15#33\x15#x(\xA0(PP(((x((Pxxx((P((P(((((\x01\x18(P\xF0(\xC8(P(\xC8(x\x01@(P((\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\r\x00\x11\x00\x15\x00\x19\x00\x007353\x153\x15#\x153\x15#\x15##3\x15#73\x15#73\x15#(((\xA0\xA0x\xA0((((xxxx((x\xA0P(((P(((xP\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\x11\x00\x007#5!\x15#\x073\x15#73\x153\x15#\x15#\xF0\xF0\x01\x18(\xC8PPP(PP(\xC8(xx(\xC8((P\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\x05\x00\t\x00\x0F\x00\x007#53\x15#\x073\x15#73\x153\x15#\xA0\xA0\xC8(x(((((Px(x((x((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x007#53\x15#'3\x15#73\x15#73\x15#x(P(xPP\xA0(((((x(\xC8\xA0(x(xP\x00\x02\x00\x00\xFF\xD8\x00\xA0\x00\xA0\x00\x07\x00\v\x00\x007#5353\x15#73\x15#PPP((((((((\xA0\xC8(\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x007#\x15#5353\x153\x15#\x073\x15#73\x15#\xF0\xC8(x(x(xPPP((\xA0PxPP\xA0((P(\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\v\x00\x0F\x00\x13\x00\x005353\x153\x15#5#\x15#\x173\x15#73\x15#P(P(x((PPP((x((P((((P(\x00\x01\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\v\x00\x00135#53\x15#\x153\x15!xP\xC8Px\xFE\xE8\xC8((\xC8(\x00\x00\x00\x01\x00\x00\xFF\xD8\x00\xC8\x00x\x00\v\x00\x00135#53\x15#\x153\x15#P(x(P\xC8P((P(\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00335#5#5353\x153\x15#\x15#'3\x15#73\x15#73\x15#x((x\xA0(PPPx((((((((x((PP(\xC8P(P(P(\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\r\x00\x11\x00\x15\x00\x007#5#5353\x153\x15#\x15#'3\x15#73\x15#x(Px((((x(((((((((((x((P(\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\r\x00\x11\x00\x15\x00\x19\x00\x007#\x15#5#5353\x153\x15##3\x15#73\x15#33\x15#\xF0x((((\xA0(\xF0(((((xPP\xA0xx(PP\xC8(P((\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\r\x00\x11\x00\x15\x00\x007#\x15#5#5353\x153\x15#'3\x15#33\x15#\xA0P((((x(\xA0((x((P(((((x(((\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00\x007#\x15#5#5353\x153\x15##3\x15#73\x15#33\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0x((((\xA0(\xF0(((((xPP((((((((((((\xA0xx(PP\xC8(P((\x01\x90((x((\x00\x00\x00\x00\x01\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x007#535#5353\x153\x15#\x153\x15#\x15#xxxxx(xxxx(P(P((((P(x\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#535#5353\x153\x15#\x153\x15#\x15#\x113\x15#33\x15#73\x15#33\x15#xxxxx(xxxx((((((((((((P(P((((P(x\x01\x90((x((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x007#\x15#53\x15#\x073\x15#'3\x15#\x173\x15#\xC8x(\xC8(\xA0xx(((\xA0((\xC8(P\xC8((\xC8(P(\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#\x15#53\x15#\x073\x15#'3\x15#\x173\x15#\x033\x15#33\x15#73\x15#33\x15#\xC8x(\xC8(\xA0xx(((\xA0((((((((((((((\xC8(P\xC8((\xC8(P(\x01h((x((\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007#\x15#53\x153\x15#\x15#\x073\x15#'3\x15#\x173\x15#\xC8x((\xC8((xPPP((\xA0((\xA0(\xA0P(x((\xA0(((\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\t\x00\r\x00\x11\x00\x007#53\x153\x15#\x15#'3\x15#\x173\x15#xP(x((x((P((PP((PP(((\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#\x15#53\x153\x15#\x15#\x073\x15#'3\x15#\x173\x15#\x033\x15#33\x15#73\x15#33\x15#\xC8x((\xC8((xPPP((\xA0((((((((((((((\xA0(\xA0P(x((\xA0(((\x01h((x((\x00\x00\x01\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x07\x00\x00135#53\x11#\xC8\xC8\xF0\xF0\xC8(\xFE\xE8\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00135#53\x11#\x133\x15#33\x15#73\x15#33\x15#\xC8\xC8\xF0\xF0x(((((((((((\xC8(\xFE\xE8\x01\x90((x((\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x007#\x15#5#5353\x15353\x153\x15#\x15##3\x15#\xC8x((((x((((xxx\xA0PP(PPPP(\xA0(\x00\x00\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x007#\x15#5#5353\x15353\x153\x15#\x15##3\x15#\x133\x15#33\x15#73\x15#33\x15#\xC8x((((x((((xxx((((((((((((\xA0PP(PPPP(\xA0(\x01\x90((x((\x00\x05\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#\x073\x15#53\x15#\x173\x15#'3\x15#\xC8((\xC8\xA0\xA0xx\xA0((\xA0xx\xC8\xA0((\xC8(P(\xF0(\x00\x00\x00\t\x00\x00\xFF\xD8\x00\xF0\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#\x073\x15#53\x15#\x173\x15#'3\x15#73\x15#33\x15#73\x15#33\x15#\xC8((\xC8\xA0\xA0xx\xA0((\xA0xxP(((((((((((\xC8\xA0((\xC8(P(\xF0(\xA0((x((\x00\x06\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x13\x00\x17\x00\x1B\x00\x007#53\x15#\x073\x15#73\x15#7353\x15#33\x15#33\x15#\xC8\xC8\xF0(\xC8PPP(((((PP(((((\xC8(xx(P(P(P((\x00\n\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x05\x00\t\x00\r\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#53\x15#\x073\x15#73\x15#7353\x15#33\x15#33\x15#\x033\x15#33\x15#73\x15#33\x15#\xC8\xC8\xF0(\xC8PPP(((((PP(((((x(((((((((((\xC8(xx(P(P(P((\x01\x90((x((\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\r\x00\x11\x00\x15\x00\x007#5353\x153\x15#5#\x15#33\x15#73\x15#((((\xC8(\xA0((\xA0\xA0x((\xA0(PPP(\xA0(\xA0(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00\x007#5353\x153\x15#5#\x15#33\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#((((\xC8(\xA0((\xA0\xA0x((P(((((((((((\xA0(PPP(\xA0(\xA0(\x01\x18((x((\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0073\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#\xF0((\xA0PP(((x((\xA0((\xC8((\xF0xx(\xC8(P(\xF0P(P\x00\x00\x00\n\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00\x0073\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0((\xA0PP(((x((\xA0((\xC8((P(((((((((((\xF0xx(\xC8(P(\xF0P(P\x01@((x((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\r\x00\x11\x00\x15\x00\x19\x00\x007#535#\x153\x15#53\x15#'3\x15#\x173\x15#73\x15#\xF0PP\xA0Px\xF0(\xF0((Pxxx((P(P((x\xC8P(P(P(\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00\x007#535#\x153\x15#53\x15#'3\x15#\x173\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0PP\xA0Px\xF0(\xF0((Pxxx((P(((((((((((P(P((x\xC8P(P(P(\x01h((x((\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\r\x00\x11\x00\x15\x00\x19\x00\x007#535#53\x153\x15#\x15#\x073\x15#73\x15#\x133\x15#\xA0\xA0\xA0x\xA0PP(xPPP((PPPx(((P(P((P(\x01\x18(\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00%\x00)\x00\x007#535#53\x153\x15#\x15#\x073\x15#73\x15#\x113\x15#33\x15#33\x15#53\x15#33\x15#\xA0\xA0\xA0x\xA0PP(xPPP((((((((PP(((((x(((P(P((P(\x01h(((\xA0((\x00\x05\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#\x073\x15#\x033\x15#\x173\x15#'3\x15#\xC8((\xA0xx(((\xA0((P((\xF0\xC8((\x01\x18xP(\xF0x\x00\x05\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\xA0((xPP(((x(((((\xA0x((\xC8P((\xA0P\x00\x00\t\x00\x00\xFF\xD8\x00\xF0\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#\x073\x15#\x033\x15#\x173\x15#'3\x15#53\x15#33\x15#73\x15#33\x15#\xC8((\xA0xx(((\xA0((P(((((((((((((\xF0\xC8((\x01\x18xP(\xF0x\xF0((x((\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x007#5!\x15#\x15##3\x15#\x033\x15#\xA0\xA0\x01\x18P(PPP(\xC8\xC8x((x(\x01\x18(\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#5!\x15#\x15##3\x15#\x033\x15#73\x15#33\x15#73\x15#33\x15#\xA0\xA0\x01\x18P(PPP(\xC8\xC8P(((((((((((x((x(\x01\x18(\xA0((x((\x00\x02\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x07\x00\v\x00\x00\x113\x153\x15#\x15#73\x15#(xx(\xA0((\x01\x18x(\xA0\xA0(\x00\x00\x00\x06\x00\x00\xFF\xD8\x00\xC8\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00\x113\x153\x15#\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#(xx(\xA0((x(((((((((((\x01\x18x(\xA0\xA0(\x01\x18((x((\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x007#5353\x153\x15#\x15#\x073\x15#73\x15#\xA0\xA0\xA0(PP(xPPP((\xA0(PP(x((P(\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\x001!\x15!\x133\x15#\x01\x18\xFE\xE8(\xC8\xC8(\x01\x18(\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x007#5!\x15#\x073\x15#73\x15#53\x15#33\x15#33\x15#33\x15#'3\x15#\xF0\xF0\x01\x18(\xC8PPP((((((((((((((((\xC8(xx(P(x((((\xA0(\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x19\x00\x1D\x00!\x00\x007#5353\x153\x15#\x15#\x073\x15#7#5353\x15#\x15#73\x15#33\x15#\xC8\xC8x(x((\xC8PPx((P((P(((((\xA0(PP((P(((((xx((\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#\x073\x15#73\x15#73\x15#\xC8((\xC8PPPPPP((\xF0xx(P(xP\x00\x05\x00\x00\xFF\xD8\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15##3\x15#73\x15#'3\x15#'3\x15#((((((\xF0((((((((\xC8\xA0Pxx\xC8Px(\x00\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15##3\x15#73\x15#'3\x15#'3\x15#'3\x15#33\x15#73\x15#33\x15#((((((\xF0((((((((((((((((((((\xC8\xA0Pxx\xC8Px(\xC8((x((\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#'3\x15#'3\x15#75#\x15\xA0xx\xA0(((((\xC8((((((((P(\x01\x90x\xF0P\xF0\xA0(x\xC8Px(\xA0((\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x07\x00\v\x00\x0F\x00\x00\x113\x153\x15#\x15#33\x15#73\x15#(xx((\xF0\xF0xPP\x01\x18x(x(\xF0(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x00\x113\x153\x15#\x15#33\x15#73\x15#'3\x15#33\x15#73\x15#33\x15#(xx((\xF0\xF0xPP((((((((((((\x01\x18x(x(\xF0(\xC8((x((\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x00\x113\x153\x15#\x15#33\x15#73\x15#53\x15#75#\x15(xx((\xF0\xF0xPPxxP(\x01\x18x(x(\xF0(\xF0x(((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x007#5!\x15#\x073\x15#73\x15#73\x15#\xF0\xF0\x01\x18(\xA0PPP(((((\xC8(xx(P(xP\x00\x00\x00\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x007#5!\x15#\x073\x15#73\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0\xF0\x01\x18(\xA0PPP(((((P(((((((((((\xC8(xx(P(xP\x01@((x((\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x007#5!\x15#\x073\x15#73\x15#73\x15#\x033\x15#75#\x15\xF0\xF0\x01\x18(\xA0PPP((((((xxP(\xC8(xx(P(xP\x01hx(((\x00\x07\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#'3\x15#73\x15#73\x15#33\x15#33\x15#33\x15#\xF0((\xF0(((((((((((((((((((x(P(P((((\x00\x00\x00\v\x00\x00\x00\x00\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#33\x15#33\x15#33\x15#33\x15#\x033\x15#33\x15#73\x15#\xC8((\xC8((((((((((((((((((((x(((((P((\x01\x90(\xF0(P(P(((((\x01h((P(\x00\x00\x00\t\x00\x00\x00\x00\x01\x18\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#33\x15#33\x15#33\x15#33\x15#\x115#\x15\xA0xx\xA0(((((((((((((((((((((\x01\x90x\xA0(P(P(((((\x01@((\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x153\x15#\x15#'3\x15#73\x15#73\x15#'3\x15#xxx(xx(x(((((\xC8(((((\xA0(PP(\xC8((\xA0xPx\xA0(\x00\x00\t\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#5353\x153\x15#\x15#'3\x15#73\x15#73\x15#'3\x15#\x033\x15#33\x15#73\x15#33\x15#xxx(xx(x(((((\xC8(((((P(((((((((((\xA0(PP(\xC8((\xA0xPx\xA0(\x01\x18((x((\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#5353\x153\x15#\x15#'3\x15#73\x15#73\x15#'3\x15#\x033\x15#75#\x15xxx(xx(x(((((\xC8((((((xxP(\xA0(PP(\xC8((\xA0xPx\xA0(\x01@x(((\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x007#5!\x15##3\x15#33\x15#33\x15#33\x15#53\x15#73\x15#\xF0\xF0\x01\x18(\xC8((((((((((((((((\xC8(x((((x(P(\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x133\x15#\x073\x15#33\x15#'3\x15#(\xA0\xA0(\xA0\xA0\xA0PPx\xA0\xA0\x01\x18(\xC8((\xC8(\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0053\x15353\x15!73\x15#73\x15#33\x15#(\xC8(\xFE\xE8((((((x(((((P\xA0P\xC8xP\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x0073\x153\x15#\x073\x15#73\x15#53\x15#33\x15#\x173\x15#'3\x15#\xA0((P\xA0PPPPP(((((x(((((x((((P(\xC8((P(\xF0x\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x0F\x00\x13\x00\x007#535#53\x15#\x153\x15#\x15#33\x15#PPPP\xF0x\xA0\xA0((\xA0\xA0P(P((P(P(\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\r\x00\x11\x00\x15\x00\x007#5353\x153\x15#5#\x15#73\x15#73\x15#PPP(\xA0(x(P(((((\xA0(((P(\xC8x(P(\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x00\xC8\x00\xA0\x00\r\x00\x11\x00\x007#5353\x153\x15#5#\x15#73\x15#((((x(P(P((P(((P(xP(\x00\x00\x00\x01\x00\x00\xFF\xD8\x01\x18\x00\xC8\x00\t\x00\x00135#53\x153\x15!\xA0x\xA0P\xFE\xE8\xA0(\xC8(\x00\x00\x00\x01\x00\x00\xFF\xD8\x00\xC8\x00x\x00\t\x00\x00135#53\x153\x15#xPx(\xC8P(x(\x00\x00\x00\x00\x01\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\v\x00\x00135#535#5!\x11!\xF0\xC8\xC8\xF0\x01\x18\xFE\xE8P(P(\xFE\xE8\x00\x01\x00\x00\xFF\xD8\x00\xA0\x00\xA0\x00\v\x00\x00135#535#53\x15#xxxx\xA0\xA0((((\xC8\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x007#5!\x15#\x073\x15#73\x15#73\x15#'3\x15#\xF0\xF0\x01\x18(\xA0PPP(((((\xA0\xC8\xC8x(PP(P(P(\xC8(\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#\x073\x15#\x033\x15#\x173\x15#\xC8((xPPP((\xA0((\xF0\xC8((\x01\x18\xA0((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x0073\x153\x15#'3\x15#\x133\x15#73\x15#x(Pxx(((((\xC8((\xF0\xF0(((\x01\x18\xF0((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x05\x00\t\x00\r\x00\x11\x00\x0053\x153\x15#73\x15#73\x15#73\x15#((PPPPP(((((\xF0\xF0(P(P(P(\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x005!\x11#5#\x15#75#\x15\x01\x18(\xC8(\xF0\xC8\xF0\xFE\xE8((P\xA0\xA0\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x007#\x15#5!\x15#\x073\x15#73\x15#\xF0\xC8(\x01\x18(\xA0xxx((\xC8x\xA0\xC8((P(\x00\x00\x00\x03\x00\x00\xFF\xD8\x00\xC8\x00x\x00\x07\x00\v\x00\x0F\x00\x0053\x15#5#\x15#\x173\x15#73\x15#\xC8(x((PPP((xP((((P(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x007#\x15#5!\x15#\x073\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0\xC8(\x01\x18(\xA0xxx((P(((((((((((\xC8x\xA0\xC8((P(\x01h((x((\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x007#535#5353\x153\x15#\x153\x15#\x15#55#\x15\xA0\xA0((\xA0(PPPP(PP(P((((P(x\xA0PP\x00\x00\x00\x00\x05\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#535#5353\x153\x15#\x153\x15#\x15#55#\x1573\x15#73\x15#33\x15#\xA0\xA0((\xA0(PPPP(P(((P(((((P(P(PP(P(x\xA0PP\xF0(P((\x00\x00\x00\x00\x02\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\v\x00\x11\x00\x001353\x153\x15#\x153\x15!7#5!\x15#x(PPx\xFE\xE8\xF0\xF0\x01\x18(\xA0((P(\xF0(x\x00\x00\x00\x06\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x001353\x153\x15#\x153\x15!7#5!\x15#'3\x15#33\x15#73\x15#33\x15#x(PPx\xFE\xE8\xF0\xF0\x01\x18(x(((((((((((\xA0((P(\xF0(x\xF0((x((\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\t\x00\r\x00\x11\x00\x007#535#5!\x15#\x073\x15#73\x15#\xF0\xC8\xC8\xF0\x01\x18(\xC8\xA0\xA0\xA0((P(P(\xC8((P(\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00!\x00\x007#535#5!\x15#\x073\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0\xC8\xC8\xF0\x01\x18(\xC8\xA0\xA0\xA0((P(((((((((((P(P(\xC8((P(\x01h((x((\x00\x00\x00\x00\x04\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#\x073\x15#73\x15#'3\x15#\xF0((\xF0\xC8\xC8\xC8((\xC8xx\xF0\xC8((P(\xF0(\x00\x07\x00\x00\xFF\xD8\x01\x18\x01\x90\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x007#\x15#5353\x153\x15#\x073\x15#73\x15#\x033\x15#33\x15#73\x15#33\x15#\xF0\xC8(x(x(xPPP((P(((((((((((\xA0PxPP\xA0((P(\x01h((x((\x00\x01\x00\x00\xFF\xD8\x00\xF0\x00\xF0\x00\x05\x00\x007#53\x11#\xC8\xC8\xF0(\xC8(\xFE\xE8\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\r\x00\x15\x00\x0053535#53\x15#\x15#\x15#73\x153\x15#\x15#P(x\xA0((P\xC8((((x(P(x((\xC8x(x\x00\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x01@\x00\x05\x00\x13\x00\x1B\x00\x007#5!\x15#'3535#53\x15#\x15#\x15#73\x153\x15#\x15#\xF0\xF0\x01\x18(\xF0P(x\xA0((P\xC8((((((x\xC8(P(x((\xC8P(P\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x05\x00\x007#5!\x15#\xF0\xF0\x01\x18(\xA0(\xC8\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x05\x00\v\x00\x007#53\x15#'#53\x15#\xF0Px(\xA0Px(\xA0(\xC8\xA0(\xC8\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x05\x00\x0053\x153\x15!(\xF0\xFE\xE8\xC8\xA0(\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x07\x00\x005!\x15#\x153\x15!\x01\x18\xF0\xF0\xFE\xE8\xC8(x(\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x07\x00\x0F\x00\x0073\x15#\x153\x15#'3\x15#\x153\x15#\xA0xPPx\xA0xPPx\xC8(x(\xC8(x(\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\v\x00\x00535#5!\x15#\x153\x15!\xF0\xF0\x01\x18\xF0\xF0\xFE\xE8x((x((\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\x005!\x15!75#\x15\x01\x18\xFE\xE8\xF0\xC8\xC8\xC8(xx\x00\x00\x03\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x07\x00\v\x00\x0F\x00\x00535#\x15!\x15!75#\x1573\x15#((\x01\x18\xFE\xE8\xF0\xC8\xC8((xPPx(((\xA0P\x00\x00\x00\x06\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x07\x00\v\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x00735#\x153\x15#'5#\x15'35#\x153\x15#73\x15#\x175#\x1573\x15#\xA0((xxP((((xxP((\xA0((((xPPx(((PPPx\xC8PP((\xA0P\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x1B\x00\x0053535353\x153\x153\x153\x15#5#5#5#\x15#\x15#\x15#(((((((((((((((((PP(((((((((\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\v\x00\x17\x00\x007353\x153\x15#5#\x15#'353\x153\x15#5#\x15#\xA0((((((\xA0((((((PxxPPPPxxPPP\x00\x00\x00\x04\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15##3\x15#33\x15#73\x15#(\xC8\xC8((((\xC8\xC8\xC8((\xC8(x(\xA0x\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x1B\x00\x1F\x00\x0053535353\x153\x153\x153\x15#5#5#5#\x15#\x15#\x15#5!\x15!((((((((((((((\x01\x18\xFE\xE8(((PP(((((((((\xC8(\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\x0F\x00\x1F\x00\x00735#53\x15#\x153\x15#5#\x15#'35#53\x15#\x153\x15#5#\x15#\xA0((x(((((\xA0((x(((((PP((PPPPPP((PPPP\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1F\x00#\x00\x005353535#5!\x15#\x153\x153\x153\x15#5#5#5#\x15#\x15#\x15#\x133\x15#(((x\x01\x18x(((((((((((\xC8\xC8((((((((((((((((\x01\x18(\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\t\x00\x007#535#5!\x15#\xF0\xF0\xF0\xF0\x01\x18(P(((\xC8\x00\x01\x00\x00\x00\x00\x01\x18\x00\xC8\x00\v\x00\x005!\x15#\x153\x15#\x153\x15!\x01\x18\xF0\xF0\xF0\xF0\xFE\xE8\xC8(((((\x00\x02\x00\x00\x00\x00\x01\x18\x00\xC8\x00\v\x00\x0F\x00\x005353\x15353\x153\x15!5!\x15!((x((\xFE\xE8\x01\x18\xFE\xE8(PPPP(\xC8(\x00\x00\x04\x00\x00\x00\x00\x01\x18\x01@\x00\v\x00\x0F\x00\x13\x00\x17\x00\x007#5353\x153\x15#\x15#75#\x15'!\x15!73\x15#(((\xC8((\xC8\xC8\xC8(\x01\x18\xFE\xE8(\xC8\xC8(P((P((PP\xC8(x(\x00\x00\x00\x01\x00\x00\x00\x00\x00P\x01\x18\x00\x07\x00\x00\x113\x153\x15#\x15#((((\x01\x18x(x\x00\x00\x02\x00\x00\x00\x00\x00x\x01\x18\x00\x07\x00\x0F\x00\x007#5353\x11#\x033\x153\x15#\x15#P((((P((((x(x\xFE\xE8\x01\x18x(x\x00\x01\x00\x00\x00\x00\x00P\x01\x18\x00\v\x00\x00\x113\x153\x15#\x153\x15#\x15#((((((\x01\x18P(((P\x00\x00\x02\x00\x00\x00\x00\x00x\x01\x18\x00\v\x00\x17\x00\x007#535#5353\x11#\x033\x153\x15#\x153\x15#\x15#P((((((P((((((P(((P\xFE\xE8\x01\x18P(((P\x00\x01\x00\x00\x00\x00\x00P\x01\x18\x00\x07\x00\x007#5353\x11#(((((x(x\xFE\xE8\x00\x02\x00\x00\x00\x00\x00\xA0\x01\x18\x00\x07\x00\v\x00\x007#5353\x11#\x133\x11#(((((P((x(x\xFE\xE8\x01\x18\xFE\xE8\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00P\x01\x18\x00\v\x00\x007#535#5353\x11#(((((((P(((P\xFE\xE8\x00\x02\x00\x00\x00\x00\x00\xA0\x01\x18\x00\v\x00\x0F\x00\x007#535#5353\x11#\x133\x11#(((((((P((P(((P\xFE\xE8\x01\x18\xFE\xE8\x00\x00\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xA0\x00\x07\x00\x005353\x153\x15!x(x\xFE\xE8PPP(\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x00\x133\x153\x15#\x15#'353\x153\x15#\xC8((((\xC8P((\xA0\x01\x18x(xP(((\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x00\x133\x153\x15#\x15#'353\x153\x15#73\x11#\xA0((((\xA0(((x\xF0((\x01\x18x(xP(((\xF0\xFE\xE8\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x005353\x153\x15#73\x11#P(P\xC8\xF0((P(((\xF0\xFE\xE8\x00\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xA0\x00\v\x00\x005353\x15353\x153\x15!P(((P\xFE\xE8PPPPP(\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xA0\x00\x07\x00\x007#5!\x15#\x15#xx\x01\x18x(x((P\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x007#5353\x11#'#53\x15#\x15#\xF0((((\xA0P\xC8P(((\xC8\xFE\xE8P(((\x00\x00\x03\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\x0F\x00\x13\x00\x007#5353\x11#'#53\x15#\x15#73\x11#\xA0((((x(x((\xC8((((\xC8\xFE\xE8P(((\xF0\xFE\xE8\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x07\x00\v\x00\x007#53\x15#\x15#73\x11#PP\xC8P(\xA0((P(((\xF0\xFE\xE8\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xA0\x00\v\x00\x007#5!\x15#\x15#5#\x15#PP\x01\x18P(((x((PPP\x00\x01\x00\x00\x00(\x01\x18\x00P\x00\x03\x00\x005!\x15!\x01\x18\xFE\xE8P(\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\x00\x133\x11#'3\x15#\xF0((\xF0\xC8\xC8\x01\x18\xFE\xE8P(\x00\x01\x00\x00\x00\x00\x00(\x01\x18\x00\x03\x00\x00\x113\x11#((\x01\x18\xFE\xE8\x00\x02\x00\x00\x00\x00\x01\x18\x00\xF0\x00\r\x00\x1B\x00\x007#5#53\x153\x153\x15#\x15+\x025#5353\x153\x153\x15#\xC8(Px((((x(((((Px\xA0((((P((P(x((\x00\x01\x00\x00\x00\x00\x00\xF0\x00\xF0\x00\v\x00\x00535#5353\x153\x15#P((PP\xF0(x((\xC8(\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x17\x00\x005353535#\x15#5353\x153\x15#\x15#\x153\x15!(x(xP(\xC8(PP\xA0\xFE\xE8P(((((((P(((\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xF0\x00\v\x00\x17\x00\x007#53\x15353\x15#\x15#735#53\x15#\x15#\x15#((PxP(\xC8(Px\xF0((x(((PP(\xA0(((((\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x0F\x00\x15\x00\x007#53535353\x153\x15#\x15#55#\x15#\x15\xA0\xA0(((x((P(((P(((\xA0((PP((\x00\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x13\x00\x007#53\x1535#53\x15#\x153\x153\x15#\x15#((Px\xC8\xF0\xA0\xA0((\xC8(((Px(((P(\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x0F\x00\x13\x00\x007#5353\x15#\x153\x153\x15#\x15#75#\x15(((\xC8\xA0\xA0((\xC8\xA0x(\xA0((((P((PP\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x13\x00\x007353535#\x15#5!\x15#\x15#\x15#\x15#P(((xP\x01\x18(((PP((((PP((P\x00\x03\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x13\x00\x17\x00\x1B\x00\x007#535#5353\x153\x15#\x153\x15#\x15#75#\x1575#\x15(((((\xC8((((\xC8\xA0xxx(P((((((P((PPx((\x00\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x0F\x00\x13\x00\x00735#5#5353\x153\x15#\x15#75#\x15(\xA0\xA0((\xC8((\xC8\xA0x(((P((\xA0(xPP\x00\x00\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#\xF0((\xF0(((((((((((((((((\xF0(\xC8(P(P(P(P(P(\x00\x00\x00\x00\x0F\x00(\x00\xA0\x00\xF0\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00\x00\x133\x15#\x073\x15#33\x15#53\x15#'3\x15#'3\x15#\x173\x15#'3\x15#33\x15#53\x15#\x173\x15#'3\x15#53\x15#'3\x15#53\x15#\xC8((\xA0((P((((((((((P((((((((((P((((((((((((\x01h(P((P(P(x(((P((P(((P(P(P(P(\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#33\x15#33\x15#33\x15#33\x15#33\x15#\x033\x15#((((((((((((((((((\xF0((\xC8((((((\x01\x18(\x00\x00\x00\x00\x01\x00x\x00P\x00\xC8\x00\xA0\x00\x03\x00\x0073\x15#xPP\xA0P\x00\x00\x01\x00P\x00(\x00\xF0\x00\xC8\x00\v\x00\x007#5353\x153\x15#\x15#x((P((PPP((P(\x00\x00\x02\x00x\x00\x00\x00\xC8\x00\xF0\x00\x03\x00\x07\x00\x0073\x15#\x153\x15#xPPPP\xF0PPP\x00\x00\x00\x00\x02\x00x\xFF\xD8\x00\xC8\x00x\x00\x05\x00\t\x00\x007#53\x15##3\x15#\xA0(P(((((Px(\x00\x00\x00\x00\x03\x00(\x00P\x00\xF0\x00x\x00\x03\x00\x07\x00\v\x00\x0073\x15#'3\x15#73\x15#\xC8((\xA0((P((x(((((\x00\x00\x00\x00\x02\x00P\x00\x00\x00\xF0\x01@\x00\v\x00\x0F\x00\x007#5353\x153\x15#\x15#\x153\x15#x((P((PPP\xA0x((x((P\x00\x00\x00\x00\x02\x00P\x00\x00\x00\xF0\x01@\x00\v\x00\x0F\x00\x007#5353\x153\x15#\x15#\x113\x15#x((P((PPP(x((x(\x01@P\x00\x00\x00\v\x00\x00\x00\x00\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x005!\x15!\x173\x15#53\x15##!\x15!73\x15#73\x15#'3\x15#33\x15#73\x15#'3\x15#73\x15#\x01\x18\xFE\xE8((((((\x01\x18\xFE\xE8\xA0(((((\xA0((x(((((((((((\xC8(PP\xA0P((PPP\xF0PPPP\xA0PPP\x00\x00\x00\x00\x01\x00x\x00\x00\x00\xC8\x00P\x00\x03\x00\x0073\x15#xPPPP\x00\x00\x02\x00P\x00\x00\x00\xC8\x00x\x00\x03\x00\x07\x00\x0073\x15#75#\x15PxxP(xx(((\x00\x00\x00\x02\x00\x00\x00\x00\x01@\x01\x18\x00\x15\x00\x19\x00\x0073535#\x15#\x15#5353\x153\x15#\x15#\x15#\x153\x15#x((P(P(\xF0((PPPP\xA0((((P((((((P\x00\x00\x00\x00\x03\x00\x00\x00\x00\x01@\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x007#5353\x1535353\x15#\x15#73\x15#53\x15#(((PP(P(\xF0PPPPP(((P(((P\xA0(\xA0P\x00\x02\x00P\x00\xC8\x00\xC8\x01@\x00\x03\x00\x07\x00\x00\x133\x15#'3\x15#\xA0((P((\x01@xxx\x00\x00\x01\x00x\x00\xC8\x00\xA0\x01@\x00\x03\x00\x00\x133\x15#x((\x01@x\x00\x03\x00x\xFF\xD8\x00\xC8\x00\xF0\x00\x05\x00\t\x00\r\x00\x007#53\x15##3\x15#\x113\x15#\xA0(P((((PP(Px(\x01\x18P\x00\x07\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#\xF0((\xF0(((((((((((((((((\xF0(\xC8(P(P(P(P(P(\x00\x00\x00\x00\x01\x00\x00\xFF\xD8\x01\x18\x00\x00\x00\x03\x00\x001!\x15!\x01\x18\xFE\xE8(\x00\x00\x02\x00P\xFF\xD8\x00\xC8\x01@\x00\x0F\x00\x13\x00\x003#5#5353\x15#\x153\x153\x15#\x113\x15#\xA0((((((((((x(xx(x(\x01h(\x00\x00\x00\x00\x02\x00P\xFF\xD8\x00\xC8\x01@\x00\x0F\x00\x13\x00\x0033535#53\x153\x15#\x15#\x15#\x113\x15#P((((((((((x(xx(x(\x01h(\x00\x00\x00\x00\x01\x00P\x00\x00\x00\xC8\x01\x18\x00\x07\x00\x00\x133\x15#\x153\x15#PxPPx\x01\x18(\xC8(\x00\x01\x00P\x00\x00\x00\xC8\x01\x18\x00\x07\x00\x00735#53\x11#PPPxx(\xC8(\xFE\xE8\x00\x05\x00P\x00\x00\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#33\x15#33\x15#'3\x15#73\x15#P((((((PP((((PP\xC8x((\xF0(P(\x00\x00\x00\x00\x05\x00P\x00\x00\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x0073\x15#\x073\x15#73\x15#'3\x15#33\x15#\xC8((xPPP((PPPP((\xC8x((P(\xF0((\x00\x00\x00\x01\x00\x00\x00P\x01@\x00x\x00\x03\x00\x005!\x15!\x01@\xFE\xC0x(\x00\x01\x00(\x00P\x01\x18\x00x\x00\x03\x00\x0073\x15#(\xF0\xF0x(\x00\x00\x01\x00P\x00P\x00\xF0\x00x\x00\x03\x00\x0073\x15#P\xA0\xA0x(\x00\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x1F\x00#\x00'\x00\x003#5#5#53535353\x1535353\x15#\x153\x15#5#5#\x15#75#\x1575#\x15x((((((((((((((((((((((((((P((PxP((PP((P((\x00\x03\x00\x00\xFF\xD8\x01\x18\x00\xF0\x00\x1F\x00#\x00'\x00\x00535#53\x153\x15353\x153\x153\x153\x15#\x15#\x15#\x15#5#\x15#\x15#75#\x1575#\x15((((((((((((((((\xA0((((xP((P(((((((P((P((P((\x00\x01\x00P\xFF\xD8\x00\xF0\x00\xF0\x00\x13\x00\x003#5#5#53535353\x15#\x153\x15#\xC8((((((((((((((((PxP\x00\x00\x00\x01\x00P\xFF\xD8\x00\xF0\x00\xF0\x00\x13\x00\x00735#53\x153\x153\x153\x15#\x15#\x15#\x15#P(((((((((((xP(((((((\x00\x00\x04\x00x\xFF\xD8\x00\xC8\x00x\x00\x05\x00\t\x00\x0F\x00\x13\x00\x007#53\x15##3\x15#7#53\x15##3\x15#\xA0(P((((((P(((((Px(PPx(\x00\x00\x00\x04\x00(\x00\xA0\x00\xF0\x01\x18\x00\x05\x00\v\x00\x0F\x00\x13\x00\x0073\x153\x15#'3\x153\x15#73\x15#73\x15#\xA0((Px((P(((x((\xF0((P((x(((\x00\x04\x00(\x00\xA0\x00\xF0\x01\x18\x00\x05\x00\t\x00\x0F\x00\x13\x00\x007#53\x15##3\x15#7#53\x15#33\x15#\xC8(P(\xA0((((P(P((\xF0(P(P(P(\x00\x00\x00\x02\x00x\x00\xA0\x00\xC8\x01\x18\x00\x05\x00\t\x00\x0073\x153\x15#73\x15#x((P(((\xF0((x(\x00\x00\x00\x02\x00x\x00\xA0\x00\xC8\x01\x18\x00\x05\x00\t\x00\x007#53\x15##3\x15#\xA0(P((((\xF0(P(\x00\x00\x00\xFF\xFF\x00x\xFF\xD8\x00\xC8\x00x\x00\x02\x01\x8C\x00\x00\x00\x01\x00x\x00P\x00\xC8\x00\xA0\x00\x03\x00\x0073\x15#xPP\xA0P\x00\x00\x02\x00P\x00(\x00\xF0\x00\xA0\x00\x03\x00\x07\x00\x0073\x15#\x153\x15#P\xA0\xA0\xA0\xA0\xA0(((\x00\x00\x00\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\t\x00\r\x00\x11\x00\x17\x00\x00735#5353\x11#'3\x15#'3\x15#7#53\x15#P\xA0\xA0\xA0(\xC8((((((((P((P(x\xFE\xE8xP\xA0(P(P\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x03\x00\x07\x00\r\x00\x00\x133\x11#'3\x15#7#53\x15#\xA0((\xA0((((P(\x01\x18\xFE\xE8\xC8(P(P\x00\x00\x07\x00\x00\x00\x00\x01@\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x15\x00\x19\x00\x1D\x00\x00%3\x15#'3\x15#'3\x15#33\x15#'#53\x15#33\x15#73\x15#\x01\x18((\xC8((P((\xA0((x(P(P((PPP\xA0\xA0\xA0\xA0\xC8(\xA0\xF0(P(((\x00\x05\x00\x00\x00\x00\x01@\x01\x18\x00\x07\x00\v\x00\x11\x00\x15\x00\x19\x00\x0073\x153\x15#\x15#'3\x15#7#53\x15#\x173\x15#73\x15#x((((x((((P(\xA0(((PP\xC8P(P\xC8(P(P((P(\x00\x00\x07\x00\x00\x00\x00\x01@\x01\x18\x00\x03\x00\x07\x00\v\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x0073\x15#'3\x15#33\x15#'#53\x15#\x173\x15#33\x15#'3\x15#P\xC8\xC8P((P((((P(P\xA0\xA0\xA0((\xA0\xA0\xA0((\xC8((x(PP((\xA0(\x00\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\v\x00\x0F\x00\x13\x00\x19\x00\x007#5353\x153\x15#\x15#'3\x15#\x173\x15#'#53\x15#\xA0PP(PP(\xA0((\xC8PP\xA0(P(\xA0((((x\xA0(x(\xF0(P\x00\x07\x00\x00\x00\x00\x01\x18\x01\x18\x00\x05\x00\t\x00\r\x00\x11\x00\x15\x00\x19\x00\x1D\x00\x007#53\x15##3\x15#\x173\x15#33\x15#'3\x15#33\x15#73\x15#((P((((x(((((P((x(((((\xF0(P(P((\xC8x(\xA0x\x00\x00\x00\x02\x00(\xFF\xD8\x00\xF0\x00\xF0\x00\x13\x00\x17\x00\x003#535#5353\x153\x15#\x153\x15#\x15#'3\x15#x(((((PPPP(P(((x((((x((\xC8x\x00\x00\x00\x00\x06\x00(\x00\x00\x01\x18\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0073\x15##3\x15#53\x15#\x175#\x15\x173\x15#53\x15#P\xA0\xA0(((((\xA0Px((((\xC8\xA0(\xF0(xPP((\xF0(\x00\x00\x04\x00(\xFF\xD8\x00\xF0\x01\x18\x00\x1B\x00\x1F\x00#\x00'\x00\x003#535#535#5353\x153\x15#\x153\x15#\x153\x15#\x15#'3\x15#53\x15#\x173\x15#x(((((((PP(((((P((((\xA0(((P((((((((P((x(\xA0((P\x00\x00\x00\x03\x00(\xFF\xD8\x01\x18\x01\x18\x00\x13\x00\x17\x00\x1B\x00\x007#535#5353\x153\x15#\x153\x15#\x15#33\x15#\x113\x15#P(((((xxxx((\xA0\xA0\xA0\xA0P((((((((P(\x01@(\x00\x03\x00(\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x00335#5353\x153\x15#\x153\x15#\x133\x15#33\x15#(((((PP\xA0\xF0Pxxx((P(xx(P(\x01@((\x00\x02\x00(\xFF\xD8\x00\xF0\x01\x18\x00\x15\x00\x19\x00\x003#535#5353\x15#\x153\x15#\x153\x15#\x15#75#\x15P((((\xA0x(((((xP(((\xA0x(((((\xF0((\x00\x00\x00\x00\x01\x00(\x00\x00\x00\xF0\x00\xC8\x00\v\x00\x007#5353\x153\x15#\x15#xPP(PP(P(PP(P\x00\x00\x01\x00(\x00P\x00\xF0\x00x\x00\x03\x00\x0073\x15#(\xC8\xC8x(\x00\x00\t\x00(\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00\x0073\x15#\x073\x15#73\x15#'3\x15#33\x15#33\x15#33\x15#33\x15#'3\x15#\xC8((\xA0(((((((((((((((((((((((\xC8(x(P(\xA0(((((\xA0(\x00\x00\x03\x00(\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0073\x15#\x173\x15#53\x15#(\xC8\xC8P((((x(((\xC8(\x00\x02\x00(\x00(\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\x0073\x15#\x153\x15#(\xC8\xC8\xC8\xC8\xC8(P(\x00\x00\x00\x00\x06\x00(\x00\x00\x00\xF0\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x0073\x15#\x173\x15#'3\x15#73\x15#53\x15#73\x15#(\xC8\xC8((((\xC8\xC8P(((((((\xC8(x(P(P(P(x(\x00\x00\x00\x00\x01\x00(\xFF\xD8\x00\xF0\x00\xF0\x00\x1B\x00\x003353535#5#5#53\x153\x153\x153\x15#\x15#\x15#\x15#(((((((P((((((P(((((((((((((\x00\x00\x00\x01\x00(\xFF\xD8\x00\xF0\x00\xF0\x00\x1B\x00\x003#5#5#53535353\x15#\x15#\x15#\x153\x153\x153\x15#\xA0((((((P((((((P(((((((((((((\x00\x00\x00\x02\x00(\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x0F\x00\x0073\x15#535#53\x153\x15#\x15#(\xC8\xC8PPxPPx((x(((((\x00\x00\x00\x00\x02\x00(\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x0F\x00\x00353\x15'5#5353\x15#\x153\x15(\xC8xPPxPP((P((((((\x00\x00\x00\x00\x02\x00(\x00\x00\x00\xF0\x00\xC8\x00\v\x00\x0F\x00\x007#5353\x153\x15#\x15#\x073\x15#xPP(PP(P\xC8\xC8x(((((((\x00\x00\x00\b\x00(\x00\x00\x00\xF0\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0073\x15#\x073\x15#73\x15#'3\x15#\x173\x15#73\x15#'3\x15#73\x15#PPP((((PP(((x(((((((((((\xC8(x(P(x(P(P(x(P(\x00\x04\x00\x00\x00\xC8\x00\xF0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#'3\x15#73\x15#73\x15#xPPx(((PP\xA0((\xF0(((P(((\x00\x01\x00(\x00\x00\x00\xF0\x00x\x00\x05\x00\x0073\x15#5#(\xC8(\xA0xxP\x00\x00\x0F\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00\x00\x133\x15#\x073\x15#'3\x15#\x173\x15#'3\x15#\x173\x15#73\x15#'3\x15#73\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#Pxx((((((Pxx(((\xA0(((((((((((\xF0(((((((((((((((((\x01\x18(\xA0(\xA0x((\xF0(x(\xA0x\xA0(P(\xC8(P(P(P(P(P(\x00\x00\x00\x03\x00\x00\x00(\x01\x18\x00\xC8\x00\x13\x00\x17\x00\x1B\x00\x005353\x15353\x153\x15#\x15#5#\x15#5#35#\x1535#\x15(P(P((P(P(xP\xC8P\xA0((((P((((PPPP\x00\x00\x00\x01\x00(\xFF\xD8\x01\x18\x01@\x00\x0F\x00\x0033535353\x15#\x15#\x15#\x15#(P((PP((Px\xA0((\xA0x(\x00\x00\x00\x03\x00\x00\xFF\xD8\x01\x04\x01@\x00\x03\x00\x07\x00\v\x00\x00\x01\x15!5\x17\x11#\x113\x11#\x11\x01\x04\xFE\xFCP(\xB4(\x01@(((\xFE\xC0\x01@\xFE\xC0\x01@\x00\x00\x01\x00(\xFF\xD8\x00\xF0\x01@\x00\x17\x00\x0073535#5#53\x15#\x153\x153\x15#\x15#\x153\x15#(((((\xC8\xA0((((\xA0\xC8(P(PP((P(P((\x00\x00\x01\x00\x00\xFF\xD8\x01\x18\x01@\x00\x19\x00\x0053\x153\x153535353\x15#\x15#\x15#\x15#\x15#5#5#(((((P(((((((P((Pxx(PxP(((\x00\x00\x00\x03\x00(\x00\x00\x00\xF0\x01\x18\x00\v\x00\x0F\x00\x13\x00\x00735353\x15#\x15#5#35#\x157\x15#5((x((x(\xA0xx(x(P\xC8((PP\xF0((\x00\x0F\x00\x00\x00\x00\x01\x18\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#'3\x15#33\x15#\x173\x15#33\x15#'3\x15#'3\x15#'3\x15#\x173\x15#'3\x15#'3\x15#73\x15#\xF0((\xF0((((((((P(((((x(((((P((((((((\xC8(((((((((((\x01\x18(\xC8(P(P(\xA0((P((\xA0(x(P(\xA0(P(x(P(\x00\x13\x00\x00\x00\x00\x01@\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00?\x00C\x00G\x00K\x00\x00\x133\x15#\x073\x15#73\x15#73\x15#'3\x15#33\x15#\x173\x15#33\x15#'3\x15#'3\x15#'3\x15#\x173\x15#'3\x15#53\x15#73\x15#\x153\x15#33\x15#73\x15#'3\x15#\xF0((\xF0((((((((P(((((P((((((((((((((\xA0(((((((((((((((((((((\x01\x18(\xC8(P(P(\xA0((P((\xA0(x(P(\xA0(P(x(P(x((P(P(\x00\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x1F\x00\x0053535353\x153\x153\x153\x15#5#5#5#\x15#\x15#\x15#73\x11#((((((((((((((x((\xA0(((((((((((((\xA0\xFE\xE8\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x0053535353535#53\x15#5#\x15#\x15#\x15#\x15#\x15#(((((\xA0\xF0((((((((((((((\xF0\xA0(((((\x00\x00\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x1F\x00\x00\x13\x153\x153\x153\x15#\x15#\x15#\x15#5353535#5#5#5\x17\x15!5\xA0(((((((((((((\xA0\xFE\xE8\x01\x18((((((((((((((x((\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x00\x13\x153\x153\x153\x153\x15353\x15#535#5#5#5#5#5(((((((\xF0\xA0(((((\x01\x18(((((\xA0\xF0(((((((\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x1F\x00\x007\x153\x153\x153535353\x15#\x15#\x15#\x15#5#5#5#57\x11#\x11((((((((((((((\xA0(\xA0((((((((((((((x\xFE\xE8\x01\x18\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x00%#\x15#\x15#\x15#\x15#\x153\x15#53\x1535353535353\x01\x18(((((\xA0\xF0(((((((\xF0((((((\xF0\xA0(((((\x00\x02\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x1F\x00\x0035#5#5#53535353\x15#\x15#\x15#\x153\x153\x153\x15'5!\x15x(((((((((((((\xA0\x01\x18((((((((((((((x((\x00\x00\x00\x01\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1B\x00\x0035#5#5#5#5#\x15#53\x15#\x153\x153\x153\x153\x153\x15\xF0((((((\xF0\xA0((((((((((\xA0\xF0(((((((\x00\x00\x00\x01\x00\x00\x00(\x01@\x00\xF0\x00#\x00\x00535353\x15#\x1535#53\x153\x153\x15#\x15#\x15#535#\x153\x15#5#5#((((\xA0((((((((\xA0((((\xA0(((((((((((((((((\x00\x00\x00\x01\x00(\x00\x00\x00\xF0\x01@\x00#\x00\x00\x13\x153\x153\x15#5#\x15353\x15#\x15#\x15#5#5#53\x1535#\x15#53535\xA0(((((((((((((((((\x01@((((\xA0((((((((\xA0((((\x00\x02\x00(\xFF\xD8\x00\xF0\x01\x18\x00\x13\x00\x1F\x00\x00735353\x153\x153\x15#\x15#\x15#5#5#3\x153535#5#\x15#\x15(((((((((((P(((((\xA0P((PPP((PPPPPPP\x00\x00\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xF0\x00\x0F\x00\x0053535353\x153\x153\x153\x15!(((((((\xFE\xE8x((((((P\x00\x00\x01\x00(\xFF\xD8\x00\xF0\x00\xF0\x00\x0F\x00\x0073\x153\x153\x153\x15#\x15#\x15#\x15#(P((((((P\xF0(((((((\x00\x00\x01\x00\x00\x00(\x01\x18\x00\xF0\x00\x0F\x00\x007#5#5#5!\x15#\x15#\x15#\x15#x(((\x01\x18((((P((PP(((\x00\x06\x00(\xFF\xD8\x00\xF0\x00\xF0\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x0073\x15#\x153\x15#73\x15#73\x15#'3\x15#33\x15#33\x15#(P((PP((((((((((((((\xF0(\xC8(P(P(\xA0(((\x00\x04\x00\x00\xFF\xD8\x00\xC8\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#535#53\x15#\x153\x15#\x15#\x033\x15#73\x15#33\x15#PPP(x(PP(P(((xxx(((((((((P\x01\x18Px(P\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x00735#5353\x153\x15#\x153\x15##3\x15#33\x15#'3\x15#73\x15#\x173\x15#53\x15#33\x15#P(((((((x((((xxP(((((\xA0(((((((xP((((P(P(\xC8(P(PP\xC8((\x00\b\x00\x00\xFF\xD8\x01\x18\x01\x18\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00\x007#53\x1535#5#53\x153\x15#'3\x15#'3\x15#\x173\x15#\x033\x15#73\x15#33\x15#33\x15#\xF0\xA0((((xP(\xC8(((((P\xA0\xA0((((xxx((((((P((((xP((\xC8\xA0((\x01\x18(P(((\x00\x00\x04\x00\x00\x00\x00\x01\x18\x01\x18\x00\x1D\x00!\x00%\x00)\x00\x007#5353\x1535#5#5#5353\x15#\x153\x153\x153\x15#\x15#73\x15#'3\x15#33\x15#((((P((((P(((((\xA0\xC8((P((P(((((P(((P((P((((((\xF0PP\x00\x00\x02\x00(\xFF\xD8\x00\xF0\x01\x18\x00\t\x00\r\x00\x007#5#5353\x11#\x133\x11#x(((P(P((x(P(\xFE\xC0\x01@\xFE\xC0\x00\x00\x00\x00\x02\x00(\xFF\xD8\x00\xF0\x01\x90\x00'\x00/\x00\x003#53\x1535#5#5#535#5353\x153\x15#5#\x153\x153\x153\x15#\x153\x15#\x15#75#5#\x153\x15P((P((((((x((P((((((xxP(PPPP((P(P((PPP((P(P(\xA0P(P(\x00\x00\x00\x00\x05\x00\x00\x00P\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1B\x00#\x00'\x00\x007#5#535353\x153\x153\x15#\x15#\x15#75#\x1555#\x1535#\x15#\x153\x1555#\x15P((((x((((xxx(\xC8(PPxx(\xA0((((\xA0((((((\xA0\xA0\xA0(P(\xA0((\x00\x06\x00\x00\x00P\x01\x18\x01\x90\x00\x13\x00\x17\x00\x1F\x00#\x00+\x00/\x00\x007#5#535353\x153\x153\x15#\x15#\x15#55#\x15\x175#5#\x15#\x1575#\x15\x175#\x15#\x153\x1555#\x15P((((x((((x(\xA0(((P(x(((xx(\xA0((((\xA0((P\xA0\xA0(((((x((P\xA0P((\xA0((\x00\x02\x00\x00\x01\x18\x01\x18\x01\x90\x00\v\x00\x13\x00\x00\x133\x15353\x15#5#\x15#'#53\x15#\x15#\xA0((((((x(x((\x01\x90((x((P((P\x00\x00\x04\x00\x00\x00x\x00\xA0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x133\x15##3\x15#33\x15#73\x15#(PP((((PPP((\x01\x18(P(xP\x00\x00\x01\x00x\xFF\xD8\x00\xA0\x01\x90\x00\x03\x00\x00\x133\x11#x((\x01\x90\xFEH\x00\x00\x00\x00\x02\x00x\xFF\xD8\x00\xA0\x01\x90\x00\x03\x00\x07\x00\x00\x133\x15#\x153\x15#x((((\x01\x90\xA0x\xA0\x00\x00\x00\x02\x00P\x00\xA0\x00\xC8\x01h\x00\x03\x00\x07\x00\x00\x133\x15#7\x15#5x((Px\x01h\xC8\xA0((\x00\x00\x03\x00P\x00\xA0\x00\xC8\x01h\x00\x03\x00\x07\x00\v\x00\x00\x133\x15#7\x15#5\x17\x15#5x((Pxxx\x01h\xC8\xA0((P((\x00\x00\x00\x05\x00\x00\x00\x00\x01@\x00\xC8\x00\x07\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x007#5353\x15#'3\x153\x15#\x15#73\x15#53\x15#75#\x15x((((x((((\xC8xxxxP(P(P\xC8\xC8((x((\xC8x(((\x00\x00\x00\x05\x00(\x01\x1A\x00\xF0\x01\x92\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x00\x133\x15##3\x15#73\x15#73\x15#\x173\x15#\xA0((x((((((((P((\x01j((P(P(((\x00\x00\x10\x00\x00\x00\x00\x00\xC8\x01@\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00#\x00'\x00+\x00/\x003\x007\x00;\x00?\x00\x00\x133\x15#\x073\x15#33\x15#'3\x15#33\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#'3\x15#33\x15#33\x15#\xA0((\xA0((((((((((((((((((((((((((P((((((((P((((((((\x01@(\xC8((\xA0((((\xA0(((\xC8(((\xC8(((\x00\x00\x02\xFE\xC0\x00\xF0\xFF8\x01\x18\x00\x03\x00\x07\x00\x00\x033\x15#'3\x15#\xF0((P((\x01\x18(((\x00\x00\x01\xFE\xC0\x00\xF0\xFE\xE8\x01\x18\x00\x03\x00\x00\x013\x15#\xFE\xC0((\x01\x18(\x00\x00\x00\x00\x02\xFE\xC0\x00\xC8\xFF\x10\x01\x18\x00\x03\x00\x07\x00\x00\x013\x15#33\x15#\xFE\xC0(((((\x01\x18((\x00\x00\x02\xFE\xC0\x00\xC8\xFF\x10\x01\x18\x00\x03\x00\x07\x00\x00\x013\x15##3\x15#\xFE\xE8(((((\x01\x18((\x00\x00\x04\xFE\xC0\x00\xC8\xFF`\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x033\x15##3\x15#73\x15#33\x15#\xC8((x((((((((\x01\x18((P((\x00\x00\x03\xFE\xC0\x00\xC8\xFF8\x01\x18\x00\x03\x00\x07\x00\v\x00\x00\x013\x15##3\x15#73\x15#\xFE\xE8(((((P((\x01\x18((((\x00\x00\x00\x03\xFE\xC0\x00\xC8\xFF8\x01\x18\x00\x03\x00\x07\x00\v\x00\x00\x033\x15#'3\x15#33\x15#\xF0((P(((((\x01\x18((((\x00\x00\x00\x00\x01\xFE\xC0\x00\xC8\xFF8\x01\x18\x00\x07\x00\x00\x013\x15353\x15#\xFE\xC0(((x\x01\x18((P\x00\x00\x00\x00\x04\xFE\xC0\x00\xA0\xFF8\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x013\x15##3\x15#33\x15#73\x15#\xFE\xE8(((((((((((\x01\x18(((P(\x00\x04\xFE\xC0\x00\xC8\xFF\xB0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00'3\x15#'3\x15#73\x15#73\x15#\xC8PPx(((PP\xA0((\xF0(((P(((\x00\x01\xFE\xC0\x00\xF0\xFF\x8C\x01\x18\x00\x03\x00\x00\x013\x15#\xFE\xC0\xCC\xCC\x01\x18(\x00\x00\x00\x00\x01\xFE\xC0\x00\xC8\xFF\x10\x01\x18\x00\x05\x00\x00\x013\x153\x15#\xFE\xC0((P\x01\x18((\x00\x00\x00\x00\x01\xFE\xC0\xFF\xD8\xFE\xE8\x00(\x00\x03\x00\x00%3\x15#\xFE\xC0(((P\x00\x01\xFE\xC0\xFF\xD8\xFF\x10\x00(\x00\x05\x00\x00!353\x15#\xFE\xC0((P(P\x00\x00\x01\xFE\xC0\xFF\xD8\xFF\x10\x00(\x00\x05\x00\x00%3\x153\x15#\xFE\xC0((P(((\x00\x01\xFE\xC0\x00x\xFF`\x00\xA0\x00\x03\x00\x00%3\x15#\xFE\xC0\xA0\xA0\xA0(\x00\x07\xFE\xC0\xFF\xD8\xFF\xD8\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00'3\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#P((\xF0(((((((((((((((((\xF0(\xC8(P(P(P(P(P(\x00\x00\x00\x00\x07\xFE\xC0\xFF\xD8\xFF\xD8\x00\xF0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x00'3\x15#\x073\x15#73\x15#73\x15#73\x15#73\x15#73\x15#P((\xF0(((((((((((((((((\xF0(\xC8(P(P(P(P(P(\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00P\x01\x18\x00\x03\x01\xF6\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00x\x01\x18\x00\x03\x01\xFA\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00x\x01\x18\x00\x03\x01\xF9\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\xFF\xD8\x00P\x00(\x00\x03\x02\x00\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00x\x01\x18\x00\x03\x01\xF8\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xF0\x00x\x01\x18\x00\x03\x01\xF3\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xF0\x00(\x01\x18\x00\x03\x01\xF4\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00P\x01\x18\x00\x03\x01\xF5\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00\xA0\x01\x18\x00\x03\x01\xF7\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xF0\x00\xCC\x01\x18\x00\x03\x01\xFD\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\xFF\xD8\x00P\x00(\x00\x03\x02\x01\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xA0\x00x\x01\x18\x00\x03\x01\xFB\x01@\x00\x00\x00\x00\xFF\xFF\x00\x00\x00\xC8\x00\xF0\x01\x18\x00\x03\x01\xFC\x01@\x00\x00\x00\x00\x00\x04\xFE\xC0\x01\x18\xFF`\x01\x90\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x033\x15##3\x15#33\x15#73\x15#\xF0((P(((((P((\x01\x90(((P(\x00\x00\x02\xFE\xC0\x01\x18\xFF8\x01\x90\x00\x03\x00\x07\x00\x00\x013\x15#75#\x15\xFE\xC0xxP(\x01\x90x(((\x00\x04\x00\x00\x00\x00\x00x\x00\xC8\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15##3\x15#'3\x15#33\x15#P(((((((((((xP(\xC8((\x00\x00\x00\b\x00\x00\x00\x00\x00\xC8\x01@\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x0073\x15##3\x15#'3\x15#33\x15#53\x15#33\x15#73\x15#33\x15#P((((((((((((((((((((((xP(\xC8((\xA0((x((\x00\x00\x01\x00\x00\x00x\x00\xF0\x00\xA0\x00\x03\x00\x0053\x15#\xF0\xF0\xA0(\x00\x00\x00\x04\x00\x00\x00 \x00\xA0\x00\xC0\x00\x03\x00\x07\x00\v\x00\x0F\x00\x0073\x15#33\x15#'3\x15#33\x15#P(((((x(((((p((\xA0((\x00\x00\x00\b\x00\x00\x00 \x00\xE0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x13\x00\x17\x00\x1B\x00\x1F\x00\x00\x133\x15#\x073\x15#33\x15#33\x15#33\x15#'3\x15#33\x15#73\x15#\x90((\x90(((((((((((8(((((P((\x01\x18(0((((\xD0((P(\x00\x00\x00\x00\x04\x00\x00\x00\xA0\x00\xA0\x01\x18\x00\x03\x00\x07\x00\v\x00\x0F\x00\x00\x133\x15##3\x15#33\x15#73\x15#P((P(((((P((\x01\x18(((P(\x00\x00\x02\x00\x00\x00\xA0\x00x\x01\x18\x00\x03\x00\x07\x00\x00\x113\x15#75#\x15xxP(\x01\x18x(((\x00\x00\x00\x01\x00\x00\x02\x1B\x00L\x00\x13\x00(\x00\n\x00\x01\x00\x02\x00\x1E\x00\x04\x00\x00\x00d\x03\xE8\x00\x02\x00\x01\x00\x00\x00Z\x00Z\x00\x86\x00\xB8\x00\xF0\x01&\x01X\x01\x94\x01\xD2\x01\xFA\x02\x16\x02D\x02x\x02\x98\x02\xBE\x02\xD4\x02\xF2\x03\x18\x038\x03V\x03h\x03\x96\x03\xAA\x03\xBE\x03\xDC\x04\x00\x04 \x04>\x04X\x04\x8A\x04\x98\x04\xC2\x04\xEC\x05\"\x05V\x05|\x05\xA8\x05\xE0\x06\x06\x06`\x06\x92\x06\xCA\x06\xE2\x06\xFC\x078\x07^\x07\x8A\x07\x9A\x07\xB4\x07\xD8\b\x02\b&\bJ\bx\b\xA4\b\xD8\t\x12\tF\tz\t\xB8\t\xE4\n\x1A\nV\n\x8E\n\xC4\n\xF0\v\x10\v8\v`\v\x8A\v\xB2\v\xE6\v\xF2\f\x1C\f4\fT\fv\f\x8E\f\xB0\f\xCC\f\xF2\r\x1A\r@\rf\r\x86\r\xA2\r\xB8\r\xCA\r\xE0\r\xFC\x0E\x14\x0E,\x0ED\x0Ej\x0Ex\x0E\x96\x0E\xAA\x0E\xCC\x0E\xE8\x0F\x0E\x0F6\x0F\\\x0F\x82\x0F\xC4\x0F\xD0\x0F\xFC\x10\x14\x10.\x10F\x10`\x10\x80\x10\xA6\x10\xC0\x10\xD4\x10\xF2\x11\x16\x114\x11R\x11r\x11\x9E\x11\xAA\x11\xB6\x11\xC2\x11\xCE\x12\x04\x12\x1E\x12*\x12T\x12`\x12l\x12\x8C\x12\xDC\x13\x04\x136\x13v\x13\xA2\x13\xD0\x14\x06\x14.\x14l\x14\x96\x14\xC0\x14\xF6\x15\x1E\x15j\x15\x92\x15\xD0\x15\xF0\x16\x1E\x16B\x16t\x16\x9E\x16\xD6\x16\xFE\x17.\x17d\x17\x92\x17\xC2\x17\xCA\x17\xE8\x18$\x18P\x18v\x18\x92\x18\xBA\x18\xDC\x19\x0E\x190\x19d\x19\x92\x19\xC2\x19\xF0\x1A4\x1A\\\x1A\x9A\x1A\xC6\x1B\x06\x1B$\x1BX\x1Bx\x1B\x94\x1B\xC4\x1B\xEC\x1C*\x1CB\x1Cn\x1C\x94\x1C\xD0\x1C\xF6\x1D2\x1DZ\x1D\x96\x1D\xC0\x1D\xFE\x1E\"\x1EZ\x1Ev\x1E\x92\x1E\xC4\x1E\xEA\x1F&\x1FJ\x1F\x82\x1F\xBC\x1F\xD8 \x16 F v \xA2 \xE4!\x1A!H!\x8A!\xC2!\xF0\"4\"n\"\x9A\"\xDC#\x12#B#\x86#\xBE#\xEA$\x1E$L$\x86$\xAC$\xDA%\x06%8%b%\x86%\xA6%\xCE%\xEC&$&V&\x80&\xB0&\xD2'\x06'B't'\x9C'\xD6'\xFC(\x1A(6(T(j(\x8A(\xA8(\xBC(\xD0(\xF8)\x1A)@)`)\x9C)\xB8)\xEA*\n*@*d*\x82*\xBC*\xCC*\xF2+\x14+J+l+\xA2+\xCC,\f,,,b,\x8A,\xC8,\xEE-*-R-\x8C-\xAE-\xD0.\b.$.T.j.\x96.\xB6.\xC8.\xFC/,/H/j/\xA0/\xCE/\xE80\x180>0^0\x920\xBC0\xE81*1`1\x8A1\xCA2\x002.2J2j2\x982\xB62\xD82\xF43\x063\x183,3@3d3\x823\xA23\xC03\xD63\xF24\f4>4`4\x924\xAE4\xDE4\xFC505L5\x805\x8E5\xAE5\xD65\xE45\xFA6\b6\x18626F6X6t6\xA46\xC86\xEA7\x06707Z7\x887\x9A7\xAE7\xC87\xEE7\xFE8\x188,8N8^8v8\x8A8\xA68\xB68\xD08\xF09\x069\x1A9*9D9d9z9\x8E9\x9A9\xAC9\xB89\xDC9\xF0:\x10:2:R:n:\x8C:\xA8:\xD0:\xEE;\x1C;r;\x9E;\xAA;\xBE;\xD0;\xE4;\xFC<\x16<0<t<\x80<\x92<\xB6<\xD8<\xEA<\xF6=\x0E=<=H=f=\x84=\x94=\xA4=\xC6=\xE8=\xF4>\x00>\f>>>p>\x8C>\xA8>\xC8>\xE8?\b?\x1C?0?8?D?V?|?\x96?\xC4?\xEC@\x1A@@@n@\x90@\xB6@\xEAA\x10A2AVAjAvA\xACA\xC2A\xD4A\xFCB BDB^BxB\x92B\xC4B\xE0B\xEECHCnC\x86C\xA0C\xC0C\xE2D\x00DXD\xC6D\xF0E\x14E>EbE\x8CE\xB0E\xDAE\xFEF*FVF\x80F\x98F\xB0F\xC8F\xF2G\x1AGVG\x94G\xCAG\xE4H\x1EHRH\x90H\xAEH\xCAH\xD8H\xEAH\xFCI\x14I>I`I\xBAI\xCCI\xDAI\xECI\xFEJ\x1AJ2JJJ\\JxJ\x94J\xA2J\xB2J\xBEJ\xCCJ\xDAJ\xE6K\x14KBKLKVK`KjKtK~K\x88K\x92K\x9CK\xA6K\xB0K\xBAK\xC4K\xE0K\xF2L\x0EL>LJLfL\x98L\xB4L\xC6\x00\x01\x00\x00\x00\x01\xCF\\\xEA!\xC8i_\x0F<\xF5\x00\x03\x01@\x00\x00\x00\x00\xD5\x98\x8C\x9D\x00\x00\x00\x00\xD5\x99o@\xFE\xC0\xFF\xD8\x02X\x01\x92\x00\x00\x00\x07\x00\x02\x00\x00\x00\x00\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00x\x01@\x00x\x01@\x00P\x01@\x00P\x01@\x00P\x01@\x00(\x01@\x00\x00\x01@\x00x\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x02\x80\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00x\x01@\x00P\x01@\x00x\x01@\x00x\x01@\x00(\x01@\x00P\x01@\x00P\x01@\x00\x00\x01@\x00x\x01@\x00P\x01@\x00\x00\x01@\x00\x00\x01@\x00P\x01@\x00x\x01@\x00x\x01@\x00\x00\x01@\x00\x00\x01@\x00P\x01@\x00P\x01@\x00P\x01@\x00P\x01@\x00P\x01@\x00P\x01@\x00\x00\x01@\x00(\x01@\x00P\x01@\x00\x00\x01@\x00\x00\x01@\x00P\x01@\x00P\x01@\x00x\x01@\x00(\x01@\x00(\x01@\x00x\x01@\x00x\x01@\x00x\x01@\x00x\x01@\x00P\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00(\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00(\x01@\x00(\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00(\x01@\x00(\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00x\x01@\x00x\x01@\x00P\x01@\x00P\x01@\x00\x00\x01@\x00(\x01@\x00\x00\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x01@\x00\x00\x00\x00\xFE\xC0\x00\x00\xFE\xC0\x01@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x01\x90\xFF\xD8\x00\x00\x02\x80\xFE\xC0\x00\x00\x02X\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x15\x00\x03\x01@\x01\x90\x00\x05\x00\b\x00\xD0\x00\xC0\x00\x00\x00\x18\x00\xD0\x00\xC0\x00\x00\x00p\x002\x00x\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00UKWN\x00@\x00 \xFF\xFD\x01\x90\xFF\xD8\x00\x00\x01\x90\x00(\x00\x02\x00\x01\x00\x00\x00\x00\x00\xC8\x01\x18\x00\x00\x00 \x00\x06\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x02\x14\x00\x01\x00\x00\x00\x00\x00\x1C\x00\x03\x00\x01\x00\x00\x02\x14\x00\x06\x01\xF8\x00\x00\x00\t\x00\xF7\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x8E\x01\x95\x01\x90\x01\xB8\x01\xD1\x01\xE5\x01\x96\x01\x9E\x01\x9F\x01\x87\x01\xBC\x01\x8C\x01\xA2\x01\x91\x01\x98\x01|\x01}\x01~\x01\x7F\x01\x80\x01\x81\x01\x82\x01\x83\x01\x84\x01\x85\x01\x8B\x01\x97\x01\xC3\x01\xC0\x01\xC2\x01\x93\x01\xE4\x00\x02\x00\n\x00\v\x00\r\x00\x0F\x00\x14\x00\x15\x00\x16\x00\x17\x00\x1C\x00\x1D\x00\x1E\x00\x1F\x00 \x00\"\x00*\x00,\x00-\x00.\x00/\x000\x005\x006\x00;\x00<\x00A\x01\x9C\x01\x88\x01\x9D\x01\xF1\x01\x99\x02\f\x00B\x00J\x00K\x00M\x00O\x00T\x00U\x00V\x00W\x00\\\x00]\x00^\x00_\x00`\x00b\x00j\x00l\x00m\x00n\x00p\x00q\x00v\x00w\x00|\x00}\x00\x82\x01\x9A\x01\xEC\x01\x9B\x01\xC8\x00\x00\x00\x05\x00\x07\x00\f\x00\x10\x00!\x00%\x003\x00C\x00F\x00D\x00E\x00H\x00G\x00L\x00P\x00S\x00Q\x00R\x00X\x00[\x00Y\x00Z\x00a\x00c\x00f\x00d\x00e\x00h\x00r\x00u\x00s\x00t\x01\xEE\x01\xEB\x01\xB6\x01\xBA\x01\xE7\x01\x8A\x01\xE6\x00o\x01\xE9\x01\xE8\x01\xEA\x02\x05\x02\n\x01\xC1\x00\t\x00'\x01\xCB\x01\xC6\x01\xC5\x01\xC4\x01\xBB\x00\x00\x01\xD0\x01\xCE\x01\xCD\x00\x00\x01\xCC\x00\x00\x00\x9E\x00\x00\x00I\x00g\x01\x94\x01\x8F\x01\xC9\x01\xCF\x00\x00\x01\xC7\x00\x00\x01\xA3\x01\xA4\x01\x8D\x00\x00\x00\x06\x00\b\x00(\x00)\x00i\x01\xA1\x01\xA0\x01\xA8\x01\xA9\x01\xAA\x01\xAB\x01\xBF\x01\xDD\x00\x80\x00?\x01\x86\x01\xB9\x01\xA5\x01\xA6\x00\x00\x00\x00\x01\xEF\x01\x89\x01\xAC\x01\xA7\x01\xD2\x00\x04\x00\x11\x00\x03\x00\x12\x00\x13\x00\x18\x00\x19\x00\x1A\x00\x1B\x00#\x00$\x00\x00\x00&\x001\x002\x004\x00\x00\x02\t\x02\x11\x02\x0E\x02\x06\x02\v\x02\x10\x02\b\x02\r\x02\x0F\x02\x07\x00\x04\x05\x8A\x00\x00\x00\x92\x00\x80\x00\x06\x00\x12\x00/\x00E\x00I\x00P\x00e\x00i\x00~\x00\xA9\x00\xAC\x00\xB1\x00\xB4\x00\xB8\x00\xBB\x00\xFF\x01S\x01x\x02\xC7\x02\xDD\x03\x04\x03\b\x03\f\x03\x12\x03(\x035\x038\x11\x12\x11u\x1E\x85\x1E\xF3 \x14 \x1A \x1E \" & 0 : D \xAC!\x16!\"!\x99\"\x02\"\x05\"\x0F\"\x12\"\x1A\"\x1E\"+\"H\"`\"e%\xB2%\xB7%\xBC%\xCA&@&B0\x020K0R0d0\x880\x8F0\x960\xAB0\xB10\xC40\xE80\xFFQ\x86\xAC\x01\xFF\xFD\xFF\xFF\x00\x00\x00 \x000\x00F\x00J\x00Q\x00f\x00j\x00\xA1\x00\xAB\x00\xAE\x00\xB4\x00\xB6\x00\xBA\x00\xBF\x01R\x01t\x02\xC6\x02\xD8\x03\x00\x03\x06\x03\n\x03\x12\x03&\x035\x037\x11\x00\x11a\x1E\x80\x1E\xF2 \x13 \x18 \x1C   & 0 9 D \xAC!\x16!\"!\x90\"\x02\"\x05\"\x0F\"\x11\"\x1A\"\x1E\"+\"H\"`\"d%\xB2%\xB6%\xBC%\xCA&@&B0\x020A0L0S0e0\x890\x900\x990\xAC0\xB20\xC50\xE9Q\x86\xAC\x00\xFF\xFD\xFF\xFF\x00\x00\x00\x00\xFF\xCE\x00\x00\x00\x00\xFF\xEE\x00\x00\x00\x00\x00\x00\x00\x00\x01Q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFE\xEC\xFE\xD9\xFE\xCD\xFE\xCC\xF0T\xF0\x06\x00\x00\x00\x00\x00\x00\xE1\x92\x00\x00\x00\x00\xE1g\xE1\xA2\xE1l\xE1B\xE1\r\xE0\xDA\xE0\xC8\x00\x00\xDF\xCE\xDF\xC5\xDF\xBE\x00\x00\xDF\xB5\xDF\xAD\xDF\xA1\xDF\x7F\xDFa\x00\x00\xDC,\x00\x00\xDC$\xDC\x13\xDB\xA2\xDB\xA1\xD1\x90\x00\x00\xD0`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xD0W\x00\x00\x00\x00\x00\x00\xAF\x19\x00\x00\x00\x00\x00\x01\x00\x92\x00\xB0\x00\x00\x00\xD8\x00\xE4\x00\x00\x01\n\x012\x01B\x01D\x00\x00\x01H\x01L\x01N\x01\xCE\x01\xD0\x01\xD8\x01\xDA\x01\xE4\x01\xEC\x01\xF0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xE8\x01\xF2\x01\xF4\x00\x00\x01\xF4\x01\xF8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xEE\x00\x00\x00\x00\x00\x00\x01\xFA\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xF2\x00\x00\x01\xF2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xEA\x00\x00\x01\xFC\x02\x1E\x02d\x02p\x02|\x00\x00\x02\x9E\x02\xC2\x03\b\x00\x00\x032\x034\x00\x00\x00\x01\x01\x8E\x01\x95\x01\x90\x01\xB8\x01\xD1\x01\xE5\x01\x96\x01\x9E\x01\x9F\x01\x87\x01\xBC\x01\x8C\x01\xA2\x01\x91\x01\x98\x01|\x01}\x01~\x01\x7F\x01\x80\x01\x81\x01\x82\x01\x83\x01\x84\x01\x85\x01\x8B\x01\x97\x01\xC3\x01\xC0\x01\xC2\x01\x93\x01\xE4\x00\x02\x00\n\x00\v\x00\r\x00\x0F\x00\x1C\x00\x1D\x00\x1E\x00\x1F\x00 \x00\"\x00*\x00,\x00-\x00.\x00/\x000\x005\x006\x00;\x00<\x00A\x01\x9C\x01\x88\x01\x9D\x01\xF1\x01\x99\x02\f\x00B\x00J\x00K\x00M\x00O\x00\\\x00]\x00^\x00_\x00`\x00b\x00j\x00l\x00m\x00n\x00p\x00q\x00v\x00w\x00|\x00}\x00\x82\x01\x9A\x01\xEC\x01\x9B\x01\xC8\x01\x8F\x01\xB6\x01\xBA\x01\xB7\x01\xBB\x01\xED\x01\xE7\x02\n\x01\xE8\x01\xA3\x01\xC9\x01\xE9\x02\x0E\x01\xEB\x01\xC6\x01\xE6\x01\x89\x02\b\x00\x9E\x01\xA4\x01\x94\x00\x06\x00\x03\x00\x04\x00\b\x00\x05\x00\x07\x00\t\x00\f\x00\x13\x00\x10\x00\x11\x00\x12\x00\x1B\x00\x18\x00\x19\x00\x1A\x00\x0E\x00!\x00&\x00#\x00$\x00(\x00%\x01\xBE\x00'\x004\x001\x002\x003\x00=\x00+\x00o\x00F\x00C\x00D\x00H\x00E\x00G\x00I\x00L\x00S\x00P\x00Q\x00R\x00[\x00X\x00Y\x00Z\x00N\x00a\x00f\x00c\x00d\x00h\x00e\x01\xBF\x00g\x00u\x00r\x00s\x00t\x00~\x00k\x00\x80\x00)\x00i\x008\x00y\x00>\x00\x7F\x00?\x02\t\x02\x07\x02\x06\x02\v\x02\x10\x02\x0F\x02\x11\x02\r\x01\xF5\x01\xF6\x01\xF8\x01\xFC\x01\xFD\x01\xFA\x01\xF4\x01\xF3\x01\xFB\x01\xF7\x01\xF9\x00:\x00{\x007\x00x\x009\x00z\x00@\x00\x81\x01\xA1\x01\xA0\x01\xA8\x01\xA9\x01\xA7\x01\xEE\x01\xEF\x01\x8A\x01\xD9\x01\xD3\x01\xD5\x01\xD7\x01\xDB\x01\xDC\x01\xDA\x01\xD4\x01\xD6\x01\xD8\x01\xCE\x01\xBD\x01\xC5\x01\xC4\x01\xDF\x01\xE1\x00\xA1\x00\xA0\x00\xA3\x00\xA2\x00\xA5\x00\xA4\x00\xA7\x00\xA6\x00\xA9\x00\xA8\x00\xAA\x00\xB4\x00\xB5\x00\xB6\x00\xB7\x00\xB8\x00\xB9\x00\xBA\x00\xBB\x00\xBC\x00\xBD\x00\xBE\x00\xBF\x00\xC0\x00\xC1\x00\xC2\x00\xC3\x00\xC5\x00\xC4\x00\xC6\x00\xC7\x00\xC8\x00\xC9\x00\xCA\x00\xCB\x00\xCC\x00\xCD\x00\xCE\x00\xCF\x00\xD0\x00\xD1\x00\xD2\x00\xD3\x00\xD4\x00\xD5\x00\xD6\x00\xD7\x00\xD8\x00\xD9\x00\xDA\x00\xDB\x00\xDC\x00\xDD\x00\xDE\x00\xDF\x00\xE0\x00\xE1\x00\xE2\x00\xE3\x00\xE5\x00\xE4\x00\xE7\x00\xE6\x00\xE9\x00\xE8\x00\xEA\x00\xEB\x00\xEC\x00\xED\x00\xEE\x00\xF0\x00\xEF\x00\xF1\x00\xF2\x00\xF3\x00\xF4\x00\xF5\x00\xAB\x00\xB3\x02\x12\x02\x13\x02\x19\x02\x1A\x02\x14\x02\x15\x00\xF6\x01\xAE\x00\xF8\x00\xF7\x00\xFA\x00\xF9\x00\xFC\x00\xFB\x00\xFE\x00\xFD\x01\x00\x00\xFF\x01\x01\x01\n\x01\v\x01\f\x01\r\x01\x0E\x01\x0F\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1A\x01\x1C\x01\x1B\x01\x1D\x01\x1E\x01\x1F\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x014\x015\x016\x017\x018\x019\x01:\x01<\x01;\x01>\x01=\x01@\x01?\x01A\x01B\x01C\x01D\x01E\x01G\x01F\x01I\x01K\x01M\x01O\x01P\x01\x02\x01\t\x01H\x01J\x01L\x01N\x01\xAD\x02\x16\x02\x17\x02\x18\x01Q\x01R\x01S\x01\xF2\x00\x00\xB0\x00,@\x0E\x05\x06\x07\r\x06\t\x14\x0E\x13\v\x12\b\x11\x10C\xB0\x01\x15F\xB0\tCFadBCEBCEBCEBCF\xB0\fCFad\xB0\x12CaiBCF\xB0\x10CFad\xB0\x14CaiBC\xB0@Py\xB1\x06@B\xB1\x05\x07C\xB0@Py\xB1\x07@B\xB3\x10\x05\x05\x12C\xB0\x13C`\xB0\x14C`\xB0\x06C`\xB0\x07C`\xB0 aBC\xB0\x11CR\xB0\x07C\xB0FRZy\xB3\x05\x05\x07\x07C\xB0@aBC\xB0@aB\xB1\x10\x05C\xB0\x11CR\xB0\x06C\xB0FRZy\xB3\x05\x05\x06\x06C\xB0@aBC\xB0@aB\xB1\t\x05C\xB0\x11CR\xB0\x12C\xB0FRZy\xB1\x12\x12C\xB0@aB\xB1\b\x05C\xB0\x11C\xB0@aPy\xB2\x06@\x06C`B\xB3\r\x0F\f\nC\xB0\x12C\xB2\x01\x01\tC\x10\x14\x13:C\xB0\x06C\xB0\nC\x10:C\xB0\x14Ce\xB0\x10C\x10:C\xB0\x07Ce\xB0\x0FC\x10:-\xB0\x01,\xB7\x01\x01\x00\x00\x00\x00\x00\x00CpE\xB0\x00\x15H\x13/C\xB0\x01\x153C\xB0\x01\x13/-\xB0\x02,\xB4\n\b\b\x04\x05CEBKBC\xB0\x10Py\xB1\x04\x04C\xB0\tC`B@\n\x11\b\x03\x05\x05\x01\x05\x05\x07\x04CiBC\xB0\x07CDC`BCEBC\xB0\nCRy\xB2\x06\x06\x07C\xB0\x03C\xB0\x04Caj`B\x1C\xB1\x06\x07CB\xB0\x05C\xB0\x06CD-\xB0\x03,@\x13\x11\x06\x06\x00\x02\x02\x01\x02\x02\x04\n\n\b\t\x00\x00\x05\x01\x02CEBCpEBCEBC\xB0\x01C\xB0\tCaj`BC\xB0\x04CDC`BCEBKBC\xB0\x07CRy\xB2\x06\x03\x04C\xB0\x00C\xB0\x01Caj`B\x1C\xB1\x03\x04CB\xB0\x02C\xB0\x03CD-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x01\x0E\x00\x01\x00\x00\x00\x00\x00\x00\x00O\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\f\x00O\x00\x01\x00\x00\x00\x00\x00\x02\x00\x07\x00[\x00\x01\x00\x00\x00\x00\x00\x03\x00\x17\x00b\x00\x01\x00\x00\x00\x00\x00\x04\x00\x14\x00y\x00\x01\x00\x00\x00\x00\x00\x05\x00\r\x00\x8D\x00\x01\x00\x00\x00\x00\x00\x06\x00\f\x00O\x00\x01\x00\x00\x00\x00\x00\b\x00\v\x00\x9A\x00\x01\x00\x00\x00\x00\x00\t\x00\f\x00\xA5\x00\x01\x00\x00\x00\x00\x00\v\x00\x17\x00\xB1\x00\x01\x00\x00\x00\x00\x00\f\x00\x17\x00\xB1\x00\x03\x00\x01\x04\t\x00\x00\x00\x9E\x00\xC8\x00\x03\x00\x01\x04\t\x00\x01\x00\x18\x01f\x00\x03\x00\x01\x04\t\x00\x02\x00\x0E\x01~\x00\x03\x00\x01\x04\t\x00\x03\x00.\x01\x8C\x00\x03\x00\x01\x04\t\x00\x04\x00(\x01\xBA\x00\x03\x00\x01\x04\t\x00\x05\x00\x1A\x01\xE2\x00\x03\x00\x01\x04\t\x00\x06\x00\x18\x01f\x00\x03\x00\x01\x04\t\x00\b\x00\x16\x01\xFC\x00\x03\x00\x01\x04\t\x00\t\x00\x18\x02\x12\x00\x03\x00\x01\x04\t\x00\v\x00.\x02*\x00\x03\x00\x01\x04\t\x00\f\x00.\x02*Copyright (c) 1996 Game Freak and Nintendo, Copyright (c) 2016-2017 Superpencilpokemon-fontRegular1.810;UKWN;pokemon-fontpokemon-font RegularVersion 1.810SuperpencilPascal Pixelhttps://superpencil.com\x00C\x00o\x00p\x00y\x00r\x00i\x00g\x00h\x00t\x00 \x00(\x00c\x00)\x00 \x001\x009\x009\x006\x00 \x00G\x00a\x00m\x00e\x00 \x00F\x00r\x00e\x00a\x00k\x00 \x00a\x00n\x00d\x00 \x00N\x00i\x00n\x00t\x00e\x00n\x00d\x00o\x00,\x00 \x00C\x00o\x00p\x00y\x00r\x00i\x00g\x00h\x00t\x00 \x00(\x00c\x00)\x00 \x002\x000\x001\x006\x00-\x002\x000\x001\x007\x00 \x00S\x00u\x00p\x00e\x00r\x00p\x00e\x00n\x00c\x00i\x00l\x00p\x00o\x00k\x00e\x00m\x00o\x00n\x00-\x00f\x00o\x00n\x00t\x00R\x00e\x00g\x00u\x00l\x00a\x00r\x001\x00.\x008\x001\x000\x00;\x00U\x00K\x00W\x00N\x00;\x00p\x00o\x00k\x00e\x00m\x00o\x00n\x00-\x00f\x00o\x00n\x00t\x00p\x00o\x00k\x00e\x00m\x00o\x00n\x00-\x00f\x00o\x00n\x00t\x00 \x00R\x00e\x00g\x00u\x00l\x00a\x00r\x00V\x00e\x00r\x00s\x00i\x00o\x00n\x00 \x001\x00.\x008\x001\x000\x00S\x00u\x00p\x00e\x00r\x00p\x00e\x00n\x00c\x00i\x00l\x00P\x00a\x00s\x00c\x00a\x00l\x00 \x00P\x00i\x00x\x00e\x00l\x00h\x00t\x00t\x00p\x00s\x00:\x00/\x00/\x00s\x00u\x00p\x00e\x00r\x00p\x00e\x00n\x00c\x00i\x00l\x00.\x00c\x00o\x00m\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xFF\xB5\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x1B\x00\x00\x00\x03\x00$\x00\xC9\x00\xC7\x00b\x00\xAD\x00c\x00\xAE\x00\x90\x00%\x00&\x00d\x00'\x00\xE9\x00(\x00e\x00\xC8\x00\xCA\x00\xCB\x00)\x00*\x00+\x00,\x00\xCC\x00\xCD\x00\xCE\x00\xCF\x00-\x00.\x00/\x000\x001\x00f\x002\x00\xD0\x00\xD1\x00g\x00\xD3\x00\x91\x00\xAF\x00\xB0\x003\x00\xED\x004\x005\x006\x007\x008\x00\xD4\x00\xD5\x00h\x00\xD6\x009\x00:\x01\x02\x01\x03\x01\x04\x01\x05\x00;\x00<\x00\xEB\x01\x06\x00\xBB\x01\x07\x00=\x00D\x00i\x00k\x00l\x00j\x00n\x00m\x00\xA0\x00E\x00F\x00o\x00G\x00\xEA\x00H\x00p\x00r\x00s\x00q\x00I\x00J\x00K\x00L\x00t\x00v\x00w\x00u\x00M\x00N\x00O\x00P\x00Q\x00x\x00R\x00y\x00{\x00|\x00z\x00\xA1\x00}\x00\xB1\x00S\x00\xEE\x00T\x00U\x00V\x00\x89\x00W\x00X\x00~\x00\x80\x00\x81\x00\x7F\x00Y\x00Z\x01\b\x01\t\x01\n\x01\v\x00[\x00\\\x00\xEC\x01\f\x00\xBA\x01\r\x00]\x01\x0E\x01\x0F\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01\x18\x01\x19\x01\x1A\x01\x1B\x01\x1C\x01\x1D\x01\x1E\x01\x1F\x01 \x01!\x01\"\x01#\x01$\x01%\x01&\x01'\x01(\x00\x9E\x01)\x01*\x01+\x01,\x01-\x01.\x01/\x010\x011\x012\x013\x014\x015\x016\x017\x018\x019\x01:\x01;\x01<\x01=\x01>\x01?\x01@\x01A\x01B\x01C\x01D\x01E\x01F\x01G\x01H\x01I\x01J\x01K\x01L\x01M\x01N\x01O\x01P\x01Q\x01R\x01S\x01T\x01U\x01V\x01W\x01X\x01Y\x01Z\x01[\x01\\\x01]\x01^\x01_\x01`\x01a\x01b\x01c\x01d\x01e\x01f\x01g\x01h\x01i\x01j\x01k\x01l\x01m\x01n\x01o\x01p\x01q\x01r\x01s\x01t\x01u\x01v\x01w\x01x\x01y\x01z\x01{\x01|\x01}\x01~\x01\x7F\x01\x80\x01\x81\x01\x82\x01\x83\x01\x84\x01\x85\x01\x86\x01\x87\x01\x88\x01\x89\x01\x8A\x01\x8B\x01\x8C\x01\x8D\x01\x8E\x01\x8F\x01\x90\x01\x91\x01\x92\x01\x93\x01\x94\x01\x95\x01\x96\x01\x97\x01\x98\x01\x99\x01\x9A\x01\x9B\x01\x9C\x01\x9D\x01\x9E\x01\x9F\x01\xA0\x01\xA1\x01\xA2\x01\xA3\x01\xA4\x01\xA5\x01\xA6\x01\xA7\x01\xA8\x01\xA9\x01\xAA\x01\xAB\x01\xAC\x01\xAD\x01\xAE\x01\xAF\x01\xB0\x01\xB1\x01\xB2\x01\xB3\x01\xB4\x01\xB5\x01\xB6\x01\xB7\x01\xB8\x01\xB9\x01\xBA\x01\xBB\x01\xBC\x01\xBD\x01\xBE\x01\xBF\x01\xC0\x01\xC1\x01\xC2\x01\xC3\x01\xC4\x01\xC5\x01\xC6\x01\xC7\x01\xC8\x01\xC9\x01\xCA\x01\xCB\x01\xCC\x01\xCD\x01\xCE\x01\xCF\x01\xD0\x01\xD1\x01\xD2\x01\xD3\x01\xD4\x01\xD5\x01\xD6\x01\xD7\x01\xD8\x01\xD9\x01\xDA\x01\xDB\x01\xDC\x01\xDD\x01\xDE\x01\xDF\x01\xE0\x01\xE1\x01\xE2\x01\xE3\x01\xE4\x01\xE5\x01\xE6\x01\xE7\x01\xE8\x01\xE9\x01\xEA\x01\xEB\x01\xEC\x01\xED\x01\xEE\x01\xEF\x01\xF0\x01\xF1\x01\xF2\x01\xF3\x01\xF4\x01\xF5\x01\xF6\x01\xF7\x01\xF8\x01\xF9\x01\xFA\x01\xFB\x01\xFC\x01\xFD\x01\xFE\x01\xFF\x02\x00\x02\x01\x02\x02\x02\x03\x02\x04\x02\x05\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1A\x00\x1B\x00\x1C\x00\xBC\x00\r\x00?\x00\xC3\x00\x87\x00\x1D\x00\x0F\x00\xAB\x00\x04\x00\xA3\x00\x06\x00\x11\x02\x06\x00\"\x00\xA2\x00\x05\x00\n\x00\x1E\x00\x12\x00B\x00^\x00`\x00>\x00@\x00\v\x00\f\x00\xB3\x00\xB2\x00\x10\x00\xA9\x00\xAA\x00\xBE\x00\xBF\x00\xC5\x00\xB4\x00\xB5\x00\xB6\x00\xB7\x00\xC4\x02\x07\x02\b\x02\t\x02\n\x02\v\x02\f\x02\r\x02\x0E\x02\x0F\x00\x84\x00\xBD\x00\x07\x02\x10\x00\x85\x00\x96\x00\x0E\x00\xEF\x00\xF0\x00\xB8\x00 \x00\x8F\x00!\x00\x1F\x00\x95\x00\x94\x00\x93\x00\xA7\x00a\x00\xA4\x02\x11\x00\x92\x00\x9C\x00\x9A\x00\x99\x00\xA5\x00\x98\x00\b\x00\xC6\x02\x12\x02\x13\x02\x14\x02\x15\x02\x16\x02\x17\x02\x18\x02\x19\x02\x1A\x02\x1B\x00\xB9\x02\x1C\x02\x1D\x02\x1E\x02\x1F\x02 \x02!\x00#\x00\t\x00\x88\x00\x86\x00\x8B\x00\x8A\x00\x8C\x00\x83\x00_\x00\xE8\x00\x82\x00\xC2\x02\"\x00A\x02#\x02$\x02%\x02&\x02'\x02(\x02)\x02*\x02+\x02,\x02-\x02.\x02/\x020\x021\x022\x023\x024\x025\x00\x8D\x00\xDB\x00\xE1\x00\xDE\x00\xD8\x00\x8E\x00\xDC\x00C\x00\xDF\x00\xDA\x00\xE0\x00\xDD\x00\xD9\x026\x027\x028\x029\x02:\x02;\x02<\x02=\x02>\x06Wacute\vWcircumflex\tWdieresis\x06Wgrave\vYcircumflex\x06Ygrave\x06wacute\vwcircumflex\twdieresis\x06wgrave\vycircumflex\x06ygrave\fP_K_M_N.liga\x10u_n_o_w_n_a.liga\x10u_n_o_w_n_b.liga\x10u_n_o_w_n_c.liga\x10u_n_o_w_n_d.liga\x10u_n_o_w_n_e.liga\x10u_n_o_w_n_f.liga\x10u_n_o_w_n_g.liga\x10u_n_o_w_n_h.liga\x10u_n_o_w_n_i.liga\x10u_n_o_w_n_j.liga\x10u_n_o_w_n_k.liga\x10u_n_o_w_n_l.liga\x10u_n_o_w_n_m.liga\x10u_n_o_w_n_n.liga\x10u_n_o_w_n_o.liga\x10u_n_o_w_n_p.liga\x10u_n_o_w_n_q.liga\x10u_n_o_w_n_r.liga\x10u_n_o_w_n_s.liga\x10u_n_o_w_n_t.liga\x10u_n_o_w_n_u.liga\x10u_n_o_w_n_v.liga\x10u_n_o_w_n_w.liga\x10u_n_o_w_n_x.liga\x10u_n_o_w_n_y.liga\x10u_n_o_w_n_z.liga\x07uni5186\x07uni3042\x07uni3041\x07uni3044\x07uni3043\x07uni3046\x07uni3045\x07uni3048\x07uni3047\x07uni304A\x07uni3049\x07uni304B\x07uni3095\x07uni304C\x07uni304D\x07uni304E\x07uni304F\x07uni3050\x07uni3051\x07uni3052\x07uni3096\x07uni3053\x07uni3054\x07uni3055\x07uni3056\x07uni3057\x07uni3058\x07uni3059\x07uni305A\x07uni305B\x07uni305C\x07uni305D\x07uni305E\x07uni305F\x07uni3060\x07uni3061\x07uni3062\x07uni3064\x07uni3063\x07uni3065\x07uni3066\x07uni3067\x07uni3068\x07uni3069\x07uni306A\x07uni306B\x07uni306C\x07uni306D\x07uni306E\x07uni306F\x07uni3070\x07uni3071\x07uni3072\x07uni3073\x07uni3074\x07uni3075\x07uni3076\x07uni3077\x07uni3078\x07uni3079\x07uni307A\x07uni307B\x07uni307C\x07uni307D\x07uni307E\x07uni307F\x07uni3080\x07uni3081\x07uni3082\x07uni3084\x07uni3083\x07uni3086\x07uni3085\x07uni3088\x07uni3087\x07uni3089\x07uni308A\x07uni308B\x07uni308C\x07uni308D\x07uni308F\x07uni308E\x07uni3090\x07uni3091\x07uni3092\x07uni3093\x07uni3094\x07uni309F\x07uni30A2\x07uni30A1\x07uni30A4\x07uni30A3\x07uni30A6\x07uni30A5\x07uni30A8\x07uni30A7\x07uni30AA\x07uni30A9\x07uni30AB\x07uni30F5\x07uni30AC\x07uni30AD\x07uni30AE\x07uni30AF\x07uni30B0\x07uni30B1\x07uni30F6\x07uni30B2\x07uni30B3\x07uni30B4\x07uni30B5\x07uni30B6\x07uni30B7\x07uni30B8\x07uni30B9\x07uni30BA\x07uni30BB\x07uni30BC\x07uni30BD\x07uni30BE\x07uni30BF\x07uni30C0\x07uni30C1\x07uni30C2\x07uni30C4\x07uni30C3\x07uni30C5\x07uni30C6\x07uni30C7\x07uni30C8\x07uni30C9\x07uni30CA\x07uni30CB\x07uni30CC\x07uni30CD\x07uni30CE\x07uni30CF\x07uni30D0\x07uni30D1\x07uni30D2\x07uni30D3\x07uni30D4\x07uni30D5\x07uni30D6\x07uni30D7\x07uni30D8\x07uni30D9\x07uni30DA\x07uni30DB\x07uni30DC\x07uni30DD\x07uni30DE\x07uni30DF\x07uni30E0\x07uni30E1\x07uni30E2\x07uni30E4\x07uni30E3\x07uni30E6\x07uni30E5\x07uni30E8\x07uni30E7\x07uni30E9\x07uni30EA\x07uni30EB\x07uni30EC\x07uni30ED\x07uni30EF\x07uni30EE\x07uni30F7\x07uni30F0\x07uni30F8\x07uni30F1\x07uni30F9\x07uni30F2\x07uni30FA\x07uni30F3\x07uni30F4\x07uni30FF\x07uniAC00\x07uniAC01\x07uni1100\x07uni1101\x07uni1102\x07uni1103\x07uni1104\x07uni1105\x07uni1106\x07uni1107\x07uni1108\x07uni1109\x07uni110A\x07uni110B\x07uni110C\x07uni110D\x07uni110E\x07uni110F\x07uni1110\x07uni1111\x07uni1112\x07uni1161\x07uni1162\x07uni1163\x07uni1164\x07uni1165\x07uni1166\x07uni1167\x07uni1168\x07uni1169\x07uni116A\x07uni116B\x07uni116C\x07uni116D\x07uni116E\x07uni116F\x07uni1170\x07uni1171\x07uni1172\x07uni1173\x07uni1174\x07uni1175\x07uni3002\x07uni30FB\x07uni30A0\x12quotesingle_d.liga\x12quotesingle_l.liga\x12quotesingle_m.liga\x12quotesingle_r.liga\x12quotesingle_s.liga\x12quotesingle_t.liga\x12quotesingle_v.liga\x04Euro\bemptyset\x07arrowup\x07uni2197\narrowright\x07uni2198\tarrowdown\x07uni2199\tarrowleft\x07uni2196\tarrowboth\tarrowupdn\x07triagup\x07uni25B6\x07triagdn\x07uni25B7\x06female\x04male\x07uni2116\x07uniFFFD\x07uni0308\x07uni0307\tgravecomb\tacutecomb\x07uni030B\x07uni0302\x07uni030C\x07uni0306\x07uni030A\ttildecomb\x07uni0304\x07uni0312\x07uni0326\x07uni0327\x07uni0328\x07uni0335\x07uni0337\x07uni0338\x07uni3099\x07uni309A\x07uni309D\x07uni309E\x07uni30FC\x07uni30FD\x07uni30FE\x07uni309B\x07uni309C\x00\x00\x00\x00\x01\x00\x03\x00\x07\x00\n\x00\x13\x00\x07\xFF\xFF\x00\x0F\x00\x01\x00\x00\x00\f\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x01\xF3\x02\x04\x00\x03\x02\x12\x02\x13\x00\x03\x00\x01\x00\x00\x00\n\x00 \x00:\x00\x01DFLT\x00\b\x00\x04\x00\x00\x00\x00\xFF\xFF\x00\x02\x00\x00\x00\x01\x00\x02liga\x00\x0Eordn\x00\x14\x00\x00\x00\x01\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x06\x00\x0E\x00\x04\x00\x00\x00\x01\x00\x10\x00\x04\x00\x00\x00\x01\x00\x1C\x00\x01\x02\n\x00\x01\x00\b\x00\x01\x00\x04\x01\xF0\x00\x03\x00b\x01\x91\x00\x01\x01\xFC\x00\x03\x00\f\x00\x1A\x01\xBC\x00\x01\x00\x04\x00\x83\x00\x04\x00\x1D\x00\x1F\x00 \x00\x1A\x006\x00D\x00R\x00`\x00n\x00|\x00\x8A\x00\x98\x00\xA6\x00\xB4\x00\xC2\x00\xD0\x00\xDE\x00\xEC\x00\xFA\x01\b\x01\x16\x01$\x012\x01@\x01N\x01\\\x01j\x01x\x01\x86\x01\x94\x00\x84\x00\x06\x00`\x00b\x00w\x00`\x00B\x00\x85\x00\x06\x00`\x00b\x00w\x00`\x00J\x00\x86\x00\x06\x00`\x00b\x00w\x00`\x00K\x00\x87\x00\x06\x00`\x00b\x00w\x00`\x00M\x00\x88\x00\x06\x00`\x00b\x00w\x00`\x00O\x00\x89\x00\x06\x00`\x00b\x00w\x00`\x00T\x00\x8A\x00\x06\x00`\x00b\x00w\x00`\x00U\x00\x8B\x00\x06\x00`\x00b\x00w\x00`\x00V\x00\x8C\x00\x06\x00`\x00b\x00w\x00`\x00W\x00\x8D\x00\x06\x00`\x00b\x00w\x00`\x00\\\x00\x8E\x00\x06\x00`\x00b\x00w\x00`\x00]\x00\x8F\x00\x06\x00`\x00b\x00w\x00`\x00^\x00\x90\x00\x06\x00`\x00b\x00w\x00`\x00_\x00\x91\x00\x06\x00`\x00b\x00w\x00`\x00`\x00\x92\x00\x06\x00`\x00b\x00w\x00`\x00b\x00\x93\x00\x06\x00`\x00b\x00w\x00`\x00j\x00\x94\x00\x06\x00`\x00b\x00w\x00`\x00l\x00\x95\x00\x06\x00`\x00b\x00w\x00`\x00m\x00\x96\x00\x06\x00`\x00b\x00w\x00`\x00n\x00\x97\x00\x06\x00`\x00b\x00w\x00`\x00p\x00\x98\x00\x06\x00`\x00b\x00w\x00`\x00q\x00\x99\x00\x06\x00`\x00b\x00w\x00`\x00v\x00\x9A\x00\x06\x00`\x00b\x00w\x00`\x00w\x00\x9B\x00\x06\x00`\x00b\x00w\x00`\x00|\x00\x9C\x00\x06\x00`\x00b\x00w\x00`\x00}\x00\x9D\x00\x06\x00`\x00b\x00w\x00`\x00\x82\x00\x07\x00\x10\x00\x16\x00\x1C\x00\"\x00(\x00.\x004\x01\xAF\x00\x02\x00M\x01\xB0\x00\x02\x00^\x01\xB1\x00\x02\x00_\x01\xB2\x00\x02\x00m\x01\xB3\x00\x02\x00n\x01\xB4\x00\x02\x00p\x01\xB5\x00\x02\x00v\x00\x01\x00\x01\x00 \x00\x01\x00\x03\x00*\x00q\x01\x96\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00")));
		isFirstJS = true;
		$r = init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg === $mainPkg) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ($pkg === $mainPkg) { */ case 19:
			$r = main(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 20:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=main.js.map
